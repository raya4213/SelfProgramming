
hexFile.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .BOOT         0000003a  00020000  00020000  0000b508  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .WRAPPERFUNCS 00000012  0000c000  0000c000  0000b4e6  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .USERCODE_TEXT 00000010  0000c200  0000c200  0000b4f8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .text         0000affa  00000000  00000000  000000f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .data         000003f8  00802000  0000affa  0000b0ee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000c05  008023f8  008023f8  0000b542  2**0
                  ALLOC
  6 .comment      0000005c  00000000  00000000  0000b542  2**0
                  CONTENTS, READONLY
  7 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000b5a0  2**2
                  CONTENTS, READONLY
  8 .debug_aranges 000008b8  00000000  00000000  0000b5e0  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0001be49  00000000  00000000  0000be98  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000040b9  00000000  00000000  00027ce1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00007fbb  00000000  00000000  0002bd9a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00002b78  00000000  00000000  00033d58  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00004c57  00000000  00000000  000368d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000e519  00000000  00000000  0003b527  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c68  00000000  00000000  00049a40  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .BOOT:

00020000 <SP_LoadFlashPage>:
		
.section .BOOT, "ax"
.global SP_LoadFlashPage

SP_LoadFlashPage:
	clr	ZL              ; Clear low byte of Z, to indicate start of page.
   20000:	ee 27       	eor	r30, r30
	clr	ZH              ; Clear high byte of Z, to indicate start of page.
   20002:	ff 27       	eor	r31, r31

	out	RAMPX, r1       ; Clear RAMPX pointer.
   20004:	19 be       	out	0x39, r1	; 57
	movw	XL, r24         ; Load X with data buffer address.
   20006:	dc 01       	movw	r26, r24

	ldi 	r20, NVM_CMD_LOAD_FLASH_BUFFER_gc  ; Prepare NVM command code in R20.
   20008:	43 e2       	ldi	r20, 0x23	; 35
	sts	NVM_CMD, r20                       ; Load it into NVM command register.
   2000a:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>

#if FLASH_PAGE_SIZE > 512
	ldi	r22, ((FLASH_PAGE_SIZE/2) >> 8)
#endif

	ldi	r21, ((FLASH_PAGE_SIZE/2)&0xFF)    ; Load R21 with page word count.
   2000e:	50 e0       	ldi	r21, 0x00	; 0
	ldi	r18, CCP_SPM_gc                    ; Prepare Protect SPM signature in R16.
   20010:	2d e9       	ldi	r18, 0x9D	; 157

00020012 <SP_LoadFlashPage_1>:

SP_LoadFlashPage_1:
	ld	r0, X+         ; Load low byte from buffer into R0.
   20012:	0d 90       	ld	r0, X+
	ld	r1, X+         ; Load high byte from buffer into R1.
   20014:	1d 90       	ld	r1, X+
	sts	CCP, r18       ; Enable SPM operation (this disables interrupts for 4 cycles).
   20016:	20 93 34 00 	sts	0x0034, r18	; 0x800034 <__TEXT_REGION_LENGTH__+0x700034>
	spm                    ; Self-program.
   2001a:	e8 95       	spm
	adiw	ZL, 2          ; Move Z to next Flash word.
   2001c:	32 96       	adiw	r30, 0x02	; 2

#if FLASH_PAGE_SIZE > 512
	subi	r21, 1         ; Decrement word count.
	sbci	r22, 0
#else
	dec	r21            ; Decrement word count.
   2001e:	5a 95       	dec	r21
#endif

	brne	SP_LoadFlashPage_1   ; Repeat until word cont is zero.
   20020:	c1 f7       	brne	.-16     	; 0x20012 <SP_LoadFlashPage_1>

	clr	r1                   ; Clear R1 for GCC _zero_reg_ to function properly.
   20022:	11 24       	eor	r1, r1
	ret
   20024:	08 95       	ret

00020026 <SP_CommonSPM>:
; ---

.section .BOOT, "ax"

SP_CommonSPM:
	movw	ZL, r24          ; Load R25:R24 into Z.
   20026:	fc 01       	movw	r30, r24
	sts	NVM_CMD, r20     ; Load prepared command into NVM Command register.
   20028:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	ldi	r18, CCP_SPM_gc  ; Prepare Protect SPM signature in R18
   2002c:	2d e9       	ldi	r18, 0x9D	; 157
	sts	CCP, r18         ; Enable SPM operation (this disables interrupts for 4 cycles).
   2002e:	20 93 34 00 	sts	0x0034, r18	; 0x800034 <__TEXT_REGION_LENGTH__+0x700034>
	spm                      ; Self-program.
   20032:	e8 95       	spm
	clr	r1               ; Clear R1 for GCC _zero_reg_ to function properly.
   20034:	11 24       	eor	r1, r1
	out	RAMPZ, r19       ; Restore RAMPZ register.
   20036:	3b bf       	out	0x3b, r19	; 59
	ret
   20038:	08 95       	ret

Disassembly of section .WRAPPERFUNCS:

0000c000 <loop_wrapper>:
 */ 

#include "wrapper_func.h"

void loop_wrapper(){
	loop();
    c000:	0e 94 06 61 	call	0xc20c	; 0xc20c <loop>
    c004:	08 95       	ret

0000c006 <handle_msg_wrapper>:
}

void handle_msg_wrapper(ir_msg* msg_struct){
	handle_msg(msg_struct);
    c006:	0e 94 07 61 	call	0xc20e	; 0xc20e <handle_msg>
    c00a:	08 95       	ret

0000c00c <init_wrapper>:
}

void init_wrapper(){
	init();
    c00c:	0e 94 00 61 	call	0xc200	; 0xc200 <init>
    c010:	08 95       	ret

Disassembly of section .USERCODE_TEXT:

0000c200 <init>:
 */


void init()
{
	set_rgb(255,0,0);
    c200:	40 e0       	ldi	r20, 0x00	; 0
    c202:	60 e0       	ldi	r22, 0x00	; 0
    c204:	8f ef       	ldi	r24, 0xFF	; 255
    c206:	0e 94 26 37 	call	0x6e4c	; 0x6e4c <set_rgb>
    c20a:	08 95       	ret

0000c20c <loop>:
/*
 * The code in this function will be called repeatedly, as fast as it can execute.
 */

void loop()
{
    c20c:	08 95       	ret

0000c20e <handle_msg>:
/*
 * After each pass through loop(), the robot checks for all messages it has 
 * received, and calls this function once for each message.
 */
 void handle_msg(ir_msg* msg_struct)
 {		
    c20e:	08 95       	ret

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 fd 07 	jmp	0xffa	; 0xffa <__ctors_end>
       4:	0c 94 1e 08 	jmp	0x103c	; 0x103c <__bad_interrupt>
       8:	0c 94 1e 08 	jmp	0x103c	; 0x103c <__bad_interrupt>
       c:	0c 94 1e 08 	jmp	0x103c	; 0x103c <__bad_interrupt>
      10:	0c 94 1e 08 	jmp	0x103c	; 0x103c <__bad_interrupt>
      14:	0c 94 1e 08 	jmp	0x103c	; 0x103c <__bad_interrupt>
      18:	0c 94 1e 08 	jmp	0x103c	; 0x103c <__bad_interrupt>
      1c:	0c 94 1e 08 	jmp	0x103c	; 0x103c <__bad_interrupt>
      20:	0c 94 1e 08 	jmp	0x103c	; 0x103c <__bad_interrupt>
      24:	0c 94 1e 08 	jmp	0x103c	; 0x103c <__bad_interrupt>
      28:	0c 94 1e 40 	jmp	0x803c	; 0x803c <__vector_10>
      2c:	0c 94 ab 3f 	jmp	0x7f56	; 0x7f56 <__vector_11>
      30:	0c 94 1e 08 	jmp	0x103c	; 0x103c <__bad_interrupt>
      34:	0c 94 1e 08 	jmp	0x103c	; 0x103c <__bad_interrupt>
      38:	0c 94 1e 08 	jmp	0x103c	; 0x103c <__bad_interrupt>
      3c:	0c 94 1e 08 	jmp	0x103c	; 0x103c <__bad_interrupt>
      40:	0c 94 1e 08 	jmp	0x103c	; 0x103c <__bad_interrupt>
      44:	0c 94 1e 08 	jmp	0x103c	; 0x103c <__bad_interrupt>
      48:	0c 94 1e 08 	jmp	0x103c	; 0x103c <__bad_interrupt>
      4c:	0c 94 1e 08 	jmp	0x103c	; 0x103c <__bad_interrupt>
      50:	0c 94 1e 08 	jmp	0x103c	; 0x103c <__bad_interrupt>
      54:	0c 94 1e 08 	jmp	0x103c	; 0x103c <__bad_interrupt>
      58:	0c 94 1e 08 	jmp	0x103c	; 0x103c <__bad_interrupt>
      5c:	0c 94 1e 08 	jmp	0x103c	; 0x103c <__bad_interrupt>
      60:	0c 94 1e 08 	jmp	0x103c	; 0x103c <__bad_interrupt>
      64:	0c 94 06 1a 	jmp	0x340c	; 0x340c <__vector_25>
      68:	0c 94 58 1a 	jmp	0x34b0	; 0x34b0 <__vector_26>
      6c:	0c 94 2f 1a 	jmp	0x345e	; 0x345e <__vector_27>
      70:	0c 94 81 1a 	jmp	0x3502	; 0x3502 <__vector_28>
      74:	0c 94 d3 1a 	jmp	0x35a6	; 0x35a6 <__vector_29>
      78:	0c 94 aa 1a 	jmp	0x3554	; 0x3554 <__vector_30>
      7c:	0c 94 1e 08 	jmp	0x103c	; 0x103c <__bad_interrupt>
      80:	0c 94 1e 08 	jmp	0x103c	; 0x103c <__bad_interrupt>
      84:	0c 94 1e 08 	jmp	0x103c	; 0x103c <__bad_interrupt>
      88:	0c 94 1e 08 	jmp	0x103c	; 0x103c <__bad_interrupt>
      8c:	0c 94 1e 08 	jmp	0x103c	; 0x103c <__bad_interrupt>
      90:	0c 94 1e 08 	jmp	0x103c	; 0x103c <__bad_interrupt>
      94:	0c 94 1e 08 	jmp	0x103c	; 0x103c <__bad_interrupt>
      98:	0c 94 1e 08 	jmp	0x103c	; 0x103c <__bad_interrupt>
      9c:	0c 94 1e 08 	jmp	0x103c	; 0x103c <__bad_interrupt>
      a0:	0c 94 1e 08 	jmp	0x103c	; 0x103c <__bad_interrupt>
      a4:	0c 94 1e 08 	jmp	0x103c	; 0x103c <__bad_interrupt>
      a8:	0c 94 1e 08 	jmp	0x103c	; 0x103c <__bad_interrupt>
      ac:	0c 94 1e 08 	jmp	0x103c	; 0x103c <__bad_interrupt>
      b0:	0c 94 1e 08 	jmp	0x103c	; 0x103c <__bad_interrupt>
      b4:	0c 94 1e 08 	jmp	0x103c	; 0x103c <__bad_interrupt>
      b8:	0c 94 2a 0f 	jmp	0x1e54	; 0x1e54 <__vector_46>
      bc:	0c 94 84 0d 	jmp	0x1b08	; 0x1b08 <__vector_47>
      c0:	0c 94 1e 08 	jmp	0x103c	; 0x103c <__bad_interrupt>
      c4:	0c 94 9c 0c 	jmp	0x1938	; 0x1938 <__vector_49>
      c8:	0c 94 da 0c 	jmp	0x19b4	; 0x19b4 <__vector_50>
      cc:	0c 94 1e 08 	jmp	0x103c	; 0x103c <__bad_interrupt>
      d0:	0c 94 1e 08 	jmp	0x103c	; 0x103c <__bad_interrupt>
      d4:	0c 94 1e 08 	jmp	0x103c	; 0x103c <__bad_interrupt>
      d8:	0c 94 1e 08 	jmp	0x103c	; 0x103c <__bad_interrupt>
      dc:	0c 94 1e 08 	jmp	0x103c	; 0x103c <__bad_interrupt>
      e0:	0c 94 1e 08 	jmp	0x103c	; 0x103c <__bad_interrupt>
      e4:	0c 94 1e 08 	jmp	0x103c	; 0x103c <__bad_interrupt>
      e8:	0c 94 77 1b 	jmp	0x36ee	; 0x36ee <__vector_58>
      ec:	0c 94 c9 1b 	jmp	0x3792	; 0x3792 <__vector_59>
      f0:	0c 94 a0 1b 	jmp	0x3740	; 0x3740 <__vector_60>
      f4:	0c 94 f2 1b 	jmp	0x37e4	; 0x37e4 <__vector_61>
      f8:	0c 94 44 1c 	jmp	0x3888	; 0x3888 <__vector_62>
      fc:	0c 94 1b 1c 	jmp	0x3836	; 0x3836 <__vector_63>
     100:	0c 94 1e 08 	jmp	0x103c	; 0x103c <__bad_interrupt>
     104:	0c 94 1e 08 	jmp	0x103c	; 0x103c <__bad_interrupt>
     108:	0c 94 1e 08 	jmp	0x103c	; 0x103c <__bad_interrupt>
     10c:	0c 94 1e 08 	jmp	0x103c	; 0x103c <__bad_interrupt>
     110:	0c 94 1e 08 	jmp	0x103c	; 0x103c <__bad_interrupt>
     114:	0c 94 1e 08 	jmp	0x103c	; 0x103c <__bad_interrupt>
     118:	0c 94 a8 26 	jmp	0x4d50	; 0x4d50 <__vector_70>
     11c:	0c 94 1e 08 	jmp	0x103c	; 0x103c <__bad_interrupt>
     120:	0c 94 1e 08 	jmp	0x103c	; 0x103c <__bad_interrupt>
     124:	0c 94 1e 08 	jmp	0x103c	; 0x103c <__bad_interrupt>
     128:	0c 94 1e 08 	jmp	0x103c	; 0x103c <__bad_interrupt>
     12c:	0c 94 1e 08 	jmp	0x103c	; 0x103c <__bad_interrupt>
     130:	0c 94 1e 08 	jmp	0x103c	; 0x103c <__bad_interrupt>
     134:	0c 94 1e 08 	jmp	0x103c	; 0x103c <__bad_interrupt>
     138:	0c 94 1e 08 	jmp	0x103c	; 0x103c <__bad_interrupt>
     13c:	0c 94 1e 08 	jmp	0x103c	; 0x103c <__bad_interrupt>
     140:	0c 94 1e 08 	jmp	0x103c	; 0x103c <__bad_interrupt>
     144:	0c 94 1e 08 	jmp	0x103c	; 0x103c <__bad_interrupt>
     148:	0c 94 1e 08 	jmp	0x103c	; 0x103c <__bad_interrupt>
     14c:	0c 94 1e 08 	jmp	0x103c	; 0x103c <__bad_interrupt>
     150:	0c 94 1e 08 	jmp	0x103c	; 0x103c <__bad_interrupt>
     154:	0c 94 1e 08 	jmp	0x103c	; 0x103c <__bad_interrupt>
     158:	0c 94 1e 08 	jmp	0x103c	; 0x103c <__bad_interrupt>
     15c:	0c 94 1e 08 	jmp	0x103c	; 0x103c <__bad_interrupt>
     160:	0c 94 fc 1a 	jmp	0x35f8	; 0x35f8 <__vector_88>
     164:	0c 94 4e 1b 	jmp	0x369c	; 0x369c <__vector_89>
     168:	0c 94 25 1b 	jmp	0x364a	; 0x364a <__vector_90>
     16c:	0c 94 fa 25 	jmp	0x4bf4	; 0x4bf4 <__vector_91>
     170:	0c 94 1e 08 	jmp	0x103c	; 0x103c <__bad_interrupt>
     174:	0c 94 1e 08 	jmp	0x103c	; 0x103c <__bad_interrupt>
     178:	0c 94 1e 08 	jmp	0x103c	; 0x103c <__bad_interrupt>
     17c:	0c 94 1e 08 	jmp	0x103c	; 0x103c <__bad_interrupt>
     180:	0c 94 1e 08 	jmp	0x103c	; 0x103c <__bad_interrupt>
     184:	0c 94 1e 08 	jmp	0x103c	; 0x103c <__bad_interrupt>
     188:	0c 94 1e 08 	jmp	0x103c	; 0x103c <__bad_interrupt>
     18c:	0c 94 1e 08 	jmp	0x103c	; 0x103c <__bad_interrupt>
     190:	0c 94 1e 08 	jmp	0x103c	; 0x103c <__bad_interrupt>
     194:	0c 94 1e 08 	jmp	0x103c	; 0x103c <__bad_interrupt>
     198:	0c 94 1e 08 	jmp	0x103c	; 0x103c <__bad_interrupt>
     19c:	0c 94 1e 08 	jmp	0x103c	; 0x103c <__bad_interrupt>
     1a0:	0c 94 1e 08 	jmp	0x103c	; 0x103c <__bad_interrupt>
     1a4:	0c 94 1e 08 	jmp	0x103c	; 0x103c <__bad_interrupt>
     1a8:	0c 94 1e 08 	jmp	0x103c	; 0x103c <__bad_interrupt>
     1ac:	0c 94 1e 08 	jmp	0x103c	; 0x103c <__bad_interrupt>
     1b0:	0c 94 1e 08 	jmp	0x103c	; 0x103c <__bad_interrupt>
     1b4:	0c 94 1e 08 	jmp	0x103c	; 0x103c <__bad_interrupt>
     1b8:	0c 94 1e 08 	jmp	0x103c	; 0x103c <__bad_interrupt>
     1bc:	0c 94 1e 08 	jmp	0x103c	; 0x103c <__bad_interrupt>
     1c0:	0c 94 1e 08 	jmp	0x103c	; 0x103c <__bad_interrupt>
     1c4:	0c 94 1e 08 	jmp	0x103c	; 0x103c <__bad_interrupt>
     1c8:	0c 94 1e 08 	jmp	0x103c	; 0x103c <__bad_interrupt>
     1cc:	0c 94 1e 08 	jmp	0x103c	; 0x103c <__bad_interrupt>
     1d0:	0c 94 1e 08 	jmp	0x103c	; 0x103c <__bad_interrupt>
     1d4:	0c 94 1e 08 	jmp	0x103c	; 0x103c <__bad_interrupt>
     1d8:	0c 94 1e 08 	jmp	0x103c	; 0x103c <__bad_interrupt>
     1dc:	0c 94 6d 1c 	jmp	0x38da	; 0x38da <__vector_119>
     1e0:	0c 94 bf 1c 	jmp	0x397e	; 0x397e <__vector_120>
     1e4:	0c 94 96 1c 	jmp	0x392c	; 0x392c <__vector_121>
     1e8:	0c 94 1e 08 	jmp	0x103c	; 0x103c <__bad_interrupt>
     1ec:	0c 94 1e 08 	jmp	0x103c	; 0x103c <__bad_interrupt>
     1f0:	0c 94 1e 08 	jmp	0x103c	; 0x103c <__bad_interrupt>
     1f4:	0c 94 1e 08 	jmp	0x103c	; 0x103c <__bad_interrupt>
     1f8:	0c 94 1e 08 	jmp	0x103c	; 0x103c <__bad_interrupt>
     1fc:	dc 14       	cp	r13, r12
     1fe:	e9 14       	cp	r14, r9
     200:	f7 14       	cp	r15, r7
     202:	04 15       	cp	r16, r4
     204:	12 15       	cp	r17, r2
     206:	4d 15       	cp	r20, r13
     208:	5a 15       	cp	r21, r10
     20a:	85 15       	cp	r24, r5
     20c:	bb 16       	cp	r11, r27
     20e:	c8 16       	cp	r12, r24
     210:	d5 16       	cp	r13, r21
     212:	e2 16       	cp	r14, r18
     214:	ef 16       	cp	r14, r31
     216:	0a 17       	cp	r16, r26
     218:	17 17       	cp	r17, r23
     21a:	24 17       	cp	r18, r20
     21c:	08 4a       	sbci	r16, 0xA8	; 168
     21e:	d7 3b       	cpi	r29, 0xB7	; 183
     220:	3b ce       	rjmp	.-906    	; 0xfffffe98 <__eeprom_end+0xff7efe98>
     222:	01 6e       	ori	r16, 0xE1	; 225
     224:	84 bc       	out	0x24, r8	; 36
     226:	bf fd       	.word	0xfdbf	; ????
     228:	c1 2f       	mov	r28, r17
     22a:	3d 6c       	ori	r19, 0xCD	; 205
     22c:	74 31       	cpi	r23, 0x14	; 20
     22e:	9a bd       	out	0x2a, r25	; 42
     230:	56 83       	std	Z+6, r21	; 0x06
     232:	3d da       	rcall	.-2950   	; 0xfffff6ae <__eeprom_end+0xff7ef6ae>
     234:	3d 00       	.word	0x003d	; ????
     236:	c7 7f       	andi	r28, 0xF7	; 247
     238:	11 be       	out	0x31, r1	; 49
     23a:	d9 e4       	ldi	r29, 0x49	; 73
     23c:	bb 4c       	sbci	r27, 0xCB	; 203
     23e:	3e 91       	ld	r19, -X
     240:	6b aa       	std	Y+51, r6	; 0x33
     242:	aa be       	out	0x3a, r10	; 58
     244:	00 00       	nop
     246:	00 80       	ld	r0, Z
     248:	3f 05       	cpc	r19, r15
     24a:	a8 4c       	sbci	r26, 0xC8	; 200
     24c:	cd b2       	in	r12, 0x1d	; 29
     24e:	d4 4e       	sbci	r29, 0xE4	; 228
     250:	b9 38       	cpi	r27, 0x89	; 137
     252:	36 a9       	ldd	r19, Z+54	; 0x36
     254:	02 0c       	add	r0, r2
     256:	50 b9       	out	0x00, r21	; 0
     258:	91 86       	std	Z+9, r9	; 0x09
     25a:	88 08       	sbc	r8, r8
     25c:	3c a6       	std	Y+44, r3	; 0x2c
     25e:	aa aa       	std	Y+50, r10	; 0x32
     260:	2a be       	out	0x3a, r2	; 58
     262:	00 00       	nop
     264:	00 80       	ld	r0, Z
     266:	3f 07       	cpc	r19, r31
     268:	63 42       	sbci	r22, 0x23	; 35
     26a:	36 b7       	in	r19, 0x36	; 54
     26c:	9b d8       	rcall	.-3786   	; 0xfffff3a4 <__eeprom_end+0xff7ef3a4>
     26e:	a7 1a       	sub	r10, r23
     270:	39 68       	ori	r19, 0x89	; 137
     272:	56 18       	sub	r5, r6
     274:	ae ba       	out	0x1e, r10	; 30
     276:	ab 55       	subi	r26, 0x5B	; 91
     278:	8c 1d       	adc	r24, r12
     27a:	3c b7       	in	r19, 0x3c	; 60
     27c:	cc 57       	subi	r28, 0x7C	; 124
     27e:	63 bd       	out	0x23, r22	; 35
     280:	6d ed       	ldi	r22, 0xDD	; 221
     282:	fd 75       	andi	r31, 0x5D	; 93
     284:	3e f6       	brtc	.-114    	; 0x214 <__SREG__+0x1d5>
     286:	17 72       	andi	r17, 0x27	; 39
     288:	31 bf       	out	0x31, r19	; 49
     28a:	00 00       	nop
     28c:	00 80       	ld	r0, Z
     28e:	3f 08       	sbc	r3, r15
     290:	00 00       	nop
     292:	00 be       	out	0x30, r0	; 48
     294:	92 24       	eor	r9, r2
     296:	49 12       	cpse	r4, r25
     298:	3e ab       	std	Y+54, r19	; 0x36
     29a:	aa aa       	std	Y+50, r10	; 0x32
     29c:	2a be       	out	0x3a, r2	; 58
     29e:	cd cc       	rjmp	.-1638   	; 0xfffffc3a <__eeprom_end+0xff7efc3a>
     2a0:	cc 4c       	sbci	r28, 0xCC	; 204
     2a2:	3e 00       	.word	0x003e	; ????
     2a4:	00 00       	nop
     2a6:	80 be       	out	0x30, r8	; 48
     2a8:	ab aa       	std	Y+51, r10	; 0x33
     2aa:	aa aa       	std	Y+50, r10	; 0x32
     2ac:	3e 00       	.word	0x003e	; ????
     2ae:	00 00       	nop
     2b0:	00 bf       	out	0x30, r16	; 48
     2b2:	00 00       	nop
     2b4:	00 80       	ld	r0, Z
     2b6:	3f 00       	.word	0x003f	; ????
     2b8:	00 00       	nop
     2ba:	00 00       	nop
     2bc:	08 41       	sbci	r16, 0x18	; 24
     2be:	78 d3       	rcall	.+1776   	; 0x9b0 <__c.4445+0x22>
     2c0:	bb 43       	sbci	r27, 0x3B	; 59
     2c2:	87 d1       	rcall	.+782    	; 0x5d2 <__c.5336+0x1d>
     2c4:	13 3d       	cpi	r17, 0xD3	; 211
     2c6:	19 0e       	add	r1, r25
     2c8:	3c c3       	rjmp	.+1656   	; 0x942 <__c.4467+0x1c>
     2ca:	bd 42       	sbci	r27, 0x2D	; 45
     2cc:	82 ad       	ldd	r24, Z+58	; 0x3a
     2ce:	2b 3e       	cpi	r18, 0xEB	; 235
     2d0:	68 ec       	ldi	r22, 0xC8	; 200
     2d2:	82 76       	andi	r24, 0x62	; 98
     2d4:	be d9       	rcall	.-3204   	; 0xfffff652 <__eeprom_end+0xff7ef652>
     2d6:	8f e1       	ldi	r24, 0x1F	; 31
     2d8:	a9 3e       	cpi	r26, 0xE9	; 233
     2da:	4c 80       	ldd	r4, Y+4	; 0x04
     2dc:	ef ff       	.word	0xffef	; ????
     2de:	be 01       	movw	r22, r28
     2e0:	c4 ff       	sbrs	r28, 4
     2e2:	7f 3f       	cpi	r23, 0xFF	; 255
     2e4:	00 00       	nop
     2e6:	00 00       	nop
	...

000002ea <__trampolines_start>:
     2ea:	0c 94 8a 0c 	jmp	0x1914	; 0x1914 <sendPing>
     2ee:	0c 94 04 15 	jmp	0x2a08	; 0x2a08 <ir_receive+0xe6>
     2f2:	0c 94 29 25 	jmp	0x4a52	; 0x4a52 <pc_comm_putchar>
     2f6:	0c 94 04 41 	jmp	0x8208	; 0x8208 <send_id>
     2fa:	0c 94 ef 16 	jmp	0x2dde	; 0x2dde <ir_transmit+0x9a>
     2fe:	0c 94 d5 16 	jmp	0x2daa	; 0x2daa <ir_transmit+0x66>
     302:	0c 94 f7 14 	jmp	0x29ee	; 0x29ee <ir_receive+0xcc>
     306:	0c 94 03 2e 	jmp	0x5c06	; 0x5c06 <broadcast_rnb_data>
     30a:	0c 94 c4 20 	jmp	0x4188	; 0x4188 <update_ir_baselines>
     30e:	0c 94 dc 14 	jmp	0x29b8	; 0x29b8 <ir_receive+0x96>
     312:	0c 94 c8 16 	jmp	0x2d90	; 0x2d90 <ir_transmit+0x4c>
     316:	0c 94 b1 21 	jmp	0x4362	; 0x4362 <stop_move>
     31a:	0c 94 85 15 	jmp	0x2b0a	; 0x2b0a <ir_receive+0x1e8>
     31e:	0c 94 c1 08 	jmp	0x1182	; 0x1182 <send_code_packet>
     322:	0c 94 24 17 	jmp	0x2e48	; 0x2e48 <ir_transmit+0x104>
     326:	0c 94 cb 35 	jmp	0x6b96	; 0x6b96 <use_rnb_data>
     32a:	0c 94 4d 15 	jmp	0x2a9a	; 0x2a9a <ir_receive+0x178>
     32e:	0c 94 05 0c 	jmp	0x180a	; 0x180a <processObsQueue>
     332:	0c 94 8c 20 	jmp	0x4118	; 0x4118 <initialize_ir_baselines>
     336:	0c 94 bb 48 	jmp	0x9176	; 0x9176 <user_handle_command>
     33a:	0c 94 5a 15 	jmp	0x2ab4	; 0x2ab4 <ir_receive+0x192>
     33e:	0c 94 99 1d 	jmp	0x3b32	; 0x3b32 <set_all_ir_powers>
     342:	0c 94 bb 16 	jmp	0x2d76	; 0x2d76 <ir_transmit+0x32>
     346:	0c 94 c9 40 	jmp	0x8192	; 0x8192 <handle_reprog_test>
     34a:	0c 94 e9 14 	jmp	0x29d2	; 0x29d2 <ir_receive+0xb0>
     34e:	0c 94 e2 16 	jmp	0x2dc4	; 0x2dc4 <ir_transmit+0x80>
     352:	0c 94 52 0f 	jmp	0x1ea4	; 0x1ea4 <handle_cmd_wrapper>
     356:	0c 94 17 17 	jmp	0x2e2e	; 0x2e2e <ir_transmit+0xea>
     35a:	0c 94 8e 26 	jmp	0x4d1c	; 0x4d1c <leg_float>
     35e:	0c 94 ac 0f 	jmp	0x1f58	; 0x1f58 <perform_ir_upkeep>
     362:	0c 94 12 15 	jmp	0x2a24	; 0x2a24 <ir_receive+0x102>
     366:	0c 94 0a 17 	jmp	0x2e14	; 0x2e14 <ir_transmit+0xd0>

0000036a <__trampolines_end>:
     36a:	6e 61       	ori	r22, 0x1E	; 30
     36c:	6e 00       	.word	0x006e	; ????

0000036e <__c.2240>:
     36e:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     37e:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     38e:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     39e:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     3ae:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     3be:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     3ce:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     3de:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     3ee:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     3fe:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     40e:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     41e:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     42e:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     43e:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     44e:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     45e:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

0000046c <__c.5324>:
     46c:	45 52 52 4f 52 3a 20 4d 65 73 73 61 67 65 20 6c     ERROR: Message l
     47c:	65 6e 67 74 68 20 30 20 66 6f 72 20 6d 73 67 5f     ength 0 for msg_
     48c:	6e 6f 64 65 2e 0d 0a 00                             node....

00000494 <__c.5320>:
     494:	45 72 72 6f 72 3a 20 4d 65 73 73 61 67 65 73 20     Error: Messages 
     4a4:	6f 76 65 72 66 6c 6f 77 2e 20 54 6f 6f 20 6d 61     overflow. Too ma
     4b4:	6e 79 20 6d 65 73 73 61 67 65 73 20 72 65 63 65     ny messages rece
     4c4:	69 76 65 64 2e 20 54 72 79 20 73 70 65 65 64 69     ived. Try speedi
     4d4:	6e 67 20 75 70 20 79 6f 75 72 20 6c 6f 6f 70 20     ng up your loop 
     4e4:	69 66 20 79 6f 75 20 73 65 65 20 74 68 69 73 20     if you see this 
     4f4:	61 20 6c 6f 74 2e 0d 0a 00                          a lot....

000004fd <__c.5292>:
     4fd:	45 72 72 6f 72 21 20 57 65 20 67 6f 74 20 61 68     Error! We got ah
     50d:	65 61 64 20 6f 66 20 74 68 65 20 74 61 73 6b 20     ead of the task 
     51d:	6c 69 73 74 20 61 6e 64 20 6e 6f 77 20 6e 6f 74     list and now not
     52d:	68 69 6e 67 20 77 69 6c 6c 20 65 78 65 63 75 74     hing will execut
     53d:	65 2e 0d 0a 00                                      e....

00000542 <__c.4442>:
     542:	09 54 57 49 20 77 61 73 6e 27 74 20 72 65 61 64     .TWI wasn't read
     552:	79 2e 0d 0a 00                                      y....

00000557 <__c.5368>:
     557:	0d 0a 43 68 61 6e 6e 65 6c 73 20 61 72 65 20 70     ..Channels are p
     567:	72 6f 62 61 62 6c 79 20 62 6c 6f 63 6b 65 64 20     robably blocked 
     577:	62 79 20 79 6f 75 72 20 70 72 65 76 69 6f 75 73     by your previous
     587:	20 6d 65 73 73 61 67 65 2e 0d 0a 00                  message....

00000593 <__c.5362>:
     593:	41 62 6f 72 74 69 6e 67 20 49 52 20 73 65 6e 64     Aborting IR send
     5a3:	20 77 68 69 6c 65 20 74 72 79 69 6e 67 3a 0d 0a      while trying:..
     5b3:	09 00                                               ..

000005b5 <__c.5336>:
     5b5:	45 52 52 4f 52 3a 20 4d 65 73 73 61 67 65 20 65     ERROR: Message e
     5c5:	78 63 65 65 64 73 20 49 52 5f 42 55 46 46 45 52     xceeds IR_BUFFER
     5d5:	5f 53 49 5a 45 2e 0d 0a 00                          _SIZE....

000005de <__c.5322>:
     5de:	45 52 52 4f 52 3a 20 4d 65 73 73 61 67 65 20 6c     ERROR: Message l
     5ee:	65 6e 67 74 68 20 30 20 69 6e 20 70 65 72 66 6f     ength 0 in perfo
     5fe:	72 6d 5f 69 72 5f 75 70 6b 65 65 70 2e 0d 0a 00     rm_ir_upkeep....

0000060e <__c.4459>:
     60e:	09 44 6f 6e 65 20 77 61 69 74 69 6e 67 20 66 6f     .Done waiting fo
     61e:	72 20 54 57 49 2e 20 49 52 20 70 6f 77 65 72 73     r TWI. IR powers
     62e:	20 73 65 74 20 73 75 63 63 65 73 73 66 75 6c 6c      set successfull
     63e:	79 2e 0d 0a 00                                      y....

00000643 <TWI_TIMEOUT_STR>:
     643:	09 54 57 49 20 74 69 6d 65 6f 75 74 20 77 68 65     .TWI timeout whe
     653:	6e 20 73 65 74 74 69 6e 67 20 49 52 20 50 6f 77     n setting IR Pow
     663:	65 72 73 20 00                                      ers .

00000668 <TWI_WAITING_STR>:
     668:	09 57 61 69 74 69 6e 67 20 66 6f 72 20 54 57 49     .Waiting for TWI
     678:	2e 2e 2e 0d 0a 00                                   ......

0000067e <__c.5374>:
     67e:	09 25 69 09 25 68 75 0d 0a 00                       .%i.%hu...

00000688 <__c.5371>:
     688:	44 69 73 74 20 28 6d 6d 29 20 70 65 72 20 6b 69     Dist (mm) per ki
     698:	6c 6f 73 74 65 70 0d 0a 00                          lostep...

000006a1 <__c.5358>:
     6a1:	09 64 69 72 3a 20 25 64 09 00                       .dir: %d..

000006ab <__c.5355>:
     6ab:	4d 6f 74 6f 72 20 56 61 6c 75 65 73 0d 0a 00        Motor Values...

000006ba <__c.5310>:
     6ba:	49 6e 20 6f 72 64 65 72 20 74 6f 20 67 6f 20 69     In order to go i
     6ca:	6e 20 64 69 72 65 63 74 69 6f 6e 20 25 68 75 20     n direction %hu 
     6da:	66 6f 72 20 25 75 20 6d 6d 2c 20 74 61 6b 69 6e     for %u mm, takin
     6ea:	67 20 25 75 20 73 74 65 70 73 2e 0d 0a 00           g %u steps....

000006f8 <__c.5296>:
     6f8:	45 52 52 4f 52 3a 20 63 75 72 72 65 6e 74 5f 6f     ERROR: current_o
     708:	66 66 73 65 74 3a 20 25 68 75 20 61 6e 64 20 74     ffset: %hu and t
     718:	6f 74 61 6c 5f 74 69 6d 65 3a 20 25 68 75 20 6e     otal_time: %hu n
     728:	6f 74 20 65 71 75 61 6c 21 0d 0a 00                 ot equal!...

00000734 <__c.5283>:
     734:	0d 0a 45 52 52 4f 52 3a 20 53 65 72 69 61 6c 20     ..ERROR: Serial 
     744:	69 6e 70 75 74 20 62 75 66 66 65 72 20 63 61 70     input buffer cap
     754:	61 63 69 74 79 20 6f 66 20 25 75 20 63 68 61 72     acity of %u char
     764:	61 63 74 65 72 73 20 65 78 63 65 65 64 65 64 2e     acters exceeded.
     774:	0d 0a 00                                            ...

00000777 <__c.5605>:
     777:	45 52 52 4f 52 3a 20 55 6e 65 78 70 65 63 74 65     ERROR: Unexpecte
     787:	64 20 70 6f 77 65 72 3a 20 25 68 68 75 0d 0a 00     d power: %hhu...

00000797 <__c.5531>:
     797:	21 21 21 09 47 6f 74 20 31 35 20 63 6f 6e 73 65     !!!.Got 15 conse
     7a7:	63 75 74 69 76 65 20 6e 6f 74 68 69 6e 67 73 20     cutive nothings 
     7b7:	66 72 6f 6d 20 73 65 6e 73 6f 72 20 25 68 75 2e     from sensor %hu.
     7c7:	09 21 21 21 0d 0a 00                                .!!!...

000007ce <__c.4534>:
     7ce:	45 52 52 4f 52 3a 20 50 6f 73 74 2d 72 65 74 75     ERROR: Post-retu
     7de:	72 6e 2c 20 74 61 73 6b 20 73 74 6f 72 61 67 65     rn, task storage
     7ee:	20 63 6f 6e 73 69 73 74 65 6e 63 79 20 63 68 65      consistency che
     7fe:	63 6b 20 66 61 69 6c 75 72 65 2e 0d 0a 00           ck failure....

0000080c <__c.4529>:
     80c:	50 6f 73 74 2d 63 61 6c 6c 2c 20 74 61 73 6b 20     Post-call, task 
     81c:	25 58 20 68 61 73 20 6e 65 78 74 5f 70 74 72 20     %X has next_ptr 
     82c:	70 6f 69 6e 74 69 6e 67 20 6f 75 74 73 69 64 65     pointing outside
     83c:	20 6f 66 20 61 72 72 61 79 2e 0d 0a 00               of array....

00000849 <__c.4515>:
     849:	45 52 52 4f 52 3a 20 50 72 65 2d 63 61 6c 6c 2c     ERROR: Pre-call,
     859:	20 74 61 73 6b 20 73 74 6f 72 61 67 65 20 63 6f      task storage co
     869:	6e 73 69 73 74 65 6e 63 79 20 63 68 65 63 6b 20     nsistency check 
     879:	66 61 69 6c 75 72 65 2e 0d 0a 00                    failure....

00000884 <__c.4510>:
     884:	50 72 65 2d 63 61 6c 6c 2c 20 74 61 73 6b 20 68     Pre-call, task h
     894:	61 73 20 6e 65 78 74 5f 70 74 72 20 70 6f 69 6e     as next_ptr poin
     8a4:	74 69 6e 67 20 6f 75 74 73 69 64 65 20 6f 66 20     ting outside of 
     8b4:	61 72 72 61 79 2e 0d 0a 00                          array....

000008bd <__c.4494>:
     8bd:	09 54 61 73 6b 20 25 70 20 28 25 70 29 20 73 63     .Task %p (%p) sc
     8cd:	68 65 64 75 6c 65 64 20 61 74 20 25 6c 75 20 77     heduled at %lu w
     8dd:	69 74 68 20 70 65 72 69 6f 64 20 25 6c 75 2c 20     ith period %lu, 
     8ed:	25 6c 75 20 63 75 72 72 65 6e 74 0d 0a 00           %lu current...

000008fb <__c.4492>:
     8fb:	54 61 73 6b 20 51 75 65 75 65 20 28 25 68 68 75     Task Queue (%hhu
     90b:	20 74 61 73 6b 73 2c 20 25 68 68 75 20 65 78 65      tasks, %hhu exe
     91b:	63 75 74 69 6e 67 29 3a 0d 0a 00                    cuting):...

00000926 <__c.4467>:
     926:	4e 65 77 20 54 61 73 6b 20 25 70 20 28 25 70 29     New Task %p (%p)
     936:	20 73 63 68 65 64 75 6c 65 64 20 61 74 20 25 6c      scheduled at %l
     946:	75 20 77 69 74 68 20 70 65 72 69 6f 64 20 25 6c     u with period %l
     956:	75 2c 20 25 6c 75 20 63 75 72 72 65 6e 74 0d 0a     u, %lu current..
	...

00000967 <__c.4465>:
     967:	45 52 52 4f 52 21 20 54 61 73 6b 20 6c 69 73 74     ERROR! Task list
     977:	20 68 61 73 20 73 65 6c 66 2d 72 65 66 65 72 65      has self-refere
     987:	6e 63 65 2e 0d 0a 00                                nce....

0000098e <__c.4445>:
     98e:	45 52 52 4f 52 3a 20 73 63 68 65 64 75 6c 65 72     ERROR: scheduler
     99e:	5f 6d 61 6c 6c 6f 63 20 72 65 74 75 72 6e 65 64     _malloc returned
     9ae:	20 61 20 6e 65 77 5f 74 61 73 6b 20 70 6f 69 6e      a new_task poin
     9be:	74 65 72 20 6f 75 74 73 69 64 65 20 6f 66 20 74     ter outside of t
     9ce:	68 65 20 74 61 73 6b 20 73 74 6f 72 61 67 65 20     he task storage 
     9de:	61 72 72 61 79 2e 0d 0a 00                          array....

000009e7 <__c.4443>:
     9e7:	45 52 52 4f 52 3a 20 4e 6f 20 65 6d 70 74 79 20     ERROR: No empty 
     9f7:	73 70 6f 74 20 66 6f 75 6e 64 20 69 6e 20 73 63     spot found in sc
     a07:	68 65 64 75 6c 65 72 5f 6d 61 6c 6c 6f 63 2c 20     heduler_malloc, 
     a17:	62 75 74 20 6e 75 6d 5f 74 61 73 6b 73 20 77 61     but num_tasks wa
     a27:	73 6e 27 74 20 67 72 65 61 74 65 72 20 74 68 61     sn't greater tha
     a37:	6e 20 6f 72 20 65 71 75 61 6c 20 6d 61 78 5f 74     n or equal max_t
     a47:	61 73 6b 73 2e 0d 0a 00                             asks....

00000a4f <__c.4409>:
     a4f:	09 41 74 74 65 6d 70 74 69 6e 67 20 74 6f 20 72     .Attempting to r
     a5f:	65 73 74 6f 72 65 20 74 61 73 6b 5f 6c 69 73 74     estore task_list
     a6f:	20 28 62 79 20 64 72 6f 70 70 69 6e 67 20 61 6c      (by dropping al
     a7f:	6c 20 6e 6f 6e 2d 70 65 72 69 6f 64 69 63 20 74     l non-periodic t
     a8f:	61 73 6b 73 2e 0d 0a 09 49 66 20 79 6f 75 20 6f     asks....If you o
     a9f:	6e 6c 79 20 73 65 65 20 74 68 69 73 20 6d 65 73     nly see this mes
     aaf:	73 61 67 65 20 72 61 72 65 6c 79 2c 20 64 6f 6e     sage rarely, don
     abf:	27 74 20 77 6f 72 72 79 20 74 6f 6f 20 6d 75 63     't worry too muc
     acf:	68 2e 0d 0a 00                                      h....

00000ad4 <__c.4367>:
     ad4:	45 52 52 4f 52 3a 20 49 6e 20 73 63 68 65 64 75     ERROR: In schedu
     ae4:	6c 65 72 5f 66 72 65 65 2c 20 74 67 74 20 28 25     ler_free, tgt (%
     af4:	58 29 20 77 61 73 20 6f 75 74 73 69 64 65 20 76     X) was outside v
     b04:	61 6c 69 64 20 54 61 73 6b 2a 20 72 61 6e 67 65     alid Task* range
     b14:	2e 0d 0a 00                                         ....

00000b18 <__c.5498>:
     b18:	4d 65 73 73 61 67 65 20 6c 65 6e 67 74 68 20 77     Message length w
     b28:	61 73 20 25 64 20 63 68 61 72 73 2c 20 77 68 69     as %d chars, whi
     b38:	63 68 20 65 78 63 65 65 64 73 20 74 68 65 20 6d     ch exceeds the m
     b48:	61 78 69 6d 75 6d 20 6f 66 20 25 64 00              aximum of %d.

00000b55 <__c.5493>:
     b55:	63 6f 6d 6d 61 6e 64 20 73 74 72 69 6e 67 3a 20     command string: 
     b65:	25 73 2c 20 6c 65 6e 67 74 68 3a 20 25 64 0d 0a     %s, length: %d..
	...

00000b76 <__c.5484>:
     b76:	42 72 6f 61 64 63 61 73 74 69 6e 67 20 63 6f 6d     Broadcasting com
     b86:	6d 61 6e 64 3a 20 22 25 73 22 2c 20 6f 66 20 6c     mand: "%s", of l
     b96:	65 6e 67 74 68 20 25 69 2e 0d 0a 00                 ength %i....

00000ba2 <__c.5476>:
     ba2:	4d 79 20 49 44 20 69 73 3a 20 25 30 34 58 0d 0a     My ID is: %04X..
	...

00000bb3 <__c.5470>:
     bb3:	09 20 22 73 65 74 5f 6c 65 64 20 62 67 72 20 35     . "set_led bgr 5
     bc3:	20 33 30 20 30 22 20 67 69 76 65 73 20 61 20 62      30 0" gives a b
     bd3:	6c 75 69 73 68 20 67 72 65 65 6e 2e 0d 0a 00        luish green....

00000be2 <__c.5468>:
     be2:	09 20 6f 72 64 65 72 2c 20 69 6e 64 69 63 61 74     . order, indicat
     bf2:	69 6e 67 20 74 68 65 20 62 72 69 67 68 74 6e 65     ing the brightne
     c02:	73 73 20 6f 66 20 74 68 65 20 61 73 73 6f 63 69     ss of the associ
     c12:	61 74 65 64 20 4c 45 44 73 2e 20 45 78 61 6d 70     ated LEDs. Examp
     c22:	6c 65 3a 20 0d 0a 00                                le: ...

00000c29 <__c.5466>:
     c29:	09 20 4c 65 74 74 65 72 73 20 72 2c 67 2c 62 2c     . Letters r,g,b,
     c39:	20 69 6e 20 61 6e 79 20 6f 72 64 65 72 2c 20 66      in any order, f
     c49:	6f 6c 6c 6f 77 65 64 20 62 79 20 76 61 6c 75 65     ollowed by value
     c59:	73 20 30 2d 32 35 35 2c 20 69 6e 20 73 61 6d 65     s 0-255, in same
     c69:	20 0d 0a 00                                          ...

00000c6d <__c.5464>:
     c6d:	09 47 6f 74 20 63 6f 6d 6d 61 6e 64 20 73 65 74     .Got command set
     c7d:	5f 6c 65 64 2c 20 62 75 74 20 61 72 67 75 6d 65     _led, but argume
     c8d:	6e 74 73 20 28 25 73 29 20 77 65 72 65 20 69 6e     nts (%s) were in
     c9d:	76 61 6c 69 64 2e 20 46 6f 72 6d 61 74 20 73 68     valid. Format sh
     cad:	6f 75 6c 64 20 62 65 3a 0d 0a 00                    ould be:...

00000cb8 <__c.5438>:
     cb8:	47 6f 74 20 61 64 6a 75 73 74 5f 6d 6f 74 6f 72     Got adjust_motor
     cc8:	73 20 63 6f 6d 6d 61 6e 64 2e 20 64 69 72 65 63     s command. direc
     cd8:	74 69 6f 6e 3a 20 25 68 68 75 2c 20 4e 65 77 20     tion: %hhu, New 
     ce8:	53 65 74 74 69 6e 67 73 3a 20 28 25 64 2c 20 25     Settings: (%d, %
     cf8:	64 2c 20 25 64 29 0d 0a 00                          d, %d)...

00000d01 <__c.5436>:
     d01:	73 74 72 74 6f 6b 20 72 65 74 75 72 6e 65 64 20     strtok returned 
     d11:	4e 55 4c 4c 20 6f 6e 20 74 68 69 72 64 20 76 61     NULL on third va
     d21:	6c 2e 0d 0a 00                                      l....

00000d26 <__c.5434>:
     d26:	73 74 72 74 6f 6b 20 72 65 74 75 72 6e 65 64 20     strtok returned 
     d36:	4e 55 4c 4c 20 6f 6e 20 73 65 63 6f 6e 64 20 76     NULL on second v
     d46:	61 6c 2e 0d 0a 00                                   al....

00000d4c <__c.5432>:
     d4c:	73 74 72 74 6f 6b 20 72 65 74 75 72 6e 65 64 20     strtok returned 
     d5c:	4e 55 4c 4c 20 6f 6e 20 66 69 72 73 74 20 76 61     NULL on first va
     d6c:	6c 2e 0d 0a 00                                      l....

00000d71 <__c.5430>:
     d71:	42 61 64 20 64 69 72 65 63 74 69 6f 6e 2e 20 47     Bad direction. G
     d81:	6f 74 3a 20 25 68 68 75 2e 0d 0a 00                 ot: %hhu....

00000d8d <__c.5427>:
     d8d:	73 74 72 74 6f 6b 20 72 65 74 75 72 6e 65 64 20     strtok returned 
     d9d:	4e 55 4c 4c 20 6f 6e 20 64 69 72 65 63 74 69 6f     NULL on directio
     dad:	6e 2e 0d 0a 00                                      n....

00000db2 <__c.5417>:
     db2:	47 6f 74 20 73 65 74 5f 6d 6f 74 6f 72 73 20 63     Got set_motors c
     dc2:	6f 6d 6d 61 6e 64 2e 20 64 69 72 65 63 74 69 6f     ommand. directio
     dd2:	6e 3a 20 25 68 68 75 2c 20 76 61 6c 73 3a 20 28     n: %hhu, vals: (
     de2:	25 64 2c 20 25 64 2c 20 25 64 29 0d 0a 00           %d, %d, %d)...

00000df0 <__c.5415>:
     df0:	73 74 72 74 6f 6b 20 72 65 74 75 72 6e 65 64 20     strtok returned 
     e00:	4e 55 4c 4c 20 6f 6e 20 74 68 69 72 64 20 76 61     NULL on third va
     e10:	6c 2e 0d 0a 00                                      l....

00000e15 <__c.5413>:
     e15:	73 74 72 74 6f 6b 20 72 65 74 75 72 6e 65 64 20     strtok returned 
     e25:	4e 55 4c 4c 20 6f 6e 20 73 65 63 6f 6e 64 20 76     NULL on second v
     e35:	61 6c 2e 0d 0a 00                                   al....

00000e3b <__c.5411>:
     e3b:	73 74 72 74 6f 6b 20 72 65 74 75 72 6e 65 64 20     strtok returned 
     e4b:	4e 55 4c 4c 20 6f 6e 20 66 69 72 73 74 20 76 61     NULL on first va
     e5b:	6c 2e 0d 0a 00                                      l....

00000e60 <__c.5409>:
     e60:	42 61 64 20 64 69 72 65 63 74 69 6f 6e 2e 20 47     Bad direction. G
     e70:	6f 74 3a 20 25 68 68 75 2e 0d 0a 00                 ot: %hhu....

00000e7c <__c.5406>:
     e7c:	73 74 72 74 6f 6b 20 72 65 74 75 72 6e 65 64 20     strtok returned 
     e8c:	4e 55 4c 4c 20 6f 6e 20 64 69 72 65 63 74 69 6f     NULL on directio
     e9c:	6e 2e 0d 0a 00                                      n....

00000ea1 <__c.5388>:
     ea1:	72 3a 20 25 68 75 2c 20 67 3a 20 25 68 75 2c 20     r: %hu, g: %hu, 
     eb1:	62 3a 20 25 68 75 0d 0a 00                          b: %hu...

00000eba <__c.5374>:
     eba:	77 61 6c 6b 20 64 69 72 65 63 74 69 6f 6e 20 25     walk direction %
     eca:	75 2c 20 6e 75 6d 5f 73 74 65 70 73 20 25 75 0d     u, num_steps %u.
     eda:	0a 00                                               ..

00000edc <__c.5343>:
     edc:	72 65 70 72 6f 67 5f 65 6e 64 00                    reprog_end.

00000ee7 <__c.5341>:
     ee7:	72 65 70 72 6f 67 5f 62 65 67 69 6e 00              reprog_begin.

00000ef4 <__c.5334>:
     ef4:	72 5f 65 6e 64 00                                   r_end.

00000efa <__c.5332>:
     efa:	72 5f 73 74 61 72 74 00                             r_start.

00000f02 <__c.5330>:
     f02:	70 72 69 6e 74 5f 6d 6f 74 6f 72 5f 73 65 74 74     print_motor_sett
     f12:	69 6e 67 73 00                                      ings.

00000f17 <__c.5328>:
     f17:	72 65 70 72 6f 67 5f 74 65 73 74 00                 reprog_test.

00000f23 <__c.5326>:
     f23:	77 72 69 74 65 5f 6d 6f 74 6f 72 5f 73 65 74 74     write_motor_sett
     f33:	69 6e 67 73 00                                      ings.

00000f38 <__c.5324>:
     f38:	72 65 73 65 74 00                                   reset.

00000f3e <__c.5322>:
     f3e:	74 61 73 6b 73 00                                   tasks.

00000f44 <__c.5320>:
     f44:	74 67 74 00                                         tgt.

00000f48 <__c.5318>:
     f48:	6d 73 67 5f 74 73 74 00                             msg_tst.

00000f50 <__c.5316>:
     f50:	6d 73 67 00                                         msg.

00000f54 <__c.5314>:
     f54:	74 67 74 5f 63 6d 64 00                             tgt_cmd.

00000f5c <__c.5312>:
     f5c:	63 6d 64 00                                         cmd.

00000f60 <__c.5310>:
     f60:	62 72 6f 61 64 63 61 73 74 5f 69 64 00              broadcast_id.

00000f6d <__c.5308>:
     f6d:	67 65 74 5f 69 64 00                                get_id.

00000f74 <__c.5306>:
     f74:	73 65 74 5f 6c 65 64 00                             set_led.

00000f7c <__c.5304>:
     f7c:	72 6e 62 5f 62 00                                   rnb_b.

00000f82 <__c.5302>:
     f82:	73 65 74 5f 64 69 73 74 5f 70 65 72 5f 73 74 65     set_dist_per_ste
     f92:	70 00                                               p.

00000f94 <__c.5300>:
     f94:	61 64 6a 5f 6d 6f 74 6f 72 73 00                    adj_motors.

00000f9f <__c.5298>:
     f9f:	73 65 74 5f 6d 6f 74 6f 72 73 00                    set_motors.

00000faa <__c.5296>:
     faa:	73 74 6f 70 5f 77 61 6c 6b 00                       stop_walk.

00000fb4 <__c.5294>:
     fb4:	63 6f 6c 6c 00                                      coll.

00000fb9 <__c.5292>:
     fb9:	73 65 74 5f 69 72 00                                set_ir.

00000fc0 <__c.5290>:
     fc0:	67 65 74 5f 72 67 62 00                             get_rgb.

00000fc8 <__c.5288>:
     fc8:	77 61 6c 6b 00                                      walk.

00000fcd <__c.5286>:
     fcd:	6d 6f 76 65 5f 73 74 65 70 73 00                    move_steps.

00000fd8 <CMD_NOT_RECOGNIZED_STR>:
     fd8:	09 43 6f 6d 6d 61 6e 64 20 28 20 25 73 20 29 20     .Command ( %s ) 
     fe8:	6e 6f 74 20 72 65 63 6f 67 6e 69 7a 65 64 2e 0d     not recognized..
     ff8:	0a 00                                               ..

00000ffa <__ctors_end>:
     ffa:	11 24       	eor	r1, r1
     ffc:	1f be       	out	0x3f, r1	; 63
     ffe:	cf ef       	ldi	r28, 0xFF	; 255
    1000:	cd bf       	out	0x3d, r28	; 61
    1002:	df e3       	ldi	r29, 0x3F	; 63
    1004:	de bf       	out	0x3e, r29	; 62
    1006:	00 e0       	ldi	r16, 0x00	; 0
    1008:	0c bf       	out	0x3c, r16	; 60

0000100a <__do_copy_data>:
    100a:	13 e2       	ldi	r17, 0x23	; 35
    100c:	a0 e0       	ldi	r26, 0x00	; 0
    100e:	b0 e2       	ldi	r27, 0x20	; 32
    1010:	ea ef       	ldi	r30, 0xFA	; 250
    1012:	ff ea       	ldi	r31, 0xAF	; 175
    1014:	00 e0       	ldi	r16, 0x00	; 0
    1016:	0b bf       	out	0x3b, r16	; 59
    1018:	02 c0       	rjmp	.+4      	; 0x101e <__do_copy_data+0x14>
    101a:	07 90       	elpm	r0, Z+
    101c:	0d 92       	st	X+, r0
    101e:	a8 3f       	cpi	r26, 0xF8	; 248
    1020:	b1 07       	cpc	r27, r17
    1022:	d9 f7       	brne	.-10     	; 0x101a <__do_copy_data+0x10>

00001024 <__do_clear_bss>:
    1024:	2f e2       	ldi	r18, 0x2F	; 47
    1026:	a8 ef       	ldi	r26, 0xF8	; 248
    1028:	b3 e2       	ldi	r27, 0x23	; 35
    102a:	01 c0       	rjmp	.+2      	; 0x102e <.do_clear_bss_start>

0000102c <.do_clear_bss_loop>:
    102c:	1d 92       	st	X+, r1

0000102e <.do_clear_bss_start>:
    102e:	ad 3f       	cpi	r26, 0xFD	; 253
    1030:	b2 07       	cpc	r27, r18
    1032:	e1 f7       	brne	.-8      	; 0x102c <.do_clear_bss_loop>
    1034:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <main>
    1038:	0c 94 fb 57 	jmp	0xaff6	; 0xaff6 <_exit>

0000103c <__bad_interrupt>:
    103c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00001040 <get_time>:
*/

; Gets the time as an atomic operation
.global get_time
get_time:
	in		r0, _SFR_IO_ADDR(SREG)		; Save the state of the status register
    1040:	0f b6       	in	r0, 0x3f	; 63
	cli									; Disable interrupts
    1042:	f8 94       	cli
	lds		r22, RTC_CNT				; Load low byte into return value
    1044:	60 91 08 04 	lds	r22, 0x0408	; 0x800408 <__TEXT_REGION_LENGTH__+0x700408>
	lds		r23, RTC_CNT+1
    1048:	70 91 09 04 	lds	r23, 0x0409	; 0x800409 <__TEXT_REGION_LENGTH__+0x700409>
	lds		r24, rtc_epoch				; epoch 16-bit high word
    104c:	80 91 92 24 	lds	r24, 0x2492	; 0x802492 <rtc_epoch>
	lds		r25, rtc_epoch+1
    1050:	90 91 93 24 	lds	r25, 0x2493	; 0x802493 <rtc_epoch+0x1>
	out		_SFR_IO_ADDR(SREG), r0		; Restore status register (including re-enabling interrupts if necessary)
    1054:	0f be       	out	0x3f, r0	; 63
	ret
    1056:	08 95       	ret

00001058 <SP_ReadByte>:

.section .text
.global SP_ReadByte

SP_ReadByte:
	in	r19, RAMPZ      ; Save RAMPZ.
    1058:	3b b7       	in	r19, 0x3b	; 59
	out	RAMPZ, r24      ; Load RAMPZ with the MSB of the address.
    105a:	8b bf       	out	0x3b, r24	; 59
	movw	ZL, r22         ; Move the low bytes to the Z pointer
    105c:	fb 01       	movw	r30, r22
	elpm	r24, Z          ; Extended load byte from address pointed to by Z.
    105e:	86 91       	elpm	r24, Z
	out	RAMPZ, r19      ; Restore RAMPZ register.
    1060:	3b bf       	out	0x3b, r19	; 59
	ret
    1062:	08 95       	ret

00001064 <SP_ReadWord>:

.section .text
.global SP_ReadWord

SP_ReadWord:
	in	r19, RAMPZ      ; Save RAMPZ.
    1064:	3b b7       	in	r19, 0x3b	; 59
	out	RAMPZ, r24      ; Load RAMPZ with the MSB of the address.
    1066:	8b bf       	out	0x3b, r24	; 59
	movw	ZL, r22         ; Move the low bytes to the Z pointer
    1068:	fb 01       	movw	r30, r22
	elpm	r24, Z+         ; Extended load byte from address pointed to by Z.
    106a:	87 91       	elpm	r24, Z+
	elpm	r25, Z          ; Extended load byte from address pointed to by Z.
    106c:	96 91       	elpm	r25, Z
	out	RAMPZ, r19      ; Restore RAMPZ register.
    106e:	3b bf       	out	0x3b, r19	; 59
	ret
    1070:	08 95       	ret

00001072 <SP_ReadCalibrationByte>:

.section .text
.global SP_ReadCalibrationByte	

SP_ReadCalibrationByte:
	ldi	r20, NVM_CMD_READ_CALIB_ROW_gc    ; Prepare NVM command in R20.
    1072:	42 e0       	ldi	r20, 0x02	; 2
	rjmp	SP_CommonLPM                      ; Jump to common LPM code.
    1074:	81 c0       	rjmp	.+258    	; 0x1178 <SP_CommonLPM>

00001076 <SP_ReadUserSignatureByte>:

.section .text	
.global SP_ReadUserSignatureByte

SP_ReadUserSignatureByte:
	ldi	r20, NVM_CMD_READ_USER_SIG_ROW_gc  ; Prepare NVM command in R20.
    1076:	41 e0       	ldi	r20, 0x01	; 1
	rjmp	SP_CommonLPM                       ; Jump to common LPM code.
    1078:	7f c0       	rjmp	.+254    	; 0x1178 <SP_CommonLPM>

0000107a <SP_ReadFuseByte>:

.section .text	
.global SP_ReadFuseByte

SP_ReadFuseByte:
	sts	NVM_ADDR0, r24              ; Load fuse byte index into NVM Address Register 0.
    107a:	80 93 c0 01 	sts	0x01C0, r24	; 0x8001c0 <__TEXT_REGION_LENGTH__+0x7001c0>
	clr	r24                         ; Prepare a zero.
    107e:	88 27       	eor	r24, r24
	sts	NVM_ADDR1, r24              ; Load zero into NVM Address Register 1.
    1080:	80 93 c1 01 	sts	0x01C1, r24	; 0x8001c1 <__TEXT_REGION_LENGTH__+0x7001c1>
	sts	NVM_ADDR2, r24              ; Load zero into NVM Address Register 2.
    1084:	80 93 c2 01 	sts	0x01C2, r24	; 0x8001c2 <__TEXT_REGION_LENGTH__+0x7001c2>
	ldi	r20, NVM_CMD_READ_FUSES_gc  ; Prepare NVM command in R20.
    1088:	47 e0       	ldi	r20, 0x07	; 7
	rcall	SP_CommonCMD                ; Jump to common NVM Action code.
    108a:	66 d0       	rcall	.+204    	; 0x1158 <SP_CommonCMD>
	movw	r24, r22                    ; Move low byte to 1 byte return address.
    108c:	cb 01       	movw	r24, r22
	ret
    108e:	08 95       	ret

00001090 <SP_WriteLockBits>:

.section .text	
.global SP_WriteLockBits

SP_WriteLockBits:
	sts	NVM_DATA0, r24                  ; Load lock bits into NVM Data Register 0.
    1090:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <__TEXT_REGION_LENGTH__+0x7001c4>
	ldi	r20, NVM_CMD_WRITE_LOCK_BITS_gc ; Prepare NVM command in R20.
    1094:	48 e0       	ldi	r20, 0x08	; 8
	rjmp	SP_CommonCMD                    ; Jump to common NVM Action code.
    1096:	60 c0       	rjmp	.+192    	; 0x1158 <SP_CommonCMD>

00001098 <SP_ReadLockBits>:

.section .text		
.global SP_ReadLockBits

SP_ReadLockBits:
	lds	r24, NVM_LOCKBITS       ; Read IO-mapped lock bits.
    1098:	80 91 d0 01 	lds	r24, 0x01D0	; 0x8001d0 <__TEXT_REGION_LENGTH__+0x7001d0>
	ret
    109c:	08 95       	ret

0000109e <SP_EraseUserSignatureRow>:

.section .text
.global SP_EraseUserSignatureRow

SP_EraseUserSignatureRow:
	in	r19, RAMPZ                         ; Save RAMPZ, which is restored in SP_CommonSPM.
    109e:	3b b7       	in	r19, 0x3b	; 59
	ldi	r20, NVM_CMD_ERASE_USER_SIG_ROW_gc ; Prepare NVM command in R20.
    10a0:	48 e1       	ldi	r20, 0x18	; 24
	jmp 	SP_CommonSPM                       ; Jump to common SPM code.
    10a2:	0d 94 13 00 	jmp	0x20026	; 0x20026 <SP_CommonSPM>

000010a6 <SP_WriteUserSignatureRow>:

.section .text
.global SP_WriteUserSignatureRow

SP_WriteUserSignatureRow:
	in	r19, RAMPZ                          ; Save RAMPZ, which is restored in SP_CommonSPM.
    10a6:	3b b7       	in	r19, 0x3b	; 59
	ldi	r20, NVM_CMD_WRITE_USER_SIG_ROW_gc  ; Prepare NVM command in R20.
    10a8:	4a e1       	ldi	r20, 0x1A	; 26
	jmp	SP_CommonSPM                        ; Jump to common SPM code.
    10aa:	0d 94 13 00 	jmp	0x20026	; 0x20026 <SP_CommonSPM>

000010ae <SP_EraseApplicationSection>:

.section .text
.global SP_EraseApplicationSection

SP_EraseApplicationSection:
	in	r19, RAMPZ                 ; Save RAMPZ, which is restored in SP_CommonSPM.
    10ae:	3b b7       	in	r19, 0x3b	; 59
	ldi	r20, NVM_CMD_ERASE_APP_gc  ; Prepare NVM command in R20.
    10b0:	40 e2       	ldi	r20, 0x20	; 32
	jmp	SP_CommonSPM               ; Jump to common SPM code.
    10b2:	0d 94 13 00 	jmp	0x20026	; 0x20026 <SP_CommonSPM>

000010b6 <SP_EraseApplicationPage>:

.section .text	
.global SP_EraseApplicationPage

SP_EraseApplicationPage:
	in	r19, RAMPZ                      ; Save RAMPZ, which is restored in SP_CommonSPM.
    10b6:	3b b7       	in	r19, 0x3b	; 59
	out	RAMPZ, r24                      ; Load RAMPZ with the MSB of the address.
    10b8:	8b bf       	out	0x3b, r24	; 59
	movw    r24, r22                        ; Move low bytes for ZH:ZL to R25:R24
    10ba:	cb 01       	movw	r24, r22
	ldi	r20, NVM_CMD_ERASE_APP_PAGE_gc  ; Prepare NVM command in R20.
    10bc:	42 e2       	ldi	r20, 0x22	; 34
	jmp	SP_CommonSPM                    ; Jump to common SPM code.
    10be:	0d 94 13 00 	jmp	0x20026	; 0x20026 <SP_CommonSPM>

000010c2 <SP_LoadFlashWord>:

.section .text
.global SP_LoadFlashWord

SP_LoadFlashWord:
	in	r19, RAMPZ                         ; Save RAMPZ, which is restored in SP_CommonSPM.
    10c2:	3b b7       	in	r19, 0x3b	; 59
	movw	r0, r22                            ; Prepare flash word in R1:R0.
    10c4:	0b 01       	movw	r0, r22
	ldi	r20, NVM_CMD_LOAD_FLASH_BUFFER_gc  ; Prepare NVM command in R20.
    10c6:	43 e2       	ldi	r20, 0x23	; 35
	jmp	SP_CommonSPM                       ; Jump to common SPM code.
    10c8:	0d 94 13 00 	jmp	0x20026	; 0x20026 <SP_CommonSPM>

000010cc <SP_ReadFlashPage>:
.section .text		
.global SP_ReadFlashPage

SP_ReadFlashPage:

	in	r19, RAMPZ                   ; Save RAMPZ during assembly.
    10cc:	3b b7       	in	r19, 0x3b	; 59
	out	RAMPZ, r22                   ; Load RAMPZ with MSB of address
    10ce:	6b bf       	out	0x3b, r22	; 59
	movw    ZL, r20                      ; Load Z with Flash address.
    10d0:	fa 01       	movw	r30, r20

	out	RAMPX, r1                    ; Load RAMPX with data pointer
    10d2:	19 be       	out	0x39, r1	; 57
	movw	XL, r24                      ; Load X with data buffer address.
    10d4:	dc 01       	movw	r26, r24

	ldi	r20, NVM_CMD_NO_OPERATION_gc ; Prepare NVM command code in R20.
    10d6:	40 e0       	ldi	r20, 0x00	; 0
	sts	NVM_CMD, r20                 ; Set NVM command to No Operation so that LPM reads Flash.
    10d8:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>

#if FLASH_PAGE_SIZE > 512
	ldi	r22, ((FLASH_PAGE_SIZE/2) >> 8) ; Load R22 with byte cont high if flash page is large.
#endif	

	ldi	r21, ((FLASH_PAGE_SIZE)&0xFF)   ; Load R21 with byte count.
    10dc:	50 e0       	ldi	r21, 0x00	; 0

000010de <SP_ReadFlashPage_1>:

SP_ReadFlashPage_1:
	elpm	r24, Z+                         ; Load Flash bytes into R18:r19
    10de:	87 91       	elpm	r24, Z+
	elpm	r25, Z+
    10e0:	97 91       	elpm	r25, Z+
	st	X+, r24                         ; Write bytes to buffer.
    10e2:	8d 93       	st	X+, r24
	st	X+, r25
    10e4:	9d 93       	st	X+, r25

#if FLASH_PAGE_SIZE > 512
	subi	r21, 1                          ; Decrement word count.
	sbci	r22, 0
#else
	dec	r21                             ; Decrement word count.
    10e6:	5a 95       	dec	r21
#endif	

	brne	SP_ReadFlashPage_1              ; Repeat until byte count is zero.
    10e8:	d1 f7       	brne	.-12     	; 0x10de <SP_ReadFlashPage_1>

	out	RAMPZ, r19
    10ea:	3b bf       	out	0x3b, r19	; 59
	ret
    10ec:	08 95       	ret

000010ee <SP_WriteApplicationPage>:

.section .text		
.global SP_WriteApplicationPage

SP_WriteApplicationPage:
	in	r19, RAMPZ                       ; Save RAMPZ, which is restored in SP_CommonSPM.
    10ee:	3b b7       	in	r19, 0x3b	; 59
	out	RAMPZ, r24                       ; Load RAMPZ with the MSB of the address.
    10f0:	8b bf       	out	0x3b, r24	; 59
	movw	r24, r22                         ; Move low bytes of address to ZH:ZL from R23:R22
    10f2:	cb 01       	movw	r24, r22
	ldi	r20, NVM_CMD_WRITE_APP_PAGE_gc   ; Prepare NVM command in R20.
    10f4:	44 e2       	ldi	r20, 0x24	; 36
	jmp	SP_CommonSPM                     ; Jump to common SPM code.
    10f6:	0d 94 13 00 	jmp	0x20026	; 0x20026 <SP_CommonSPM>

000010fa <SP_EraseWriteApplicationPage>:

.section .text
.global SP_EraseWriteApplicationPage

SP_EraseWriteApplicationPage:
	in	r19, RAMPZ                            ; Save RAMPZ, which is restored in SP_CommonSPM.
    10fa:	3b b7       	in	r19, 0x3b	; 59
	out	RAMPZ, r24                            ; Load RAMPZ with the MSB of the address.
    10fc:	8b bf       	out	0x3b, r24	; 59
	movw	r24, r22                              ; Move low bytes of address to ZH:ZL from R23:R22
    10fe:	cb 01       	movw	r24, r22
	ldi	r20, NVM_CMD_ERASE_WRITE_APP_PAGE_gc  ; Prepare NVM command in R20.
    1100:	45 e2       	ldi	r20, 0x25	; 37
	jmp	SP_CommonSPM                          ; Jump to common SPM code.
    1102:	0d 94 13 00 	jmp	0x20026	; 0x20026 <SP_CommonSPM>

00001106 <SP_EraseFlashBuffer>:

.section .text		
.global SP_EraseFlashBuffer

SP_EraseFlashBuffer:
	in	r19, RAMPZ                          ; Save RAMPZ, which is restored in SP_CommonSPM.
    1106:	3b b7       	in	r19, 0x3b	; 59
	ldi	r20, NVM_CMD_ERASE_FLASH_BUFFER_gc  ; Prepare NVM command in R20.
    1108:	46 e2       	ldi	r20, 0x26	; 38
	jmp	SP_CommonSPM                        ; Jump to common SPM code.
    110a:	0d 94 13 00 	jmp	0x20026	; 0x20026 <SP_CommonSPM>

0000110e <SP_EraseBootPage>:

.section .text		
.global SP_EraseBootPage

SP_EraseBootPage:
	in	r19, RAMPZ                         ; Save RAMPZ, which is restored in SP_CommonSPM.
    110e:	3b b7       	in	r19, 0x3b	; 59
	out	RAMPZ, r24                         ; Load RAMPZ with the MSB of the address.
    1110:	8b bf       	out	0x3b, r24	; 59
	movw	r24, r22                           ; Move low bytes of address to ZH:ZL from R23:R22
    1112:	cb 01       	movw	r24, r22
	ldi	r20, NVM_CMD_ERASE_BOOT_PAGE_gc    ; Prepare NVM command in R20.
    1114:	4a e2       	ldi	r20, 0x2A	; 42
	jmp	SP_CommonSPM                       ; Jump to common SPM code.
    1116:	0d 94 13 00 	jmp	0x20026	; 0x20026 <SP_CommonSPM>

0000111a <SP_WriteBootPage>:

.section .text		
.global SP_WriteBootPage

SP_WriteBootPage:
	in	r19, RAMPZ                       ; Save RAMPZ, which is restored in SP_CommonSPM.
    111a:	3b b7       	in	r19, 0x3b	; 59
	out	RAMPZ, r24                       ; Load RAMPZ with the MSB of the address.
    111c:	8b bf       	out	0x3b, r24	; 59
	movw	r24, r22                         ; Move low bytes of address to ZH:ZL from R23:R22
    111e:	cb 01       	movw	r24, r22
	ldi	r20, NVM_CMD_WRITE_BOOT_PAGE_gc  ; Prepare NVM command in R20.
    1120:	4c e2       	ldi	r20, 0x2C	; 44
	jmp	SP_CommonSPM                     ; Jump to common SPM code.
    1122:	0d 94 13 00 	jmp	0x20026	; 0x20026 <SP_CommonSPM>

00001126 <SP_EraseWriteBootPage>:

.section .text		
.global SP_EraseWriteBootPage

SP_EraseWriteBootPage:
	in	r19, RAMPZ                             ; Save RAMPZ, which is restored in SP_CommonSPM.
    1126:	3b b7       	in	r19, 0x3b	; 59
	out	RAMPZ, r24                             ; Load RAMPZ with the MSB of the address.
    1128:	8b bf       	out	0x3b, r24	; 59
	movw	r24, r22                               ; Move low bytes of address to ZH:ZL from R23:R22
    112a:	cb 01       	movw	r24, r22
	ldi	r20, NVM_CMD_ERASE_WRITE_BOOT_PAGE_gc  ; Prepare NVM command in R20.
    112c:	4d e2       	ldi	r20, 0x2D	; 45
	jmp	SP_CommonSPM                           ; Jump to common SPM code.
    112e:	0d 94 13 00 	jmp	0x20026	; 0x20026 <SP_CommonSPM>

00001132 <SP_ApplicationCRC>:

.section .text	
.global SP_ApplicationCRC

SP_ApplicationCRC:
	ldi	r20, NVM_CMD_APP_CRC_gc    ; Prepare NVM command in R20.
    1132:	48 e3       	ldi	r20, 0x38	; 56
	rjmp	SP_CommonCMD               ; Jump to common NVM Action code.
    1134:	11 c0       	rjmp	.+34     	; 0x1158 <SP_CommonCMD>

00001136 <SP_BootCRC>:

.section .text
.global SP_BootCRC

SP_BootCRC:
	ldi	r20, NVM_CMD_BOOT_CRC_gc   ; Prepare NVM command in R20.
    1136:	49 e3       	ldi	r20, 0x39	; 57
	rjmp	SP_CommonCMD               ; Jump to common NVM Action code.
    1138:	0f c0       	rjmp	.+30     	; 0x1158 <SP_CommonCMD>

0000113a <SP_LockSPM>:

.section .text
.global SP_LockSPM

SP_LockSPM:
	ldi	r18, CCP_IOREG_gc     ; Prepare Protect IO-register signature in R18.
    113a:	28 ed       	ldi	r18, 0xD8	; 216
	sts	CCP, r18              ; Enable IO-register operation (this disables interrupts for 4 cycles).
    113c:	20 93 34 00 	sts	0x0034, r18	; 0x800034 <__TEXT_REGION_LENGTH__+0x700034>
	ldi	r18, NVM_SPMLOCK_bm   ; Prepare bitmask for locking SPM into R18.
    1140:	21 e0       	ldi	r18, 0x01	; 1
	sts	NVM_CTRLB, r18        ; Load bitmask into NVM Control Register B, which locks SPM.
    1142:	20 93 cc 01 	sts	0x01CC, r18	; 0x8001cc <__TEXT_REGION_LENGTH__+0x7001cc>
	ret
    1146:	08 95       	ret

00001148 <SP_WaitForSPM>:

.section .text
.global SP_WaitForSPM		

SP_WaitForSPM:
	lds	r18, NVM_STATUS     ; Load the NVM Status register.
    1148:	20 91 cf 01 	lds	r18, 0x01CF	; 0x8001cf <__TEXT_REGION_LENGTH__+0x7001cf>
	sbrc	r18, NVM_NVMBUSY_bp ; Check if bit is cleared.
    114c:	27 fd       	sbrc	r18, 7
	rjmp	SP_WaitForSPM       ; Repeat check if bit is not cleared.
    114e:	fc cf       	rjmp	.-8      	; 0x1148 <SP_WaitForSPM>
	clr	r18
    1150:	22 27       	eor	r18, r18
	sts	NVM_CMD, r18        ; Clear up command register to NO_OPERATION.
    1152:	20 93 ca 01 	sts	0x01CA, r18	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	ret
    1156:	08 95       	ret

00001158 <SP_CommonCMD>:
; ---

.section .text		

SP_CommonCMD:
	sts	NVM_CMD, r20        ; Load command into NVM Command register.
    1158:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	ldi	r18, CCP_IOREG_gc   ; Prepare Protect IO-register signature in R18.
    115c:	28 ed       	ldi	r18, 0xD8	; 216
	ldi	r19, NVM_CMDEX_bm   ; Prepare bitmask for setting NVM Command Execute bit into R19.
    115e:	31 e0       	ldi	r19, 0x01	; 1
	sts	CCP, r18            ; Enable IO-register operation (this disables interrupts for 4 cycles).
    1160:	20 93 34 00 	sts	0x0034, r18	; 0x800034 <__TEXT_REGION_LENGTH__+0x700034>
	sts	NVM_CTRLA, r19      ; Load bitmask into NVM Control Register A, which executes the command.
    1164:	30 93 cb 01 	sts	0x01CB, r19	; 0x8001cb <__TEXT_REGION_LENGTH__+0x7001cb>
	lds	r22, NVM_DATA0      ; Load NVM Data Register 0 into R22.
    1168:	60 91 c4 01 	lds	r22, 0x01C4	; 0x8001c4 <__TEXT_REGION_LENGTH__+0x7001c4>
	lds	r23, NVM_DATA1      ; Load NVM Data Register 1 into R23.
    116c:	70 91 c5 01 	lds	r23, 0x01C5	; 0x8001c5 <__TEXT_REGION_LENGTH__+0x7001c5>
	lds	r24, NVM_DATA2      ; Load NVM Data Register 2 into R24.
    1170:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <__TEXT_REGION_LENGTH__+0x7001c6>
	clr	r25                 ; Clear R25 in order to return a clean 32-bit value.
    1174:	99 27       	eor	r25, r25
	ret
    1176:	08 95       	ret

00001178 <SP_CommonLPM>:
; ---

.section .text		

SP_CommonLPM:
	movw	ZL, r24             ; Load index into Z.
    1178:	fc 01       	movw	r30, r24
	sts	NVM_CMD, r20        ; Load prepared command into NVM Command register.
    117a:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	lpm	r24,Z
    117e:	84 91       	lpm	r24, Z
	ret
    1180:	08 95       	ret

00001182 <send_code_packet>:
	}
	return num;
}

 void send_code_packet(){
	 set_rgb(255,0,0);
    1182:	40 e0       	ldi	r20, 0x00	; 0
    1184:	60 e0       	ldi	r22, 0x00	; 0
    1186:	8f ef       	ldi	r24, 0xFF	; 255
    1188:	0e 94 26 37 	call	0x6e4c	; 0x6e4c <set_rgb>
	 uint8_t length = strlen(data_pointer);
    118c:	ea e6       	ldi	r30, 0x6A	; 106
    118e:	ff e2       	ldi	r31, 0x2F	; 47
    1190:	01 90       	ld	r0, Z+
    1192:	00 20       	and	r0, r0
    1194:	e9 f7       	brne	.-6      	; 0x1190 <send_code_packet+0xe>
    1196:	31 97       	sbiw	r30, 0x01	; 1
    1198:	af 01       	movw	r20, r30
    119a:	4a 56       	subi	r20, 0x6A	; 106
    119c:	5f 42       	sbci	r21, 0x2F	; 47

	 ir_send(ALL_DIRS,data_pointer,length);
    119e:	6a e6       	ldi	r22, 0x6A	; 106
    11a0:	7f e2       	ldi	r23, 0x2F	; 47
    11a2:	8f e3       	ldi	r24, 0x3F	; 63
    11a4:	0e 94 80 19 	call	0x3300	; 0x3300 <ir_send>
	 //if (counterForTransmit%32 == 0 && counterForTransmit > 0)
	 //{
	 //set_rgb(0,255,0);
	 //delay_ms(2000);
	 //}
	 waitForTransmission(ALL_DIRS);
    11a8:	8f e3       	ldi	r24, 0x3F	; 63
    11aa:	0e 94 e8 12 	call	0x25d0	; 0x25d0 <waitForTransmission>
	 printf("Done\r\n");
    11ae:	86 e9       	ldi	r24, 0x96	; 150
    11b0:	90 e2       	ldi	r25, 0x20	; 32
    11b2:	0e 94 25 57 	call	0xae4a	; 0xae4a <puts>
	 set_rgb(0,0,0);
    11b6:	40 e0       	ldi	r20, 0x00	; 0
    11b8:	60 e0       	ldi	r22, 0x00	; 0
    11ba:	80 e0       	ldi	r24, 0x00	; 0
    11bc:	0e 94 26 37 	call	0x6e4c	; 0x6e4c <set_rgb>
    11c0:	08 95       	ret

000011c2 <handle_reprogramming_msg>:
}



void handle_reprogramming_msg(ir_msg* msg_struct)
{
    11c2:	af 92       	push	r10
    11c4:	bf 92       	push	r11
    11c6:	cf 92       	push	r12
    11c8:	df 92       	push	r13
    11ca:	ff 92       	push	r15
    11cc:	0f 93       	push	r16
    11ce:	1f 93       	push	r17
    11d0:	cf 93       	push	r28
    11d2:	df 93       	push	r29
    11d4:	cd b7       	in	r28, 0x3d	; 61
    11d6:	de b7       	in	r29, 0x3e	; 62
    11d8:	28 97       	sbiw	r28, 0x08	; 8
    11da:	cd bf       	out	0x3d, r28	; 61
    11dc:	de bf       	out	0x3e, r29	; 62
    11de:	8c 01       	movw	r16, r24
	
	// Used for debugging
	msg_struct->msg[msg_struct->length] = '\0';
    11e0:	dc 01       	movw	r26, r24
    11e2:	55 96       	adiw	r26, 0x15	; 21
    11e4:	8c 91       	ld	r24, X
    11e6:	55 97       	sbiw	r26, 0x15	; 21
    11e8:	52 96       	adiw	r26, 0x12	; 18
    11ea:	ed 91       	ld	r30, X+
    11ec:	fc 91       	ld	r31, X
    11ee:	53 97       	sbiw	r26, 0x13	; 19
    11f0:	e8 0f       	add	r30, r24
    11f2:	f1 1d       	adc	r31, r1
    11f4:	10 82       	st	Z, r1
	printf("%s\n\r",msg_struct->msg);
    11f6:	53 96       	adiw	r26, 0x13	; 19
    11f8:	8c 91       	ld	r24, X
    11fa:	53 97       	sbiw	r26, 0x13	; 19
    11fc:	8f 93       	push	r24
    11fe:	52 96       	adiw	r26, 0x12	; 18
    1200:	8c 91       	ld	r24, X
    1202:	8f 93       	push	r24
    1204:	8c e9       	ldi	r24, 0x9C	; 156
    1206:	90 e2       	ldi	r25, 0x20	; 32
    1208:	9f 93       	push	r25
    120a:	8f 93       	push	r24
    120c:	0e 94 e3 56 	call	0xadc6	; 0xadc6 <printf>
	set_rgb(50,50,50);
    1210:	42 e3       	ldi	r20, 0x32	; 50
    1212:	62 e3       	ldi	r22, 0x32	; 50
    1214:	82 e3       	ldi	r24, 0x32	; 50
    1216:	0e 94 26 37 	call	0x6e4c	; 0x6e4c <set_rgb>
	
	// converting to integer
	uint8_t transmitLength = msg_struct->length/2;//  strlen(msg_struct->msg)/2;
	uint8_t lengthCommand = msg_struct->length; // strlen(msg_struct->msg);
    121a:	f8 01       	movw	r30, r16
    121c:	f5 88       	ldd	r15, Z+21	; 0x15
	
	char str[3];
	memset(str,0,sizeof(str));
    121e:	19 82       	std	Y+1, r1	; 0x01
    1220:	1a 82       	std	Y+2, r1	; 0x02
    1222:	1b 82       	std	Y+3, r1	; 0x03
	str[0] = msg_struct->msg[0];
    1224:	02 88       	ldd	r0, Z+18	; 0x12
    1226:	f3 89       	ldd	r31, Z+19	; 0x13
    1228:	e0 2d       	mov	r30, r0
    122a:	80 81       	ld	r24, Z
    122c:	89 83       	std	Y+1, r24	; 0x01
	str[1] = msg_struct->msg[1];
    122e:	81 81       	ldd	r24, Z+1	; 0x01
    1230:	8a 83       	std	Y+2, r24	; 0x02
	str[2] = '\0';
	uint8_t lengthData = strtoul(str, NULL, 16);
    1232:	40 e1       	ldi	r20, 0x10	; 16
    1234:	50 e0       	ldi	r21, 0x00	; 0
    1236:	60 e0       	ldi	r22, 0x00	; 0
    1238:	70 e0       	ldi	r23, 0x00	; 0
    123a:	ce 01       	movw	r24, r28
    123c:	01 96       	adiw	r24, 0x01	; 1
    123e:	0e 94 ef 53 	call	0xa7de	; 0xa7de <strtoul>
	//uint8_t lengthData = hexStrtoint(str, 2);
	char strforAddr[5];
	// Finding the address
	strforAddr[0] = msg_struct->msg[2];
    1242:	d8 01       	movw	r26, r16
    1244:	52 96       	adiw	r26, 0x12	; 18
    1246:	ed 91       	ld	r30, X+
    1248:	fc 91       	ld	r31, X
    124a:	53 97       	sbiw	r26, 0x13	; 19
    124c:	82 81       	ldd	r24, Z+2	; 0x02
    124e:	8c 83       	std	Y+4, r24	; 0x04
	strforAddr[1] = msg_struct->msg[3];
    1250:	83 81       	ldd	r24, Z+3	; 0x03
    1252:	8d 83       	std	Y+5, r24	; 0x05
	strforAddr[2] = msg_struct->msg[4];
    1254:	84 81       	ldd	r24, Z+4	; 0x04
    1256:	8e 83       	std	Y+6, r24	; 0x06
	strforAddr[3] = msg_struct->msg[5];
    1258:	85 81       	ldd	r24, Z+5	; 0x05
    125a:	8f 83       	std	Y+7, r24	; 0x07
	strforAddr[4] = '\0';
    125c:	18 86       	std	Y+8, r1	; 0x08
	
	Startaddr[addCounter] =  strtoul(strforAddr, NULL, 16);
    125e:	c0 90 38 2b 	lds	r12, 0x2B38	; 0x802b38 <addCounter>
    1262:	d1 2c       	mov	r13, r1
    1264:	40 e1       	ldi	r20, 0x10	; 16
    1266:	50 e0       	ldi	r21, 0x00	; 0
    1268:	60 e0       	ldi	r22, 0x00	; 0
    126a:	70 e0       	ldi	r23, 0x00	; 0
    126c:	ce 01       	movw	r24, r28
    126e:	04 96       	adiw	r24, 0x04	; 4
    1270:	0e 94 ef 53 	call	0xa7de	; 0xa7de <strtoul>
    1274:	f6 01       	movw	r30, r12
    1276:	ee 0f       	add	r30, r30
    1278:	ff 1f       	adc	r31, r31
    127a:	eb 58       	subi	r30, 0x8B	; 139
    127c:	f5 4d       	sbci	r31, 0xD5	; 213
    127e:	60 83       	st	Z, r22
    1280:	71 83       	std	Z+1, r23	; 0x01
	
	printf("corresponding address %u %d\n\r", Startaddr[addCounter], addCounter);
    1282:	80 91 38 2b 	lds	r24, 0x2B38	; 0x802b38 <addCounter>
    1286:	e8 2f       	mov	r30, r24
    1288:	f0 e0       	ldi	r31, 0x00	; 0
    128a:	1f 92       	push	r1
    128c:	8f 93       	push	r24
    128e:	ee 0f       	add	r30, r30
    1290:	ff 1f       	adc	r31, r31
    1292:	eb 58       	subi	r30, 0x8B	; 139
    1294:	f5 4d       	sbci	r31, 0xD5	; 213
    1296:	81 81       	ldd	r24, Z+1	; 0x01
    1298:	8f 93       	push	r24
    129a:	80 81       	ld	r24, Z
    129c:	8f 93       	push	r24
    129e:	81 ea       	ldi	r24, 0xA1	; 161
    12a0:	90 e2       	ldi	r25, 0x20	; 32
    12a2:	9f 93       	push	r25
    12a4:	8f 93       	push	r24
    12a6:	0e 94 e3 56 	call	0xadc6	; 0xadc6 <printf>
	
	// stores the address of starting of a page
	if (addCounter == 0)
    12aa:	80 91 38 2b 	lds	r24, 0x2B38	; 0x802b38 <addCounter>
    12ae:	cd bf       	out	0x3d, r28	; 61
    12b0:	de bf       	out	0x3e, r29	; 62
    12b2:	81 11       	cpse	r24, r1
    12b4:	08 c0       	rjmp	.+16     	; 0x12c6 <handle_reprogramming_msg+0x104>
		storeAddressOfPageStart = Startaddr[addCounter];
    12b6:	20 91 75 2a 	lds	r18, 0x2A75	; 0x802a75 <Startaddr>
    12ba:	30 91 76 2a 	lds	r19, 0x2A76	; 0x802a76 <Startaddr+0x1>
    12be:	20 93 3b 2b 	sts	0x2B3B, r18	; 0x802b3b <storeAddressOfPageStart>
    12c2:	30 93 3c 2b 	sts	0x2B3C, r19	; 0x802b3c <storeAddressOfPageStart+0x1>
		
	addCounter = addCounter + 1;
    12c6:	8f 5f       	subi	r24, 0xFF	; 255
    12c8:	80 93 38 2b 	sts	0x2B38, r24	; 0x802b38 <addCounter>
	printf("add counter %hu \n\r", addCounter);
    12cc:	1f 92       	push	r1
    12ce:	8f 93       	push	r24
    12d0:	8f eb       	ldi	r24, 0xBF	; 191
    12d2:	90 e2       	ldi	r25, 0x20	; 32
    12d4:	9f 93       	push	r25
    12d6:	8f 93       	push	r24
    12d8:	0e 94 e3 56 	call	0xadc6	; 0xadc6 <printf>
    12dc:	e8 e5       	ldi	r30, 0x58	; 88
    12de:	fd e2       	ldi	r31, 0x2D	; 45
    12e0:	28 e5       	ldi	r18, 0x58	; 88
    12e2:	3f e2       	ldi	r19, 0x2F	; 47
    12e4:	0f 90       	pop	r0
    12e6:	0f 90       	pop	r0
    12e8:	0f 90       	pop	r0
    12ea:	0f 90       	pop	r0
	for (uint16_t i=0;i<FLASH_PAGE_SIZE;i++)
		FlashBuffer[i] = 0xFF;
    12ec:	9f ef       	ldi	r25, 0xFF	; 255
    12ee:	91 93       	st	Z+, r25
	if (addCounter == 0)
		storeAddressOfPageStart = Startaddr[addCounter];
		
	addCounter = addCounter + 1;
	printf("add counter %hu \n\r", addCounter);
	for (uint16_t i=0;i<FLASH_PAGE_SIZE;i++)
    12f0:	e2 17       	cp	r30, r18
    12f2:	f3 07       	cpc	r31, r19
    12f4:	e1 f7       	brne	.-8      	; 0x12ee <handle_reprogramming_msg+0x12c>
		FlashBuffer[i] = 0xFF;
		
	for(uint8_t i=6;i<lengthCommand-2;i+=2)    // 0-5 are length and address, the last two char (1 byte) is for checksum
    12f6:	cf 2c       	mov	r12, r15
    12f8:	d1 2c       	mov	r13, r1
    12fa:	f2 e0       	ldi	r31, 0x02	; 2
    12fc:	cf 1a       	sub	r12, r31
    12fe:	d1 08       	sbc	r13, r1
    1300:	27 e0       	ldi	r18, 0x07	; 7
    1302:	c2 16       	cp	r12, r18
    1304:	d1 04       	cpc	r13, r1
    1306:	7c f1       	brlt	.+94     	; 0x1366 <handle_reprogramming_msg+0x1a4>
    1308:	0f 2e       	mov	r0, r31
    130a:	f6 e0       	ldi	r31, 0x06	; 6
    130c:	ff 2e       	mov	r15, r31
    130e:	f0 2d       	mov	r31, r0
	{
		//convert pair of chars to byte.
		str[0] = msg_struct->msg[i];
    1310:	d8 01       	movw	r26, r16
    1312:	52 96       	adiw	r26, 0x12	; 18
    1314:	ed 91       	ld	r30, X+
    1316:	fc 91       	ld	r31, X
    1318:	53 97       	sbiw	r26, 0x13	; 19
    131a:	ef 0d       	add	r30, r15
    131c:	f1 1d       	adc	r31, r1
    131e:	80 81       	ld	r24, Z
    1320:	89 83       	std	Y+1, r24	; 0x01
		str[1] = msg_struct->msg[i+1];
    1322:	81 81       	ldd	r24, Z+1	; 0x01
    1324:	8a 83       	std	Y+2, r24	; 0x02

		FlashBuffer[flashBufferPos] = strtoul(str, NULL, 16);
    1326:	a0 90 6f 2a 	lds	r10, 0x2A6F	; 0x802a6f <flashBufferPos>
    132a:	b0 90 70 2a 	lds	r11, 0x2A70	; 0x802a70 <flashBufferPos+0x1>
    132e:	40 e1       	ldi	r20, 0x10	; 16
    1330:	50 e0       	ldi	r21, 0x00	; 0
    1332:	60 e0       	ldi	r22, 0x00	; 0
    1334:	70 e0       	ldi	r23, 0x00	; 0
    1336:	ce 01       	movw	r24, r28
    1338:	01 96       	adiw	r24, 0x01	; 1
    133a:	0e 94 ef 53 	call	0xa7de	; 0xa7de <strtoul>
    133e:	f5 01       	movw	r30, r10
    1340:	e8 5a       	subi	r30, 0xA8	; 168
    1342:	f2 4d       	sbci	r31, 0xD2	; 210
    1344:	60 83       	st	Z, r22
		flashBufferPos = flashBufferPos + 1;
    1346:	80 91 6f 2a 	lds	r24, 0x2A6F	; 0x802a6f <flashBufferPos>
    134a:	90 91 70 2a 	lds	r25, 0x2A70	; 0x802a70 <flashBufferPos+0x1>
    134e:	01 96       	adiw	r24, 0x01	; 1
    1350:	80 93 6f 2a 	sts	0x2A6F, r24	; 0x802a6f <flashBufferPos>
    1354:	90 93 70 2a 	sts	0x2A70, r25	; 0x802a70 <flashBufferPos+0x1>
	addCounter = addCounter + 1;
	printf("add counter %hu \n\r", addCounter);
	for (uint16_t i=0;i<FLASH_PAGE_SIZE;i++)
		FlashBuffer[i] = 0xFF;
		
	for(uint8_t i=6;i<lengthCommand-2;i+=2)    // 0-5 are length and address, the last two char (1 byte) is for checksum
    1358:	f3 94       	inc	r15
    135a:	f3 94       	inc	r15
    135c:	8f 2d       	mov	r24, r15
    135e:	90 e0       	ldi	r25, 0x00	; 0
    1360:	8c 15       	cp	r24, r12
    1362:	9d 05       	cpc	r25, r13
    1364:	ac f2       	brlt	.-86     	; 0x1310 <handle_reprogramming_msg+0x14e>
		// Converting string to hex value is done successfully
	}
	
	// Writing it onto flash
	// Used for checking contents of the Flash buffer
	if (addCounter%32 == 0 && addCounter>0)
    1366:	80 91 38 2b 	lds	r24, 0x2B38	; 0x802b38 <addCounter>
    136a:	98 2f       	mov	r25, r24
    136c:	9f 71       	andi	r25, 0x1F	; 31
    136e:	c1 f4       	brne	.+48     	; 0x13a0 <handle_reprogramming_msg+0x1de>
    1370:	88 23       	and	r24, r24
    1372:	b1 f0       	breq	.+44     	; 0x13a0 <handle_reprogramming_msg+0x1de>
	{

		addCounter = 0;
    1374:	10 92 38 2b 	sts	0x2B38, r1	; 0x802b38 <addCounter>
		flashBufferPos = 0;
    1378:	10 92 6f 2a 	sts	0x2A6F, r1	; 0x802a6f <flashBufferPos>
    137c:	10 92 70 2a 	sts	0x2A70, r1	; 0x802a70 <flashBufferPos+0x1>
		pageTowrite = calculate_page_number(storeAddressOfPageStart);
    1380:	80 91 3b 2b 	lds	r24, 0x2B3B	; 0x802b3b <storeAddressOfPageStart>
    1384:	90 91 3c 2b 	lds	r25, 0x2B3C	; 0x802b3c <storeAddressOfPageStart+0x1>
    1388:	0e 94 31 41 	call	0x8262	; 0x8262 <calculate_page_number>
    138c:	80 93 5f 2f 	sts	0x2F5F, r24	; 0x802f5f <pageTowrite>
		writeRead(FlashBuffer, pageTowrite);
    1390:	48 2f       	mov	r20, r24
    1392:	50 e0       	ldi	r21, 0x00	; 0
    1394:	60 e0       	ldi	r22, 0x00	; 0
    1396:	70 e0       	ldi	r23, 0x00	; 0
    1398:	88 e5       	ldi	r24, 0x58	; 88
    139a:	9d e2       	ldi	r25, 0x2D	; 45
    139c:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <writeRead>
		//pageTowrite++;       // Incrementing the address to write into next page
	}
	
	set_rgb(0,0,0);
    13a0:	40 e0       	ldi	r20, 0x00	; 0
    13a2:	60 e0       	ldi	r22, 0x00	; 0
    13a4:	80 e0       	ldi	r24, 0x00	; 0
    13a6:	0e 94 26 37 	call	0x6e4c	; 0x6e4c <set_rgb>
}
    13aa:	28 96       	adiw	r28, 0x08	; 8
    13ac:	cd bf       	out	0x3d, r28	; 61
    13ae:	de bf       	out	0x3e, r29	; 62
    13b0:	df 91       	pop	r29
    13b2:	cf 91       	pop	r28
    13b4:	1f 91       	pop	r17
    13b6:	0f 91       	pop	r16
    13b8:	ff 90       	pop	r15
    13ba:	df 90       	pop	r13
    13bc:	cf 90       	pop	r12
    13be:	bf 90       	pop	r11
    13c0:	af 90       	pop	r10
    13c2:	08 95       	ret

000013c4 <check_messages>:

void check_messages ()
{
    13c4:	cf 92       	push	r12
    13c6:	df 92       	push	r13
    13c8:	ef 92       	push	r14
    13ca:	ff 92       	push	r15
    13cc:	0f 93       	push	r16
    13ce:	1f 93       	push	r17
    13d0:	cf 93       	push	r28
    13d2:	df 93       	push	r29
    13d4:	cd b7       	in	r28, 0x3d	; 61
    13d6:	de b7       	in	r29, 0x3e	; 62
    13d8:	c0 54       	subi	r28, 0x40	; 64
    13da:	d1 09       	sbc	r29, r1
    13dc:	cd bf       	out	0x3d, r28	; 61
    13de:	de bf       	out	0x3e, r29	; 62
	ir_msg* msg_struct;	
	char actual_struct[sizeof(ir_msg)]; //It's like malloc, but on the stack.
	char actual_msg[IR_BUFFER_SIZE+1];
	msg_struct = (ir_msg*)actual_struct;
	msg_struct->msg = actual_msg;
    13e0:	ce 01       	movw	r24, r28
    13e2:	48 96       	adiw	r24, 0x18	; 24
    13e4:	8b 8b       	std	Y+19, r24	; 0x13
    13e6:	9c 8b       	std	Y+20, r25	; 0x14
	uint8_t i;
	
	if(user_facing_messages_ovf)
    13e8:	80 91 91 24 	lds	r24, 0x2491	; 0x802491 <user_facing_messages_ovf>
    13ec:	88 23       	and	r24, r24
    13ee:	69 f0       	breq	.+26     	; 0x140a <check_messages+0x46>
	{
		num_waiting_msgs=MAX_USER_FACING_MESSAGES;
    13f0:	86 e0       	ldi	r24, 0x06	; 6
    13f2:	80 93 67 2a 	sts	0x2A67, r24	; 0x802a67 <num_waiting_msgs>
		user_facing_messages_ovf=0;
    13f6:	10 92 91 24 	sts	0x2491, r1	; 0x802491 <user_facing_messages_ovf>
		printf_P(PSTR("Error: Messages overflow. Too many messages received. Try speeding up your loop if you see this a lot.\r\n"));
    13fa:	84 e9       	ldi	r24, 0x94	; 148
    13fc:	94 e0       	ldi	r25, 0x04	; 4
    13fe:	9f 93       	push	r25
    1400:	8f 93       	push	r24
    1402:	0e 94 f7 56 	call	0xadee	; 0xadee <printf_P>
    1406:	0f 90       	pop	r0
    1408:	0f 90       	pop	r0
		i=num_waiting_msgs-1;
		//We don't want this block to be interrupted by perform_ir_upkeep because the 
		//list of messages could get corrupted.
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
		{
			if(msg_node[i].msg_length==0)
    140a:	0f 2e       	mov	r0, r31
    140c:	fd e3       	ldi	r31, 0x3D	; 61
    140e:	df 2e       	mov	r13, r31
    1410:	f0 2d       	mov	r31, r0
			{
				printf_P(PSTR("ERROR: Message length 0 for msg_node.\r\n"));
    1412:	0f 2e       	mov	r0, r31
    1414:	fc e6       	ldi	r31, 0x6C	; 108
    1416:	ef 2e       	mov	r14, r31
    1418:	f4 e0       	ldi	r31, 0x04	; 4
    141a:	ff 2e       	mov	r15, r31
    141c:	f0 2d       	mov	r31, r0
    141e:	6b c0       	rjmp	.+214    	; 0x14f6 <check_messages+0x132>
		printf_P(PSTR("Error: Messages overflow. Too many messages received. Try speeding up your loop if you see this a lot.\r\n"));
	}
	//if(num_waiting_msgs>0) printf("num_msgs: %hu\r\n",num_waiting_msgs);
	while(num_waiting_msgs>0)
	{
		i=num_waiting_msgs-1;
    1420:	00 91 67 2a 	lds	r16, 0x2A67	; 0x802a67 <num_waiting_msgs>
		//We don't want this block to be interrupted by perform_ir_upkeep because the 
		//list of messages could get corrupted.
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    1424:	cf b6       	in	r12, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1426:	f8 94       	cli
		printf_P(PSTR("Error: Messages overflow. Too many messages received. Try speeding up your loop if you see this a lot.\r\n"));
	}
	//if(num_waiting_msgs>0) printf("num_msgs: %hu\r\n",num_waiting_msgs);
	while(num_waiting_msgs>0)
	{
		i=num_waiting_msgs-1;
    1428:	01 50       	subi	r16, 0x01	; 1
		//We don't want this block to be interrupted by perform_ir_upkeep because the 
		//list of messages could get corrupted.
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
		{
			if(msg_node[i].msg_length==0)
    142a:	10 e0       	ldi	r17, 0x00	; 0
    142c:	d0 9e       	mul	r13, r16
    142e:	f0 01       	movw	r30, r0
    1430:	d1 9e       	mul	r13, r17
    1432:	f0 0d       	add	r31, r0
    1434:	11 24       	eor	r1, r1
    1436:	e3 51       	subi	r30, 0x13	; 19
    1438:	f7 4d       	sbci	r31, 0xD7	; 215
    143a:	83 ad       	ldd	r24, Z+59	; 0x3b
    143c:	81 11       	cpse	r24, r1
    143e:	06 c0       	rjmp	.+12     	; 0x144c <check_messages+0x88>
			{
				printf_P(PSTR("ERROR: Message length 0 for msg_node.\r\n"));
    1440:	ff 92       	push	r15
    1442:	ef 92       	push	r14
    1444:	0e 94 f7 56 	call	0xadee	; 0xadee <printf_P>
    1448:	0f 90       	pop	r0
    144a:	0f 90       	pop	r0
			}
			memcpy(msg_struct->msg, (const void*)msg_node[i].msg, msg_node[i].msg_length);
    144c:	d0 9e       	mul	r13, r16
    144e:	b0 01       	movw	r22, r0
    1450:	d1 9e       	mul	r13, r17
    1452:	70 0d       	add	r23, r0
    1454:	11 24       	eor	r1, r1
    1456:	8b 01       	movw	r16, r22
    1458:	03 51       	subi	r16, 0x13	; 19
    145a:	17 4d       	sbci	r17, 0xD7	; 215
    145c:	f8 01       	movw	r30, r16
    145e:	43 ad       	ldd	r20, Z+59	; 0x3b
    1460:	50 e0       	ldi	r21, 0x00	; 0
    1462:	61 50       	subi	r22, 0x01	; 1
    1464:	77 4d       	sbci	r23, 0xD7	; 215
    1466:	8b 89       	ldd	r24, Y+19	; 0x13
    1468:	9c 89       	ldd	r25, Y+20	; 0x14
    146a:	0e 94 3a 56 	call	0xac74	; 0xac74 <memcpy>
			msg_struct->arrival_time					= msg_node[i].arrival_time;
    146e:	f8 01       	movw	r30, r16
    1470:	80 81       	ld	r24, Z
    1472:	91 81       	ldd	r25, Z+1	; 0x01
    1474:	a2 81       	ldd	r26, Z+2	; 0x02
    1476:	b3 81       	ldd	r27, Z+3	; 0x03
    1478:	89 83       	std	Y+1, r24	; 0x01
    147a:	9a 83       	std	Y+2, r25	; 0x02
    147c:	ab 83       	std	Y+3, r26	; 0x03
    147e:	bc 83       	std	Y+4, r27	; 0x04
			msg_struct->sender_ID						= msg_node[i].sender_ID;
    1480:	80 89       	ldd	r24, Z+16	; 0x10
    1482:	91 89       	ldd	r25, Z+17	; 0x11
    1484:	89 8b       	std	Y+17, r24	; 0x11
    1486:	9a 8b       	std	Y+18, r25	; 0x12
			msg_struct->dir_received					= msg_node[i].arrival_dir;
    1488:	82 ad       	ldd	r24, Z+58	; 0x3a
    148a:	8d 8b       	std	Y+21, r24	; 0x15
			msg_struct->length							= msg_node[i].msg_length;
    148c:	83 ad       	ldd	r24, Z+59	; 0x3b
    148e:	8e 8b       	std	Y+22, r24	; 0x16
			msg_struct->range							= msg_node[i].range;
    1490:	84 81       	ldd	r24, Z+4	; 0x04
    1492:	95 81       	ldd	r25, Z+5	; 0x05
    1494:	a6 81       	ldd	r26, Z+6	; 0x06
    1496:	b7 81       	ldd	r27, Z+7	; 0x07
    1498:	8d 83       	std	Y+5, r24	; 0x05
    149a:	9e 83       	std	Y+6, r25	; 0x06
    149c:	af 83       	std	Y+7, r26	; 0x07
    149e:	b8 87       	std	Y+8, r27	; 0x08
			msg_struct->bearing							= msg_node[i].bearing;
    14a0:	80 85       	ldd	r24, Z+8	; 0x08
    14a2:	91 85       	ldd	r25, Z+9	; 0x09
    14a4:	a2 85       	ldd	r26, Z+10	; 0x0a
    14a6:	b3 85       	ldd	r27, Z+11	; 0x0b
    14a8:	89 87       	std	Y+9, r24	; 0x09
    14aa:	9a 87       	std	Y+10, r25	; 0x0a
    14ac:	ab 87       	std	Y+11, r26	; 0x0b
    14ae:	bc 87       	std	Y+12, r27	; 0x0c
			msg_struct->heading							= msg_node[i].heading;
    14b0:	84 85       	ldd	r24, Z+12	; 0x0c
    14b2:	95 85       	ldd	r25, Z+13	; 0x0d
    14b4:	a6 85       	ldd	r26, Z+14	; 0x0e
    14b6:	b7 85       	ldd	r27, Z+15	; 0x0f
    14b8:	8d 87       	std	Y+13, r24	; 0x0d
    14ba:	9e 87       	std	Y+14, r25	; 0x0e
    14bc:	af 87       	std	Y+15, r26	; 0x0f
    14be:	b8 8b       	std	Y+16, r27	; 0x10
			msg_struct->wasTargeted						= msg_node[i].wasTargeted;
    14c0:	84 ad       	ldd	r24, Z+60	; 0x3c
    14c2:	8f 8b       	std	Y+23, r24	; 0x17
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    14c4:	cf be       	out	0x3f, r12	; 63
		}			
		msg_struct->msg[msg_node[i].msg_length]	= '\0';		
    14c6:	83 ad       	ldd	r24, Z+59	; 0x3b
    14c8:	eb 89       	ldd	r30, Y+19	; 0x13
    14ca:	fc 89       	ldd	r31, Y+20	; 0x14
    14cc:	e8 0f       	add	r30, r24
    14ce:	f1 1d       	adc	r31, r1
    14d0:	10 82       	st	Z, r1
		num_waiting_msgs--;
    14d2:	80 91 67 2a 	lds	r24, 0x2A67	; 0x802a67 <num_waiting_msgs>
    14d6:	81 50       	subi	r24, 0x01	; 1
    14d8:	80 93 67 2a 	sts	0x2A67, r24	; 0x802a67 <num_waiting_msgs>

		if(!reprogramming){
    14dc:	80 91 9c 24 	lds	r24, 0x249C	; 0x80249c <reprogramming>
    14e0:	81 11       	cpse	r24, r1
    14e2:	05 c0       	rjmp	.+10     	; 0x14ee <check_messages+0x12a>
			handle_msg_wrapper(msg_struct);
    14e4:	ce 01       	movw	r24, r28
    14e6:	01 96       	adiw	r24, 0x01	; 1
    14e8:	0e 94 03 60 	call	0xc006	; 0xc006 <handle_msg_wrapper>
    14ec:	04 c0       	rjmp	.+8      	; 0x14f6 <check_messages+0x132>
			//handle_msg(msg_struct);
		}else{
			handle_reprogramming_msg(msg_struct);
    14ee:	ce 01       	movw	r24, r28
    14f0:	01 96       	adiw	r24, 0x01	; 1
    14f2:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <handle_reprogramming_msg>
		num_waiting_msgs=MAX_USER_FACING_MESSAGES;
		user_facing_messages_ovf=0;
		printf_P(PSTR("Error: Messages overflow. Too many messages received. Try speeding up your loop if you see this a lot.\r\n"));
	}
	//if(num_waiting_msgs>0) printf("num_msgs: %hu\r\n",num_waiting_msgs);
	while(num_waiting_msgs>0)
    14f6:	80 91 67 2a 	lds	r24, 0x2A67	; 0x802a67 <num_waiting_msgs>
    14fa:	81 11       	cpse	r24, r1
    14fc:	91 cf       	rjmp	.-222    	; 0x1420 <check_messages+0x5c>
		}else{
			handle_reprogramming_msg(msg_struct);
		}
		
	}
}
    14fe:	c0 5c       	subi	r28, 0xC0	; 192
    1500:	df 4f       	sbci	r29, 0xFF	; 255
    1502:	cd bf       	out	0x3d, r28	; 61
    1504:	de bf       	out	0x3e, r29	; 62
    1506:	df 91       	pop	r29
    1508:	cf 91       	pop	r28
    150a:	1f 91       	pop	r17
    150c:	0f 91       	pop	r16
    150e:	ff 90       	pop	r15
    1510:	ef 90       	pop	r14
    1512:	df 90       	pop	r13
    1514:	cf 90       	pop	r12
    1516:	08 95       	ret

00001518 <calculate_id_number>:

void calculate_id_number()
{
    1518:	cf 93       	push	r28
    151a:	df 93       	push	r29
    151c:	cd b7       	in	r28, 0x3d	; 61
    151e:	de b7       	in	r29, 0x3e	; 62
    1520:	c0 54       	subi	r28, 0x40	; 64
    1522:	d1 09       	sbc	r29, r1
    1524:	cd bf       	out	0x3d, r28	; 61
    1526:	de bf       	out	0x3e, r29	; 62
	uint16_t crc = 0;
	
	// calculate local id
	// simply crc of user sig row
	// likely to be unique and constant for each chip
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
    1528:	82 e0       	ldi	r24, 0x02	; 2
    152a:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>

	uint32_t addrs[16] = {0x00,0x01,0x02,0x03,0x04,0x08,0x09,0x0A,0x0B,0x0C,0x0D,0x10,0x12,0x13,0x14,0x15};
    152e:	80 e4       	ldi	r24, 0x40	; 64
    1530:	e6 e5       	ldi	r30, 0x56	; 86
    1532:	f0 e2       	ldi	r31, 0x20	; 32
    1534:	de 01       	movw	r26, r28
    1536:	11 96       	adiw	r26, 0x01	; 1
    1538:	01 90       	ld	r0, Z+
    153a:	0d 92       	st	X+, r0
    153c:	8a 95       	dec	r24
    153e:	e1 f7       	brne	.-8      	; 0x1538 <calculate_id_number+0x20>
    1540:	9e 01       	movw	r18, r28
    1542:	2f 5f       	subi	r18, 0xFF	; 255
    1544:	3f 4f       	sbci	r19, 0xFF	; 255
    1546:	be 01       	movw	r22, r28
    1548:	6f 5b       	subi	r22, 0xBF	; 191
    154a:	7f 4f       	sbci	r23, 0xFF	; 255
void calculate_id_number()
{
	INIT_DEBUG_PRINT("get id number\r\n");

	uint32_t pgm_bytes = 0;
	uint16_t crc = 0;
    154c:	40 e0       	ldi	r20, 0x00	; 0
    154e:	50 e0       	ldi	r21, 0x00	; 0

	uint32_t addrs[16] = {0x00,0x01,0x02,0x03,0x04,0x08,0x09,0x0A,0x0B,0x0C,0x0D,0x10,0x12,0x13,0x14,0x15};

	for (uint8_t i = 0; i < 16; i++)			
	{
		pgm_bytes = pgm_read_word_far(addrs[i]);
    1550:	f9 01       	movw	r30, r18
    1552:	81 91       	ld	r24, Z+
    1554:	91 91       	ld	r25, Z+
    1556:	a1 91       	ld	r26, Z+
    1558:	b1 91       	ld	r27, Z+
    155a:	9f 01       	movw	r18, r30
    155c:	ab bf       	out	0x3b, r26	; 59
    155e:	fc 01       	movw	r30, r24
    1560:	87 91       	elpm	r24, Z+
    1562:	96 91       	elpm	r25, Z
_crc16_update(uint16_t __crc, uint8_t __data)
{
	uint8_t __tmp;
	uint16_t __ret;

	__asm__ __volatile__ (
    1564:	48 27       	eor	r20, r24
    1566:	84 2f       	mov	r24, r20
    1568:	82 95       	swap	r24
    156a:	84 27       	eor	r24, r20
    156c:	08 2e       	mov	r0, r24
    156e:	86 95       	lsr	r24
    1570:	86 95       	lsr	r24
    1572:	80 25       	eor	r24, r0
    1574:	08 2e       	mov	r0, r24
    1576:	86 95       	lsr	r24
    1578:	80 25       	eor	r24, r0
    157a:	87 70       	andi	r24, 0x07	; 7
    157c:	04 2e       	mov	r0, r20
    157e:	45 2f       	mov	r20, r21
    1580:	86 95       	lsr	r24
    1582:	07 94       	ror	r0
    1584:	87 95       	ror	r24
    1586:	50 2d       	mov	r21, r0
    1588:	48 27       	eor	r20, r24
    158a:	06 94       	lsr	r0
    158c:	87 95       	ror	r24
    158e:	50 25       	eor	r21, r0
    1590:	48 27       	eor	r20, r24
	// likely to be unique and constant for each chip
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;

	uint32_t addrs[16] = {0x00,0x01,0x02,0x03,0x04,0x08,0x09,0x0A,0x0B,0x0C,0x0D,0x10,0x12,0x13,0x14,0x15};

	for (uint8_t i = 0; i < 16; i++)			
    1592:	26 17       	cp	r18, r22
    1594:	37 07       	cpc	r19, r23
    1596:	09 f0       	breq	.+2      	; 0x159a <calculate_id_number+0x82>
    1598:	db cf       	rjmp	.-74     	; 0x1550 <calculate_id_number+0x38>
	{
		pgm_bytes = pgm_read_word_far(addrs[i]);
		crc = _crc16_update(crc, (uint16_t)(pgm_bytes&0xFF));
	}

	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
    159a:	10 92 ca 01 	sts	0x01CA, r1	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>

	droplet_ID = crc;
    159e:	40 93 fa 23 	sts	0x23FA, r20	; 0x8023fa <droplet_ID>
    15a2:	50 93 fb 23 	sts	0x23FB, r21	; 0x8023fb <droplet_ID+0x1>
}
    15a6:	c0 5c       	subi	r28, 0xC0	; 192
    15a8:	df 4f       	sbci	r29, 0xFF	; 255
    15aa:	cd bf       	out	0x3d, r28	; 61
    15ac:	de bf       	out	0x3e, r29	; 62
    15ae:	df 91       	pop	r29
    15b0:	cf 91       	pop	r28
    15b2:	08 95       	ret

000015b4 <enable_interrupts>:

void enable_interrupts()
{
	PMIC.CTRL |= PMIC_LOLVLEN_bm;	// enable low level interrupts
    15b4:	e0 ea       	ldi	r30, 0xA0	; 160
    15b6:	f0 e0       	ldi	r31, 0x00	; 0
    15b8:	82 81       	ldd	r24, Z+2	; 0x02
    15ba:	81 60       	ori	r24, 0x01	; 1
    15bc:	82 83       	std	Z+2, r24	; 0x02
	PMIC.CTRL |= PMIC_MEDLVLEN_bm;	// enable medium level interrupts	(e.g. TXCIF)
    15be:	82 81       	ldd	r24, Z+2	; 0x02
    15c0:	82 60       	ori	r24, 0x02	; 2
    15c2:	82 83       	std	Z+2, r24	; 0x02
	PMIC.CTRL |= PMIC_HILVLEN_bm;	// enable high level interrupts		(e.g. RTC_OVF)
    15c4:	82 81       	ldd	r24, Z+2	; 0x02
    15c6:	84 60       	ori	r24, 0x04	; 4
    15c8:	82 83       	std	Z+2, r24	; 0x02
	PMIC.CTRL |= PMIC_RREN_bm;
    15ca:	82 81       	ldd	r24, Z+2	; 0x02
    15cc:	80 68       	ori	r24, 0x80	; 128
    15ce:	82 83       	std	Z+2, r24	; 0x02
	sei();
    15d0:	78 94       	sei
    15d2:	08 95       	ret

000015d4 <startup_light_sequence>:
}

void startup_light_sequence()
{
	set_rgb(100,0,0); delay_ms(100); set_rgb(0,100,0); delay_ms(100); set_rgb(0,0,100); delay_ms(100); led_off();
    15d4:	40 e0       	ldi	r20, 0x00	; 0
    15d6:	60 e0       	ldi	r22, 0x00	; 0
    15d8:	84 e6       	ldi	r24, 0x64	; 100
    15da:	0e 94 26 37 	call	0x6e4c	; 0x6e4c <set_rgb>
    15de:	84 e6       	ldi	r24, 0x64	; 100
    15e0:	90 e0       	ldi	r25, 0x00	; 0
    15e2:	0e 94 33 3a 	call	0x7466	; 0x7466 <delay_ms>
    15e6:	40 e0       	ldi	r20, 0x00	; 0
    15e8:	64 e6       	ldi	r22, 0x64	; 100
    15ea:	80 e0       	ldi	r24, 0x00	; 0
    15ec:	0e 94 26 37 	call	0x6e4c	; 0x6e4c <set_rgb>
    15f0:	84 e6       	ldi	r24, 0x64	; 100
    15f2:	90 e0       	ldi	r25, 0x00	; 0
    15f4:	0e 94 33 3a 	call	0x7466	; 0x7466 <delay_ms>
    15f8:	44 e6       	ldi	r20, 0x64	; 100
    15fa:	60 e0       	ldi	r22, 0x00	; 0
    15fc:	80 e0       	ldi	r24, 0x00	; 0
    15fe:	0e 94 26 37 	call	0x6e4c	; 0x6e4c <set_rgb>
    1602:	84 e6       	ldi	r24, 0x64	; 100
    1604:	90 e0       	ldi	r25, 0x00	; 0
    1606:	0e 94 33 3a 	call	0x7466	; 0x7466 <delay_ms>
    160a:	0e 94 1b 37 	call	0x6e36	; 0x6e36 <led_off>
	set_rgb(100,0,0); delay_ms(100); set_rgb(0,100,0); delay_ms(100); set_rgb(0,0,100); delay_ms(100); led_off();
    160e:	40 e0       	ldi	r20, 0x00	; 0
    1610:	60 e0       	ldi	r22, 0x00	; 0
    1612:	84 e6       	ldi	r24, 0x64	; 100
    1614:	0e 94 26 37 	call	0x6e4c	; 0x6e4c <set_rgb>
    1618:	84 e6       	ldi	r24, 0x64	; 100
    161a:	90 e0       	ldi	r25, 0x00	; 0
    161c:	0e 94 33 3a 	call	0x7466	; 0x7466 <delay_ms>
    1620:	40 e0       	ldi	r20, 0x00	; 0
    1622:	64 e6       	ldi	r22, 0x64	; 100
    1624:	80 e0       	ldi	r24, 0x00	; 0
    1626:	0e 94 26 37 	call	0x6e4c	; 0x6e4c <set_rgb>
    162a:	84 e6       	ldi	r24, 0x64	; 100
    162c:	90 e0       	ldi	r25, 0x00	; 0
    162e:	0e 94 33 3a 	call	0x7466	; 0x7466 <delay_ms>
    1632:	44 e6       	ldi	r20, 0x64	; 100
    1634:	60 e0       	ldi	r22, 0x00	; 0
    1636:	80 e0       	ldi	r24, 0x00	; 0
    1638:	0e 94 26 37 	call	0x6e4c	; 0x6e4c <set_rgb>
    163c:	84 e6       	ldi	r24, 0x64	; 100
    163e:	90 e0       	ldi	r25, 0x00	; 0
    1640:	0e 94 33 3a 	call	0x7466	; 0x7466 <delay_ms>
    1644:	0e 94 1b 37 	call	0x6e36	; 0x6e36 <led_off>
	set_rgb(100,0,0); delay_ms(100); set_rgb(0,100,0); delay_ms(100); set_rgb(0,0,100); delay_ms(100); led_off();
    1648:	40 e0       	ldi	r20, 0x00	; 0
    164a:	60 e0       	ldi	r22, 0x00	; 0
    164c:	84 e6       	ldi	r24, 0x64	; 100
    164e:	0e 94 26 37 	call	0x6e4c	; 0x6e4c <set_rgb>
    1652:	84 e6       	ldi	r24, 0x64	; 100
    1654:	90 e0       	ldi	r25, 0x00	; 0
    1656:	0e 94 33 3a 	call	0x7466	; 0x7466 <delay_ms>
    165a:	40 e0       	ldi	r20, 0x00	; 0
    165c:	64 e6       	ldi	r22, 0x64	; 100
    165e:	80 e0       	ldi	r24, 0x00	; 0
    1660:	0e 94 26 37 	call	0x6e4c	; 0x6e4c <set_rgb>
    1664:	84 e6       	ldi	r24, 0x64	; 100
    1666:	90 e0       	ldi	r25, 0x00	; 0
    1668:	0e 94 33 3a 	call	0x7466	; 0x7466 <delay_ms>
    166c:	44 e6       	ldi	r20, 0x64	; 100
    166e:	60 e0       	ldi	r22, 0x00	; 0
    1670:	80 e0       	ldi	r24, 0x00	; 0
    1672:	0e 94 26 37 	call	0x6e4c	; 0x6e4c <set_rgb>
    1676:	84 e6       	ldi	r24, 0x64	; 100
    1678:	90 e0       	ldi	r25, 0x00	; 0
    167a:	0e 94 33 3a 	call	0x7466	; 0x7466 <delay_ms>
    167e:	0e 94 1b 37 	call	0x6e36	; 0x6e36 <led_off>
    1682:	08 95       	ret

00001684 <init_all_systems>:
#include "droplet_init.h"

uint16_t droplet_ID = 0;

void init_all_systems(){
	cli();
    1684:	f8 94       	cli
	Config32MHzClock();
    1686:	0e 94 0c 3a 	call	0x7418	; 0x7418 <Config32MHzClock>
	
	calculate_id_number();
    168a:	0e 94 8c 0a 	call	0x1518	; 0x1518 <calculate_id_number>
	
	scheduler_init();			INIT_DEBUG_PRINT("SCHEDULER INIT\r\n");
    168e:	0e 94 8b 3a 	call	0x7516	; 0x7516 <scheduler_init>
	pc_comm_init();				INIT_DEBUG_PRINT("PC COM INIT\r\n");
    1692:	0e 94 33 25 	call	0x4a66	; 0x4a66 <pc_comm_init>
	rgb_led_init();				INIT_DEBUG_PRINT("LED INIT\r\n");
    1696:	0e 94 fd 36 	call	0x6dfa	; 0x6dfa <rgb_led_init>
	power_init();				INIT_DEBUG_PRINT("POWER INIT\r\n");
    169a:	0e 94 45 26 	call	0x4c8a	; 0x4c8a <power_init>
	i2c_init();					INIT_DEBUG_PRINT("I2C INIT\r\n");
    169e:	0e 94 22 0e 	call	0x1c44	; 0x1c44 <i2c_init>
	
	enable_interrupts();	
    16a2:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <enable_interrupts>
	
	range_algs_init();			INIT_DEBUG_PRINT("RANGE ALGORITHMS INIT\r\n");
    16a6:	0e 94 0e 28 	call	0x501c	; 0x501c <range_algs_init>
	rgb_sensor_init();			INIT_DEBUG_PRINT("RGB SENSE INIT\r\n");
    16aa:	0e 94 7f 39 	call	0x72fe	; 0x72fe <rgb_sensor_init>
	ir_led_init();				INIT_DEBUG_PRINT("IR LED INIT\r\n");
    16ae:	0e 94 e8 1c 	call	0x39d0	; 0x39d0 <ir_led_init>
	ir_sensor_init();			INIT_DEBUG_PRINT("IR SENSE INIT\r\n");
    16b2:	0e 94 03 1f 	call	0x3e06	; 0x3e06 <ir_sensor_init>
	#ifdef AUDIO_DROPLET
		speaker_init();			INIT_DEBUG_PRINT("SPEAKER INIT\r\n");
		mic_init();				INIT_DEBUG_PRINT("MIC INIT\r\n"); //Must occur after ir_sensor_init.
	#endif
	
	motor_init();				INIT_DEBUG_PRINT("MOTOR INIT\r\n");
    16b6:	0e 94 15 24 	call	0x482a	; 0x482a <motor_init>
	random_init();				INIT_DEBUG_PRINT("RAND INIT\r\n"); //This uses adc readings for a random seed, and so requires that the adcs have been initialized.
    16ba:	0e 94 9a 27 	call	0x4f34	; 0x4f34 <random_init>
	
	#ifdef SYNCHRONIZED
		firefly_sync_init();
	#endif

	set_all_ir_powers(256);
    16be:	80 e0       	ldi	r24, 0x00	; 0
    16c0:	91 e0       	ldi	r25, 0x01	; 1
    16c2:	0e 94 99 1d 	call	0x3b32	; 0x3b32 <set_all_ir_powers>
	
	reprogramming = 0;
    16c6:	10 92 9c 24 	sts	0x249C, r1	; 0x80249c <reprogramming>
	
	startup_light_sequence();
    16ca:	0e 94 ea 0a 	call	0x15d4	; 0x15d4 <startup_light_sequence>

	ir_comm_init();				INIT_DEBUG_PRINT("IR COM INIT\r\n");
    16ce:	0e 94 e6 10 	call	0x21cc	; 0x21cc <ir_comm_init>
    16d2:	08 95       	ret

000016d4 <main>:
 }


int main()
{
	init_all_systems();
    16d4:	0e 94 42 0b 	call	0x1684	; 0x1684 <init_all_systems>
	init_wrapper();
    16d8:	0e 94 06 60 	call	0xc00c	; 0xc00c <init_wrapper>
	//init();
	addCounter = 0;
    16dc:	10 92 38 2b 	sts	0x2B38, r1	; 0x802b38 <addCounter>
	flashBufferPos = 0;
    16e0:	10 92 6f 2a 	sts	0x2A6F, r1	; 0x802a6f <flashBufferPos>
    16e4:	10 92 70 2a 	sts	0x2A70, r1	; 0x802a70 <flashBufferPos+0x1>
	pageTowrite = 1;
    16e8:	81 e0       	ldi	r24, 0x01	; 1
    16ea:	80 93 5f 2f 	sts	0x2F5F, r24	; 0x802f5f <pageTowrite>
		if(!reprogramming) loop_wrapper();
		//if(!reprogramming) loop();
		check_messages();
		if(task_list_check())
		{
			printf_P(PSTR("Error! We got ahead of the task list and now nothing will execute.\r\n"));
    16ee:	cd ef       	ldi	r28, 0xFD	; 253
    16f0:	d4 e0       	ldi	r29, 0x04	; 4
	flashBufferPos = 0;
	pageTowrite = 1;
	//init_flash_write();
	while(1)
	{
		if(!reprogramming) loop_wrapper();
    16f2:	80 91 9c 24 	lds	r24, 0x249C	; 0x80249c <reprogramming>
    16f6:	81 11       	cpse	r24, r1
    16f8:	02 c0       	rjmp	.+4      	; 0x16fe <main+0x2a>
    16fa:	0e 94 00 60 	call	0xc000	; 0xc000 <loop_wrapper>
		//if(!reprogramming) loop();
		check_messages();
    16fe:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <check_messages>
//}

//Returns '1' if the next task to run is scheduled for more than 255ms in the past. If this occurs, call task_list_cleanup.
inline uint8_t task_list_check()
{ 
	if(task_executing)	return 0;
    1702:	80 91 25 2d 	lds	r24, 0x2D25	; 0x802d25 <task_executing>
    1706:	81 11       	cpse	r24, r1
    1708:	1d c0       	rjmp	.+58     	; 0x1744 <main+0x70>
	else				return (((int32_t)(get_time()-(task_list->scheduled_time)))>3000); 
    170a:	0e 94 20 08 	call	0x1040	; 0x1040 <get_time>
    170e:	e0 91 64 2f 	lds	r30, 0x2F64	; 0x802f64 <task_list>
    1712:	f0 91 65 2f 	lds	r31, 0x2F65	; 0x802f65 <task_list+0x1>
    1716:	00 81       	ld	r16, Z
    1718:	11 81       	ldd	r17, Z+1	; 0x01
    171a:	22 81       	ldd	r18, Z+2	; 0x02
    171c:	33 81       	ldd	r19, Z+3	; 0x03
    171e:	dc 01       	movw	r26, r24
    1720:	cb 01       	movw	r24, r22
    1722:	80 1b       	sub	r24, r16
    1724:	91 0b       	sbc	r25, r17
    1726:	a2 0b       	sbc	r26, r18
    1728:	b3 0b       	sbc	r27, r19
		if(task_list_check())
    172a:	89 3b       	cpi	r24, 0xB9	; 185
    172c:	9b 40       	sbci	r25, 0x0B	; 11
    172e:	a1 05       	cpc	r26, r1
    1730:	b1 05       	cpc	r27, r1
    1732:	44 f0       	brlt	.+16     	; 0x1744 <main+0x70>
		{
			printf_P(PSTR("Error! We got ahead of the task list and now nothing will execute.\r\n"));
    1734:	df 93       	push	r29
    1736:	cf 93       	push	r28
    1738:	0e 94 f7 56 	call	0xadee	; 0xadee <printf_P>
			task_list_cleanup();
    173c:	0e 94 73 3c 	call	0x78e6	; 0x78e6 <task_list_cleanup>
    1740:	0f 90       	pop	r0
    1742:	0f 90       	pop	r0
		}
		delay_ms(1);	
    1744:	81 e0       	ldi	r24, 0x01	; 1
    1746:	90 e0       	ldi	r25, 0x00	; 0
    1748:	0e 94 33 3a 	call	0x7466	; 0x7466 <delay_ms>
	}
    174c:	d2 cf       	rjmp	.-92     	; 0x16f2 <main+0x1e>

0000174e <droplet_reboot>:
}


void droplet_reboot()
{
	CPU_CCP=CCP_IOREG_gc;
    174e:	88 ed       	ldi	r24, 0xD8	; 216
    1750:	84 bf       	out	0x34, r24	; 52
	RST.CTRL = 0x1;
    1752:	81 e0       	ldi	r24, 0x01	; 1
    1754:	80 93 79 00 	sts	0x0079, r24	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
    1758:	08 95       	ret

0000175a <wait_for_nvm>:
#endif // USE_AVR1008_EEPROM


void wait_for_nvm(void)
{
        while (NVM.STATUS & NVM_NVMBUSY_bm) { };
    175a:	e0 ec       	ldi	r30, 0xC0	; 192
    175c:	f1 e0       	ldi	r31, 0x01	; 1
    175e:	87 85       	ldd	r24, Z+15	; 0x0f
    1760:	88 23       	and	r24, r24
    1762:	ec f3       	brlt	.-6      	; 0x175e <wait_for_nvm+0x4>
}
    1764:	08 95       	ret

00001766 <flush_buffer>:

void flush_buffer(void)
{
        wait_for_nvm();
    1766:	0e 94 ad 0b 	call	0x175a	; 0x175a <wait_for_nvm>
        
        if ((NVM.STATUS & NVM_EELOAD_bm) != 0) {
    176a:	80 91 cf 01 	lds	r24, 0x01CF	; 0x8001cf <__TEXT_REGION_LENGTH__+0x7001cf>
    176e:	81 ff       	sbrs	r24, 1
    1770:	0b c0       	rjmp	.+22     	; 0x1788 <flush_buffer+0x22>
                NVM.CMD = NVM_CMD_ERASE_EEPROM_BUFFER_gc;
    1772:	86 e3       	ldi	r24, 0x36	; 54
    1774:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
// NVM call
static inline void NVM_EXEC(void)
{
        void *z = (void *)&NVM_CTRLA;
        
        __asm__ volatile("out %[ccp], %[ioreg]"  "\n\t"
    1778:	eb ec       	ldi	r30, 0xCB	; 203
    177a:	f1 e0       	ldi	r31, 0x01	; 1
    177c:	21 e0       	ldi	r18, 0x01	; 1
    177e:	30 e0       	ldi	r19, 0x00	; 0
    1780:	88 ed       	ldi	r24, 0xD8	; 216
    1782:	90 e0       	ldi	r25, 0x00	; 0
    1784:	84 bf       	out	0x34, r24	; 52
    1786:	20 83       	st	Z, r18
    1788:	08 95       	ret

0000178a <EEPROM_read_byte>:
        }
}


uint8_t EEPROM_read_byte(uint16_t addr)
{
    178a:	cf 93       	push	r28
    178c:	df 93       	push	r29
    178e:	d8 2f       	mov	r29, r24
    1790:	c9 2f       	mov	r28, r25
        wait_for_nvm();
    1792:	0e 94 ad 0b 	call	0x175a	; 0x175a <wait_for_nvm>
        
        NVM.ADDR0 = addr & 0xFF;
    1796:	a0 ec       	ldi	r26, 0xC0	; 192
    1798:	b1 e0       	ldi	r27, 0x01	; 1
    179a:	dc 93       	st	X, r29
        NVM.ADDR1 = (addr >> 8) & 0x1F;
    179c:	cf 71       	andi	r28, 0x1F	; 31
    179e:	11 96       	adiw	r26, 0x01	; 1
    17a0:	cc 93       	st	X, r28
    17a2:	11 97       	sbiw	r26, 0x01	; 1
        NVM.ADDR2 = 0;
    17a4:	12 96       	adiw	r26, 0x02	; 2
    17a6:	1c 92       	st	X, r1
    17a8:	12 97       	sbiw	r26, 0x02	; 2
        
        NVM.CMD = NVM_CMD_READ_EEPROM_gc;
    17aa:	86 e0       	ldi	r24, 0x06	; 6
    17ac:	1a 96       	adiw	r26, 0x0a	; 10
    17ae:	8c 93       	st	X, r24
    17b0:	1a 97       	sbiw	r26, 0x0a	; 10
// NVM call
static inline void NVM_EXEC(void)
{
        void *z = (void *)&NVM_CTRLA;
        
        __asm__ volatile("out %[ccp], %[ioreg]"  "\n\t"
    17b2:	eb ec       	ldi	r30, 0xCB	; 203
    17b4:	f1 e0       	ldi	r31, 0x01	; 1
    17b6:	21 e0       	ldi	r18, 0x01	; 1
    17b8:	30 e0       	ldi	r19, 0x00	; 0
    17ba:	88 ed       	ldi	r24, 0xD8	; 216
    17bc:	90 e0       	ldi	r25, 0x00	; 0
    17be:	84 bf       	out	0x34, r24	; 52
    17c0:	20 83       	st	Z, r18
        NVM.ADDR2 = 0;
        
        NVM.CMD = NVM_CMD_READ_EEPROM_gc;
        NVM_EXEC();
        
        return NVM.DATA0;
    17c2:	14 96       	adiw	r26, 0x04	; 4
    17c4:	8c 91       	ld	r24, X
}
    17c6:	df 91       	pop	r29
    17c8:	cf 91       	pop	r28
    17ca:	08 95       	ret

000017cc <EEPROM_write_byte>:


void EEPROM_write_byte(uint16_t addr, uint8_t byte)
{
    17cc:	1f 93       	push	r17
    17ce:	cf 93       	push	r28
    17d0:	df 93       	push	r29
    17d2:	18 2f       	mov	r17, r24
    17d4:	c9 2f       	mov	r28, r25
    17d6:	d6 2f       	mov	r29, r22
        flush_buffer();
    17d8:	0e 94 b3 0b 	call	0x1766	; 0x1766 <flush_buffer>
        NVM.CMD = NVM_CMD_LOAD_EEPROM_BUFFER_gc;
    17dc:	e0 ec       	ldi	r30, 0xC0	; 192
    17de:	f1 e0       	ldi	r31, 0x01	; 1
    17e0:	83 e3       	ldi	r24, 0x33	; 51
    17e2:	82 87       	std	Z+10, r24	; 0x0a
        
        NVM.ADDR0 = addr & 0xFF;
    17e4:	10 83       	st	Z, r17
        NVM.ADDR1 = (addr >> 8) & 0x1F;
    17e6:	cf 71       	andi	r28, 0x1F	; 31
    17e8:	c1 83       	std	Z+1, r28	; 0x01
        NVM.ADDR2 = 0;
    17ea:	12 82       	std	Z+2, r1	; 0x02
        
        NVM.DATA0 = byte;
    17ec:	d4 83       	std	Z+4, r29	; 0x04
        
        NVM.CMD = NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc;
    17ee:	85 e3       	ldi	r24, 0x35	; 53
    17f0:	82 87       	std	Z+10, r24	; 0x0a
// NVM call
static inline void NVM_EXEC(void)
{
        void *z = (void *)&NVM_CTRLA;
        
        __asm__ volatile("out %[ccp], %[ioreg]"  "\n\t"
    17f2:	eb ec       	ldi	r30, 0xCB	; 203
    17f4:	f1 e0       	ldi	r31, 0x01	; 1
    17f6:	21 e0       	ldi	r18, 0x01	; 1
    17f8:	30 e0       	ldi	r19, 0x00	; 0
    17fa:	88 ed       	ldi	r24, 0xD8	; 216
    17fc:	90 e0       	ldi	r25, 0x00	; 0
    17fe:	84 bf       	out	0x34, r24	; 52
    1800:	20 83       	st	Z, r18
        
        NVM.DATA0 = byte;
        
        NVM.CMD = NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc;
        NVM_EXEC_WRAPPER();
}
    1802:	df 91       	pop	r29
    1804:	cf 91       	pop	r28
    1806:	1f 91       	pop	r17
    1808:	08 95       	ret

0000180a <processObsQueue>:
		TCE0.CCB = 0;
	
	obsStart = malloc(sizeof(obsQueue));
	obsStart->obs = 0;
	obsStart->next = obsStart;
	obsStart->prev = obsStart;
    180a:	bf 92       	push	r11
    180c:	cf 92       	push	r12
    180e:	df 92       	push	r13
    1810:	ef 92       	push	r14
    1812:	ff 92       	push	r15
    1814:	0f 93       	push	r16
    1816:	1f 93       	push	r17
    1818:	cf 93       	push	r28
    181a:	df 93       	push	r29
    181c:	e0 91 b5 2a 	lds	r30, 0x2AB5	; 0x802ab5 <obsStart>
    1820:	f0 91 b6 2a 	lds	r31, 0x2AB6	; 0x802ab6 <obsStart+0x1>
    1824:	c2 81       	ldd	r28, Z+2	; 0x02
    1826:	d3 81       	ldd	r29, Z+3	; 0x03
    1828:	ec 17       	cp	r30, r28
    182a:	fd 07       	cpc	r31, r29
    182c:	69 f1       	breq	.+90     	; 0x1888 <processObsQueue+0x7e>
    182e:	c1 2c       	mov	r12, r1
    1830:	d1 2c       	mov	r13, r1
    1832:	76 01       	movw	r14, r12
    1834:	88 81       	ld	r24, Y
    1836:	99 81       	ldd	r25, Y+1	; 0x01
    1838:	bc 01       	movw	r22, r24
    183a:	80 e0       	ldi	r24, 0x00	; 0
    183c:	90 e0       	ldi	r25, 0x00	; 0
    183e:	0e 94 65 4a 	call	0x94ca	; 0x94ca <__floatunsisf>
    1842:	a7 01       	movw	r20, r14
    1844:	96 01       	movw	r18, r12
    1846:	0e 94 bd 48 	call	0x917a	; 0x917a <__subsf3>
    184a:	20 e0       	ldi	r18, 0x00	; 0
    184c:	30 e0       	ldi	r19, 0x00	; 0
    184e:	40 e7       	ldi	r20, 0x70	; 112
    1850:	52 e4       	ldi	r21, 0x42	; 66
    1852:	0e 94 bd 49 	call	0x937a	; 0x937a <__divsf3>
    1856:	9b 01       	movw	r18, r22
    1858:	ac 01       	movw	r20, r24
    185a:	c7 01       	movw	r24, r14
    185c:	b6 01       	movw	r22, r12
    185e:	0e 94 be 48 	call	0x917c	; 0x917c <__addsf3>
    1862:	6b 01       	movw	r12, r22
    1864:	7c 01       	movw	r14, r24
    1866:	0a 81       	ldd	r16, Y+2	; 0x02
    1868:	1b 81       	ldd	r17, Y+3	; 0x03
    186a:	bf b6       	in	r11, 0x3f	; 63
    186c:	f8 94       	cli
    186e:	ce 01       	movw	r24, r28
    1870:	0e 94 57 53 	call	0xa6ae	; 0xa6ae <free>
    1874:	bf be       	out	0x3f, r11	; 63
    1876:	e8 01       	movw	r28, r16
    1878:	80 91 b5 2a 	lds	r24, 0x2AB5	; 0x802ab5 <obsStart>
    187c:	90 91 b6 2a 	lds	r25, 0x2AB6	; 0x802ab6 <obsStart+0x1>
    1880:	80 17       	cp	r24, r16
    1882:	91 07       	cpc	r25, r17
    1884:	b9 f6       	brne	.-82     	; 0x1834 <processObsQueue+0x2a>
    1886:	04 c0       	rjmp	.+8      	; 0x1890 <processObsQueue+0x86>
    1888:	8e 01       	movw	r16, r28
    188a:	c1 2c       	mov	r12, r1
    188c:	d1 2c       	mov	r13, r1
    188e:	76 01       	movw	r14, r12
    1890:	f8 01       	movw	r30, r16
    1892:	02 83       	std	Z+2, r16	; 0x02
    1894:	13 83       	std	Z+3, r17	; 0x03
    1896:	04 83       	std	Z+4, r16	; 0x04
    1898:	15 83       	std	Z+5, r17	; 0x05
    189a:	e0 e0       	ldi	r30, 0x00	; 0
    189c:	fa e0       	ldi	r31, 0x0A	; 10
    189e:	c0 a1       	ldd	r28, Z+32	; 0x20
    18a0:	d1 a1       	ldd	r29, Z+33	; 0x21
    18a2:	82 a5       	ldd	r24, Z+42	; 0x2a
    18a4:	93 a5       	ldd	r25, Z+43	; 0x2b
    18a6:	c8 17       	cp	r28, r24
    18a8:	d9 07       	cpc	r29, r25
    18aa:	a8 f4       	brcc	.+42     	; 0x18d6 <processObsQueue+0xcc>
    18ac:	00 91 2a 0a 	lds	r16, 0x0A2A	; 0x800a2a <__TEXT_REGION_LENGTH__+0x700a2a>
    18b0:	10 91 2b 0a 	lds	r17, 0x0A2B	; 0x800a2b <__TEXT_REGION_LENGTH__+0x700a2b>
    18b4:	c7 01       	movw	r24, r14
    18b6:	b6 01       	movw	r22, r12
    18b8:	0e 94 36 4a 	call	0x946c	; 0x946c <__fixunssfsi>
    18bc:	6c 0f       	add	r22, r28
    18be:	7d 1f       	adc	r23, r29
    18c0:	06 17       	cp	r16, r22
    18c2:	17 07       	cpc	r17, r23
    18c4:	40 f4       	brcc	.+16     	; 0x18d6 <processObsQueue+0xcc>
    18c6:	40 91 5b 2a 	lds	r20, 0x2A5B	; 0x802a5b <ffsync_blink_prev_b>
    18ca:	60 91 5e 2f 	lds	r22, 0x2F5E	; 0x802f5e <ffsync_blink_prev_g>
    18ce:	80 91 68 2a 	lds	r24, 0x2A68	; 0x802a68 <ffsync_blink_prev_r>
    18d2:	0e 94 26 37 	call	0x6e4c	; 0x6e4c <set_rgb>
    18d6:	c7 01       	movw	r24, r14
    18d8:	b6 01       	movw	r22, r12
    18da:	0e 94 36 4a 	call	0x946c	; 0x946c <__fixunssfsi>
    18de:	c6 0f       	add	r28, r22
    18e0:	d7 1f       	adc	r29, r23
    18e2:	c1 34       	cpi	r28, 0x41	; 65
    18e4:	fd e9       	ldi	r31, 0x9D	; 157
    18e6:	df 07       	cpc	r29, r31
    18e8:	38 f0       	brcs	.+14     	; 0x18f8 <processObsQueue+0xee>
    18ea:	80 e4       	ldi	r24, 0x40	; 64
    18ec:	9d e9       	ldi	r25, 0x9D	; 157
    18ee:	80 93 20 0a 	sts	0x0A20, r24	; 0x800a20 <__TEXT_REGION_LENGTH__+0x700a20>
    18f2:	90 93 21 0a 	sts	0x0A21, r25	; 0x800a21 <__TEXT_REGION_LENGTH__+0x700a21>
    18f6:	04 c0       	rjmp	.+8      	; 0x1900 <processObsQueue+0xf6>
    18f8:	c0 93 20 0a 	sts	0x0A20, r28	; 0x800a20 <__TEXT_REGION_LENGTH__+0x700a20>
    18fc:	d0 93 21 0a 	sts	0x0A21, r29	; 0x800a21 <__TEXT_REGION_LENGTH__+0x700a21>
    1900:	df 91       	pop	r29
    1902:	cf 91       	pop	r28
    1904:	1f 91       	pop	r17
    1906:	0f 91       	pop	r16
    1908:	ff 90       	pop	r15
    190a:	ef 90       	pop	r14
    190c:	df 90       	pop	r13
    190e:	cf 90       	pop	r12
    1910:	bf 90       	pop	r11
    1912:	08 95       	ret

00001914 <sendPing>:
    1914:	9c 01       	movw	r18, r24
    1916:	40 e4       	ldi	r20, 0x40	; 64
    1918:	60 e0       	ldi	r22, 0x00	; 0
    191a:	70 e0       	ldi	r23, 0x00	; 0
    191c:	8f e3       	ldi	r24, 0x3F	; 63
    191e:	0e 94 79 12 	call	0x24f2	; 0x24f2 <hp_ir_targeted_cmd>
    1922:	20 e0       	ldi	r18, 0x00	; 0
    1924:	30 e0       	ldi	r19, 0x00	; 0
    1926:	45 e0       	ldi	r20, 0x05	; 5
    1928:	5c e0       	ldi	r21, 0x0C	; 12
    192a:	68 ec       	ldi	r22, 0xC8	; 200
    192c:	70 e0       	ldi	r23, 0x00	; 0
    192e:	80 e0       	ldi	r24, 0x00	; 0
    1930:	90 e0       	ldi	r25, 0x00	; 0
    1932:	0e 94 2a 3d 	call	0x7a54	; 0x7a54 <schedule_task>
    1936:	08 95       	ret

00001938 <__vector_49>:
    1938:	1f 92       	push	r1
    193a:	0f 92       	push	r0
    193c:	0f b6       	in	r0, 0x3f	; 63
    193e:	0f 92       	push	r0
    1940:	11 24       	eor	r1, r1
    1942:	0b b6       	in	r0, 0x3b	; 59
    1944:	0f 92       	push	r0
    1946:	2f 93       	push	r18
    1948:	3f 93       	push	r19
    194a:	4f 93       	push	r20
    194c:	5f 93       	push	r21
    194e:	6f 93       	push	r22
    1950:	7f 93       	push	r23
    1952:	8f 93       	push	r24
    1954:	9f 93       	push	r25
    1956:	af 93       	push	r26
    1958:	bf 93       	push	r27
    195a:	ef 93       	push	r30
    195c:	ff 93       	push	r31
    195e:	e0 e4       	ldi	r30, 0x40	; 64
    1960:	fa e0       	ldi	r31, 0x0A	; 10
    1962:	82 ad       	ldd	r24, Z+58	; 0x3a
    1964:	93 ad       	ldd	r25, Z+59	; 0x3b
    1966:	80 93 68 2a 	sts	0x2A68, r24	; 0x802a68 <ffsync_blink_prev_r>
    196a:	80 ad       	ldd	r24, Z+56	; 0x38
    196c:	91 ad       	ldd	r25, Z+57	; 0x39
    196e:	80 93 5e 2f 	sts	0x2F5E, r24	; 0x802f5e <ffsync_blink_prev_g>
    1972:	80 91 78 09 	lds	r24, 0x0978	; 0x800978 <__TEXT_REGION_LENGTH__+0x700978>
    1976:	90 91 79 09 	lds	r25, 0x0979	; 0x800979 <__TEXT_REGION_LENGTH__+0x700979>
    197a:	80 93 5b 2a 	sts	0x2A5B, r24	; 0x802a5b <ffsync_blink_prev_b>
    197e:	40 91 8e 24 	lds	r20, 0x248E	; 0x80248e <ffsync_blink_b>
    1982:	60 91 6e 2a 	lds	r22, 0x2A6E	; 0x802a6e <ffsync_blink_g>
    1986:	80 91 64 2a 	lds	r24, 0x2A64	; 0x802a64 <ffsync_blink_r>
    198a:	0e 94 26 37 	call	0x6e4c	; 0x6e4c <set_rgb>
    198e:	ff 91       	pop	r31
    1990:	ef 91       	pop	r30
    1992:	bf 91       	pop	r27
    1994:	af 91       	pop	r26
    1996:	9f 91       	pop	r25
    1998:	8f 91       	pop	r24
    199a:	7f 91       	pop	r23
    199c:	6f 91       	pop	r22
    199e:	5f 91       	pop	r21
    19a0:	4f 91       	pop	r20
    19a2:	3f 91       	pop	r19
    19a4:	2f 91       	pop	r18
    19a6:	0f 90       	pop	r0
    19a8:	0b be       	out	0x3b, r0	; 59
    19aa:	0f 90       	pop	r0
    19ac:	0f be       	out	0x3f, r0	; 63
    19ae:	0f 90       	pop	r0
    19b0:	1f 90       	pop	r1
    19b2:	18 95       	reti

000019b4 <__vector_50>:
    19b4:	1f 92       	push	r1
    19b6:	0f 92       	push	r0
    19b8:	0f b6       	in	r0, 0x3f	; 63
    19ba:	0f 92       	push	r0
    19bc:	11 24       	eor	r1, r1
    19be:	0b b6       	in	r0, 0x3b	; 59
    19c0:	0f 92       	push	r0
    19c2:	2f 93       	push	r18
    19c4:	3f 93       	push	r19
    19c6:	4f 93       	push	r20
    19c8:	5f 93       	push	r21
    19ca:	6f 93       	push	r22
    19cc:	7f 93       	push	r23
    19ce:	8f 93       	push	r24
    19d0:	9f 93       	push	r25
    19d2:	af 93       	push	r26
    19d4:	bf 93       	push	r27
    19d6:	ef 93       	push	r30
    19d8:	ff 93       	push	r31
    19da:	40 91 5b 2a 	lds	r20, 0x2A5B	; 0x802a5b <ffsync_blink_prev_b>
    19de:	60 91 5e 2f 	lds	r22, 0x2F5E	; 0x802f5e <ffsync_blink_prev_g>
    19e2:	80 91 68 2a 	lds	r24, 0x2A68	; 0x802a68 <ffsync_blink_prev_r>
    19e6:	0e 94 26 37 	call	0x6e4c	; 0x6e4c <set_rgb>
    19ea:	ff 91       	pop	r31
    19ec:	ef 91       	pop	r30
    19ee:	bf 91       	pop	r27
    19f0:	af 91       	pop	r26
    19f2:	9f 91       	pop	r25
    19f4:	8f 91       	pop	r24
    19f6:	7f 91       	pop	r23
    19f8:	6f 91       	pop	r22
    19fa:	5f 91       	pop	r21
    19fc:	4f 91       	pop	r20
    19fe:	3f 91       	pop	r19
    1a00:	2f 91       	pop	r18
    1a02:	0f 90       	pop	r0
    1a04:	0b be       	out	0x3b, r0	; 59
    1a06:	0f 90       	pop	r0
    1a08:	0f be       	out	0x3f, r0	; 63
    1a0a:	0f 90       	pop	r0
    1a0c:	1f 90       	pop	r1
    1a0e:	18 95       	reti

00001a10 <updateRTC>:
	}else{
		TCE0.CNT = theCount+(uint16_t)newStart;
	}
}

void updateRTC(){
    1a10:	8f 92       	push	r8
    1a12:	9f 92       	push	r9
    1a14:	af 92       	push	r10
    1a16:	bf 92       	push	r11
    1a18:	cf 92       	push	r12
    1a1a:	df 92       	push	r13
    1a1c:	ef 92       	push	r14
    1a1e:	ff 92       	push	r15
    1a20:	0f 93       	push	r16
    1a22:	1f 93       	push	r17
    1a24:	cf 93       	push	r28
	int16_t change;
	int16_t remainder;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    1a26:	cf b7       	in	r28, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1a28:	f8 94       	cli
	{
		uint32_t currTime = get_time();
    1a2a:	0e 94 20 08 	call	0x1040	; 0x1040 <get_time>
    1a2e:	6b 01       	movw	r12, r22
    1a30:	7c 01       	movw	r14, r24
		uint16_t theCount = currTime&0xFFFF;		
		remainder = (int16_t)(currTime%FFSYNC_FULL_PERIOD_MS);
    1a32:	21 e2       	ldi	r18, 0x21	; 33
    1a34:	34 e1       	ldi	r19, 0x14	; 20
    1a36:	40 e0       	ldi	r20, 0x00	; 0
    1a38:	50 e0       	ldi	r21, 0x00	; 0
    1a3a:	0e 94 7a 52 	call	0xa4f4	; 0xa4f4 <__udivmodsi4>
		//printf("%u.\r\n", remainder);
	
		if(remainder>(FFSYNC_FULL_PERIOD_MS/2)){
    1a3e:	61 31       	cpi	r22, 0x11	; 17
    1a40:	2a e0       	ldi	r18, 0x0A	; 10
    1a42:	72 07       	cpc	r23, r18
    1a44:	bc f0       	brlt	.+46     	; 0x1a74 <updateRTC+0x64>
			change = FFSYNC_FULL_PERIOD_MS-remainder;
    1a46:	21 e2       	ldi	r18, 0x21	; 33
    1a48:	34 e1       	ldi	r19, 0x14	; 20
    1a4a:	26 1b       	sub	r18, r22
    1a4c:	37 0b       	sbc	r19, r23
			if((RTC.PER-change)<theCount) rtc_epoch++;			//0xFFFF: RTC.PER
    1a4e:	80 91 0a 04 	lds	r24, 0x040A	; 0x80040a <__TEXT_REGION_LENGTH__+0x70040a>
    1a52:	90 91 0b 04 	lds	r25, 0x040B	; 0x80040b <__TEXT_REGION_LENGTH__+0x70040b>
    1a56:	82 1b       	sub	r24, r18
    1a58:	93 0b       	sbc	r25, r19
    1a5a:	8c 15       	cp	r24, r12
    1a5c:	9d 05       	cpc	r25, r13
    1a5e:	d0 f4       	brcc	.+52     	; 0x1a94 <updateRTC+0x84>
    1a60:	80 91 92 24 	lds	r24, 0x2492	; 0x802492 <rtc_epoch>
    1a64:	90 91 93 24 	lds	r25, 0x2493	; 0x802493 <rtc_epoch+0x1>
    1a68:	01 96       	adiw	r24, 0x01	; 1
    1a6a:	80 93 92 24 	sts	0x2492, r24	; 0x802492 <rtc_epoch>
    1a6e:	90 93 93 24 	sts	0x2493, r25	; 0x802493 <rtc_epoch+0x1>
    1a72:	10 c0       	rjmp	.+32     	; 0x1a94 <updateRTC+0x84>
		}else{
			change = -remainder;
    1a74:	22 27       	eor	r18, r18
    1a76:	33 27       	eor	r19, r19
    1a78:	26 1b       	sub	r18, r22
    1a7a:	37 0b       	sbc	r19, r23
			if(theCount<remainder) rtc_epoch--;
    1a7c:	c6 16       	cp	r12, r22
    1a7e:	d7 06       	cpc	r13, r23
    1a80:	48 f4       	brcc	.+18     	; 0x1a94 <updateRTC+0x84>
    1a82:	80 91 92 24 	lds	r24, 0x2492	; 0x802492 <rtc_epoch>
    1a86:	90 91 93 24 	lds	r25, 0x2493	; 0x802493 <rtc_epoch+0x1>
    1a8a:	01 97       	sbiw	r24, 0x01	; 1
    1a8c:	80 93 92 24 	sts	0x2492, r24	; 0x802492 <rtc_epoch>
    1a90:	90 93 93 24 	sts	0x2493, r25	; 0x802493 <rtc_epoch+0x1>
		}
		while(RTC.STATUS & RTC_SYNCBUSY_bm);
    1a94:	e0 e0       	ldi	r30, 0x00	; 0
    1a96:	f4 e0       	ldi	r31, 0x04	; 4
    1a98:	81 81       	ldd	r24, Z+1	; 0x01
    1a9a:	80 fd       	sbrc	r24, 0
    1a9c:	fd cf       	rjmp	.-6      	; 0x1a98 <updateRTC+0x88>
		RTC.CNT =  (theCount+change);
    1a9e:	a9 01       	movw	r20, r18
    1aa0:	c2 0e       	add	r12, r18
    1aa2:	d3 1e       	adc	r13, r19
    1aa4:	e0 e0       	ldi	r30, 0x00	; 0
    1aa6:	f4 e0       	ldi	r31, 0x04	; 4
    1aa8:	c0 86       	std	Z+8, r12	; 0x08
    1aaa:	d1 86       	std	Z+9, r13	; 0x09
		RTC.COMP = (RTC.COMP+change);
    1aac:	84 85       	ldd	r24, Z+12	; 0x0c
    1aae:	95 85       	ldd	r25, Z+13	; 0x0d
    1ab0:	82 0f       	add	r24, r18
    1ab2:	93 1f       	adc	r25, r19
    1ab4:	84 87       	std	Z+12, r24	; 0x0c
    1ab6:	95 87       	std	Z+13, r25	; 0x0d
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1ab8:	cf bf       	out	0x3f, r28	; 63
	 * If change is quite large, then probably we're still getting sync'd - so no implications about the RTC clock.
	 * If it's smallish, though, the code below adjusts the factory-set calibration value to minimize this difference.
	 * (From observations, changing the calibration by one seemed to effect the change by about 10ms, so if we're within
	 * 11ms, we won't get any better.)
	 */
	if(abs(change)<(FFSYNC_MAX_DEVIATION*5)){
    1aba:	c9 01       	movw	r24, r18
    1abc:	33 23       	and	r19, r19
    1abe:	24 f4       	brge	.+8      	; 0x1ac8 <updateRTC+0xb8>
    1ac0:	88 27       	eor	r24, r24
    1ac2:	99 27       	eor	r25, r25
    1ac4:	82 1b       	sub	r24, r18
    1ac6:	93 0b       	sbc	r25, r19
    1ac8:	81 39       	cpi	r24, 0x91	; 145
    1aca:	91 05       	cpc	r25, r1
    1acc:	88 f4       	brcc	.+34     	; 0x1af0 <updateRTC+0xe0>
		if(change>0) OSC.RC32KCAL++;
    1ace:	12 16       	cp	r1, r18
    1ad0:	13 06       	cpc	r1, r19
    1ad2:	34 f4       	brge	.+12     	; 0x1ae0 <updateRTC+0xd0>
    1ad4:	e0 e5       	ldi	r30, 0x50	; 80
    1ad6:	f0 e0       	ldi	r31, 0x00	; 0
    1ad8:	84 81       	ldd	r24, Z+4	; 0x04
    1ada:	8f 5f       	subi	r24, 0xFF	; 255
    1adc:	84 83       	std	Z+4, r24	; 0x04
    1ade:	08 c0       	rjmp	.+16     	; 0x1af0 <updateRTC+0xe0>
		else if(change<-FFSYNC_MAX_DEVIATION) OSC.RC32KCAL--;
    1ae0:	43 3e       	cpi	r20, 0xE3	; 227
    1ae2:	5f 4f       	sbci	r21, 0xFF	; 255
    1ae4:	28 f4       	brcc	.+10     	; 0x1af0 <updateRTC+0xe0>
    1ae6:	e0 e5       	ldi	r30, 0x50	; 80
    1ae8:	f0 e0       	ldi	r31, 0x00	; 0
    1aea:	84 81       	ldd	r24, Z+4	; 0x04
    1aec:	81 50       	subi	r24, 0x01	; 1
    1aee:	84 83       	std	Z+4, r24	; 0x04
	}
	//printf("\t\t%d\r\n",change);
}
    1af0:	cf 91       	pop	r28
    1af2:	1f 91       	pop	r17
    1af4:	0f 91       	pop	r16
    1af6:	ff 90       	pop	r15
    1af8:	ef 90       	pop	r14
    1afa:	df 90       	pop	r13
    1afc:	cf 90       	pop	r12
    1afe:	bf 90       	pop	r11
    1b00:	af 90       	pop	r10
    1b02:	9f 90       	pop	r9
    1b04:	8f 90       	pop	r8
    1b06:	08 95       	ret

00001b08 <__vector_47>:
	obsStart->obs = 0;
	obsStart->next = obsStart;
	obsStart->prev = obsStart;
}

ISR(TCE0_OVF_vect){
    1b08:	1f 92       	push	r1
    1b0a:	0f 92       	push	r0
    1b0c:	0f b6       	in	r0, 0x3f	; 63
    1b0e:	0f 92       	push	r0
    1b10:	11 24       	eor	r1, r1
    1b12:	0b b6       	in	r0, 0x3b	; 59
    1b14:	0f 92       	push	r0
    1b16:	cf 92       	push	r12
    1b18:	df 92       	push	r13
    1b1a:	ef 92       	push	r14
    1b1c:	ff 92       	push	r15
    1b1e:	2f 93       	push	r18
    1b20:	3f 93       	push	r19
    1b22:	4f 93       	push	r20
    1b24:	5f 93       	push	r21
    1b26:	6f 93       	push	r22
    1b28:	7f 93       	push	r23
    1b2a:	8f 93       	push	r24
    1b2c:	9f 93       	push	r25
    1b2e:	af 93       	push	r26
    1b30:	bf 93       	push	r27
    1b32:	ef 93       	push	r30
    1b34:	ff 93       	push	r31
	schedule_task(rand_short()%FFSYNC_D, sendPing, (void*)((uint16_t)(get_time()&0xFFFF)));
    1b36:	0e 94 20 08 	call	0x1040	; 0x1040 <get_time>
    1b3a:	6b 01       	movw	r12, r22
    1b3c:	7c 01       	movw	r14, r24
    1b3e:	0e 94 ff 27 	call	0x4ffe	; 0x4ffe <rand_short>
    1b42:	ac 01       	movw	r20, r24
    1b44:	9c 01       	movw	r18, r24
    1b46:	ad ec       	ldi	r26, 0xCD	; 205
    1b48:	bc ec       	ldi	r27, 0xCC	; 204
    1b4a:	0e 94 ac 52 	call	0xa558	; 0xa558 <__umulhisi3>
    1b4e:	88 0f       	add	r24, r24
    1b50:	89 2f       	mov	r24, r25
    1b52:	88 1f       	adc	r24, r24
    1b54:	99 0b       	sbc	r25, r25
    1b56:	91 95       	neg	r25
    1b58:	60 ea       	ldi	r22, 0xA0	; 160
    1b5a:	68 9f       	mul	r22, r24
    1b5c:	90 01       	movw	r18, r0
    1b5e:	69 9f       	mul	r22, r25
    1b60:	30 0d       	add	r19, r0
    1b62:	11 24       	eor	r1, r1
    1b64:	ca 01       	movw	r24, r20
    1b66:	82 1b       	sub	r24, r18
    1b68:	93 0b       	sbc	r25, r19
    1b6a:	bc 01       	movw	r22, r24
    1b6c:	80 e0       	ldi	r24, 0x00	; 0
    1b6e:	90 e0       	ldi	r25, 0x00	; 0
    1b70:	96 01       	movw	r18, r12
    1b72:	4a e8       	ldi	r20, 0x8A	; 138
    1b74:	5c e0       	ldi	r21, 0x0C	; 12
    1b76:	0e 94 2a 3d 	call	0x7a54	; 0x7a54 <schedule_task>
	//sendPing( (void*)((uint16_t)(get_time()&0xFFFF)));
	updateRTC();
    1b7a:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <updateRTC>
	//printf("ovf @ %lu\r\n",get_time());
}
    1b7e:	ff 91       	pop	r31
    1b80:	ef 91       	pop	r30
    1b82:	bf 91       	pop	r27
    1b84:	af 91       	pop	r26
    1b86:	9f 91       	pop	r25
    1b88:	8f 91       	pop	r24
    1b8a:	7f 91       	pop	r23
    1b8c:	6f 91       	pop	r22
    1b8e:	5f 91       	pop	r21
    1b90:	4f 91       	pop	r20
    1b92:	3f 91       	pop	r19
    1b94:	2f 91       	pop	r18
    1b96:	ff 90       	pop	r15
    1b98:	ef 90       	pop	r14
    1b9a:	df 90       	pop	r13
    1b9c:	cf 90       	pop	r12
    1b9e:	0f 90       	pop	r0
    1ba0:	0b be       	out	0x3b, r0	; 59
    1ba2:	0f 90       	pop	r0
    1ba4:	0f be       	out	0x3f, r0	; 63
    1ba6:	0f 90       	pop	r0
    1ba8:	1f 90       	pop	r1
    1baa:	18 95       	reti

00001bac <writeRead>:

/*! \brief Example to show how to read and write to the flash.
 */

void writeRead(uint8_t* WriteBuffer, uint32_t pageNumber) 
{
    1bac:	cf 92       	push	r12
    1bae:	df 92       	push	r13
    1bb0:	ef 92       	push	r14
    1bb2:	ff 92       	push	r15
    1bb4:	6a 01       	movw	r12, r20
    1bb6:	7b 01       	movw	r14, r22
	
		///* Load the flashbuffer with the test buffer. */
		/* Calculate actual start address of the page.*/
		uint32_t tableAddress = (pageNumber * FLASH_PAGE_SIZE);
		
		SP_LoadFlashPage(WriteBuffer);
    1bb8:	0f 94 00 00 	call	0x20000	; 0x20000 <SP_LoadFlashPage>
		SP_WaitForSPM();
    1bbc:	0e 94 a4 08 	call	0x1148	; 0x1148 <SP_WaitForSPM>
{
	
	
		///* Load the flashbuffer with the test buffer. */
		/* Calculate actual start address of the page.*/
		uint32_t tableAddress = (pageNumber * FLASH_PAGE_SIZE);
    1bc0:	c7 01       	movw	r24, r14
    1bc2:	b6 01       	movw	r22, r12
    1bc4:	05 2e       	mov	r0, r21
    1bc6:	59 e0       	ldi	r21, 0x09	; 9
    1bc8:	66 0f       	add	r22, r22
    1bca:	77 1f       	adc	r23, r23
    1bcc:	88 1f       	adc	r24, r24
    1bce:	99 1f       	adc	r25, r25
    1bd0:	5a 95       	dec	r21
    1bd2:	d1 f7       	brne	.-12     	; 0x1bc8 <writeRead+0x1c>
    1bd4:	50 2d       	mov	r21, r0
		
		SP_LoadFlashPage(WriteBuffer);
		SP_WaitForSPM();
		
		SP_EraseWriteApplicationPage(tableAddress);
    1bd6:	0e 94 7d 08 	call	0x10fa	; 0x10fa <SP_EraseWriteApplicationPage>
		NVM.CMD = NVM_CMD_ERASE_WRITE_APP_PAGE_gc;
    1bda:	e0 ec       	ldi	r30, 0xC0	; 192
    1bdc:	f1 e0       	ldi	r31, 0x01	; 1
    1bde:	85 e2       	ldi	r24, 0x25	; 37
    1be0:	82 87       	std	Z+10, r24	; 0x0a
		NVM_EXEC();
    1be2:	ef 93       	push	r30
    1be4:	ff 93       	push	r31
    1be6:	0f 93       	push	r16
    1be8:	2f 93       	push	r18
    1bea:	eb ec       	ldi	r30, 0xCB	; 203
    1bec:	f1 e0       	ldi	r31, 0x01	; 1
    1bee:	08 ed       	ldi	r16, 0xD8	; 216
    1bf0:	21 e0       	ldi	r18, 0x01	; 1
    1bf2:	04 bf       	out	0x34, r16	; 52
    1bf4:	20 83       	st	Z, r18
    1bf6:	2f 91       	pop	r18
    1bf8:	0f 91       	pop	r16
    1bfa:	ff 91       	pop	r31
    1bfc:	ef 91       	pop	r30
		NVM.CMD = NVM_CMD_NO_OPERATION_gc;
    1bfe:	12 86       	std	Z+10, r1	; 0x0a

}
    1c00:	ff 90       	pop	r15
    1c02:	ef 90       	pop	r14
    1c04:	df 90       	pop	r13
    1c06:	cf 90       	pop	r12
    1c08:	08 95       	ret

00001c0a <TWI_MasterInit>:
uint8_t TWI_MasterRead(uint8_t address,
                    uint8_t bytesToRead)
{
	uint8_t twi_status = TWI_MasterWriteRead(address, 0, 0, bytesToRead);
	return twi_status;
}
    1c0a:	e0 91 68 2f 	lds	r30, 0x2F68	; 0x802f68 <twi>
    1c0e:	f0 91 69 2f 	lds	r31, 0x2F69	; 0x802f69 <twi+0x1>
    1c12:	80 83       	st	Z, r24
    1c14:	91 83       	std	Z+1, r25	; 0x01
    1c16:	e0 91 68 2f 	lds	r30, 0x2F68	; 0x802f68 <twi>
    1c1a:	f0 91 69 2f 	lds	r31, 0x2F69	; 0x802f69 <twi+0x1>
    1c1e:	01 90       	ld	r0, Z+
    1c20:	f0 81       	ld	r31, Z
    1c22:	e0 2d       	mov	r30, r0
    1c24:	68 63       	ori	r22, 0x38	; 56
    1c26:	61 83       	std	Z+1, r22	; 0x01
    1c28:	e0 91 68 2f 	lds	r30, 0x2F68	; 0x802f68 <twi>
    1c2c:	f0 91 69 2f 	lds	r31, 0x2F69	; 0x802f69 <twi+0x1>
    1c30:	a0 81       	ld	r26, Z
    1c32:	b1 81       	ldd	r27, Z+1	; 0x01
    1c34:	15 96       	adiw	r26, 0x05	; 5
    1c36:	4c 93       	st	X, r20
    1c38:	01 90       	ld	r0, Z+
    1c3a:	f0 81       	ld	r31, Z
    1c3c:	e0 2d       	mov	r30, r0
    1c3e:	81 e0       	ldi	r24, 0x01	; 1
    1c40:	84 83       	std	Z+4, r24	; 0x04
    1c42:	08 95       	ret

00001c44 <i2c_init>:
    1c44:	e0 e2       	ldi	r30, 0x20	; 32
    1c46:	f6 e0       	ldi	r31, 0x06	; 6
    1c48:	80 e2       	ldi	r24, 0x20	; 32
    1c4a:	82 83       	std	Z+2, r24	; 0x02
    1c4c:	85 8b       	std	Z+21, r24	; 0x15
    1c4e:	83 e0       	ldi	r24, 0x03	; 3
    1c50:	80 93 81 06 	sts	0x0681, r24	; 0x800681 <__TEXT_REGION_LENGTH__+0x700681>
    1c54:	87 eb       	ldi	r24, 0xB7	; 183
    1c56:	9a e2       	ldi	r25, 0x2A	; 42
    1c58:	80 93 68 2f 	sts	0x2F68, r24	; 0x802f68 <twi>
    1c5c:	90 93 69 2f 	sts	0x2F69, r25	; 0x802f69 <twi+0x1>
    1c60:	4b e9       	ldi	r20, 0x9B	; 155
    1c62:	60 e8       	ldi	r22, 0x80	; 128
    1c64:	80 ea       	ldi	r24, 0xA0	; 160
    1c66:	94 e0       	ldi	r25, 0x04	; 4
    1c68:	0e 94 05 0e 	call	0x1c0a	; 0x1c0a <TWI_MasterInit>
    1c6c:	08 95       	ret

00001c6e <TWI_MasterWriteRead>:
    1c6e:	cf 93       	push	r28
    1c70:	df 93       	push	r29
    1c72:	49 30       	cpi	r20, 0x09	; 9
    1c74:	08 f0       	brcs	.+2      	; 0x1c78 <TWI_MasterWriteRead+0xa>
    1c76:	41 c0       	rjmp	.+130    	; 0x1cfa <TWI_MasterWriteRead+0x8c>
    1c78:	29 30       	cpi	r18, 0x09	; 9
    1c7a:	08 f0       	brcs	.+2      	; 0x1c7e <TWI_MasterWriteRead+0x10>
    1c7c:	40 c0       	rjmp	.+128    	; 0x1cfe <TWI_MasterWriteRead+0x90>
    1c7e:	e0 91 68 2f 	lds	r30, 0x2F68	; 0x802f68 <twi>
    1c82:	f0 91 69 2f 	lds	r31, 0x2F69	; 0x802f69 <twi+0x1>
    1c86:	97 89       	ldd	r25, Z+23	; 0x17
    1c88:	91 11       	cpse	r25, r1
    1c8a:	2d c0       	rjmp	.+90     	; 0x1ce6 <TWI_MasterWriteRead+0x78>
    1c8c:	91 e0       	ldi	r25, 0x01	; 1
    1c8e:	97 8b       	std	Z+23, r25	; 0x17
    1c90:	10 8e       	std	Z+24, r1	; 0x18
    1c92:	88 0f       	add	r24, r24
    1c94:	82 83       	std	Z+2, r24	; 0x02
    1c96:	44 23       	and	r20, r20
    1c98:	61 f0       	breq	.+24     	; 0x1cb2 <TWI_MasterWriteRead+0x44>
    1c9a:	a6 2f       	mov	r26, r22
    1c9c:	b7 2f       	mov	r27, r23
    1c9e:	80 e0       	ldi	r24, 0x00	; 0
    1ca0:	90 e0       	ldi	r25, 0x00	; 0
    1ca2:	3d 91       	ld	r19, X+
    1ca4:	ef 01       	movw	r28, r30
    1ca6:	c8 0f       	add	r28, r24
    1ca8:	d9 1f       	adc	r29, r25
    1caa:	3b 83       	std	Y+3, r19	; 0x03
    1cac:	01 96       	adiw	r24, 0x01	; 1
    1cae:	84 17       	cp	r24, r20
    1cb0:	c0 f3       	brcs	.-16     	; 0x1ca2 <TWI_MasterWriteRead+0x34>
    1cb2:	43 8b       	std	Z+19, r20	; 0x13
    1cb4:	24 8b       	std	Z+20, r18	; 0x14
    1cb6:	15 8a       	std	Z+21, r1	; 0x15
    1cb8:	16 8a       	std	Z+22, r1	; 0x16
    1cba:	83 89       	ldd	r24, Z+19	; 0x13
    1cbc:	88 23       	and	r24, r24
    1cbe:	41 f0       	breq	.+16     	; 0x1cd0 <TWI_MasterWriteRead+0x62>
    1cc0:	82 81       	ldd	r24, Z+2	; 0x02
    1cc2:	8e 7f       	andi	r24, 0xFE	; 254
    1cc4:	01 90       	ld	r0, Z+
    1cc6:	f0 81       	ld	r31, Z
    1cc8:	e0 2d       	mov	r30, r0
    1cca:	86 83       	std	Z+6, r24	; 0x06
    1ccc:	81 e0       	ldi	r24, 0x01	; 1
    1cce:	1a c0       	rjmp	.+52     	; 0x1d04 <TWI_MasterWriteRead+0x96>
    1cd0:	84 89       	ldd	r24, Z+20	; 0x14
    1cd2:	88 23       	and	r24, r24
    1cd4:	b1 f0       	breq	.+44     	; 0x1d02 <TWI_MasterWriteRead+0x94>
    1cd6:	82 81       	ldd	r24, Z+2	; 0x02
    1cd8:	81 60       	ori	r24, 0x01	; 1
    1cda:	01 90       	ld	r0, Z+
    1cdc:	f0 81       	ld	r31, Z
    1cde:	e0 2d       	mov	r30, r0
    1ce0:	86 83       	std	Z+6, r24	; 0x06
    1ce2:	81 e0       	ldi	r24, 0x01	; 1
    1ce4:	0f c0       	rjmp	.+30     	; 0x1d04 <TWI_MasterWriteRead+0x96>
    1ce6:	82 e4       	ldi	r24, 0x42	; 66
    1ce8:	95 e0       	ldi	r25, 0x05	; 5
    1cea:	9f 93       	push	r25
    1cec:	8f 93       	push	r24
    1cee:	0e 94 f7 56 	call	0xadee	; 0xadee <printf_P>
    1cf2:	0f 90       	pop	r0
    1cf4:	0f 90       	pop	r0
    1cf6:	80 e0       	ldi	r24, 0x00	; 0
    1cf8:	05 c0       	rjmp	.+10     	; 0x1d04 <TWI_MasterWriteRead+0x96>
    1cfa:	80 e0       	ldi	r24, 0x00	; 0
    1cfc:	03 c0       	rjmp	.+6      	; 0x1d04 <TWI_MasterWriteRead+0x96>
    1cfe:	80 e0       	ldi	r24, 0x00	; 0
    1d00:	01 c0       	rjmp	.+2      	; 0x1d04 <TWI_MasterWriteRead+0x96>
    1d02:	81 e0       	ldi	r24, 0x01	; 1
    1d04:	df 91       	pop	r29
    1d06:	cf 91       	pop	r28
    1d08:	08 95       	ret

00001d0a <TWI_MasterWrite>:
    1d0a:	20 e0       	ldi	r18, 0x00	; 0
    1d0c:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <TWI_MasterWriteRead>
    1d10:	08 95       	ret

00001d12 <TWI_MasterArbitrationLostBusErrorHandler>:
 *
 *  \param twi  The TWI_Master_t struct instance.
 */
void TWI_MasterArbitrationLostBusErrorHandler()
{
	uint8_t currentStatus = twi->interface->MASTER.STATUS;
    1d12:	e0 91 68 2f 	lds	r30, 0x2F68	; 0x802f68 <twi>
    1d16:	f0 91 69 2f 	lds	r31, 0x2F69	; 0x802f69 <twi+0x1>
    1d1a:	a0 81       	ld	r26, Z
    1d1c:	b1 81       	ldd	r27, Z+1	; 0x01
    1d1e:	14 96       	adiw	r26, 0x04	; 4
    1d20:	8c 91       	ld	r24, X
    1d22:	14 97       	sbiw	r26, 0x04	; 4

	/* If bus error. */
	if (currentStatus & TWI_MASTER_BUSERR_bm) {
    1d24:	82 ff       	sbrs	r24, 2
    1d26:	03 c0       	rjmp	.+6      	; 0x1d2e <TWI_MasterArbitrationLostBusErrorHandler+0x1c>
		twi->result = TWIM_RESULT_BUS_ERROR;
    1d28:	94 e0       	ldi	r25, 0x04	; 4
    1d2a:	90 8f       	std	Z+24, r25	; 0x18
    1d2c:	02 c0       	rjmp	.+4      	; 0x1d32 <TWI_MasterArbitrationLostBusErrorHandler+0x20>
	}
	/* If arbitration lost. */
	else {
		twi->result = TWIM_RESULT_ARBITRATION_LOST;
    1d2e:	93 e0       	ldi	r25, 0x03	; 3
    1d30:	90 8f       	std	Z+24, r25	; 0x18
	}

	/* Clear interrupt flag. */
	twi->interface->MASTER.STATUS = currentStatus | TWI_MASTER_ARBLOST_bm;
    1d32:	88 60       	ori	r24, 0x08	; 8
    1d34:	14 96       	adiw	r26, 0x04	; 4
    1d36:	8c 93       	st	X, r24

	twi->status = TWIM_STATUS_READY;
    1d38:	17 8a       	std	Z+23, r1	; 0x17
    1d3a:	08 95       	ret

00001d3c <TWI_MasterTransactionFinished>:
 *  \param twi     The TWI_Master_t struct instance.
 *  \param result  The result of the operation.
 */
void TWI_MasterTransactionFinished(uint8_t result)
{
	twi->result = result;
    1d3c:	e0 91 68 2f 	lds	r30, 0x2F68	; 0x802f68 <twi>
    1d40:	f0 91 69 2f 	lds	r31, 0x2F69	; 0x802f69 <twi+0x1>
    1d44:	80 8f       	std	Z+24, r24	; 0x18
	twi->status = TWIM_STATUS_READY;
    1d46:	17 8a       	std	Z+23, r1	; 0x17
    1d48:	08 95       	ret

00001d4a <TWI_MasterWriteHandler>:
 *  Handles TWI transactions (master write) and responses to (N)ACK.
 *
 *  \param twi The TWI_Master_t struct instance.
 */
void TWI_MasterWriteHandler()
{
    1d4a:	cf 93       	push	r28
    1d4c:	df 93       	push	r29
	/* Local variables used in if tests to avoid compiler warning. */
	uint8_t bytesToWrite  = twi->bytesToWrite;
    1d4e:	e0 91 68 2f 	lds	r30, 0x2F68	; 0x802f68 <twi>
    1d52:	f0 91 69 2f 	lds	r31, 0x2F69	; 0x802f69 <twi+0x1>
    1d56:	93 89       	ldd	r25, Z+19	; 0x13
	uint8_t bytesToRead   = twi->bytesToRead;
    1d58:	24 89       	ldd	r18, Z+20	; 0x14
	//printf("\t\tWH%hd/%hd\r\n",bytesToWrite, twi->bytesWritten);

	/* If NOT acknowledged (NACK) by slave cancel the transaction. */
	if (twi->interface->MASTER.STATUS & TWI_MASTER_RXACK_bm) {
    1d5a:	a0 81       	ld	r26, Z
    1d5c:	b1 81       	ldd	r27, Z+1	; 0x01
    1d5e:	14 96       	adiw	r26, 0x04	; 4
    1d60:	8c 91       	ld	r24, X
    1d62:	14 97       	sbiw	r26, 0x04	; 4
    1d64:	84 ff       	sbrs	r24, 4
    1d66:	07 c0       	rjmp	.+14     	; 0x1d76 <TWI_MasterWriteHandler+0x2c>
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    1d68:	83 e0       	ldi	r24, 0x03	; 3
    1d6a:	13 96       	adiw	r26, 0x03	; 3
    1d6c:	8c 93       	st	X, r24
		twi->result = TWIM_RESULT_NACK_RECEIVED;
    1d6e:	85 e0       	ldi	r24, 0x05	; 5
    1d70:	80 8f       	std	Z+24, r24	; 0x18
		twi->status = TWIM_STATUS_READY;
    1d72:	17 8a       	std	Z+23, r1	; 0x17
    1d74:	1c c0       	rjmp	.+56     	; 0x1dae <TWI_MasterWriteHandler+0x64>
	}
	/* If more bytes to write, send data. */
	else if (twi->bytesWritten < bytesToWrite) {
    1d76:	85 89       	ldd	r24, Z+21	; 0x15
    1d78:	89 17       	cp	r24, r25
    1d7a:	58 f4       	brcc	.+22     	; 0x1d92 <TWI_MasterWriteHandler+0x48>
		uint8_t data = twi->writeData[twi->bytesWritten];
    1d7c:	85 89       	ldd	r24, Z+21	; 0x15
    1d7e:	ef 01       	movw	r28, r30
    1d80:	c8 0f       	add	r28, r24
    1d82:	d1 1d       	adc	r29, r1
    1d84:	8b 81       	ldd	r24, Y+3	; 0x03
		twi->interface->MASTER.DATA = data;
    1d86:	17 96       	adiw	r26, 0x07	; 7
    1d88:	8c 93       	st	X, r24
		++twi->bytesWritten;
    1d8a:	85 89       	ldd	r24, Z+21	; 0x15
    1d8c:	8f 5f       	subi	r24, 0xFF	; 255
    1d8e:	85 8b       	std	Z+21, r24	; 0x15
    1d90:	0e c0       	rjmp	.+28     	; 0x1dae <TWI_MasterWriteHandler+0x64>
	}

	/* If bytes to read, send repeated START condition + Address +
	 * 'R/_W = 1'
	 */
	else if (twi->bytesRead < bytesToRead) {
    1d92:	86 89       	ldd	r24, Z+22	; 0x16
    1d94:	82 17       	cp	r24, r18
    1d96:	28 f4       	brcc	.+10     	; 0x1da2 <TWI_MasterWriteHandler+0x58>
		uint8_t readAddress = twi->address | 0x01;
    1d98:	82 81       	ldd	r24, Z+2	; 0x02
    1d9a:	81 60       	ori	r24, 0x01	; 1
		twi->interface->MASTER.ADDR = readAddress;
    1d9c:	16 96       	adiw	r26, 0x06	; 6
    1d9e:	8c 93       	st	X, r24
    1da0:	06 c0       	rjmp	.+12     	; 0x1dae <TWI_MasterWriteHandler+0x64>
	}

	/* If transaction finished, send STOP condition and set RESULT OK. */
	else {
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    1da2:	83 e0       	ldi	r24, 0x03	; 3
    1da4:	13 96       	adiw	r26, 0x03	; 3
    1da6:	8c 93       	st	X, r24
		TWI_MasterTransactionFinished(TWIM_RESULT_OK);
    1da8:	81 e0       	ldi	r24, 0x01	; 1
    1daa:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <TWI_MasterTransactionFinished>
	}
}
    1dae:	df 91       	pop	r29
    1db0:	cf 91       	pop	r28
    1db2:	08 95       	ret

00001db4 <TWI_MasterReadHandler>:
 *  \param twi The TWI_Master_t struct instance.
 */
void TWI_MasterReadHandler()
{
	/* Fetch data if bytes to be read. */
	if (twi->bytesRead < TWIM_READ_BUFFER_SIZE) {
    1db4:	e0 91 68 2f 	lds	r30, 0x2F68	; 0x802f68 <twi>
    1db8:	f0 91 69 2f 	lds	r31, 0x2F69	; 0x802f69 <twi+0x1>
    1dbc:	86 89       	ldd	r24, Z+22	; 0x16
    1dbe:	88 30       	cpi	r24, 0x08	; 8
    1dc0:	70 f4       	brcc	.+28     	; 0x1dde <TWI_MasterReadHandler+0x2a>
		uint8_t data = twi->interface->MASTER.DATA;
    1dc2:	a0 81       	ld	r26, Z
    1dc4:	b1 81       	ldd	r27, Z+1	; 0x01
    1dc6:	17 96       	adiw	r26, 0x07	; 7
    1dc8:	8c 91       	ld	r24, X
		twi->readData[twi->bytesRead] = data;
    1dca:	96 89       	ldd	r25, Z+22	; 0x16
    1dcc:	df 01       	movw	r26, r30
    1dce:	a9 0f       	add	r26, r25
    1dd0:	b1 1d       	adc	r27, r1
    1dd2:	1b 96       	adiw	r26, 0x0b	; 11
    1dd4:	8c 93       	st	X, r24
		twi->bytesRead++;
    1dd6:	86 89       	ldd	r24, Z+22	; 0x16
    1dd8:	8f 5f       	subi	r24, 0xFF	; 255
    1dda:	86 8b       	std	Z+22, r24	; 0x16
    1ddc:	08 c0       	rjmp	.+16     	; 0x1dee <TWI_MasterReadHandler+0x3a>
	}

	/* If buffer overflow, issue STOP and BUFFER_OVERFLOW condition. */
	else {
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    1dde:	01 90       	ld	r0, Z+
    1de0:	f0 81       	ld	r31, Z
    1de2:	e0 2d       	mov	r30, r0
    1de4:	83 e0       	ldi	r24, 0x03	; 3
    1de6:	83 83       	std	Z+3, r24	; 0x03
		TWI_MasterTransactionFinished(TWIM_RESULT_BUFFER_OVERFLOW);
    1de8:	82 e0       	ldi	r24, 0x02	; 2
    1dea:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <TWI_MasterTransactionFinished>
	}

	/* Local variable used in if test to avoid compiler warning. */
	uint8_t bytesToRead = twi->bytesToRead;
    1dee:	e0 91 68 2f 	lds	r30, 0x2F68	; 0x802f68 <twi>
    1df2:	f0 91 69 2f 	lds	r31, 0x2F69	; 0x802f69 <twi+0x1>
    1df6:	94 89       	ldd	r25, Z+20	; 0x14

	/* If more bytes to read, issue ACK and start a byte read. */
	if (twi->bytesRead < bytesToRead) {
    1df8:	86 89       	ldd	r24, Z+22	; 0x16
    1dfa:	89 17       	cp	r24, r25
    1dfc:	30 f4       	brcc	.+12     	; 0x1e0a <TWI_MasterReadHandler+0x56>
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
    1dfe:	01 90       	ld	r0, Z+
    1e00:	f0 81       	ld	r31, Z
    1e02:	e0 2d       	mov	r30, r0
    1e04:	82 e0       	ldi	r24, 0x02	; 2
    1e06:	83 83       	std	Z+3, r24	; 0x03
    1e08:	08 95       	ret
	}

	/* If transaction finished, issue NACK and STOP condition. */
	else {
		twi->interface->MASTER.CTRLC = TWI_MASTER_ACKACT_bm |
    1e0a:	01 90       	ld	r0, Z+
    1e0c:	f0 81       	ld	r31, Z
    1e0e:	e0 2d       	mov	r30, r0
    1e10:	87 e0       	ldi	r24, 0x07	; 7
    1e12:	83 83       	std	Z+3, r24	; 0x03
		                               TWI_MASTER_CMD_STOP_gc;
		TWI_MasterTransactionFinished(TWIM_RESULT_OK);
    1e14:	81 e0       	ldi	r24, 0x01	; 1
    1e16:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <TWI_MasterTransactionFinished>
    1e1a:	08 95       	ret

00001e1c <TWI_MasterInterruptHandler>:
 *
 *  \param twi  The TWI_Master_t struct instance.
 */
void TWI_MasterInterruptHandler()
{
	uint8_t currentStatus = twi->interface->MASTER.STATUS;
    1e1c:	e0 91 68 2f 	lds	r30, 0x2F68	; 0x802f68 <twi>
    1e20:	f0 91 69 2f 	lds	r31, 0x2F69	; 0x802f69 <twi+0x1>
    1e24:	01 90       	ld	r0, Z+
    1e26:	f0 81       	ld	r31, Z
    1e28:	e0 2d       	mov	r30, r0
    1e2a:	84 81       	ldd	r24, Z+4	; 0x04
    1e2c:	98 2f       	mov	r25, r24
    1e2e:	9c 70       	andi	r25, 0x0C	; 12
	/* If arbitration lost or bus error. */
	if ((currentStatus & TWI_MASTER_ARBLOST_bm) ||
    1e30:	19 f0       	breq	.+6      	; 0x1e38 <TWI_MasterInterruptHandler+0x1c>
	    (currentStatus & TWI_MASTER_BUSERR_bm)) {

		TWI_MasterArbitrationLostBusErrorHandler();
    1e32:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <TWI_MasterArbitrationLostBusErrorHandler>
    1e36:	08 95       	ret
	}

	/* If master write interrupt. */
	else if (currentStatus & TWI_MASTER_WIF_bm) {
    1e38:	86 ff       	sbrs	r24, 6
    1e3a:	03 c0       	rjmp	.+6      	; 0x1e42 <TWI_MasterInterruptHandler+0x26>
		TWI_MasterWriteHandler();
    1e3c:	0e 94 a5 0e 	call	0x1d4a	; 0x1d4a <TWI_MasterWriteHandler>
    1e40:	08 95       	ret
	}

	/* If master read interrupt. */
	else if (currentStatus & TWI_MASTER_RIF_bm) {
    1e42:	88 23       	and	r24, r24
    1e44:	1c f4       	brge	.+6      	; 0x1e4c <TWI_MasterInterruptHandler+0x30>
		TWI_MasterReadHandler();
    1e46:	0e 94 da 0e 	call	0x1db4	; 0x1db4 <TWI_MasterReadHandler>
    1e4a:	08 95       	ret
	}

	/* If unexpected state. */
	else {
		TWI_MasterTransactionFinished(TWIM_RESULT_FAIL);
    1e4c:	86 e0       	ldi	r24, 0x06	; 6
    1e4e:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <TWI_MasterTransactionFinished>
    1e52:	08 95       	ret

00001e54 <__vector_46>:
	twi->result = result;
	twi->status = TWIM_STATUS_READY;
}

ISR(TWIE_TWIM_vect)
{
    1e54:	1f 92       	push	r1
    1e56:	0f 92       	push	r0
    1e58:	0f b6       	in	r0, 0x3f	; 63
    1e5a:	0f 92       	push	r0
    1e5c:	11 24       	eor	r1, r1
    1e5e:	0b b6       	in	r0, 0x3b	; 59
    1e60:	0f 92       	push	r0
    1e62:	2f 93       	push	r18
    1e64:	3f 93       	push	r19
    1e66:	4f 93       	push	r20
    1e68:	5f 93       	push	r21
    1e6a:	6f 93       	push	r22
    1e6c:	7f 93       	push	r23
    1e6e:	8f 93       	push	r24
    1e70:	9f 93       	push	r25
    1e72:	af 93       	push	r26
    1e74:	bf 93       	push	r27
    1e76:	ef 93       	push	r30
    1e78:	ff 93       	push	r31
	TWI_MasterInterruptHandler();
    1e7a:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <TWI_MasterInterruptHandler>
    1e7e:	ff 91       	pop	r31
    1e80:	ef 91       	pop	r30
    1e82:	bf 91       	pop	r27
    1e84:	af 91       	pop	r26
    1e86:	9f 91       	pop	r25
    1e88:	8f 91       	pop	r24
    1e8a:	7f 91       	pop	r23
    1e8c:	6f 91       	pop	r22
    1e8e:	5f 91       	pop	r21
    1e90:	4f 91       	pop	r20
    1e92:	3f 91       	pop	r19
    1e94:	2f 91       	pop	r18
    1e96:	0f 90       	pop	r0
    1e98:	0b be       	out	0x3b, r0	; 59
    1e9a:	0f 90       	pop	r0
    1e9c:	0f be       	out	0x3f, r0	; 63
    1e9e:	0f 90       	pop	r0
    1ea0:	1f 90       	pop	r1
    1ea2:	18 95       	reti

00001ea4 <handle_cmd_wrapper>:
		hp_ir_block_bm &= (~(1<<dir));
	}
}

void ir_reset_rx(uint8_t dir){
	ir_transmit_complete(dir); //main reason I can see not to this is that when we're receiving we don't need to turn off the carrier wave. Doing shouldn't hurt, however?
    1ea4:	ef 92       	push	r14
    1ea6:	ff 92       	push	r15
    1ea8:	0f 93       	push	r16
    1eaa:	1f 93       	push	r17
    1eac:	cf 93       	push	r28
    1eae:	df 93       	push	r29
    1eb0:	cd b7       	in	r28, 0x3d	; 61
    1eb2:	de b7       	in	r29, 0x3e	; 62
    1eb4:	ed b6       	in	r14, 0x3d	; 61
    1eb6:	fe b6       	in	r15, 0x3e	; 62
    1eb8:	80 91 ac 2f 	lds	r24, 0x2FAC	; 0x802fac <cmd_length>
    1ebc:	90 91 ad 2f 	lds	r25, 0x2FAD	; 0x802fad <cmd_length+0x1>
    1ec0:	01 96       	adiw	r24, 0x01	; 1
    1ec2:	2d b7       	in	r18, 0x3d	; 61
    1ec4:	3e b7       	in	r19, 0x3e	; 62
    1ec6:	28 1b       	sub	r18, r24
    1ec8:	39 0b       	sbc	r19, r25
    1eca:	2d bf       	out	0x3d, r18	; 61
    1ecc:	3e bf       	out	0x3e, r19	; 62
    1ece:	0d b7       	in	r16, 0x3d	; 61
    1ed0:	1e b7       	in	r17, 0x3e	; 62
    1ed2:	0f 5f       	subi	r16, 0xFF	; 255
    1ed4:	1f 4f       	sbci	r17, 0xFF	; 255
    1ed6:	40 91 ac 2f 	lds	r20, 0x2FAC	; 0x802fac <cmd_length>
    1eda:	50 91 ad 2f 	lds	r21, 0x2FAD	; 0x802fad <cmd_length+0x1>
    1ede:	4f 5f       	subi	r20, 0xFF	; 255
    1ee0:	5f 4f       	sbci	r21, 0xFF	; 255
    1ee2:	6f ea       	ldi	r22, 0xAF	; 175
    1ee4:	7f e2       	ldi	r23, 0x2F	; 47
    1ee6:	c8 01       	movw	r24, r16
    1ee8:	0e 94 3a 56 	call	0xac74	; 0xac74 <memcpy>
    1eec:	60 91 ac 2f 	lds	r22, 0x2FAC	; 0x802fac <cmd_length>
    1ef0:	70 91 ad 2f 	lds	r23, 0x2FAD	; 0x802fad <cmd_length+0x1>
    1ef4:	c8 01       	movw	r24, r16
    1ef6:	0e 94 8b 46 	call	0x8d16	; 0x8d16 <handle_serial_command>
    1efa:	8f b7       	in	r24, 0x3f	; 63
    1efc:	f8 94       	cli
    1efe:	10 92 5b 2f 	sts	0x2F5B, r1	; 0x802f5b <processing_cmd>
    1f02:	8f bf       	out	0x3f, r24	; 63
    1f04:	ed be       	out	0x3d, r14	; 61
    1f06:	fe be       	out	0x3e, r15	; 62
    1f08:	df 91       	pop	r29
    1f0a:	cf 91       	pop	r28
    1f0c:	1f 91       	pop	r17
    1f0e:	0f 91       	pop	r16
    1f10:	ff 90       	pop	r15
    1f12:	ef 90       	pop	r14
    1f14:	08 95       	ret

00001f16 <clear_ir_buffer>:
    1f16:	28 2f       	mov	r18, r24
    1f18:	30 e0       	ldi	r19, 0x00	; 0
    1f1a:	99 e3       	ldi	r25, 0x39	; 57
    1f1c:	89 9f       	mul	r24, r25
    1f1e:	f0 01       	movw	r30, r0
    1f20:	11 24       	eor	r1, r1
    1f22:	e1 53       	subi	r30, 0x31	; 49
    1f24:	f4 4d       	sbci	r31, 0xD4	; 212
    1f26:	14 82       	std	Z+4, r1	; 0x04
    1f28:	15 82       	std	Z+5, r1	; 0x05
    1f2a:	16 82       	std	Z+6, r1	; 0x06
    1f2c:	17 82       	std	Z+7, r1	; 0x07
    1f2e:	10 86       	std	Z+8, r1	; 0x08
    1f30:	11 86       	std	Z+9, r1	; 0x09
    1f32:	12 86       	std	Z+10, r1	; 0x0a
    1f34:	13 86       	std	Z+11, r1	; 0x0b
    1f36:	14 86       	std	Z+12, r1	; 0x0c
    1f38:	15 86       	std	Z+13, r1	; 0x0d
    1f3a:	16 aa       	std	Z+54, r1	; 0x36
    1f3c:	17 aa       	std	Z+55, r1	; 0x37
    1f3e:	10 ae       	std	Z+56, r1	; 0x38
    1f40:	f9 01       	movw	r30, r18
    1f42:	ee 0f       	add	r30, r30
    1f44:	ff 1f       	adc	r31, r31
    1f46:	ec 5d       	subi	r30, 0xDC	; 220
    1f48:	ff 4d       	sbci	r31, 0xDF	; 223
    1f4a:	01 90       	ld	r0, Z+
    1f4c:	f0 81       	ld	r31, Z
    1f4e:	e0 2d       	mov	r30, r0
    1f50:	84 81       	ldd	r24, Z+4	; 0x04
    1f52:	80 61       	ori	r24, 0x10	; 16
    1f54:	84 83       	std	Z+4, r24	; 0x04
    1f56:	08 95       	ret

00001f58 <perform_ir_upkeep>:
    1f58:	2f 92       	push	r2
    1f5a:	3f 92       	push	r3
    1f5c:	4f 92       	push	r4
    1f5e:	5f 92       	push	r5
    1f60:	6f 92       	push	r6
    1f62:	7f 92       	push	r7
    1f64:	8f 92       	push	r8
    1f66:	9f 92       	push	r9
    1f68:	af 92       	push	r10
    1f6a:	bf 92       	push	r11
    1f6c:	cf 92       	push	r12
    1f6e:	df 92       	push	r13
    1f70:	ef 92       	push	r14
    1f72:	ff 92       	push	r15
    1f74:	0f 93       	push	r16
    1f76:	1f 93       	push	r17
    1f78:	cf 93       	push	r28
    1f7a:	df 93       	push	r29
    1f7c:	cd b7       	in	r28, 0x3d	; 61
    1f7e:	de b7       	in	r29, 0x3e	; 62
    1f80:	2d 97       	sbiw	r28, 0x0d	; 13
    1f82:	cd bf       	out	0x3d, r28	; 61
    1f84:	de bf       	out	0x3e, r29	; 62
    1f86:	fe 01       	movw	r30, r28
    1f88:	31 96       	adiw	r30, 0x01	; 1
    1f8a:	8c e0       	ldi	r24, 0x0C	; 12
    1f8c:	df 01       	movw	r26, r30
    1f8e:	1d 92       	st	X+, r1
    1f90:	8a 95       	dec	r24
    1f92:	e9 f7       	brne	.-6      	; 0x1f8e <perform_ir_upkeep+0x36>
    1f94:	0f 2e       	mov	r0, r31
    1f96:	fd ed       	ldi	r31, 0xDD	; 221
    1f98:	ef 2e       	mov	r14, r31
    1f9a:	fb e2       	ldi	r31, 0x2B	; 43
    1f9c:	ff 2e       	mov	r15, r31
    1f9e:	f0 2d       	mov	r31, r0
    1fa0:	4f 01       	movw	r8, r30
    1fa2:	22 24       	eor	r2, r2
    1fa4:	2a 94       	dec	r2
    1fa6:	c1 2c       	mov	r12, r1
    1fa8:	d1 2c       	mov	r13, r1
    1faa:	0f 2e       	mov	r0, r31
    1fac:	f9 e3       	ldi	r31, 0x39	; 57
    1fae:	6f 2e       	mov	r6, r31
    1fb0:	f0 2d       	mov	r31, r0
    1fb2:	0f 2e       	mov	r0, r31
    1fb4:	fd e3       	ldi	r31, 0x3D	; 61
    1fb6:	7f 2e       	mov	r7, r31
    1fb8:	f0 2d       	mov	r31, r0
    1fba:	0f 2e       	mov	r0, r31
    1fbc:	fe ed       	ldi	r31, 0xDE	; 222
    1fbe:	af 2e       	mov	r10, r31
    1fc0:	f5 e0       	ldi	r31, 0x05	; 5
    1fc2:	bf 2e       	mov	r11, r31
    1fc4:	f0 2d       	mov	r31, r0
    1fc6:	26 01       	movw	r4, r12
    1fc8:	6c 9c       	mul	r6, r12
    1fca:	f0 01       	movw	r30, r0
    1fcc:	6d 9c       	mul	r6, r13
    1fce:	f0 0d       	add	r31, r0
    1fd0:	11 24       	eor	r1, r1
    1fd2:	e1 53       	subi	r30, 0x31	; 49
    1fd4:	f4 4d       	sbci	r31, 0xD4	; 212
    1fd6:	80 ad       	ldd	r24, Z+56	; 0x38
    1fd8:	81 ff       	sbrs	r24, 1
    1fda:	c7 c0       	rjmp	.+398    	; 0x216a <perform_ir_upkeep+0x212>
    1fdc:	3c 2c       	mov	r3, r12
    1fde:	82 2d       	mov	r24, r2
    1fe0:	22 20       	and	r2, r2
    1fe2:	0c f4       	brge	.+2      	; 0x1fe6 <perform_ir_upkeep+0x8e>
    1fe4:	d0 c0       	rjmp	.+416    	; 0x2186 <perform_ir_upkeep+0x22e>
    1fe6:	90 e0       	ldi	r25, 0x00	; 0
    1fe8:	6c 9c       	mul	r6, r12
    1fea:	d0 01       	movw	r26, r0
    1fec:	6d 9c       	mul	r6, r13
    1fee:	b0 0d       	add	r27, r0
    1ff0:	11 24       	eor	r1, r1
    1ff2:	ad 52       	subi	r26, 0x2D	; 45
    1ff4:	b4 4d       	sbci	r27, 0xD4	; 212
    1ff6:	2d 91       	ld	r18, X+
    1ff8:	3c 91       	ld	r19, X
    1ffa:	11 97       	sbiw	r26, 0x01	; 1
    1ffc:	e8 2f       	mov	r30, r24
    1ffe:	ee 0f       	add	r30, r30
    2000:	ff 0b       	sbc	r31, r31
    2002:	41 e0       	ldi	r20, 0x01	; 1
    2004:	50 e0       	ldi	r21, 0x00	; 0
    2006:	4c 0f       	add	r20, r28
    2008:	5d 1f       	adc	r21, r29
    200a:	e4 0f       	add	r30, r20
    200c:	f5 1f       	adc	r31, r21
    200e:	40 81       	ld	r20, Z
    2010:	51 81       	ldd	r21, Z+1	; 0x01
    2012:	42 17       	cp	r20, r18
    2014:	53 07       	cpc	r21, r19
    2016:	09 f4       	brne	.+2      	; 0x201a <perform_ir_upkeep+0xc2>
    2018:	91 e0       	ldi	r25, 0x01	; 1
    201a:	81 50       	subi	r24, 0x01	; 1
    201c:	62 f7       	brpl	.-40     	; 0x1ff6 <perform_ir_upkeep+0x9e>
    201e:	64 9c       	mul	r6, r4
    2020:	f0 01       	movw	r30, r0
    2022:	65 9c       	mul	r6, r5
    2024:	f0 0d       	add	r31, r0
    2026:	11 24       	eor	r1, r1
    2028:	e1 53       	subi	r30, 0x31	; 49
    202a:	f4 4d       	sbci	r31, 0xD4	; 212
    202c:	24 81       	ldd	r18, Z+4	; 0x04
    202e:	35 81       	ldd	r19, Z+5	; 0x05
    2030:	d4 01       	movw	r26, r8
    2032:	2d 93       	st	X+, r18
    2034:	3c 93       	st	X, r19
    2036:	99 23       	and	r25, r25
    2038:	21 f0       	breq	.+8      	; 0x2042 <perform_ir_upkeep+0xea>
    203a:	83 2d       	mov	r24, r3
    203c:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <clear_ir_buffer>
    2040:	94 c0       	rjmp	.+296    	; 0x216a <perform_ir_upkeep+0x212>
    2042:	80 91 67 2a 	lds	r24, 0x2A67	; 0x802a67 <num_waiting_msgs>
    2046:	86 30       	cpi	r24, 0x06	; 6
    2048:	28 f0       	brcs	.+10     	; 0x2054 <perform_ir_upkeep+0xfc>
    204a:	b1 e0       	ldi	r27, 0x01	; 1
    204c:	b0 93 91 24 	sts	0x2491, r27	; 0x802491 <user_facing_messages_ovf>
    2050:	10 92 67 2a 	sts	0x2A67, r1	; 0x802a67 <num_waiting_msgs>
    2054:	ef b7       	in	r30, 0x3f	; 63
    2056:	ed 87       	std	Y+13, r30	; 0x0d
    2058:	f8 94       	cli
    205a:	64 9c       	mul	r6, r4
    205c:	f0 01       	movw	r30, r0
    205e:	65 9c       	mul	r6, r5
    2060:	f0 0d       	add	r31, r0
    2062:	11 24       	eor	r1, r1
    2064:	e1 53       	subi	r30, 0x31	; 49
    2066:	f4 4d       	sbci	r31, 0xD4	; 212
    2068:	86 a9       	ldd	r24, Z+54	; 0x36
    206a:	81 11       	cpse	r24, r1
    206c:	06 c0       	rjmp	.+12     	; 0x207a <perform_ir_upkeep+0x122>
    206e:	bf 92       	push	r11
    2070:	af 92       	push	r10
    2072:	0e 94 f7 56 	call	0xadee	; 0xadee <printf_P>
    2076:	0f 90       	pop	r0
    2078:	0f 90       	pop	r0
    207a:	64 9c       	mul	r6, r4
    207c:	80 01       	movw	r16, r0
    207e:	65 9c       	mul	r6, r5
    2080:	10 0d       	add	r17, r0
    2082:	11 24       	eor	r1, r1
    2084:	01 53       	subi	r16, 0x31	; 49
    2086:	14 4d       	sbci	r17, 0xD4	; 212
    2088:	d8 01       	movw	r26, r16
    208a:	d6 96       	adiw	r26, 0x36	; 54
    208c:	4c 91       	ld	r20, X
    208e:	80 91 67 2a 	lds	r24, 0x2A67	; 0x802a67 <num_waiting_msgs>
    2092:	78 9e       	mul	r7, r24
    2094:	c0 01       	movw	r24, r0
    2096:	11 24       	eor	r1, r1
    2098:	50 e0       	ldi	r21, 0x00	; 0
    209a:	b7 01       	movw	r22, r14
    209c:	81 50       	subi	r24, 0x01	; 1
    209e:	97 4d       	sbci	r25, 0xD7	; 215
    20a0:	0e 94 3a 56 	call	0xac74	; 0xac74 <memcpy>
    20a4:	e0 91 67 2a 	lds	r30, 0x2A67	; 0x802a67 <num_waiting_msgs>
    20a8:	d8 01       	movw	r26, r16
    20aa:	d6 96       	adiw	r26, 0x36	; 54
    20ac:	8c 91       	ld	r24, X
    20ae:	d6 97       	sbiw	r26, 0x36	; 54
    20b0:	7e 9e       	mul	r7, r30
    20b2:	f0 01       	movw	r30, r0
    20b4:	11 24       	eor	r1, r1
    20b6:	e3 51       	subi	r30, 0x13	; 19
    20b8:	f7 4d       	sbci	r31, 0xD7	; 215
    20ba:	e8 0f       	add	r30, r24
    20bc:	f1 1d       	adc	r31, r1
    20be:	12 8a       	std	Z+18, r1	; 0x12
    20c0:	20 91 67 2a 	lds	r18, 0x2A67	; 0x802a67 <num_waiting_msgs>
    20c4:	8d 91       	ld	r24, X+
    20c6:	9d 91       	ld	r25, X+
    20c8:	0d 90       	ld	r0, X+
    20ca:	bc 91       	ld	r27, X
    20cc:	a0 2d       	mov	r26, r0
    20ce:	72 9e       	mul	r7, r18
    20d0:	f0 01       	movw	r30, r0
    20d2:	11 24       	eor	r1, r1
    20d4:	e3 51       	subi	r30, 0x13	; 19
    20d6:	f7 4d       	sbci	r31, 0xD7	; 215
    20d8:	80 83       	st	Z, r24
    20da:	91 83       	std	Z+1, r25	; 0x01
    20dc:	a2 83       	std	Z+2, r26	; 0x02
    20de:	b3 83       	std	Z+3, r27	; 0x03
    20e0:	e0 91 67 2a 	lds	r30, 0x2A67	; 0x802a67 <num_waiting_msgs>
    20e4:	7e 9e       	mul	r7, r30
    20e6:	f0 01       	movw	r30, r0
    20e8:	11 24       	eor	r1, r1
    20ea:	e3 51       	subi	r30, 0x13	; 19
    20ec:	f7 4d       	sbci	r31, 0xD7	; 215
    20ee:	32 ae       	std	Z+58, r3	; 0x3a
    20f0:	e0 91 67 2a 	lds	r30, 0x2A67	; 0x802a67 <num_waiting_msgs>
    20f4:	d8 01       	movw	r26, r16
    20f6:	16 96       	adiw	r26, 0x06	; 6
    20f8:	8d 91       	ld	r24, X+
    20fa:	9c 91       	ld	r25, X
    20fc:	17 97       	sbiw	r26, 0x07	; 7
    20fe:	7e 9e       	mul	r7, r30
    2100:	f0 01       	movw	r30, r0
    2102:	11 24       	eor	r1, r1
    2104:	e3 51       	subi	r30, 0x13	; 19
    2106:	f7 4d       	sbci	r31, 0xD7	; 215
    2108:	80 8b       	std	Z+16, r24	; 0x10
    210a:	91 8b       	std	Z+17, r25	; 0x11
    210c:	e0 91 67 2a 	lds	r30, 0x2A67	; 0x802a67 <num_waiting_msgs>
    2110:	d6 96       	adiw	r26, 0x36	; 54
    2112:	8c 91       	ld	r24, X
    2114:	d6 97       	sbiw	r26, 0x36	; 54
    2116:	7e 9e       	mul	r7, r30
    2118:	f0 01       	movw	r30, r0
    211a:	11 24       	eor	r1, r1
    211c:	e3 51       	subi	r30, 0x13	; 19
    211e:	f7 4d       	sbci	r31, 0xD7	; 215
    2120:	83 af       	std	Z+59, r24	; 0x3b
    2122:	e0 91 67 2a 	lds	r30, 0x2A67	; 0x802a67 <num_waiting_msgs>
    2126:	d8 96       	adiw	r26, 0x38	; 56
    2128:	8c 91       	ld	r24, X
    212a:	82 95       	swap	r24
    212c:	81 70       	andi	r24, 0x01	; 1
    212e:	7e 9e       	mul	r7, r30
    2130:	f0 01       	movw	r30, r0
    2132:	11 24       	eor	r1, r1
    2134:	e3 51       	subi	r30, 0x13	; 19
    2136:	f7 4d       	sbci	r31, 0xD7	; 215
    2138:	84 af       	std	Z+60, r24	; 0x3c
    213a:	e0 91 67 2a 	lds	r30, 0x2A67	; 0x802a67 <num_waiting_msgs>
    213e:	7e 9e       	mul	r7, r30
    2140:	f0 01       	movw	r30, r0
    2142:	11 24       	eor	r1, r1
    2144:	e3 51       	subi	r30, 0x13	; 19
    2146:	f7 4d       	sbci	r31, 0xD7	; 215
    2148:	83 ad       	ldd	r24, Z+59	; 0x3b
    214a:	89 32       	cpi	r24, 0x29	; 41
    214c:	20 f0       	brcs	.+8      	; 0x2156 <perform_ir_upkeep+0x1fe>
    214e:	82 ed       	ldi	r24, 0xD2	; 210
    2150:	90 e2       	ldi	r25, 0x20	; 32
    2152:	0e 94 25 57 	call	0xae4a	; 0xae4a <puts>
    2156:	bd 85       	ldd	r27, Y+13	; 0x0d
    2158:	bf bf       	out	0x3f, r27	; 63
    215a:	80 91 67 2a 	lds	r24, 0x2A67	; 0x802a67 <num_waiting_msgs>
    215e:	8f 5f       	subi	r24, 0xFF	; 255
    2160:	80 93 67 2a 	sts	0x2A67, r24	; 0x802a67 <num_waiting_msgs>
    2164:	83 2d       	mov	r24, r3
    2166:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <clear_ir_buffer>
    216a:	ef ef       	ldi	r30, 0xFF	; 255
    216c:	ce 1a       	sub	r12, r30
    216e:	de 0a       	sbc	r13, r30
    2170:	f9 e3       	ldi	r31, 0x39	; 57
    2172:	ef 0e       	add	r14, r31
    2174:	f1 1c       	adc	r15, r1
    2176:	42 e0       	ldi	r20, 0x02	; 2
    2178:	84 0e       	add	r8, r20
    217a:	91 1c       	adc	r9, r1
    217c:	23 94       	inc	r2
    217e:	55 e0       	ldi	r21, 0x05	; 5
    2180:	25 12       	cpse	r2, r21
    2182:	21 cf       	rjmp	.-446    	; 0x1fc6 <perform_ir_upkeep+0x6e>
    2184:	0d c0       	rjmp	.+26     	; 0x21a0 <perform_ir_upkeep+0x248>
    2186:	6c 9c       	mul	r6, r12
    2188:	f0 01       	movw	r30, r0
    218a:	6d 9c       	mul	r6, r13
    218c:	f0 0d       	add	r31, r0
    218e:	11 24       	eor	r1, r1
    2190:	e1 53       	subi	r30, 0x31	; 49
    2192:	f4 4d       	sbci	r31, 0xD4	; 212
    2194:	84 81       	ldd	r24, Z+4	; 0x04
    2196:	95 81       	ldd	r25, Z+5	; 0x05
    2198:	d4 01       	movw	r26, r8
    219a:	8d 93       	st	X+, r24
    219c:	9c 93       	st	X, r25
    219e:	51 cf       	rjmp	.-350    	; 0x2042 <perform_ir_upkeep+0xea>
    21a0:	2d 96       	adiw	r28, 0x0d	; 13
    21a2:	cd bf       	out	0x3d, r28	; 61
    21a4:	de bf       	out	0x3e, r29	; 62
    21a6:	df 91       	pop	r29
    21a8:	cf 91       	pop	r28
    21aa:	1f 91       	pop	r17
    21ac:	0f 91       	pop	r16
    21ae:	ff 90       	pop	r15
    21b0:	ef 90       	pop	r14
    21b2:	df 90       	pop	r13
    21b4:	cf 90       	pop	r12
    21b6:	bf 90       	pop	r11
    21b8:	af 90       	pop	r10
    21ba:	9f 90       	pop	r9
    21bc:	8f 90       	pop	r8
    21be:	7f 90       	pop	r7
    21c0:	6f 90       	pop	r6
    21c2:	5f 90       	pop	r5
    21c4:	4f 90       	pop	r4
    21c6:	3f 90       	pop	r3
    21c8:	2f 90       	pop	r2
    21ca:	08 95       	ret

000021cc <ir_comm_init>:
    21cc:	cf 93       	push	r28
    21ce:	94 e4       	ldi	r25, 0x44	; 68
    21d0:	90 93 42 06 	sts	0x0642, r25	; 0x800642 <__TEXT_REGION_LENGTH__+0x700642>
    21d4:	84 e0       	ldi	r24, 0x04	; 4
    21d6:	80 93 62 06 	sts	0x0662, r24	; 0x800662 <__TEXT_REGION_LENGTH__+0x700662>
    21da:	90 93 82 06 	sts	0x0682, r25	; 0x800682 <__TEXT_REGION_LENGTH__+0x700682>
    21de:	80 93 a2 06 	sts	0x06A2, r24	; 0x8006a2 <__TEXT_REGION_LENGTH__+0x7006a2>
    21e2:	8f b7       	in	r24, 0x3f	; 63
    21e4:	f8 94       	cli
    21e6:	9f ef       	ldi	r25, 0xFF	; 255
    21e8:	90 93 5a 2f 	sts	0x2F5A, r25	; 0x802f5a <hp_ir_block_bm>
    21ec:	8f bf       	out	0x3f, r24	; 63
    21ee:	e4 e2       	ldi	r30, 0x24	; 36
    21f0:	f0 e2       	ldi	r31, 0x20	; 32
    21f2:	20 e3       	ldi	r18, 0x30	; 48
    21f4:	30 e2       	ldi	r19, 0x20	; 32
    21f6:	68 e2       	ldi	r22, 0x28	; 40
    21f8:	53 e0       	ldi	r21, 0x03	; 3
    21fa:	40 e7       	ldi	r20, 0x70	; 112
    21fc:	92 e0       	ldi	r25, 0x02	; 2
    21fe:	a0 81       	ld	r26, Z
    2200:	b1 81       	ldd	r27, Z+1	; 0x01
    2202:	13 96       	adiw	r26, 0x03	; 3
    2204:	6c 93       	st	X, r22
    2206:	a0 81       	ld	r26, Z
    2208:	b1 81       	ldd	r27, Z+1	; 0x01
    220a:	15 96       	adiw	r26, 0x05	; 5
    220c:	5c 93       	st	X, r21
    220e:	a0 81       	ld	r26, Z
    2210:	b1 81       	ldd	r27, Z+1	; 0x01
    2212:	16 96       	adiw	r26, 0x06	; 6
    2214:	4c 93       	st	X, r20
    2216:	a0 81       	ld	r26, Z
    2218:	b1 81       	ldd	r27, Z+1	; 0x01
    221a:	17 96       	adiw	r26, 0x07	; 7
    221c:	9c 93       	st	X, r25
    221e:	a0 81       	ld	r26, Z
    2220:	b1 81       	ldd	r27, Z+1	; 0x01
    2222:	14 96       	adiw	r26, 0x04	; 4
    2224:	8c 91       	ld	r24, X
    2226:	14 97       	sbiw	r26, 0x04	; 4
    2228:	80 61       	ori	r24, 0x10	; 16
    222a:	14 96       	adiw	r26, 0x04	; 4
    222c:	8c 93       	st	X, r24
    222e:	a1 91       	ld	r26, Z+
    2230:	b1 91       	ld	r27, Z+
    2232:	14 96       	adiw	r26, 0x04	; 4
    2234:	8c 91       	ld	r24, X
    2236:	14 97       	sbiw	r26, 0x04	; 4
    2238:	88 60       	ori	r24, 0x08	; 8
    223a:	14 96       	adiw	r26, 0x04	; 4
    223c:	8c 93       	st	X, r24
    223e:	e2 17       	cp	r30, r18
    2240:	f3 07       	cpc	r31, r19
    2242:	e9 f6       	brne	.-70     	; 0x21fe <ir_comm_init+0x32>
    2244:	10 92 aa 2f 	sts	0x2FAA, r1	; 0x802faa <curr_ir_power>
    2248:	10 92 ab 2f 	sts	0x2FAB, r1	; 0x802fab <curr_ir_power+0x1>
    224c:	c0 e0       	ldi	r28, 0x00	; 0
    224e:	8c 2f       	mov	r24, r28
    2250:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <clear_ir_buffer>
    2254:	cf 5f       	subi	r28, 0xFF	; 255
    2256:	c6 30       	cpi	r28, 0x06	; 6
    2258:	d1 f7       	brne	.-12     	; 0x224e <ir_comm_init+0x82>
    225a:	10 92 60 2f 	sts	0x2F60, r1	; 0x802f60 <cmd_arrival_time>
    225e:	10 92 61 2f 	sts	0x2F61, r1	; 0x802f61 <cmd_arrival_time+0x1>
    2262:	10 92 62 2f 	sts	0x2F62, r1	; 0x802f62 <cmd_arrival_time+0x2>
    2266:	10 92 63 2f 	sts	0x2F63, r1	; 0x802f63 <cmd_arrival_time+0x3>
    226a:	10 92 67 2a 	sts	0x2A67, r1	; 0x802a67 <num_waiting_msgs>
    226e:	10 92 91 24 	sts	0x2491, r1	; 0x802491 <user_facing_messages_ovf>
    2272:	10 92 5b 2f 	sts	0x2F5B, r1	; 0x802f5b <processing_cmd>
    2276:	10 92 61 2b 	sts	0x2B61, r1	; 0x802b61 <processing_ffsync>
    227a:	20 e0       	ldi	r18, 0x00	; 0
    227c:	30 e0       	ldi	r19, 0x00	; 0
    227e:	4c ea       	ldi	r20, 0xAC	; 172
    2280:	5f e0       	ldi	r21, 0x0F	; 15
    2282:	6e e3       	ldi	r22, 0x3E	; 62
    2284:	70 e0       	ldi	r23, 0x00	; 0
    2286:	80 e0       	ldi	r24, 0x00	; 0
    2288:	90 e0       	ldi	r25, 0x00	; 0
    228a:	0e 94 db 3d 	call	0x7bb6	; 0x7bb6 <schedule_periodic_task>
    228e:	8f b7       	in	r24, 0x3f	; 63
    2290:	f8 94       	cli
    2292:	10 92 5a 2f 	sts	0x2F5A, r1	; 0x802f5a <hp_ir_block_bm>
    2296:	8f bf       	out	0x3f, r24	; 63
    2298:	cf 91       	pop	r28
    229a:	08 95       	ret

0000229c <send_msg>:
    229c:	3f 92       	push	r3
    229e:	4f 92       	push	r4
    22a0:	5f 92       	push	r5
    22a2:	6f 92       	push	r6
    22a4:	7f 92       	push	r7
    22a6:	8f 92       	push	r8
    22a8:	9f 92       	push	r9
    22aa:	af 92       	push	r10
    22ac:	bf 92       	push	r11
    22ae:	cf 92       	push	r12
    22b0:	df 92       	push	r13
    22b2:	ef 92       	push	r14
    22b4:	ff 92       	push	r15
    22b6:	0f 93       	push	r16
    22b8:	1f 93       	push	r17
    22ba:	cf 93       	push	r28
    22bc:	df 93       	push	r29
    22be:	18 2f       	mov	r17, r24
    22c0:	4b 01       	movw	r8, r22
    22c2:	54 2e       	mov	r5, r20
    22c4:	42 2e       	mov	r4, r18
    22c6:	88 e2       	ldi	r24, 0x28	; 40
    22c8:	84 17       	cp	r24, r20
    22ca:	40 f4       	brcc	.+16     	; 0x22dc <send_msg+0x40>
    22cc:	85 eb       	ldi	r24, 0xB5	; 181
    22ce:	95 e0       	ldi	r25, 0x05	; 5
    22d0:	9f 93       	push	r25
    22d2:	8f 93       	push	r24
    22d4:	0e 94 f7 56 	call	0xadee	; 0xadee <printf_P>
    22d8:	0f 90       	pop	r0
    22da:	0f 90       	pop	r0
    22dc:	c0 91 fa 23 	lds	r28, 0x23FA	; 0x8023fa <droplet_ID>
    22e0:	d0 91 fb 23 	lds	r29, 0x23FB	; 0x8023fb <droplet_ID+0x1>
    22e4:	e1 2e       	mov	r14, r17
    22e6:	f1 2c       	mov	r15, r1
    22e8:	10 fd       	sbrc	r17, 0
    22ea:	0d c0       	rjmp	.+26     	; 0x2306 <send_msg+0x6a>
    22ec:	81 e0       	ldi	r24, 0x01	; 1
    22ee:	90 e0       	ldi	r25, 0x00	; 0
    22f0:	ac 01       	movw	r20, r24
    22f2:	97 01       	movw	r18, r14
    22f4:	08 2e       	mov	r0, r24
    22f6:	02 c0       	rjmp	.+4      	; 0x22fc <send_msg+0x60>
    22f8:	35 95       	asr	r19
    22fa:	27 95       	ror	r18
    22fc:	0a 94       	dec	r0
    22fe:	e2 f7       	brpl	.-8      	; 0x22f8 <send_msg+0x5c>
    2300:	20 ff       	sbrs	r18, 0
    2302:	40 c0       	rjmp	.+128    	; 0x2384 <send_msg+0xe8>
    2304:	02 c0       	rjmp	.+4      	; 0x230a <send_msg+0x6e>
    2306:	40 e0       	ldi	r20, 0x00	; 0
    2308:	50 e0       	ldi	r21, 0x00	; 0
    230a:	89 e3       	ldi	r24, 0x39	; 57
    230c:	84 9f       	mul	r24, r20
    230e:	f0 01       	movw	r30, r0
    2310:	85 9f       	mul	r24, r21
    2312:	f0 0d       	add	r31, r0
    2314:	11 24       	eor	r1, r1
    2316:	e1 53       	subi	r30, 0x31	; 49
    2318:	f4 4d       	sbci	r31, 0xD4	; 212
    231a:	80 ad       	ldd	r24, Z+56	; 0x38
    231c:	80 7c       	andi	r24, 0xC0	; 192
    231e:	c8 27       	eor	r28, r24
    2320:	8c 2f       	mov	r24, r28
    2322:	82 95       	swap	r24
    2324:	8c 27       	eor	r24, r28
    2326:	08 2e       	mov	r0, r24
    2328:	86 95       	lsr	r24
    232a:	86 95       	lsr	r24
    232c:	80 25       	eor	r24, r0
    232e:	08 2e       	mov	r0, r24
    2330:	86 95       	lsr	r24
    2332:	80 25       	eor	r24, r0
    2334:	87 70       	andi	r24, 0x07	; 7
    2336:	0c 2e       	mov	r0, r28
    2338:	cd 2f       	mov	r28, r29
    233a:	86 95       	lsr	r24
    233c:	07 94       	ror	r0
    233e:	87 95       	ror	r24
    2340:	d0 2d       	mov	r29, r0
    2342:	c8 27       	eor	r28, r24
    2344:	06 94       	lsr	r0
    2346:	87 95       	ror	r24
    2348:	d0 25       	eor	r29, r0
    234a:	c8 27       	eor	r28, r24
    234c:	80 85       	ldd	r24, Z+8	; 0x08
    234e:	91 85       	ldd	r25, Z+9	; 0x09
    2350:	c8 27       	eor	r28, r24
    2352:	8c 2f       	mov	r24, r28
    2354:	82 95       	swap	r24
    2356:	8c 27       	eor	r24, r28
    2358:	08 2e       	mov	r0, r24
    235a:	86 95       	lsr	r24
    235c:	86 95       	lsr	r24
    235e:	80 25       	eor	r24, r0
    2360:	08 2e       	mov	r0, r24
    2362:	86 95       	lsr	r24
    2364:	80 25       	eor	r24, r0
    2366:	87 70       	andi	r24, 0x07	; 7
    2368:	0c 2e       	mov	r0, r28
    236a:	cd 2f       	mov	r28, r29
    236c:	86 95       	lsr	r24
    236e:	07 94       	ror	r0
    2370:	87 95       	ror	r24
    2372:	d0 2d       	mov	r29, r0
    2374:	c8 27       	eor	r28, r24
    2376:	06 94       	lsr	r0
    2378:	87 95       	ror	r24
    237a:	d0 25       	eor	r29, r0
    237c:	c8 27       	eor	r28, r24
    237e:	51 10       	cpse	r5, r1
    2380:	07 c0       	rjmp	.+14     	; 0x2390 <send_msg+0xf4>
    2382:	91 c0       	rjmp	.+290    	; 0x24a6 <send_msg+0x20a>
    2384:	01 96       	adiw	r24, 0x01	; 1
    2386:	86 30       	cpi	r24, 0x06	; 6
    2388:	91 05       	cpc	r25, r1
    238a:	09 f0       	breq	.+2      	; 0x238e <send_msg+0xf2>
    238c:	b1 cf       	rjmp	.-158    	; 0x22f0 <send_msg+0x54>
    238e:	f7 cf       	rjmp	.-18     	; 0x237e <send_msg+0xe2>
    2390:	f4 01       	movw	r30, r8
    2392:	2f ef       	ldi	r18, 0xFF	; 255
    2394:	25 0d       	add	r18, r5
    2396:	30 e0       	ldi	r19, 0x00	; 0
    2398:	2f 5f       	subi	r18, 0xFF	; 255
    239a:	3f 4f       	sbci	r19, 0xFF	; 255
    239c:	28 0d       	add	r18, r8
    239e:	39 1d       	adc	r19, r9
    23a0:	81 91       	ld	r24, Z+
    23a2:	c8 27       	eor	r28, r24
    23a4:	8c 2f       	mov	r24, r28
    23a6:	82 95       	swap	r24
    23a8:	8c 27       	eor	r24, r28
    23aa:	08 2e       	mov	r0, r24
    23ac:	86 95       	lsr	r24
    23ae:	86 95       	lsr	r24
    23b0:	80 25       	eor	r24, r0
    23b2:	08 2e       	mov	r0, r24
    23b4:	86 95       	lsr	r24
    23b6:	80 25       	eor	r24, r0
    23b8:	87 70       	andi	r24, 0x07	; 7
    23ba:	0c 2e       	mov	r0, r28
    23bc:	cd 2f       	mov	r28, r29
    23be:	86 95       	lsr	r24
    23c0:	07 94       	ror	r0
    23c2:	87 95       	ror	r24
    23c4:	d0 2d       	mov	r29, r0
    23c6:	c8 27       	eor	r28, r24
    23c8:	06 94       	lsr	r0
    23ca:	87 95       	ror	r24
    23cc:	d0 25       	eor	r29, r0
    23ce:	c8 27       	eor	r28, r24
    23d0:	e2 17       	cp	r30, r18
    23d2:	f3 07       	cpc	r31, r19
    23d4:	29 f7       	brne	.-54     	; 0x23a0 <send_msg+0x104>
    23d6:	67 c0       	rjmp	.+206    	; 0x24a6 <send_msg+0x20a>
    23d8:	c7 01       	movw	r24, r14
    23da:	00 2e       	mov	r0, r16
    23dc:	02 c0       	rjmp	.+4      	; 0x23e2 <send_msg+0x146>
    23de:	95 95       	asr	r25
    23e0:	87 95       	ror	r24
    23e2:	0a 94       	dec	r0
    23e4:	e2 f7       	brpl	.-8      	; 0x23de <send_msg+0x142>
    23e6:	80 ff       	sbrs	r24, 0
    23e8:	23 c0       	rjmp	.+70     	; 0x2430 <send_msg+0x194>
    23ea:	30 9e       	mul	r3, r16
    23ec:	f0 01       	movw	r30, r0
    23ee:	31 9e       	mul	r3, r17
    23f0:	f0 0d       	add	r31, r0
    23f2:	11 24       	eor	r1, r1
    23f4:	e1 53       	subi	r30, 0x31	; 49
    23f6:	f4 4d       	sbci	r31, 0xD4	; 212
    23f8:	80 ad       	ldd	r24, Z+56	; 0x38
    23fa:	80 62       	ori	r24, 0x20	; 32
    23fc:	80 af       	std	Z+56, r24	; 0x38
    23fe:	56 aa       	std	Z+54, r5	; 0x36
    2400:	c4 83       	std	Z+4, r28	; 0x04
    2402:	d5 83       	std	Z+5, r29	; 0x05
    2404:	12 86       	std	Z+10, r1	; 0x0a
    2406:	13 86       	std	Z+11, r1	; 0x0b
    2408:	80 91 fa 23 	lds	r24, 0x23FA	; 0x8023fa <droplet_ID>
    240c:	90 91 fb 23 	lds	r25, 0x23FB	; 0x8023fb <droplet_ID+0x1>
    2410:	86 83       	std	Z+6, r24	; 0x06
    2412:	97 83       	std	Z+7, r25	; 0x07
    2414:	a3 01       	movw	r20, r6
    2416:	b4 01       	movw	r22, r8
    2418:	c6 01       	movw	r24, r12
    241a:	0e 94 3a 56 	call	0xac74	; 0xac74 <memcpy>
    241e:	f5 01       	movw	r30, r10
    2420:	91 81       	ldd	r25, Z+1	; 0x01
    2422:	f8 01       	movw	r30, r16
    2424:	ea 5f       	subi	r30, 0xFA	; 250
    2426:	ff 4d       	sbci	r31, 0xDF	; 223
    2428:	80 81       	ld	r24, Z
    242a:	89 2b       	or	r24, r25
    242c:	f5 01       	movw	r30, r10
    242e:	81 83       	std	Z+1, r24	; 0x01
    2430:	0f 5f       	subi	r16, 0xFF	; 255
    2432:	1f 4f       	sbci	r17, 0xFF	; 255
    2434:	f9 e3       	ldi	r31, 0x39	; 57
    2436:	cf 0e       	add	r12, r31
    2438:	d1 1c       	adc	r13, r1
    243a:	06 30       	cpi	r16, 0x06	; 6
    243c:	11 05       	cpc	r17, r1
    243e:	61 f6       	brne	.-104    	; 0x23d8 <send_msg+0x13c>
    2440:	e4 e2       	ldi	r30, 0x24	; 36
    2442:	f0 e2       	ldi	r31, 0x20	; 32
    2444:	80 e0       	ldi	r24, 0x00	; 0
    2446:	90 e0       	ldi	r25, 0x00	; 0
    2448:	49 e3       	ldi	r20, 0x39	; 57
    244a:	97 01       	movw	r18, r14
    244c:	08 2e       	mov	r0, r24
    244e:	02 c0       	rjmp	.+4      	; 0x2454 <send_msg+0x1b8>
    2450:	35 95       	asr	r19
    2452:	27 95       	ror	r18
    2454:	0a 94       	dec	r0
    2456:	e2 f7       	brpl	.-8      	; 0x2450 <send_msg+0x1b4>
    2458:	20 ff       	sbrs	r18, 0
    245a:	1f c0       	rjmp	.+62     	; 0x249a <send_msg+0x1fe>
    245c:	48 9f       	mul	r20, r24
    245e:	d0 01       	movw	r26, r0
    2460:	49 9f       	mul	r20, r25
    2462:	b0 0d       	add	r27, r0
    2464:	11 24       	eor	r1, r1
    2466:	a1 53       	subi	r26, 0x31	; 49
    2468:	b4 4d       	sbci	r27, 0xD4	; 212
    246a:	1d 92       	st	X+, r1
    246c:	1d 92       	st	X+, r1
    246e:	1d 92       	st	X+, r1
    2470:	1c 92       	st	X, r1
    2472:	13 97       	sbiw	r26, 0x03	; 3
    2474:	44 20       	and	r4, r4
    2476:	49 f0       	breq	.+18     	; 0x248a <send_msg+0x1ee>
    2478:	a0 81       	ld	r26, Z
    247a:	b1 81       	ldd	r27, Z+1	; 0x01
    247c:	13 96       	adiw	r26, 0x03	; 3
    247e:	2c 91       	ld	r18, X
    2480:	13 97       	sbiw	r26, 0x03	; 3
    2482:	23 60       	ori	r18, 0x03	; 3
    2484:	13 96       	adiw	r26, 0x03	; 3
    2486:	2c 93       	st	X, r18
    2488:	08 c0       	rjmp	.+16     	; 0x249a <send_msg+0x1fe>
    248a:	a0 81       	ld	r26, Z
    248c:	b1 81       	ldd	r27, Z+1	; 0x01
    248e:	13 96       	adiw	r26, 0x03	; 3
    2490:	2c 91       	ld	r18, X
    2492:	13 97       	sbiw	r26, 0x03	; 3
    2494:	22 60       	ori	r18, 0x02	; 2
    2496:	13 96       	adiw	r26, 0x03	; 3
    2498:	2c 93       	st	X, r18
    249a:	01 96       	adiw	r24, 0x01	; 1
    249c:	32 96       	adiw	r30, 0x02	; 2
    249e:	86 30       	cpi	r24, 0x06	; 6
    24a0:	91 05       	cpc	r25, r1
    24a2:	99 f6       	brne	.-90     	; 0x244a <send_msg+0x1ae>
    24a4:	14 c0       	rjmp	.+40     	; 0x24ce <send_msg+0x232>
    24a6:	0f 2e       	mov	r0, r31
    24a8:	fd ed       	ldi	r31, 0xDD	; 221
    24aa:	cf 2e       	mov	r12, r31
    24ac:	fb e2       	ldi	r31, 0x2B	; 43
    24ae:	df 2e       	mov	r13, r31
    24b0:	f0 2d       	mov	r31, r0
    24b2:	00 e0       	ldi	r16, 0x00	; 0
    24b4:	10 e0       	ldi	r17, 0x00	; 0
    24b6:	0f 2e       	mov	r0, r31
    24b8:	f9 e3       	ldi	r31, 0x39	; 57
    24ba:	3f 2e       	mov	r3, r31
    24bc:	f0 2d       	mov	r31, r0
    24be:	65 2c       	mov	r6, r5
    24c0:	71 2c       	mov	r7, r1
    24c2:	0f 2e       	mov	r0, r31
    24c4:	a1 2c       	mov	r10, r1
    24c6:	fb e0       	ldi	r31, 0x0B	; 11
    24c8:	bf 2e       	mov	r11, r31
    24ca:	f0 2d       	mov	r31, r0
    24cc:	85 cf       	rjmp	.-246    	; 0x23d8 <send_msg+0x13c>
    24ce:	df 91       	pop	r29
    24d0:	cf 91       	pop	r28
    24d2:	1f 91       	pop	r17
    24d4:	0f 91       	pop	r16
    24d6:	ff 90       	pop	r15
    24d8:	ef 90       	pop	r14
    24da:	df 90       	pop	r13
    24dc:	cf 90       	pop	r12
    24de:	bf 90       	pop	r11
    24e0:	af 90       	pop	r10
    24e2:	9f 90       	pop	r9
    24e4:	8f 90       	pop	r8
    24e6:	7f 90       	pop	r7
    24e8:	6f 90       	pop	r6
    24ea:	5f 90       	pop	r5
    24ec:	4f 90       	pop	r4
    24ee:	3f 90       	pop	r3
    24f0:	08 95       	ret

000024f2 <hp_ir_targeted_cmd>:
    24f2:	bf 92       	push	r11
    24f4:	cf 92       	push	r12
    24f6:	df 92       	push	r13
    24f8:	ef 92       	push	r14
    24fa:	ff 92       	push	r15
    24fc:	0f 93       	push	r16
    24fe:	1f 93       	push	r17
    2500:	cf 93       	push	r28
    2502:	df 93       	push	r29
    2504:	c8 2e       	mov	r12, r24
    2506:	7b 01       	movw	r14, r22
    2508:	d4 2e       	mov	r13, r20
    250a:	89 01       	movw	r16, r18
    250c:	80 91 5a 2f 	lds	r24, 0x2F5A	; 0x802f5a <hp_ir_block_bm>
    2510:	81 11       	cpse	r24, r1
    2512:	53 c0       	rjmp	.+166    	; 0x25ba <hp_ir_targeted_cmd+0xc8>
    2514:	8f e3       	ldi	r24, 0x3F	; 63
    2516:	84 17       	cp	r24, r20
    2518:	10 f4       	brcc	.+4      	; 0x251e <hp_ir_targeted_cmd+0x2c>
    251a:	80 ec       	ldi	r24, 0xC0	; 192
    251c:	d8 0e       	add	r13, r24
    251e:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <perform_ir_upkeep>
    2522:	bf b6       	in	r11, 0x3f	; 63
    2524:	f8 94       	cli
    2526:	c4 e2       	ldi	r28, 0x24	; 36
    2528:	d0 e2       	ldi	r29, 0x20	; 32
    252a:	e0 e0       	ldi	r30, 0x00	; 0
    252c:	f0 e0       	ldi	r31, 0x00	; 0
    252e:	6c 2d       	mov	r22, r12
    2530:	70 e0       	ldi	r23, 0x00	; 0
    2532:	59 e3       	ldi	r21, 0x39	; 57
    2534:	41 e8       	ldi	r20, 0x81	; 129
    2536:	81 e0       	ldi	r24, 0x01	; 1
    2538:	90 e0       	ldi	r25, 0x00	; 0
    253a:	db 01       	movw	r26, r22
    253c:	0e 2e       	mov	r0, r30
    253e:	02 c0       	rjmp	.+4      	; 0x2544 <hp_ir_targeted_cmd+0x52>
    2540:	b5 95       	asr	r27
    2542:	a7 95       	ror	r26
    2544:	0a 94       	dec	r0
    2546:	e2 f7       	brpl	.-8      	; 0x2540 <hp_ir_targeted_cmd+0x4e>
    2548:	a0 ff       	sbrs	r26, 0
    254a:	29 c0       	rjmp	.+82     	; 0x259e <hp_ir_targeted_cmd+0xac>
    254c:	a8 81       	ld	r26, Y
    254e:	b9 81       	ldd	r27, Y+1	; 0x01
    2550:	14 96       	adiw	r26, 0x04	; 4
    2552:	2c 91       	ld	r18, X
    2554:	14 97       	sbiw	r26, 0x04	; 4
    2556:	2f 7e       	andi	r18, 0xEF	; 239
    2558:	14 96       	adiw	r26, 0x04	; 4
    255a:	2c 93       	st	X, r18
    255c:	5e 9f       	mul	r21, r30
    255e:	d0 01       	movw	r26, r0
    2560:	5f 9f       	mul	r21, r31
    2562:	b0 0d       	add	r27, r0
    2564:	11 24       	eor	r1, r1
    2566:	a1 53       	subi	r26, 0x31	; 49
    2568:	b4 4d       	sbci	r27, 0xD4	; 212
    256a:	d8 96       	adiw	r26, 0x38	; 56
    256c:	4c 93       	st	X, r20
    256e:	d8 97       	sbiw	r26, 0x38	; 56
    2570:	d8 96       	adiw	r26, 0x38	; 56
    2572:	2c 91       	ld	r18, X
    2574:	d8 97       	sbiw	r26, 0x38	; 56
    2576:	20 64       	ori	r18, 0x40	; 64
    2578:	d8 96       	adiw	r26, 0x38	; 56
    257a:	2c 93       	st	X, r18
    257c:	d8 97       	sbiw	r26, 0x38	; 56
    257e:	18 96       	adiw	r26, 0x08	; 8
    2580:	0d 93       	st	X+, r16
    2582:	1c 93       	st	X, r17
    2584:	19 97       	sbiw	r26, 0x09	; 9
    2586:	a0 91 5a 2f 	lds	r26, 0x2F5A	; 0x802f5a <hp_ir_block_bm>
    258a:	9c 01       	movw	r18, r24
    258c:	0e 2e       	mov	r0, r30
    258e:	02 c0       	rjmp	.+4      	; 0x2594 <hp_ir_targeted_cmd+0xa2>
    2590:	22 0f       	add	r18, r18
    2592:	33 1f       	adc	r19, r19
    2594:	0a 94       	dec	r0
    2596:	e2 f7       	brpl	.-8      	; 0x2590 <hp_ir_targeted_cmd+0x9e>
    2598:	2a 2b       	or	r18, r26
    259a:	20 93 5a 2f 	sts	0x2F5A, r18	; 0x802f5a <hp_ir_block_bm>
    259e:	31 96       	adiw	r30, 0x01	; 1
    25a0:	22 96       	adiw	r28, 0x02	; 2
    25a2:	e6 30       	cpi	r30, 0x06	; 6
    25a4:	f1 05       	cpc	r31, r1
    25a6:	49 f6       	brne	.-110    	; 0x253a <hp_ir_targeted_cmd+0x48>
    25a8:	bf be       	out	0x3f, r11	; 63
    25aa:	21 e0       	ldi	r18, 0x01	; 1
    25ac:	4d 2d       	mov	r20, r13
    25ae:	b7 01       	movw	r22, r14
    25b0:	8c 2d       	mov	r24, r12
    25b2:	0e 94 4e 11 	call	0x229c	; 0x229c <send_msg>
    25b6:	81 e0       	ldi	r24, 0x01	; 1
    25b8:	01 c0       	rjmp	.+2      	; 0x25bc <hp_ir_targeted_cmd+0xca>
    25ba:	80 e0       	ldi	r24, 0x00	; 0
    25bc:	df 91       	pop	r29
    25be:	cf 91       	pop	r28
    25c0:	1f 91       	pop	r17
    25c2:	0f 91       	pop	r16
    25c4:	ff 90       	pop	r15
    25c6:	ef 90       	pop	r14
    25c8:	df 90       	pop	r13
    25ca:	cf 90       	pop	r12
    25cc:	bf 90       	pop	r11
    25ce:	08 95       	ret

000025d0 <waitForTransmission>:
    25d0:	cf 93       	push	r28
    25d2:	df 93       	push	r29
    25d4:	68 2f       	mov	r22, r24
    25d6:	70 e0       	ldi	r23, 0x00	; 0
    25d8:	b9 e3       	ldi	r27, 0x39	; 57
    25da:	c1 e0       	ldi	r28, 0x01	; 1
    25dc:	d0 e0       	ldi	r29, 0x00	; 0
    25de:	20 e0       	ldi	r18, 0x00	; 0
    25e0:	30 e0       	ldi	r19, 0x00	; 0
    25e2:	a0 e0       	ldi	r26, 0x00	; 0
    25e4:	ab 01       	movw	r20, r22
    25e6:	02 2e       	mov	r0, r18
    25e8:	02 c0       	rjmp	.+4      	; 0x25ee <waitForTransmission+0x1e>
    25ea:	55 95       	asr	r21
    25ec:	47 95       	ror	r20
    25ee:	0a 94       	dec	r0
    25f0:	e2 f7       	brpl	.-8      	; 0x25ea <waitForTransmission+0x1a>
    25f2:	40 ff       	sbrs	r20, 0
    25f4:	12 c0       	rjmp	.+36     	; 0x261a <waitForTransmission+0x4a>
    25f6:	b2 9f       	mul	r27, r18
    25f8:	f0 01       	movw	r30, r0
    25fa:	b3 9f       	mul	r27, r19
    25fc:	f0 0d       	add	r31, r0
    25fe:	11 24       	eor	r1, r1
    2600:	e1 53       	subi	r30, 0x31	; 49
    2602:	f4 4d       	sbci	r31, 0xD4	; 212
    2604:	80 ad       	ldd	r24, Z+56	; 0x38
    2606:	85 ff       	sbrs	r24, 5
    2608:	08 c0       	rjmp	.+16     	; 0x261a <waitForTransmission+0x4a>
    260a:	ae 01       	movw	r20, r28
    260c:	02 2e       	mov	r0, r18
    260e:	02 c0       	rjmp	.+4      	; 0x2614 <waitForTransmission+0x44>
    2610:	44 0f       	add	r20, r20
    2612:	55 1f       	adc	r21, r21
    2614:	0a 94       	dec	r0
    2616:	e2 f7       	brpl	.-8      	; 0x2610 <waitForTransmission+0x40>
    2618:	a4 2b       	or	r26, r20
    261a:	2f 5f       	subi	r18, 0xFF	; 255
    261c:	3f 4f       	sbci	r19, 0xFF	; 255
    261e:	26 30       	cpi	r18, 0x06	; 6
    2620:	31 05       	cpc	r19, r1
    2622:	01 f7       	brne	.-64     	; 0x25e4 <waitForTransmission+0x14>
    2624:	8f e1       	ldi	r24, 0x1F	; 31
    2626:	93 e0       	ldi	r25, 0x03	; 3
    2628:	01 97       	sbiw	r24, 0x01	; 1
    262a:	f1 f7       	brne	.-4      	; 0x2628 <waitForTransmission+0x58>
    262c:	00 c0       	rjmp	.+0      	; 0x262e <waitForTransmission+0x5e>
    262e:	00 00       	nop
    2630:	a1 11       	cpse	r26, r1
    2632:	d5 cf       	rjmp	.-86     	; 0x25de <waitForTransmission+0xe>
    2634:	df 91       	pop	r29
    2636:	cf 91       	pop	r28
    2638:	08 95       	ret

0000263a <received_ir_cmd>:
    263a:	0f 93       	push	r16
    263c:	1f 93       	push	r17
    263e:	cf 93       	push	r28
    2640:	df 93       	push	r29
    2642:	18 2f       	mov	r17, r24
    2644:	0f b7       	in	r16, 0x3f	; 63
    2646:	f8 94       	cli
    2648:	80 91 5b 2f 	lds	r24, 0x2F5B	; 0x802f5b <processing_cmd>
    264c:	81 11       	cpse	r24, r1
    264e:	35 c0       	rjmp	.+106    	; 0x26ba <received_ir_cmd+0x80>
    2650:	89 e3       	ldi	r24, 0x39	; 57
    2652:	18 9f       	mul	r17, r24
    2654:	b0 01       	movw	r22, r0
    2656:	11 24       	eor	r1, r1
    2658:	eb 01       	movw	r28, r22
    265a:	c1 53       	subi	r28, 0x31	; 49
    265c:	d4 4d       	sbci	r29, 0xD4	; 212
    265e:	4e a9       	ldd	r20, Y+54	; 0x36
    2660:	50 e0       	ldi	r21, 0x00	; 0
    2662:	63 52       	subi	r22, 0x23	; 35
    2664:	74 4d       	sbci	r23, 0xD4	; 212
    2666:	8f ea       	ldi	r24, 0xAF	; 175
    2668:	9f e2       	ldi	r25, 0x2F	; 47
    266a:	0e 94 3a 56 	call	0xac74	; 0xac74 <memcpy>
    266e:	ee a9       	ldd	r30, Y+54	; 0x36
    2670:	f0 e0       	ldi	r31, 0x00	; 0
    2672:	e1 55       	subi	r30, 0x51	; 81
    2674:	f0 4d       	sbci	r31, 0xD0	; 208
    2676:	10 82       	st	Z, r1
    2678:	2e a9       	ldd	r18, Y+54	; 0x36
    267a:	30 e0       	ldi	r19, 0x00	; 0
    267c:	20 93 ac 2f 	sts	0x2FAC, r18	; 0x802fac <cmd_length>
    2680:	30 93 ad 2f 	sts	0x2FAD, r19	; 0x802fad <cmd_length+0x1>
    2684:	88 81       	ld	r24, Y
    2686:	99 81       	ldd	r25, Y+1	; 0x01
    2688:	aa 81       	ldd	r26, Y+2	; 0x02
    268a:	bb 81       	ldd	r27, Y+3	; 0x03
    268c:	80 93 60 2f 	sts	0x2F60, r24	; 0x802f60 <cmd_arrival_time>
    2690:	90 93 61 2f 	sts	0x2F61, r25	; 0x802f61 <cmd_arrival_time+0x1>
    2694:	a0 93 62 2f 	sts	0x2F62, r26	; 0x802f62 <cmd_arrival_time+0x2>
    2698:	b0 93 63 2f 	sts	0x2F63, r27	; 0x802f63 <cmd_arrival_time+0x3>
    269c:	8e 81       	ldd	r24, Y+6	; 0x06
    269e:	9f 81       	ldd	r25, Y+7	; 0x07
    26a0:	80 93 5e 2a 	sts	0x2A5E, r24	; 0x802a5e <cmd_sender_id>
    26a4:	90 93 5f 2a 	sts	0x2A5F, r25	; 0x802a5f <cmd_sender_id+0x1>
    26a8:	10 93 9b 24 	sts	0x249B, r17	; 0x80249b <cmd_arrival_dir>
    26ac:	8f a9       	ldd	r24, Y+55	; 0x37
    26ae:	80 93 e5 24 	sts	0x24E5, r24	; 0x8024e5 <cmd_sender_dir>
    26b2:	81 e0       	ldi	r24, 0x01	; 1
    26b4:	80 93 5b 2f 	sts	0x2F5B, r24	; 0x802f5b <processing_cmd>
    26b8:	01 c0       	rjmp	.+2      	; 0x26bc <received_ir_cmd+0x82>
    26ba:	80 e0       	ldi	r24, 0x00	; 0
    26bc:	0f bf       	out	0x3f, r16	; 63
    26be:	88 23       	and	r24, r24
    26c0:	a1 f0       	breq	.+40     	; 0x26ea <received_ir_cmd+0xb0>
    26c2:	20 e0       	ldi	r18, 0x00	; 0
    26c4:	30 e0       	ldi	r19, 0x00	; 0
    26c6:	42 e5       	ldi	r20, 0x52	; 82
    26c8:	5f e0       	ldi	r21, 0x0F	; 15
    26ca:	65 e0       	ldi	r22, 0x05	; 5
    26cc:	70 e0       	ldi	r23, 0x00	; 0
    26ce:	80 e0       	ldi	r24, 0x00	; 0
    26d0:	90 e0       	ldi	r25, 0x00	; 0
    26d2:	0e 94 2a 3d 	call	0x7a54	; 0x7a54 <schedule_task>
    26d6:	df b7       	in	r29, 0x3f	; 63
    26d8:	f8 94       	cli
    26da:	c0 e0       	ldi	r28, 0x00	; 0
    26dc:	8c 2f       	mov	r24, r28
    26de:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <clear_ir_buffer>
    26e2:	cf 5f       	subi	r28, 0xFF	; 255
    26e4:	c6 30       	cpi	r28, 0x06	; 6
    26e6:	d1 f7       	brne	.-12     	; 0x26dc <received_ir_cmd+0xa2>
    26e8:	df bf       	out	0x3f, r29	; 63
    26ea:	df 91       	pop	r29
    26ec:	cf 91       	pop	r28
    26ee:	1f 91       	pop	r17
    26f0:	0f 91       	pop	r16
    26f2:	08 95       	ret

000026f4 <received_ir_sync>:
    26f4:	ef 92       	push	r14
    26f6:	ff 92       	push	r15
    26f8:	0f 93       	push	r16
    26fa:	1f 93       	push	r17
    26fc:	cf 93       	push	r28
    26fe:	df 93       	push	r29
    2700:	2f b7       	in	r18, 0x3f	; 63
    2702:	f8 94       	cli
    2704:	90 91 61 2b 	lds	r25, 0x2B61	; 0x802b61 <processing_ffsync>
    2708:	91 11       	cpse	r25, r1
    270a:	0c c0       	rjmp	.+24     	; 0x2724 <received_ir_sync+0x30>
    270c:	c0 91 20 0a 	lds	r28, 0x0A20	; 0x800a20 <__TEXT_REGION_LENGTH__+0x700a20>
    2710:	d0 91 21 0a 	lds	r29, 0x0A21	; 0x800a21 <__TEXT_REGION_LENGTH__+0x700a21>
    2714:	8f 3f       	cpi	r24, 0xFF	; 255
    2716:	21 f0       	breq	.+8      	; 0x2720 <received_ir_sync+0x2c>
    2718:	91 e0       	ldi	r25, 0x01	; 1
    271a:	90 93 61 2b 	sts	0x2B61, r25	; 0x802b61 <processing_ffsync>
    271e:	03 c0       	rjmp	.+6      	; 0x2726 <received_ir_sync+0x32>
    2720:	90 e0       	ldi	r25, 0x00	; 0
    2722:	01 c0       	rjmp	.+2      	; 0x2726 <received_ir_sync+0x32>
    2724:	90 e0       	ldi	r25, 0x00	; 0
    2726:	2f bf       	out	0x3f, r18	; 63
    2728:	99 23       	and	r25, r25
    272a:	09 f4       	brne	.+2      	; 0x272e <received_ir_sync+0x3a>
    272c:	6d c0       	rjmp	.+218    	; 0x2808 <received_ir_sync+0x114>
    272e:	8b 01       	movw	r16, r22
    2730:	68 2f       	mov	r22, r24
    2732:	70 e0       	ldi	r23, 0x00	; 0
    2734:	6e 5f       	subi	r22, 0xFE	; 254
    2736:	7f 4f       	sbci	r23, 0xFF	; 255
    2738:	07 2e       	mov	r0, r23
    273a:	00 0c       	add	r0, r0
    273c:	88 0b       	sbc	r24, r24
    273e:	99 0b       	sbc	r25, r25
    2740:	0e 94 67 4a 	call	0x94ce	; 0x94ce <__floatsisf>
    2744:	20 e0       	ldi	r18, 0x00	; 0
    2746:	30 e0       	ldi	r19, 0x00	; 0
    2748:	4a ef       	ldi	r20, 0xFA	; 250
    274a:	50 e4       	ldi	r21, 0x40	; 64
    274c:	0e 94 c6 4c 	call	0x998c	; 0x998c <__mulsf3>
    2750:	0e 94 36 4a 	call	0x946c	; 0x946c <__fixunssfsi>
    2754:	6c 17       	cp	r22, r28
    2756:	7d 07       	cpc	r23, r29
    2758:	28 f0       	brcs	.+10     	; 0x2764 <received_ir_sync+0x70>
    275a:	cf 5b       	subi	r28, 0xBF	; 191
    275c:	d2 46       	sbci	r29, 0x62	; 98
    275e:	c6 1b       	sub	r28, r22
    2760:	d7 0b       	sbc	r29, r23
    2762:	02 c0       	rjmp	.+4      	; 0x2768 <received_ir_sync+0x74>
    2764:	c6 1b       	sub	r28, r22
    2766:	d7 0b       	sbc	r29, r23
    2768:	ff b6       	in	r15, 0x3f	; 63
    276a:	f8 94       	cli
    276c:	86 e0       	ldi	r24, 0x06	; 6
    276e:	90 e0       	ldi	r25, 0x00	; 0
    2770:	0e 94 c2 52 	call	0xa584	; 0xa584 <malloc>
    2774:	ac 01       	movw	r20, r24
    2776:	ff be       	out	0x3f, r15	; 63
    2778:	e0 91 b5 2a 	lds	r30, 0x2AB5	; 0x802ab5 <obsStart>
    277c:	f0 91 b6 2a 	lds	r31, 0x2AB6	; 0x802ab6 <obsStart+0x1>
    2780:	04 80       	ldd	r0, Z+4	; 0x04
    2782:	f5 81       	ldd	r31, Z+5	; 0x05
    2784:	e0 2d       	mov	r30, r0
    2786:	80 81       	ld	r24, Z
    2788:	91 81       	ldd	r25, Z+1	; 0x01
    278a:	c8 17       	cp	r28, r24
    278c:	d9 07       	cpc	r29, r25
    278e:	40 f4       	brcc	.+16     	; 0x27a0 <received_ir_sync+0xac>
    2790:	04 80       	ldd	r0, Z+4	; 0x04
    2792:	f5 81       	ldd	r31, Z+5	; 0x05
    2794:	e0 2d       	mov	r30, r0
    2796:	20 81       	ld	r18, Z
    2798:	31 81       	ldd	r19, Z+1	; 0x01
    279a:	c2 17       	cp	r28, r18
    279c:	d3 07       	cpc	r29, r19
    279e:	c0 f3       	brcs	.-16     	; 0x2790 <received_ir_sync+0x9c>
    27a0:	82 81       	ldd	r24, Z+2	; 0x02
    27a2:	93 81       	ldd	r25, Z+3	; 0x03
    27a4:	dc 01       	movw	r26, r24
    27a6:	14 96       	adiw	r26, 0x04	; 4
    27a8:	4d 93       	st	X+, r20
    27aa:	5c 93       	st	X, r21
    27ac:	15 97       	sbiw	r26, 0x05	; 5
    27ae:	82 81       	ldd	r24, Z+2	; 0x02
    27b0:	93 81       	ldd	r25, Z+3	; 0x03
    27b2:	da 01       	movw	r26, r20
    27b4:	12 96       	adiw	r26, 0x02	; 2
    27b6:	8d 93       	st	X+, r24
    27b8:	9c 93       	st	X, r25
    27ba:	13 97       	sbiw	r26, 0x03	; 3
    27bc:	14 96       	adiw	r26, 0x04	; 4
    27be:	ed 93       	st	X+, r30
    27c0:	fc 93       	st	X, r31
    27c2:	15 97       	sbiw	r26, 0x05	; 5
    27c4:	42 83       	std	Z+2, r20	; 0x02
    27c6:	53 83       	std	Z+3, r21	; 0x03
    27c8:	cd 93       	st	X+, r28
    27ca:	dc 93       	st	X, r29
    27cc:	ef b6       	in	r14, 0x3f	; 63
    27ce:	f8 94       	cli
    27d0:	c0 e0       	ldi	r28, 0x00	; 0
    27d2:	d0 e0       	ldi	r29, 0x00	; 0
    27d4:	0f 2e       	mov	r0, r31
    27d6:	f9 e3       	ldi	r31, 0x39	; 57
    27d8:	ff 2e       	mov	r15, r31
    27da:	f0 2d       	mov	r31, r0
    27dc:	fc 9e       	mul	r15, r28
    27de:	f0 01       	movw	r30, r0
    27e0:	fd 9e       	mul	r15, r29
    27e2:	f0 0d       	add	r31, r0
    27e4:	11 24       	eor	r1, r1
    27e6:	e1 53       	subi	r30, 0x31	; 49
    27e8:	f4 4d       	sbci	r31, 0xD4	; 212
    27ea:	86 81       	ldd	r24, Z+6	; 0x06
    27ec:	97 81       	ldd	r25, Z+7	; 0x07
    27ee:	80 17       	cp	r24, r16
    27f0:	91 07       	cpc	r25, r17
    27f2:	19 f4       	brne	.+6      	; 0x27fa <received_ir_sync+0x106>
    27f4:	8c 2f       	mov	r24, r28
    27f6:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <clear_ir_buffer>
    27fa:	21 96       	adiw	r28, 0x01	; 1
    27fc:	c6 30       	cpi	r28, 0x06	; 6
    27fe:	d1 05       	cpc	r29, r1
    2800:	69 f7       	brne	.-38     	; 0x27dc <received_ir_sync+0xe8>
    2802:	10 92 61 2b 	sts	0x2B61, r1	; 0x802b61 <processing_ffsync>
    2806:	ef be       	out	0x3f, r14	; 63
    2808:	df 91       	pop	r29
    280a:	cf 91       	pop	r28
    280c:	1f 91       	pop	r17
    280e:	0f 91       	pop	r16
    2810:	ff 90       	pop	r15
    2812:	ef 90       	pop	r14
    2814:	08 95       	ret

00002816 <received_rnb_r>:
    2816:	ef 92       	push	r14
    2818:	ff 92       	push	r15
    281a:	0f 93       	push	r16
    281c:	1f 93       	push	r17
    281e:	cf 93       	push	r28
    2820:	df 93       	push	r29
    2822:	eb 01       	movw	r28, r22
    2824:	6f b7       	in	r22, 0x3f	; 63
    2826:	f8 94       	cli
    2828:	90 91 36 2b 	lds	r25, 0x2B36	; 0x802b36 <rnbProcessingFlag>
    282c:	91 11       	cpse	r25, r1
    282e:	2f c0       	rjmp	.+94     	; 0x288e <received_rnb_r+0x78>
    2830:	90 91 5a 2f 	lds	r25, 0x2F5A	; 0x802f5a <hp_ir_block_bm>
    2834:	91 11       	cpse	r25, r1
    2836:	27 c0       	rjmp	.+78     	; 0x2886 <received_rnb_r+0x70>
    2838:	8f 3f       	cpi	r24, 0xFF	; 255
    283a:	39 f1       	breq	.+78     	; 0x288a <received_rnb_r+0x74>
    283c:	c0 93 5c 2f 	sts	0x2F5C, r28	; 0x802f5c <rnbCmdID>
    2840:	d0 93 5d 2f 	sts	0x2F5D, r29	; 0x802f5d <rnbCmdID+0x1>
    2844:	85 30       	cpi	r24, 0x05	; 5
    2846:	18 f4       	brcc	.+6      	; 0x284e <received_rnb_r+0x38>
    2848:	94 e1       	ldi	r25, 0x14	; 20
    284a:	98 1b       	sub	r25, r24
    284c:	89 2f       	mov	r24, r25
    284e:	90 e0       	ldi	r25, 0x00	; 0
    2850:	05 96       	adiw	r24, 0x05	; 5
    2852:	09 2e       	mov	r0, r25
    2854:	00 0c       	add	r0, r0
    2856:	aa 0b       	sbc	r26, r26
    2858:	bb 0b       	sbc	r27, r27
    285a:	79 01       	movw	r14, r18
    285c:	8a 01       	movw	r16, r20
    285e:	e8 1a       	sub	r14, r24
    2860:	f9 0a       	sbc	r15, r25
    2862:	0a 0b       	sbc	r16, r26
    2864:	1b 0b       	sbc	r17, r27
    2866:	e0 92 bb 2b 	sts	0x2BBB, r14	; 0x802bbb <rnbCmdSentTime>
    286a:	f0 92 bc 2b 	sts	0x2BBC, r15	; 0x802bbc <rnbCmdSentTime+0x1>
    286e:	00 93 bd 2b 	sts	0x2BBD, r16	; 0x802bbd <rnbCmdSentTime+0x2>
    2872:	10 93 be 2b 	sts	0x2BBE, r17	; 0x802bbe <rnbCmdSentTime+0x3>
    2876:	81 e0       	ldi	r24, 0x01	; 1
    2878:	80 93 36 2b 	sts	0x2B36, r24	; 0x802b36 <rnbProcessingFlag>
    287c:	8f ef       	ldi	r24, 0xFF	; 255
    287e:	80 93 5a 2f 	sts	0x2F5A, r24	; 0x802f5a <hp_ir_block_bm>
    2882:	81 e0       	ldi	r24, 0x01	; 1
    2884:	05 c0       	rjmp	.+10     	; 0x2890 <received_rnb_r+0x7a>
    2886:	80 e0       	ldi	r24, 0x00	; 0
    2888:	03 c0       	rjmp	.+6      	; 0x2890 <received_rnb_r+0x7a>
    288a:	80 e0       	ldi	r24, 0x00	; 0
    288c:	01 c0       	rjmp	.+2      	; 0x2890 <received_rnb_r+0x7a>
    288e:	80 e0       	ldi	r24, 0x00	; 0
    2890:	6f bf       	out	0x3f, r22	; 63
    2892:	88 23       	and	r24, r24
    2894:	09 f4       	brne	.+2      	; 0x2898 <received_rnb_r+0x82>
    2896:	3e c0       	rjmp	.+124    	; 0x2914 <received_rnb_r+0xfe>
    2898:	ef b6       	in	r14, 0x3f	; 63
    289a:	f8 94       	cli
    289c:	00 e0       	ldi	r16, 0x00	; 0
    289e:	10 e0       	ldi	r17, 0x00	; 0
    28a0:	0f 2e       	mov	r0, r31
    28a2:	f9 e3       	ldi	r31, 0x39	; 57
    28a4:	ff 2e       	mov	r15, r31
    28a6:	f0 2d       	mov	r31, r0
    28a8:	f0 9e       	mul	r15, r16
    28aa:	f0 01       	movw	r30, r0
    28ac:	f1 9e       	mul	r15, r17
    28ae:	f0 0d       	add	r31, r0
    28b0:	11 24       	eor	r1, r1
    28b2:	e1 53       	subi	r30, 0x31	; 49
    28b4:	f4 4d       	sbci	r31, 0xD4	; 212
    28b6:	86 81       	ldd	r24, Z+6	; 0x06
    28b8:	97 81       	ldd	r25, Z+7	; 0x07
    28ba:	8c 17       	cp	r24, r28
    28bc:	9d 07       	cpc	r25, r29
    28be:	19 f4       	brne	.+6      	; 0x28c6 <received_rnb_r+0xb0>
    28c0:	80 2f       	mov	r24, r16
    28c2:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <clear_ir_buffer>
    28c6:	0f 5f       	subi	r16, 0xFF	; 255
    28c8:	1f 4f       	sbci	r17, 0xFF	; 255
    28ca:	06 30       	cpi	r16, 0x06	; 6
    28cc:	11 05       	cpc	r17, r1
    28ce:	61 f7       	brne	.-40     	; 0x28a8 <received_rnb_r+0x92>
    28d0:	ef be       	out	0x3f, r14	; 63
    28d2:	80 91 bb 2b 	lds	r24, 0x2BBB	; 0x802bbb <rnbCmdSentTime>
    28d6:	90 91 bc 2b 	lds	r25, 0x2BBC	; 0x802bbc <rnbCmdSentTime+0x1>
    28da:	a0 91 bd 2b 	lds	r26, 0x2BBD	; 0x802bbd <rnbCmdSentTime+0x2>
    28de:	b0 91 be 2b 	lds	r27, 0x2BBE	; 0x802bbe <rnbCmdSentTime+0x3>
    28e2:	80 93 bb 2b 	sts	0x2BBB, r24	; 0x802bbb <rnbCmdSentTime>
    28e6:	90 93 bc 2b 	sts	0x2BBC, r25	; 0x802bbc <rnbCmdSentTime+0x1>
    28ea:	a0 93 bd 2b 	sts	0x2BBD, r26	; 0x802bbd <rnbCmdSentTime+0x2>
    28ee:	b0 93 be 2b 	sts	0x2BBE, r27	; 0x802bbe <rnbCmdSentTime+0x3>
    28f2:	0e 94 3e 2d 	call	0x5a7c	; 0x5a7c <ir_range_meas>
    28f6:	8f b7       	in	r24, 0x3f	; 63
    28f8:	f8 94       	cli
    28fa:	10 92 5a 2f 	sts	0x2F5A, r1	; 0x802f5a <hp_ir_block_bm>
    28fe:	8f bf       	out	0x3f, r24	; 63
    2900:	20 e0       	ldi	r18, 0x00	; 0
    2902:	30 e0       	ldi	r19, 0x00	; 0
    2904:	4b ec       	ldi	r20, 0xCB	; 203
    2906:	55 e3       	ldi	r21, 0x35	; 53
    2908:	6a e0       	ldi	r22, 0x0A	; 10
    290a:	70 e0       	ldi	r23, 0x00	; 0
    290c:	80 e0       	ldi	r24, 0x00	; 0
    290e:	90 e0       	ldi	r25, 0x00	; 0
    2910:	0e 94 2a 3d 	call	0x7a54	; 0x7a54 <schedule_task>
    2914:	df 91       	pop	r29
    2916:	cf 91       	pop	r28
    2918:	1f 91       	pop	r17
    291a:	0f 91       	pop	r16
    291c:	ff 90       	pop	r15
    291e:	ef 90       	pop	r14
    2920:	08 95       	ret

00002922 <ir_receive>:
    2922:	cf 92       	push	r12
    2924:	df 92       	push	r13
    2926:	ef 92       	push	r14
    2928:	ff 92       	push	r15
    292a:	0f 93       	push	r16
    292c:	1f 93       	push	r17
    292e:	cf 93       	push	r28
    2930:	df 93       	push	r29
    2932:	18 2f       	mov	r17, r24
    2934:	c8 2f       	mov	r28, r24
    2936:	d0 e0       	ldi	r29, 0x00	; 0
    2938:	fe 01       	movw	r30, r28
    293a:	ee 0f       	add	r30, r30
    293c:	ff 1f       	adc	r31, r31
    293e:	ec 5d       	subi	r30, 0xDC	; 220
    2940:	ff 4d       	sbci	r31, 0xDF	; 223
    2942:	01 90       	ld	r0, Z+
    2944:	f0 81       	ld	r31, Z
    2946:	e0 2d       	mov	r30, r0
    2948:	00 81       	ld	r16, Z
    294a:	0e 94 20 08 	call	0x1040	; 0x1040 <get_time>
    294e:	6b 01       	movw	r12, r22
    2950:	7c 01       	movw	r14, r24
    2952:	89 e3       	ldi	r24, 0x39	; 57
    2954:	8c 9f       	mul	r24, r28
    2956:	f0 01       	movw	r30, r0
    2958:	8d 9f       	mul	r24, r29
    295a:	f0 0d       	add	r31, r0
    295c:	11 24       	eor	r1, r1
    295e:	e1 53       	subi	r30, 0x31	; 49
    2960:	f4 4d       	sbci	r31, 0xD4	; 212
    2962:	80 81       	ld	r24, Z
    2964:	91 81       	ldd	r25, Z+1	; 0x01
    2966:	a2 81       	ldd	r26, Z+2	; 0x02
    2968:	b3 81       	ldd	r27, Z+3	; 0x03
    296a:	a7 01       	movw	r20, r14
    296c:	96 01       	movw	r18, r12
    296e:	28 1b       	sub	r18, r24
    2970:	39 0b       	sbc	r19, r25
    2972:	4a 0b       	sbc	r20, r26
    2974:	5b 0b       	sbc	r21, r27
    2976:	25 31       	cpi	r18, 0x15	; 21
    2978:	31 05       	cpc	r19, r1
    297a:	41 05       	cpc	r20, r1
    297c:	51 05       	cpc	r21, r1
    297e:	18 f0       	brcs	.+6      	; 0x2986 <ir_receive+0x64>
    2980:	81 2f       	mov	r24, r17
    2982:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <clear_ir_buffer>
    2986:	89 e3       	ldi	r24, 0x39	; 57
    2988:	8c 9f       	mul	r24, r28
    298a:	f0 01       	movw	r30, r0
    298c:	8d 9f       	mul	r24, r29
    298e:	f0 0d       	add	r31, r0
    2990:	11 24       	eor	r1, r1
    2992:	e1 53       	subi	r30, 0x31	; 49
    2994:	f4 4d       	sbci	r31, 0xD4	; 212
    2996:	c0 82       	st	Z, r12
    2998:	d1 82       	std	Z+1, r13	; 0x01
    299a:	e2 82       	std	Z+2, r14	; 0x02
    299c:	f3 82       	std	Z+3, r15	; 0x03
    299e:	02 84       	ldd	r0, Z+10	; 0x0a
    29a0:	f3 85       	ldd	r31, Z+11	; 0x0b
    29a2:	e0 2d       	mov	r30, r0
    29a4:	e8 30       	cpi	r30, 0x08	; 8
    29a6:	f1 05       	cpc	r31, r1
    29a8:	08 f0       	brcs	.+2      	; 0x29ac <ir_receive+0x8a>
    29aa:	b9 c0       	rjmp	.+370    	; 0x2b1e <ir_receive+0x1fc>
    29ac:	88 27       	eor	r24, r24
    29ae:	e2 50       	subi	r30, 0x02	; 2
    29b0:	ff 4f       	sbci	r31, 0xFF	; 255
    29b2:	8f 4f       	sbci	r24, 0xFF	; 255
    29b4:	0c 94 9c 52 	jmp	0xa538	; 0xa538 <__tablejump2__>
    29b8:	80 2f       	mov	r24, r16
    29ba:	90 e0       	ldi	r25, 0x00	; 0
    29bc:	29 e3       	ldi	r18, 0x39	; 57
    29be:	2c 9f       	mul	r18, r28
    29c0:	f0 01       	movw	r30, r0
    29c2:	2d 9f       	mul	r18, r29
    29c4:	f0 0d       	add	r31, r0
    29c6:	11 24       	eor	r1, r1
    29c8:	e1 53       	subi	r30, 0x31	; 49
    29ca:	f4 4d       	sbci	r31, 0xD4	; 212
    29cc:	86 83       	std	Z+6, r24	; 0x06
    29ce:	97 83       	std	Z+7, r25	; 0x07
    29d0:	d0 c0       	rjmp	.+416    	; 0x2b72 <ir_receive+0x250>
    29d2:	89 e3       	ldi	r24, 0x39	; 57
    29d4:	8c 9f       	mul	r24, r28
    29d6:	f0 01       	movw	r30, r0
    29d8:	8d 9f       	mul	r24, r29
    29da:	f0 0d       	add	r31, r0
    29dc:	11 24       	eor	r1, r1
    29de:	e1 53       	subi	r30, 0x31	; 49
    29e0:	f4 4d       	sbci	r31, 0xD4	; 212
    29e2:	86 81       	ldd	r24, Z+6	; 0x06
    29e4:	97 81       	ldd	r25, Z+7	; 0x07
    29e6:	90 2b       	or	r25, r16
    29e8:	86 83       	std	Z+6, r24	; 0x06
    29ea:	97 83       	std	Z+7, r25	; 0x07
    29ec:	c2 c0       	rjmp	.+388    	; 0x2b72 <ir_receive+0x250>
    29ee:	80 2f       	mov	r24, r16
    29f0:	90 e0       	ldi	r25, 0x00	; 0
    29f2:	29 e3       	ldi	r18, 0x39	; 57
    29f4:	2c 9f       	mul	r18, r28
    29f6:	f0 01       	movw	r30, r0
    29f8:	2d 9f       	mul	r18, r29
    29fa:	f0 0d       	add	r31, r0
    29fc:	11 24       	eor	r1, r1
    29fe:	e1 53       	subi	r30, 0x31	; 49
    2a00:	f4 4d       	sbci	r31, 0xD4	; 212
    2a02:	84 83       	std	Z+4, r24	; 0x04
    2a04:	95 83       	std	Z+5, r25	; 0x05
    2a06:	b5 c0       	rjmp	.+362    	; 0x2b72 <ir_receive+0x250>
    2a08:	89 e3       	ldi	r24, 0x39	; 57
    2a0a:	8c 9f       	mul	r24, r28
    2a0c:	f0 01       	movw	r30, r0
    2a0e:	8d 9f       	mul	r24, r29
    2a10:	f0 0d       	add	r31, r0
    2a12:	11 24       	eor	r1, r1
    2a14:	e1 53       	subi	r30, 0x31	; 49
    2a16:	f4 4d       	sbci	r31, 0xD4	; 212
    2a18:	84 81       	ldd	r24, Z+4	; 0x04
    2a1a:	95 81       	ldd	r25, Z+5	; 0x05
    2a1c:	90 2b       	or	r25, r16
    2a1e:	84 83       	std	Z+4, r24	; 0x04
    2a20:	95 83       	std	Z+5, r25	; 0x05
    2a22:	a7 c0       	rjmp	.+334    	; 0x2b72 <ir_receive+0x250>
    2a24:	89 e3       	ldi	r24, 0x39	; 57
    2a26:	8c 9f       	mul	r24, r28
    2a28:	f0 01       	movw	r30, r0
    2a2a:	8d 9f       	mul	r24, r29
    2a2c:	f0 0d       	add	r31, r0
    2a2e:	11 24       	eor	r1, r1
    2a30:	e1 53       	subi	r30, 0x31	; 49
    2a32:	f4 4d       	sbci	r31, 0xD4	; 212
    2a34:	80 ad       	ldd	r24, Z+56	; 0x38
    2a36:	90 2f       	mov	r25, r16
    2a38:	90 7c       	andi	r25, 0xC0	; 192
    2a3a:	89 2b       	or	r24, r25
    2a3c:	80 af       	std	Z+56, r24	; 0x38
    2a3e:	20 ad       	ldd	r18, Z+56	; 0x38
    2a40:	86 81       	ldd	r24, Z+6	; 0x06
    2a42:	97 81       	ldd	r25, Z+7	; 0x07
    2a44:	20 7c       	andi	r18, 0xC0	; 192
    2a46:	82 27       	eor	r24, r18
    2a48:	28 2f       	mov	r18, r24
    2a4a:	22 95       	swap	r18
    2a4c:	28 27       	eor	r18, r24
    2a4e:	02 2e       	mov	r0, r18
    2a50:	26 95       	lsr	r18
    2a52:	26 95       	lsr	r18
    2a54:	20 25       	eor	r18, r0
    2a56:	02 2e       	mov	r0, r18
    2a58:	26 95       	lsr	r18
    2a5a:	20 25       	eor	r18, r0
    2a5c:	27 70       	andi	r18, 0x07	; 7
    2a5e:	08 2e       	mov	r0, r24
    2a60:	89 2f       	mov	r24, r25
    2a62:	26 95       	lsr	r18
    2a64:	07 94       	ror	r0
    2a66:	27 95       	ror	r18
    2a68:	90 2d       	mov	r25, r0
    2a6a:	82 27       	eor	r24, r18
    2a6c:	06 94       	lsr	r0
    2a6e:	27 95       	ror	r18
    2a70:	90 25       	eor	r25, r0
    2a72:	82 27       	eor	r24, r18
    2a74:	84 87       	std	Z+12, r24	; 0x0c
    2a76:	95 87       	std	Z+13, r25	; 0x0d
    2a78:	0f 73       	andi	r16, 0x3F	; 63
    2a7a:	06 ab       	std	Z+54, r16	; 0x36
    2a7c:	86 a9       	ldd	r24, Z+54	; 0x36
    2a7e:	89 32       	cpi	r24, 0x29	; 41
    2a80:	08 f4       	brcc	.+2      	; 0x2a84 <ir_receive+0x162>
    2a82:	77 c0       	rjmp	.+238    	; 0x2b72 <ir_receive+0x250>
    2a84:	89 e3       	ldi	r24, 0x39	; 57
    2a86:	8c 9f       	mul	r24, r28
    2a88:	f0 01       	movw	r30, r0
    2a8a:	8d 9f       	mul	r24, r29
    2a8c:	f0 0d       	add	r31, r0
    2a8e:	11 24       	eor	r1, r1
    2a90:	e1 53       	subi	r30, 0x31	; 49
    2a92:	f4 4d       	sbci	r31, 0xD4	; 212
    2a94:	81 e0       	ldi	r24, 0x01	; 1
    2a96:	86 ab       	std	Z+54, r24	; 0x36
    2a98:	6c c0       	rjmp	.+216    	; 0x2b72 <ir_receive+0x250>
    2a9a:	80 2f       	mov	r24, r16
    2a9c:	90 e0       	ldi	r25, 0x00	; 0
    2a9e:	29 e3       	ldi	r18, 0x39	; 57
    2aa0:	2c 9f       	mul	r18, r28
    2aa2:	f0 01       	movw	r30, r0
    2aa4:	2d 9f       	mul	r18, r29
    2aa6:	f0 0d       	add	r31, r0
    2aa8:	11 24       	eor	r1, r1
    2aaa:	e1 53       	subi	r30, 0x31	; 49
    2aac:	f4 4d       	sbci	r31, 0xD4	; 212
    2aae:	80 87       	std	Z+8, r24	; 0x08
    2ab0:	91 87       	std	Z+9, r25	; 0x09
    2ab2:	5f c0       	rjmp	.+190    	; 0x2b72 <ir_receive+0x250>
    2ab4:	89 e3       	ldi	r24, 0x39	; 57
    2ab6:	8c 9f       	mul	r24, r28
    2ab8:	f0 01       	movw	r30, r0
    2aba:	8d 9f       	mul	r24, r29
    2abc:	f0 0d       	add	r31, r0
    2abe:	11 24       	eor	r1, r1
    2ac0:	e1 53       	subi	r30, 0x31	; 49
    2ac2:	f4 4d       	sbci	r31, 0xD4	; 212
    2ac4:	80 85       	ldd	r24, Z+8	; 0x08
    2ac6:	91 85       	ldd	r25, Z+9	; 0x09
    2ac8:	90 2b       	or	r25, r16
    2aca:	80 87       	std	Z+8, r24	; 0x08
    2acc:	91 87       	std	Z+9, r25	; 0x09
    2ace:	20 85       	ldd	r18, Z+8	; 0x08
    2ad0:	31 85       	ldd	r19, Z+9	; 0x09
    2ad2:	84 85       	ldd	r24, Z+12	; 0x0c
    2ad4:	95 85       	ldd	r25, Z+13	; 0x0d
    2ad6:	82 27       	eor	r24, r18
    2ad8:	28 2f       	mov	r18, r24
    2ada:	22 95       	swap	r18
    2adc:	28 27       	eor	r18, r24
    2ade:	02 2e       	mov	r0, r18
    2ae0:	26 95       	lsr	r18
    2ae2:	26 95       	lsr	r18
    2ae4:	20 25       	eor	r18, r0
    2ae6:	02 2e       	mov	r0, r18
    2ae8:	26 95       	lsr	r18
    2aea:	20 25       	eor	r18, r0
    2aec:	27 70       	andi	r18, 0x07	; 7
    2aee:	08 2e       	mov	r0, r24
    2af0:	89 2f       	mov	r24, r25
    2af2:	26 95       	lsr	r18
    2af4:	07 94       	ror	r0
    2af6:	27 95       	ror	r18
    2af8:	90 2d       	mov	r25, r0
    2afa:	82 27       	eor	r24, r18
    2afc:	06 94       	lsr	r0
    2afe:	27 95       	ror	r18
    2b00:	90 25       	eor	r25, r0
    2b02:	82 27       	eor	r24, r18
    2b04:	84 87       	std	Z+12, r24	; 0x0c
    2b06:	95 87       	std	Z+13, r25	; 0x0d
    2b08:	34 c0       	rjmp	.+104    	; 0x2b72 <ir_receive+0x250>
    2b0a:	89 e3       	ldi	r24, 0x39	; 57
    2b0c:	8c 9f       	mul	r24, r28
    2b0e:	f0 01       	movw	r30, r0
    2b10:	8d 9f       	mul	r24, r29
    2b12:	f0 0d       	add	r31, r0
    2b14:	11 24       	eor	r1, r1
    2b16:	e1 53       	subi	r30, 0x31	; 49
    2b18:	f4 4d       	sbci	r31, 0xD4	; 212
    2b1a:	07 ab       	std	Z+55, r16	; 0x37
    2b1c:	2a c0       	rjmp	.+84     	; 0x2b72 <ir_receive+0x250>
    2b1e:	89 e3       	ldi	r24, 0x39	; 57
    2b20:	8c 9f       	mul	r24, r28
    2b22:	f0 01       	movw	r30, r0
    2b24:	8d 9f       	mul	r24, r29
    2b26:	f0 0d       	add	r31, r0
    2b28:	11 24       	eor	r1, r1
    2b2a:	e1 53       	subi	r30, 0x31	; 49
    2b2c:	f4 4d       	sbci	r31, 0xD4	; 212
    2b2e:	a2 85       	ldd	r26, Z+10	; 0x0a
    2b30:	b3 85       	ldd	r27, Z+11	; 0x0b
    2b32:	18 97       	sbiw	r26, 0x08	; 8
    2b34:	ae 0f       	add	r26, r30
    2b36:	bf 1f       	adc	r27, r31
    2b38:	1e 96       	adiw	r26, 0x0e	; 14
    2b3a:	0c 93       	st	X, r16
    2b3c:	84 85       	ldd	r24, Z+12	; 0x0c
    2b3e:	95 85       	ldd	r25, Z+13	; 0x0d
    2b40:	80 27       	eor	r24, r16
    2b42:	08 2f       	mov	r16, r24
    2b44:	02 95       	swap	r16
    2b46:	08 27       	eor	r16, r24
    2b48:	00 2e       	mov	r0, r16
    2b4a:	06 95       	lsr	r16
    2b4c:	06 95       	lsr	r16
    2b4e:	00 25       	eor	r16, r0
    2b50:	00 2e       	mov	r0, r16
    2b52:	06 95       	lsr	r16
    2b54:	00 25       	eor	r16, r0
    2b56:	07 70       	andi	r16, 0x07	; 7
    2b58:	08 2e       	mov	r0, r24
    2b5a:	89 2f       	mov	r24, r25
    2b5c:	06 95       	lsr	r16
    2b5e:	07 94       	ror	r0
    2b60:	07 95       	ror	r16
    2b62:	90 2d       	mov	r25, r0
    2b64:	80 27       	eor	r24, r16
    2b66:	06 94       	lsr	r0
    2b68:	07 95       	ror	r16
    2b6a:	90 25       	eor	r25, r0
    2b6c:	80 27       	eor	r24, r16
    2b6e:	84 87       	std	Z+12, r24	; 0x0c
    2b70:	95 87       	std	Z+13, r25	; 0x0d
    2b72:	89 e3       	ldi	r24, 0x39	; 57
    2b74:	8c 9f       	mul	r24, r28
    2b76:	f0 01       	movw	r30, r0
    2b78:	8d 9f       	mul	r24, r29
    2b7a:	f0 0d       	add	r31, r0
    2b7c:	11 24       	eor	r1, r1
    2b7e:	e1 53       	subi	r30, 0x31	; 49
    2b80:	f4 4d       	sbci	r31, 0xD4	; 212
    2b82:	82 85       	ldd	r24, Z+10	; 0x0a
    2b84:	93 85       	ldd	r25, Z+11	; 0x0b
    2b86:	01 96       	adiw	r24, 0x01	; 1
    2b88:	82 87       	std	Z+10, r24	; 0x0a
    2b8a:	93 87       	std	Z+11, r25	; 0x0b
    2b8c:	82 85       	ldd	r24, Z+10	; 0x0a
    2b8e:	93 85       	ldd	r25, Z+11	; 0x0b
    2b90:	26 a9       	ldd	r18, Z+54	; 0x36
    2b92:	30 e0       	ldi	r19, 0x00	; 0
    2b94:	28 5f       	subi	r18, 0xF8	; 248
    2b96:	3f 4f       	sbci	r19, 0xFF	; 255
    2b98:	82 17       	cp	r24, r18
    2b9a:	93 07       	cpc	r25, r19
    2b9c:	08 f4       	brcc	.+2      	; 0x2ba0 <ir_receive+0x27e>
    2b9e:	c9 c0       	rjmp	.+402    	; 0x2d32 <ir_receive+0x410>
    2ba0:	89 e3       	ldi	r24, 0x39	; 57
    2ba2:	8c 9f       	mul	r24, r28
    2ba4:	f0 01       	movw	r30, r0
    2ba6:	8d 9f       	mul	r24, r29
    2ba8:	f0 0d       	add	r31, r0
    2baa:	11 24       	eor	r1, r1
    2bac:	e1 53       	subi	r30, 0x31	; 49
    2bae:	f4 4d       	sbci	r31, 0xD4	; 212
    2bb0:	44 85       	ldd	r20, Z+12	; 0x0c
    2bb2:	55 85       	ldd	r21, Z+13	; 0x0d
    2bb4:	24 81       	ldd	r18, Z+4	; 0x04
    2bb6:	35 81       	ldd	r19, Z+5	; 0x05
    2bb8:	a4 85       	ldd	r26, Z+12	; 0x0c
    2bba:	b5 85       	ldd	r27, Z+13	; 0x0d
    2bbc:	e6 80       	ldd	r14, Z+6	; 0x06
    2bbe:	f7 80       	ldd	r15, Z+7	; 0x07
    2bc0:	60 91 fa 23 	lds	r22, 0x23FA	; 0x8023fa <droplet_ID>
    2bc4:	70 91 fb 23 	lds	r23, 0x23FB	; 0x8023fb <droplet_ID+0x1>
    2bc8:	80 ad       	ldd	r24, Z+56	; 0x38
    2bca:	86 fb       	bst	r24, 6
    2bcc:	88 27       	eor	r24, r24
    2bce:	80 f9       	bld	r24, 0
    2bd0:	91 e0       	ldi	r25, 0x01	; 1
    2bd2:	89 27       	eor	r24, r25
    2bd4:	61 f1       	breq	.+88     	; 0x2c2e <ir_receive+0x30c>
    2bd6:	99 e3       	ldi	r25, 0x39	; 57
    2bd8:	9c 9f       	mul	r25, r28
    2bda:	f0 01       	movw	r30, r0
    2bdc:	9d 9f       	mul	r25, r29
    2bde:	f0 0d       	add	r31, r0
    2be0:	11 24       	eor	r1, r1
    2be2:	e1 53       	subi	r30, 0x31	; 49
    2be4:	f4 4d       	sbci	r31, 0xD4	; 212
    2be6:	00 84       	ldd	r0, Z+8	; 0x08
    2be8:	f1 85       	ldd	r31, Z+9	; 0x09
    2bea:	e0 2d       	mov	r30, r0
    2bec:	ef 2b       	or	r30, r31
    2bee:	79 f0       	breq	.+30     	; 0x2c0e <ir_receive+0x2ec>
    2bf0:	9c 9f       	mul	r25, r28
    2bf2:	f0 01       	movw	r30, r0
    2bf4:	9d 9f       	mul	r25, r29
    2bf6:	f0 0d       	add	r31, r0
    2bf8:	11 24       	eor	r1, r1
    2bfa:	e1 53       	subi	r30, 0x31	; 49
    2bfc:	f4 4d       	sbci	r31, 0xD4	; 212
    2bfe:	00 84       	ldd	r0, Z+8	; 0x08
    2c00:	f1 85       	ldd	r31, Z+9	; 0x09
    2c02:	e0 2d       	mov	r30, r0
    2c04:	e6 17       	cp	r30, r22
    2c06:	f7 07       	cpc	r31, r23
    2c08:	21 f4       	brne	.+8      	; 0x2c12 <ir_receive+0x2f0>
    2c0a:	00 e0       	ldi	r16, 0x00	; 0
    2c0c:	03 c0       	rjmp	.+6      	; 0x2c14 <ir_receive+0x2f2>
    2c0e:	00 e0       	ldi	r16, 0x00	; 0
    2c10:	01 c0       	rjmp	.+2      	; 0x2c14 <ir_receive+0x2f2>
    2c12:	01 e0       	ldi	r16, 0x01	; 1
    2c14:	99 e3       	ldi	r25, 0x39	; 57
    2c16:	9c 9f       	mul	r25, r28
    2c18:	f0 01       	movw	r30, r0
    2c1a:	9d 9f       	mul	r25, r29
    2c1c:	f0 0d       	add	r31, r0
    2c1e:	11 24       	eor	r1, r1
    2c20:	e1 53       	subi	r30, 0x31	; 49
    2c22:	f4 4d       	sbci	r31, 0xD4	; 212
    2c24:	97 a9       	ldd	r25, Z+55	; 0x37
    2c26:	98 7f       	andi	r25, 0xF8	; 248
    2c28:	98 3f       	cpi	r25, 0xF8	; 248
    2c2a:	21 f4       	brne	.+8      	; 0x2c34 <ir_receive+0x312>
    2c2c:	01 c0       	rjmp	.+2      	; 0x2c30 <ir_receive+0x30e>
    2c2e:	00 e0       	ldi	r16, 0x00	; 0
    2c30:	90 e0       	ldi	r25, 0x00	; 0
    2c32:	01 c0       	rjmp	.+2      	; 0x2c36 <ir_receive+0x314>
    2c34:	91 e0       	ldi	r25, 0x01	; 1
    2c36:	42 17       	cp	r20, r18
    2c38:	53 07       	cpc	r21, r19
    2c3a:	09 f0       	breq	.+2      	; 0x2c3e <ir_receive+0x31c>
    2c3c:	69 c0       	rjmp	.+210    	; 0x2d10 <ir_receive+0x3ee>
    2c3e:	ab 2b       	or	r26, r27
    2c40:	09 f4       	brne	.+2      	; 0x2c44 <ir_receive+0x322>
    2c42:	66 c0       	rjmp	.+204    	; 0x2d10 <ir_receive+0x3ee>
    2c44:	e6 16       	cp	r14, r22
    2c46:	f7 06       	cpc	r15, r23
    2c48:	09 f4       	brne	.+2      	; 0x2c4c <ir_receive+0x32a>
    2c4a:	62 c0       	rjmp	.+196    	; 0x2d10 <ir_receive+0x3ee>
    2c4c:	01 11       	cpse	r16, r1
    2c4e:	60 c0       	rjmp	.+192    	; 0x2d10 <ir_receive+0x3ee>
    2c50:	91 11       	cpse	r25, r1
    2c52:	5e c0       	rjmp	.+188    	; 0x2d10 <ir_receive+0x3ee>
    2c54:	88 23       	and	r24, r24
    2c56:	09 f4       	brne	.+2      	; 0x2c5a <ir_receive+0x338>
    2c58:	5f c0       	rjmp	.+190    	; 0x2d18 <ir_receive+0x3f6>
    2c5a:	89 e3       	ldi	r24, 0x39	; 57
    2c5c:	8c 9f       	mul	r24, r28
    2c5e:	f0 01       	movw	r30, r0
    2c60:	8d 9f       	mul	r24, r29
    2c62:	f0 0d       	add	r31, r0
    2c64:	11 24       	eor	r1, r1
    2c66:	e1 53       	subi	r30, 0x31	; 49
    2c68:	f4 4d       	sbci	r31, 0xD4	; 212
    2c6a:	87 a9       	ldd	r24, Z+55	; 0x37
    2c6c:	87 70       	andi	r24, 0x07	; 7
    2c6e:	87 ab       	std	Z+55, r24	; 0x37
    2c70:	80 ad       	ldd	r24, Z+56	; 0x38
    2c72:	88 23       	and	r24, r24
    2c74:	94 f5       	brge	.+100    	; 0x2cda <ir_receive+0x3b8>
    2c76:	81 2f       	mov	r24, r17
    2c78:	0e 94 1d 13 	call	0x263a	; 0x263a <received_ir_cmd>
    2c7c:	5a c0       	rjmp	.+180    	; 0x2d32 <ir_receive+0x410>
    2c7e:	89 e3       	ldi	r24, 0x39	; 57
    2c80:	8c 9f       	mul	r24, r28
    2c82:	f0 01       	movw	r30, r0
    2c84:	8d 9f       	mul	r24, r29
    2c86:	f0 0d       	add	r31, r0
    2c88:	11 24       	eor	r1, r1
    2c8a:	e1 53       	subi	r30, 0x31	; 49
    2c8c:	f4 4d       	sbci	r31, 0xD4	; 212
    2c8e:	86 a9       	ldd	r24, Z+54	; 0x36
    2c90:	88 23       	and	r24, r24
    2c92:	19 f0       	breq	.+6      	; 0x2c9a <ir_receive+0x378>
    2c94:	81 30       	cpi	r24, 0x01	; 1
    2c96:	79 f0       	breq	.+30     	; 0x2cb6 <ir_receive+0x394>
    2c98:	4c c0       	rjmp	.+152    	; 0x2d32 <ir_receive+0x410>
    2c9a:	89 e3       	ldi	r24, 0x39	; 57
    2c9c:	8c 9f       	mul	r24, r28
    2c9e:	f0 01       	movw	r30, r0
    2ca0:	8d 9f       	mul	r24, r29
    2ca2:	f0 0d       	add	r31, r0
    2ca4:	11 24       	eor	r1, r1
    2ca6:	e1 53       	subi	r30, 0x31	; 49
    2ca8:	f4 4d       	sbci	r31, 0xD4	; 212
    2caa:	66 81       	ldd	r22, Z+6	; 0x06
    2cac:	77 81       	ldd	r23, Z+7	; 0x07
    2cae:	87 a9       	ldd	r24, Z+55	; 0x37
    2cb0:	0e 94 7a 13 	call	0x26f4	; 0x26f4 <received_ir_sync>
    2cb4:	3e c0       	rjmp	.+124    	; 0x2d32 <ir_receive+0x410>
    2cb6:	89 e3       	ldi	r24, 0x39	; 57
    2cb8:	8c 9f       	mul	r24, r28
    2cba:	f0 01       	movw	r30, r0
    2cbc:	8d 9f       	mul	r24, r29
    2cbe:	f0 0d       	add	r31, r0
    2cc0:	11 24       	eor	r1, r1
    2cc2:	e1 53       	subi	r30, 0x31	; 49
    2cc4:	f4 4d       	sbci	r31, 0xD4	; 212
    2cc6:	20 81       	ld	r18, Z
    2cc8:	31 81       	ldd	r19, Z+1	; 0x01
    2cca:	42 81       	ldd	r20, Z+2	; 0x02
    2ccc:	53 81       	ldd	r21, Z+3	; 0x03
    2cce:	66 81       	ldd	r22, Z+6	; 0x06
    2cd0:	77 81       	ldd	r23, Z+7	; 0x07
    2cd2:	87 a9       	ldd	r24, Z+55	; 0x37
    2cd4:	0e 94 0b 14 	call	0x2816	; 0x2816 <received_rnb_r>
    2cd8:	2c c0       	rjmp	.+88     	; 0x2d32 <ir_receive+0x410>
    2cda:	9f b7       	in	r25, 0x3f	; 63
    2cdc:	f8 94       	cli
    2cde:	89 e3       	ldi	r24, 0x39	; 57
    2ce0:	8c 9f       	mul	r24, r28
    2ce2:	f0 01       	movw	r30, r0
    2ce4:	8d 9f       	mul	r24, r29
    2ce6:	f0 0d       	add	r31, r0
    2ce8:	11 24       	eor	r1, r1
    2cea:	e1 53       	subi	r30, 0x31	; 49
    2cec:	f4 4d       	sbci	r31, 0xD4	; 212
    2cee:	80 ad       	ldd	r24, Z+56	; 0x38
    2cf0:	82 60       	ori	r24, 0x02	; 2
    2cf2:	80 af       	std	Z+56, r24	; 0x38
    2cf4:	80 ad       	ldd	r24, Z+56	; 0x38
    2cf6:	81 60       	ori	r24, 0x01	; 1
    2cf8:	80 af       	std	Z+56, r24	; 0x38
    2cfa:	cc 0f       	add	r28, r28
    2cfc:	dd 1f       	adc	r29, r29
    2cfe:	cc 5d       	subi	r28, 0xDC	; 220
    2d00:	df 4d       	sbci	r29, 0xDF	; 223
    2d02:	e8 81       	ld	r30, Y
    2d04:	f9 81       	ldd	r31, Y+1	; 0x01
    2d06:	84 81       	ldd	r24, Z+4	; 0x04
    2d08:	8f 7e       	andi	r24, 0xEF	; 239
    2d0a:	84 83       	std	Z+4, r24	; 0x04
    2d0c:	9f bf       	out	0x3f, r25	; 63
    2d0e:	11 c0       	rjmp	.+34     	; 0x2d32 <ir_receive+0x410>
    2d10:	81 2f       	mov	r24, r17
    2d12:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <clear_ir_buffer>
    2d16:	0d c0       	rjmp	.+26     	; 0x2d32 <ir_receive+0x410>
    2d18:	89 e3       	ldi	r24, 0x39	; 57
    2d1a:	8c 9f       	mul	r24, r28
    2d1c:	f0 01       	movw	r30, r0
    2d1e:	8d 9f       	mul	r24, r29
    2d20:	f0 0d       	add	r31, r0
    2d22:	11 24       	eor	r1, r1
    2d24:	e1 53       	subi	r30, 0x31	; 49
    2d26:	f4 4d       	sbci	r31, 0xD4	; 212
    2d28:	80 ad       	ldd	r24, Z+56	; 0x38
    2d2a:	88 23       	and	r24, r24
    2d2c:	0c f4       	brge	.+2      	; 0x2d30 <ir_receive+0x40e>
    2d2e:	a7 cf       	rjmp	.-178    	; 0x2c7e <ir_receive+0x35c>
    2d30:	d4 cf       	rjmp	.-88     	; 0x2cda <ir_receive+0x3b8>
    2d32:	df 91       	pop	r29
    2d34:	cf 91       	pop	r28
    2d36:	1f 91       	pop	r17
    2d38:	0f 91       	pop	r16
    2d3a:	ff 90       	pop	r15
    2d3c:	ef 90       	pop	r14
    2d3e:	df 90       	pop	r13
    2d40:	cf 90       	pop	r12
    2d42:	08 95       	ret

00002d44 <ir_transmit>:
    2d44:	1f 93       	push	r17
    2d46:	cf 93       	push	r28
    2d48:	df 93       	push	r29
    2d4a:	18 2f       	mov	r17, r24
    2d4c:	c8 2f       	mov	r28, r24
    2d4e:	d0 e0       	ldi	r29, 0x00	; 0
    2d50:	89 e3       	ldi	r24, 0x39	; 57
    2d52:	18 9f       	mul	r17, r24
    2d54:	f0 01       	movw	r30, r0
    2d56:	11 24       	eor	r1, r1
    2d58:	e1 53       	subi	r30, 0x31	; 49
    2d5a:	f4 4d       	sbci	r31, 0xD4	; 212
    2d5c:	02 84       	ldd	r0, Z+10	; 0x0a
    2d5e:	f3 85       	ldd	r31, Z+11	; 0x0b
    2d60:	e0 2d       	mov	r30, r0
    2d62:	e8 30       	cpi	r30, 0x08	; 8
    2d64:	f1 05       	cpc	r31, r1
    2d66:	08 f0       	brcs	.+2      	; 0x2d6a <ir_transmit+0x26>
    2d68:	97 c0       	rjmp	.+302    	; 0x2e98 <ir_transmit+0x154>
    2d6a:	88 27       	eor	r24, r24
    2d6c:	ea 5f       	subi	r30, 0xFA	; 250
    2d6e:	fe 4f       	sbci	r31, 0xFE	; 254
    2d70:	8f 4f       	sbci	r24, 0xFF	; 255
    2d72:	0c 94 9c 52 	jmp	0xa538	; 0xa538 <__tablejump2__>
    2d76:	89 e3       	ldi	r24, 0x39	; 57
    2d78:	8c 9f       	mul	r24, r28
    2d7a:	f0 01       	movw	r30, r0
    2d7c:	8d 9f       	mul	r24, r29
    2d7e:	f0 0d       	add	r31, r0
    2d80:	11 24       	eor	r1, r1
    2d82:	e1 53       	subi	r30, 0x31	; 49
    2d84:	f4 4d       	sbci	r31, 0xD4	; 212
    2d86:	86 81       	ldd	r24, Z+6	; 0x06
    2d88:	97 81       	ldd	r25, Z+7	; 0x07
    2d8a:	80 93 ae 2f 	sts	0x2FAE, r24	; 0x802fae <next_byte>
    2d8e:	94 c0       	rjmp	.+296    	; 0x2eb8 <ir_transmit+0x174>
    2d90:	89 e3       	ldi	r24, 0x39	; 57
    2d92:	8c 9f       	mul	r24, r28
    2d94:	f0 01       	movw	r30, r0
    2d96:	8d 9f       	mul	r24, r29
    2d98:	f0 0d       	add	r31, r0
    2d9a:	11 24       	eor	r1, r1
    2d9c:	e1 53       	subi	r30, 0x31	; 49
    2d9e:	f4 4d       	sbci	r31, 0xD4	; 212
    2da0:	86 81       	ldd	r24, Z+6	; 0x06
    2da2:	97 81       	ldd	r25, Z+7	; 0x07
    2da4:	90 93 ae 2f 	sts	0x2FAE, r25	; 0x802fae <next_byte>
    2da8:	87 c0       	rjmp	.+270    	; 0x2eb8 <ir_transmit+0x174>
    2daa:	89 e3       	ldi	r24, 0x39	; 57
    2dac:	8c 9f       	mul	r24, r28
    2dae:	f0 01       	movw	r30, r0
    2db0:	8d 9f       	mul	r24, r29
    2db2:	f0 0d       	add	r31, r0
    2db4:	11 24       	eor	r1, r1
    2db6:	e1 53       	subi	r30, 0x31	; 49
    2db8:	f4 4d       	sbci	r31, 0xD4	; 212
    2dba:	84 81       	ldd	r24, Z+4	; 0x04
    2dbc:	95 81       	ldd	r25, Z+5	; 0x05
    2dbe:	80 93 ae 2f 	sts	0x2FAE, r24	; 0x802fae <next_byte>
    2dc2:	7a c0       	rjmp	.+244    	; 0x2eb8 <ir_transmit+0x174>
    2dc4:	89 e3       	ldi	r24, 0x39	; 57
    2dc6:	8c 9f       	mul	r24, r28
    2dc8:	f0 01       	movw	r30, r0
    2dca:	8d 9f       	mul	r24, r29
    2dcc:	f0 0d       	add	r31, r0
    2dce:	11 24       	eor	r1, r1
    2dd0:	e1 53       	subi	r30, 0x31	; 49
    2dd2:	f4 4d       	sbci	r31, 0xD4	; 212
    2dd4:	84 81       	ldd	r24, Z+4	; 0x04
    2dd6:	95 81       	ldd	r25, Z+5	; 0x05
    2dd8:	90 93 ae 2f 	sts	0x2FAE, r25	; 0x802fae <next_byte>
    2ddc:	6d c0       	rjmp	.+218    	; 0x2eb8 <ir_transmit+0x174>
    2dde:	89 e3       	ldi	r24, 0x39	; 57
    2de0:	8c 9f       	mul	r24, r28
    2de2:	f0 01       	movw	r30, r0
    2de4:	8d 9f       	mul	r24, r29
    2de6:	f0 0d       	add	r31, r0
    2de8:	11 24       	eor	r1, r1
    2dea:	e1 53       	subi	r30, 0x31	; 49
    2dec:	f4 4d       	sbci	r31, 0xD4	; 212
    2dee:	86 a9       	ldd	r24, Z+54	; 0x36
    2df0:	8f 73       	andi	r24, 0x3F	; 63
    2df2:	80 93 ae 2f 	sts	0x2FAE, r24	; 0x802fae <next_byte>
    2df6:	80 ad       	ldd	r24, Z+56	; 0x38
    2df8:	90 91 ae 2f 	lds	r25, 0x2FAE	; 0x802fae <next_byte>
    2dfc:	80 78       	andi	r24, 0x80	; 128
    2dfe:	89 2b       	or	r24, r25
    2e00:	80 93 ae 2f 	sts	0x2FAE, r24	; 0x802fae <next_byte>
    2e04:	80 ad       	ldd	r24, Z+56	; 0x38
    2e06:	90 91 ae 2f 	lds	r25, 0x2FAE	; 0x802fae <next_byte>
    2e0a:	80 74       	andi	r24, 0x40	; 64
    2e0c:	89 2b       	or	r24, r25
    2e0e:	80 93 ae 2f 	sts	0x2FAE, r24	; 0x802fae <next_byte>
    2e12:	52 c0       	rjmp	.+164    	; 0x2eb8 <ir_transmit+0x174>
    2e14:	89 e3       	ldi	r24, 0x39	; 57
    2e16:	8c 9f       	mul	r24, r28
    2e18:	f0 01       	movw	r30, r0
    2e1a:	8d 9f       	mul	r24, r29
    2e1c:	f0 0d       	add	r31, r0
    2e1e:	11 24       	eor	r1, r1
    2e20:	e1 53       	subi	r30, 0x31	; 49
    2e22:	f4 4d       	sbci	r31, 0xD4	; 212
    2e24:	80 85       	ldd	r24, Z+8	; 0x08
    2e26:	91 85       	ldd	r25, Z+9	; 0x09
    2e28:	80 93 ae 2f 	sts	0x2FAE, r24	; 0x802fae <next_byte>
    2e2c:	45 c0       	rjmp	.+138    	; 0x2eb8 <ir_transmit+0x174>
    2e2e:	89 e3       	ldi	r24, 0x39	; 57
    2e30:	8c 9f       	mul	r24, r28
    2e32:	f0 01       	movw	r30, r0
    2e34:	8d 9f       	mul	r24, r29
    2e36:	f0 0d       	add	r31, r0
    2e38:	11 24       	eor	r1, r1
    2e3a:	e1 53       	subi	r30, 0x31	; 49
    2e3c:	f4 4d       	sbci	r31, 0xD4	; 212
    2e3e:	80 85       	ldd	r24, Z+8	; 0x08
    2e40:	91 85       	ldd	r25, Z+9	; 0x09
    2e42:	90 93 ae 2f 	sts	0x2FAE, r25	; 0x802fae <next_byte>
    2e46:	38 c0       	rjmp	.+112    	; 0x2eb8 <ir_transmit+0x174>
    2e48:	89 e3       	ldi	r24, 0x39	; 57
    2e4a:	8c 9f       	mul	r24, r28
    2e4c:	f0 01       	movw	r30, r0
    2e4e:	8d 9f       	mul	r24, r29
    2e50:	f0 0d       	add	r31, r0
    2e52:	11 24       	eor	r1, r1
    2e54:	e1 53       	subi	r30, 0x31	; 49
    2e56:	f4 4d       	sbci	r31, 0xD4	; 212
    2e58:	80 ad       	ldd	r24, Z+56	; 0x38
    2e5a:	86 fd       	sbrc	r24, 6
    2e5c:	05 c0       	rjmp	.+10     	; 0x2e68 <ir_transmit+0x124>
    2e5e:	81 2f       	mov	r24, r17
    2e60:	88 6f       	ori	r24, 0xF8	; 248
    2e62:	80 93 ae 2f 	sts	0x2FAE, r24	; 0x802fae <next_byte>
    2e66:	28 c0       	rjmp	.+80     	; 0x2eb8 <ir_transmit+0x174>
    2e68:	0e 94 20 08 	call	0x1040	; 0x1040 <get_time>
    2e6c:	29 e3       	ldi	r18, 0x39	; 57
    2e6e:	2c 9f       	mul	r18, r28
    2e70:	f0 01       	movw	r30, r0
    2e72:	2d 9f       	mul	r18, r29
    2e74:	f0 0d       	add	r31, r0
    2e76:	11 24       	eor	r1, r1
    2e78:	e1 53       	subi	r30, 0x31	; 49
    2e7a:	f4 4d       	sbci	r31, 0xD4	; 212
    2e7c:	20 85       	ldd	r18, Z+8	; 0x08
    2e7e:	31 85       	ldd	r19, Z+9	; 0x09
    2e80:	62 1b       	sub	r22, r18
    2e82:	73 0b       	sbc	r23, r19
    2e84:	6f 3f       	cpi	r22, 0xFF	; 255
    2e86:	71 05       	cpc	r23, r1
    2e88:	18 f4       	brcc	.+6      	; 0x2e90 <ir_transmit+0x14c>
    2e8a:	60 93 ae 2f 	sts	0x2FAE, r22	; 0x802fae <next_byte>
    2e8e:	14 c0       	rjmp	.+40     	; 0x2eb8 <ir_transmit+0x174>
    2e90:	8f ef       	ldi	r24, 0xFF	; 255
    2e92:	80 93 ae 2f 	sts	0x2FAE, r24	; 0x802fae <next_byte>
    2e96:	10 c0       	rjmp	.+32     	; 0x2eb8 <ir_transmit+0x174>
    2e98:	89 e3       	ldi	r24, 0x39	; 57
    2e9a:	8c 9f       	mul	r24, r28
    2e9c:	f0 01       	movw	r30, r0
    2e9e:	8d 9f       	mul	r24, r29
    2ea0:	f0 0d       	add	r31, r0
    2ea2:	11 24       	eor	r1, r1
    2ea4:	e1 53       	subi	r30, 0x31	; 49
    2ea6:	f4 4d       	sbci	r31, 0xD4	; 212
    2ea8:	82 85       	ldd	r24, Z+10	; 0x0a
    2eaa:	93 85       	ldd	r25, Z+11	; 0x0b
    2eac:	08 97       	sbiw	r24, 0x08	; 8
    2eae:	e8 0f       	add	r30, r24
    2eb0:	f9 1f       	adc	r31, r25
    2eb2:	86 85       	ldd	r24, Z+14	; 0x0e
    2eb4:	80 93 ae 2f 	sts	0x2FAE, r24	; 0x802fae <next_byte>
    2eb8:	fe 01       	movw	r30, r28
    2eba:	ee 0f       	add	r30, r30
    2ebc:	ff 1f       	adc	r31, r31
    2ebe:	ec 5d       	subi	r30, 0xDC	; 220
    2ec0:	ff 4d       	sbci	r31, 0xDF	; 223
    2ec2:	01 90       	ld	r0, Z+
    2ec4:	f0 81       	ld	r31, Z
    2ec6:	e0 2d       	mov	r30, r0
    2ec8:	80 91 ae 2f 	lds	r24, 0x2FAE	; 0x802fae <next_byte>
    2ecc:	80 83       	st	Z, r24
    2ece:	89 e3       	ldi	r24, 0x39	; 57
    2ed0:	8c 9f       	mul	r24, r28
    2ed2:	f0 01       	movw	r30, r0
    2ed4:	8d 9f       	mul	r24, r29
    2ed6:	f0 0d       	add	r31, r0
    2ed8:	11 24       	eor	r1, r1
    2eda:	e1 53       	subi	r30, 0x31	; 49
    2edc:	f4 4d       	sbci	r31, 0xD4	; 212
    2ede:	22 85       	ldd	r18, Z+10	; 0x0a
    2ee0:	33 85       	ldd	r19, Z+11	; 0x0b
    2ee2:	2f 5f       	subi	r18, 0xFF	; 255
    2ee4:	3f 4f       	sbci	r19, 0xFF	; 255
    2ee6:	22 87       	std	Z+10, r18	; 0x0a
    2ee8:	33 87       	std	Z+11, r19	; 0x0b
    2eea:	82 85       	ldd	r24, Z+10	; 0x0a
    2eec:	93 85       	ldd	r25, Z+11	; 0x0b
    2eee:	26 a9       	ldd	r18, Z+54	; 0x36
    2ef0:	30 e0       	ldi	r19, 0x00	; 0
    2ef2:	28 5f       	subi	r18, 0xF8	; 248
    2ef4:	3f 4f       	sbci	r19, 0xFF	; 255
    2ef6:	82 17       	cp	r24, r18
    2ef8:	93 07       	cpc	r25, r19
    2efa:	60 f0       	brcs	.+24     	; 0x2f14 <ir_transmit+0x1d0>
    2efc:	81 2f       	mov	r24, r17
    2efe:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <clear_ir_buffer>
    2f02:	cc 0f       	add	r28, r28
    2f04:	dd 1f       	adc	r29, r29
    2f06:	cc 5d       	subi	r28, 0xDC	; 220
    2f08:	df 4d       	sbci	r29, 0xDF	; 223
    2f0a:	e8 81       	ld	r30, Y
    2f0c:	f9 81       	ldd	r31, Y+1	; 0x01
    2f0e:	83 81       	ldd	r24, Z+3	; 0x03
    2f10:	8c 7f       	andi	r24, 0xFC	; 252
    2f12:	83 83       	std	Z+3, r24	; 0x03
    2f14:	df 91       	pop	r29
    2f16:	cf 91       	pop	r28
    2f18:	1f 91       	pop	r17
    2f1a:	08 95       	ret

00002f1c <ir_transmit_complete>:
    2f1c:	5f b7       	in	r21, 0x3f	; 63
    2f1e:	f8 94       	cli
    2f20:	e0 e0       	ldi	r30, 0x00	; 0
    2f22:	fb e0       	ldi	r31, 0x0B	; 11
    2f24:	41 81       	ldd	r20, Z+1	; 0x01
    2f26:	28 2f       	mov	r18, r24
    2f28:	30 e0       	ldi	r19, 0x00	; 0
    2f2a:	d9 01       	movw	r26, r18
    2f2c:	aa 5f       	subi	r26, 0xFA	; 250
    2f2e:	bf 4d       	sbci	r27, 0xDF	; 223
    2f30:	9c 91       	ld	r25, X
    2f32:	90 95       	com	r25
    2f34:	94 23       	and	r25, r20
    2f36:	91 83       	std	Z+1, r25	; 0x01
    2f38:	99 e3       	ldi	r25, 0x39	; 57
    2f3a:	92 9f       	mul	r25, r18
    2f3c:	f0 01       	movw	r30, r0
    2f3e:	93 9f       	mul	r25, r19
    2f40:	f0 0d       	add	r31, r0
    2f42:	11 24       	eor	r1, r1
    2f44:	e1 53       	subi	r30, 0x31	; 49
    2f46:	f4 4d       	sbci	r31, 0xD4	; 212
    2f48:	10 ae       	std	Z+56, r1	; 0x38
    2f4a:	16 aa       	std	Z+54, r1	; 0x36
    2f4c:	12 86       	std	Z+10, r1	; 0x0a
    2f4e:	13 86       	std	Z+11, r1	; 0x0b
    2f50:	10 86       	std	Z+8, r1	; 0x08
    2f52:	11 86       	std	Z+9, r1	; 0x09
    2f54:	16 82       	std	Z+6, r1	; 0x06
    2f56:	17 82       	std	Z+7, r1	; 0x07
    2f58:	22 0f       	add	r18, r18
    2f5a:	33 1f       	adc	r19, r19
    2f5c:	f9 01       	movw	r30, r18
    2f5e:	ec 5d       	subi	r30, 0xDC	; 220
    2f60:	ff 4d       	sbci	r31, 0xDF	; 223
    2f62:	a0 81       	ld	r26, Z
    2f64:	b1 81       	ldd	r27, Z+1	; 0x01
    2f66:	11 96       	adiw	r26, 0x01	; 1
    2f68:	9c 91       	ld	r25, X
    2f6a:	11 97       	sbiw	r26, 0x01	; 1
    2f6c:	90 64       	ori	r25, 0x40	; 64
    2f6e:	11 96       	adiw	r26, 0x01	; 1
    2f70:	9c 93       	st	X, r25
    2f72:	01 90       	ld	r0, Z+
    2f74:	f0 81       	ld	r31, Z
    2f76:	e0 2d       	mov	r30, r0
    2f78:	94 81       	ldd	r25, Z+4	; 0x04
    2f7a:	90 61       	ori	r25, 0x10	; 16
    2f7c:	94 83       	std	Z+4, r25	; 0x04
    2f7e:	40 91 5a 2f 	lds	r20, 0x2F5A	; 0x802f5a <hp_ir_block_bm>
    2f82:	21 e0       	ldi	r18, 0x01	; 1
    2f84:	30 e0       	ldi	r19, 0x00	; 0
    2f86:	b9 01       	movw	r22, r18
    2f88:	02 c0       	rjmp	.+4      	; 0x2f8e <ir_transmit_complete+0x72>
    2f8a:	66 0f       	add	r22, r22
    2f8c:	77 1f       	adc	r23, r23
    2f8e:	8a 95       	dec	r24
    2f90:	e2 f7       	brpl	.-8      	; 0x2f8a <ir_transmit_complete+0x6e>
    2f92:	cb 01       	movw	r24, r22
    2f94:	80 95       	com	r24
    2f96:	84 23       	and	r24, r20
    2f98:	80 93 5a 2f 	sts	0x2F5A, r24	; 0x802f5a <hp_ir_block_bm>
    2f9c:	5f bf       	out	0x3f, r21	; 63
    2f9e:	08 95       	ret

00002fa0 <ir_is_available>:
}

uint8_t ir_is_available(uint8_t dirs_mask){
    2fa0:	20 e0       	ldi	r18, 0x00	; 0
    2fa2:	30 e0       	ldi	r19, 0x00	; 0
	for(uint8_t dir=0; dir<6; dir++){
    	if(dirs_mask&(1<<dir)){
    2fa4:	90 e0       	ldi	r25, 0x00	; 0
        	if(ir_rxtx[dir].status & IR_STATUS_TRANSMITTING_bm){
    2fa6:	69 e3       	ldi	r22, 0x39	; 57
	ir_transmit_complete(dir); //main reason I can see not to this is that when we're receiving we don't need to turn off the carrier wave. Doing shouldn't hurt, however?
}

uint8_t ir_is_available(uint8_t dirs_mask){
	for(uint8_t dir=0; dir<6; dir++){
    	if(dirs_mask&(1<<dir)){
    2fa8:	ac 01       	movw	r20, r24
    2faa:	02 2e       	mov	r0, r18
    2fac:	02 c0       	rjmp	.+4      	; 0x2fb2 <ir_is_available+0x12>
    2fae:	55 95       	asr	r21
    2fb0:	47 95       	ror	r20
    2fb2:	0a 94       	dec	r0
    2fb4:	e2 f7       	brpl	.-8      	; 0x2fae <ir_is_available+0xe>
    2fb6:	40 ff       	sbrs	r20, 0
    2fb8:	0a c0       	rjmp	.+20     	; 0x2fce <ir_is_available+0x2e>
        	if(ir_rxtx[dir].status & IR_STATUS_TRANSMITTING_bm){
    2fba:	62 9f       	mul	r22, r18
    2fbc:	f0 01       	movw	r30, r0
    2fbe:	63 9f       	mul	r22, r19
    2fc0:	f0 0d       	add	r31, r0
    2fc2:	11 24       	eor	r1, r1
    2fc4:	e1 53       	subi	r30, 0x31	; 49
    2fc6:	f4 4d       	sbci	r31, 0xD4	; 212
    2fc8:	40 ad       	ldd	r20, Z+56	; 0x38
    2fca:	45 fd       	sbrc	r20, 5
    2fcc:	07 c0       	rjmp	.+14     	; 0x2fdc <ir_is_available+0x3c>
    2fce:	2f 5f       	subi	r18, 0xFF	; 255
    2fd0:	3f 4f       	sbci	r19, 0xFF	; 255
void ir_reset_rx(uint8_t dir){
	ir_transmit_complete(dir); //main reason I can see not to this is that when we're receiving we don't need to turn off the carrier wave. Doing shouldn't hurt, however?
}

uint8_t ir_is_available(uint8_t dirs_mask){
	for(uint8_t dir=0; dir<6; dir++){
    2fd2:	26 30       	cpi	r18, 0x06	; 6
    2fd4:	31 05       	cpc	r19, r1
    2fd6:	41 f7       	brne	.-48     	; 0x2fa8 <ir_is_available+0x8>
        	if(ir_rxtx[dir].status & IR_STATUS_TRANSMITTING_bm){
            	return 0;
        	}
    	}
	}
    return 1;
    2fd8:	81 e0       	ldi	r24, 0x01	; 1
    2fda:	08 95       	ret

uint8_t ir_is_available(uint8_t dirs_mask){
	for(uint8_t dir=0; dir<6; dir++){
    	if(dirs_mask&(1<<dir)){
        	if(ir_rxtx[dir].status & IR_STATUS_TRANSMITTING_bm){
            	return 0;
    2fdc:	80 e0       	ldi	r24, 0x00	; 0
        	}
    	}
	}
    return 1;
}
    2fde:	08 95       	ret

00002fe0 <ir_targeted_cmd>:
	send_msg(dirs_to_go, data, data_length, 0);
	//printf("Sent msg of length %hu at time%%10000: %u.\r\n", data_length, (uint16_t)(get_time()%10000));
    return 1;
}

uint8_t ir_targeted_cmd(uint8_t dirs, char *data, uint8_t data_length, uint16_t target){
    2fe0:	bf 92       	push	r11
    2fe2:	cf 92       	push	r12
    2fe4:	df 92       	push	r13
    2fe6:	ef 92       	push	r14
    2fe8:	ff 92       	push	r15
    2fea:	0f 93       	push	r16
    2fec:	1f 93       	push	r17
    2fee:	cf 93       	push	r28
    2ff0:	df 93       	push	r29
    2ff2:	c8 2e       	mov	r12, r24
    2ff4:	7b 01       	movw	r14, r22
    2ff6:	d4 2e       	mov	r13, r20
    2ff8:	89 01       	movw	r16, r18
 * This function returns '0' if no message was sent because the channels were busy, and '1' if it was successful 
 * in claiming channels and starting the message send process. Note that this function returning '1' doesn't
 * guarantee a successful transmission, as it's still possible for something to go wrong with the send.
 */
inline uint8_t all_ir_sends(uint8_t dirs_to_go, char* data, uint8_t data_length, uint16_t target, uint8_t cmd_flag){
	if(hp_ir_block_bm){
    2ffa:	80 91 5a 2f 	lds	r24, 0x2F5A	; 0x802f5a <hp_ir_block_bm>
    2ffe:	88 23       	and	r24, r24
    3000:	31 f0       	breq	.+12     	; 0x300e <ir_targeted_cmd+0x2e>
		printf("Normal send blocked by hp.\r\n");
    3002:	8c ee       	ldi	r24, 0xEC	; 236
    3004:	90 e2       	ldi	r25, 0x20	; 32
    3006:	0e 94 25 57 	call	0xae4a	; 0xae4a <puts>
		return 0;
    300a:	b1 2c       	mov	r11, r1
    300c:	6b c0       	rjmp	.+214    	; 0x30e4 <ir_targeted_cmd+0x104>
	}
	if(!ir_is_available(dirs_to_go)){
    300e:	8c 2d       	mov	r24, r12
    3010:	0e 94 d0 17 	call	0x2fa0	; 0x2fa0 <ir_is_available>
    3014:	b8 2e       	mov	r11, r24
    3016:	81 11       	cpse	r24, r1
    3018:	2a c0       	rjmp	.+84     	; 0x306e <ir_targeted_cmd+0x8e>
        printf_P(PSTR("Aborting IR send while trying:\r\n\t"));
    301a:	83 e9       	ldi	r24, 0x93	; 147
    301c:	95 e0       	ldi	r25, 0x05	; 5
    301e:	9f 93       	push	r25
    3020:	8f 93       	push	r24
    3022:	0e 94 f7 56 	call	0xadee	; 0xadee <printf_P>
		for(uint8_t i=0;i<data_length;i++){
    3026:	0f 90       	pop	r0
    3028:	0f 90       	pop	r0
    302a:	dd 20       	and	r13, r13
    302c:	b9 f0       	breq	.+46     	; 0x305c <ir_targeted_cmd+0x7c>
    302e:	e7 01       	movw	r28, r14
    3030:	da 94       	dec	r13
    3032:	8d 2d       	mov	r24, r13
    3034:	90 e0       	ldi	r25, 0x00	; 0
    3036:	01 96       	adiw	r24, 0x01	; 1
    3038:	e8 0e       	add	r14, r24
    303a:	f9 1e       	adc	r15, r25
			printf("%02hX ",data[i]);
    303c:	08 e0       	ldi	r16, 0x08	; 8
    303e:	11 e2       	ldi	r17, 0x21	; 33
    3040:	99 91       	ld	r25, Y+
    3042:	1f 92       	push	r1
    3044:	9f 93       	push	r25
    3046:	1f 93       	push	r17
    3048:	0f 93       	push	r16
    304a:	0e 94 e3 56 	call	0xadc6	; 0xadc6 <printf>
		printf("Normal send blocked by hp.\r\n");
		return 0;
	}
	if(!ir_is_available(dirs_to_go)){
        printf_P(PSTR("Aborting IR send while trying:\r\n\t"));
		for(uint8_t i=0;i<data_length;i++){
    304e:	0f 90       	pop	r0
    3050:	0f 90       	pop	r0
    3052:	0f 90       	pop	r0
    3054:	0f 90       	pop	r0
    3056:	ce 15       	cp	r28, r14
    3058:	df 05       	cpc	r29, r15
    305a:	91 f7       	brne	.-28     	; 0x3040 <ir_targeted_cmd+0x60>
			printf("%02hX ",data[i]);
		}
		printf_P(PSTR("\r\nChannels are probably blocked by your previous message.\r\n"));
    305c:	87 e5       	ldi	r24, 0x57	; 87
    305e:	95 e0       	ldi	r25, 0x05	; 5
    3060:	9f 93       	push	r25
    3062:	8f 93       	push	r24
    3064:	0e 94 f7 56 	call	0xadee	; 0xadee <printf_P>
    3068:	0f 90       	pop	r0
    306a:	0f 90       	pop	r0
    306c:	3b c0       	rjmp	.+118    	; 0x30e4 <ir_targeted_cmd+0x104>
    306e:	c4 e2       	ldi	r28, 0x24	; 36
    3070:	d0 e2       	ldi	r29, 0x20	; 32
inline uint8_t all_ir_sends(uint8_t dirs_to_go, char* data, uint8_t data_length, uint16_t target, uint8_t cmd_flag){
	if(hp_ir_block_bm){
		printf("Normal send blocked by hp.\r\n");
		return 0;
	}
	if(!ir_is_available(dirs_to_go)){
    3072:	e0 e0       	ldi	r30, 0x00	; 0
    3074:	f0 e0       	ldi	r31, 0x00	; 0
		}
		printf_P(PSTR("\r\nChannels are probably blocked by your previous message.\r\n"));
        return 0;
    }        
	for(uint8_t dir=0;dir<6;dir++){
		if(dirs_to_go&(1<<dir)){		
    3076:	4c 2d       	mov	r20, r12
    3078:	50 e0       	ldi	r21, 0x00	; 0
			channel[dir]->CTRLB &= ~USART_RXEN_bm;
			ir_rxtx[dir].status = IR_STATUS_BUSY_bm;
    307a:	79 e3       	ldi	r23, 0x39	; 57
    307c:	61 e0       	ldi	r22, 0x01	; 1
		}
		printf_P(PSTR("\r\nChannels are probably blocked by your previous message.\r\n"));
        return 0;
    }        
	for(uint8_t dir=0;dir<6;dir++){
		if(dirs_to_go&(1<<dir)){		
    307e:	9a 01       	movw	r18, r20
    3080:	0e 2e       	mov	r0, r30
    3082:	02 c0       	rjmp	.+4      	; 0x3088 <ir_targeted_cmd+0xa8>
    3084:	35 95       	asr	r19
    3086:	27 95       	ror	r18
    3088:	0a 94       	dec	r0
    308a:	e2 f7       	brpl	.-8      	; 0x3084 <ir_targeted_cmd+0xa4>
    308c:	20 ff       	sbrs	r18, 0
    308e:	1d c0       	rjmp	.+58     	; 0x30ca <ir_targeted_cmd+0xea>
			channel[dir]->CTRLB &= ~USART_RXEN_bm;
    3090:	a8 81       	ld	r26, Y
    3092:	b9 81       	ldd	r27, Y+1	; 0x01
    3094:	14 96       	adiw	r26, 0x04	; 4
    3096:	8c 91       	ld	r24, X
    3098:	14 97       	sbiw	r26, 0x04	; 4
    309a:	8f 7e       	andi	r24, 0xEF	; 239
    309c:	14 96       	adiw	r26, 0x04	; 4
    309e:	8c 93       	st	X, r24
			ir_rxtx[dir].status = IR_STATUS_BUSY_bm;
    30a0:	7e 9f       	mul	r23, r30
    30a2:	d0 01       	movw	r26, r0
    30a4:	7f 9f       	mul	r23, r31
    30a6:	b0 0d       	add	r27, r0
    30a8:	11 24       	eor	r1, r1
    30aa:	a1 53       	subi	r26, 0x31	; 49
    30ac:	b4 4d       	sbci	r27, 0xD4	; 212
    30ae:	d8 96       	adiw	r26, 0x38	; 56
    30b0:	6c 93       	st	X, r22
    30b2:	d8 97       	sbiw	r26, 0x38	; 56
			if(cmd_flag) ir_rxtx[dir].status |= IR_STATUS_COMMAND_bm;
    30b4:	d8 96       	adiw	r26, 0x38	; 56
    30b6:	9c 91       	ld	r25, X
    30b8:	d8 97       	sbiw	r26, 0x38	; 56
    30ba:	90 68       	ori	r25, 0x80	; 128
    30bc:	d8 96       	adiw	r26, 0x38	; 56
    30be:	9c 93       	st	X, r25
    30c0:	d8 97       	sbiw	r26, 0x38	; 56
			ir_rxtx[dir].target_ID=target;
    30c2:	18 96       	adiw	r26, 0x08	; 8
    30c4:	0d 93       	st	X+, r16
    30c6:	1c 93       	st	X, r17
    30c8:	19 97       	sbiw	r26, 0x09	; 9
    30ca:	31 96       	adiw	r30, 0x01	; 1
    30cc:	22 96       	adiw	r28, 0x02	; 2
			printf("%02hX ",data[i]);
		}
		printf_P(PSTR("\r\nChannels are probably blocked by your previous message.\r\n"));
        return 0;
    }        
	for(uint8_t dir=0;dir<6;dir++){
    30ce:	e6 30       	cpi	r30, 0x06	; 6
    30d0:	f1 05       	cpc	r31, r1
    30d2:	a9 f6       	brne	.-86     	; 0x307e <ir_targeted_cmd+0x9e>
			ir_rxtx[dir].status = IR_STATUS_BUSY_bm;
			if(cmd_flag) ir_rxtx[dir].status |= IR_STATUS_COMMAND_bm;
			ir_rxtx[dir].target_ID=target;
		}
	}
	send_msg(dirs_to_go, data, data_length, 0);
    30d4:	20 e0       	ldi	r18, 0x00	; 0
    30d6:	4d 2d       	mov	r20, r13
    30d8:	b7 01       	movw	r22, r14
    30da:	8c 2d       	mov	r24, r12
    30dc:	0e 94 4e 11 	call	0x229c	; 0x229c <send_msg>
	//printf("Sent msg of length %hu at time%%10000: %u.\r\n", data_length, (uint16_t)(get_time()%10000));
    return 1;
    30e0:	bb 24       	eor	r11, r11
    30e2:	b3 94       	inc	r11
}

uint8_t ir_targeted_cmd(uint8_t dirs, char *data, uint8_t data_length, uint16_t target){
	return all_ir_sends(dirs, data, data_length, target, 1);
}
    30e4:	8b 2d       	mov	r24, r11
    30e6:	df 91       	pop	r29
    30e8:	cf 91       	pop	r28
    30ea:	1f 91       	pop	r17
    30ec:	0f 91       	pop	r16
    30ee:	ff 90       	pop	r15
    30f0:	ef 90       	pop	r14
    30f2:	df 90       	pop	r13
    30f4:	cf 90       	pop	r12
    30f6:	bf 90       	pop	r11
    30f8:	08 95       	ret

000030fa <ir_cmd>:

uint8_t ir_cmd(uint8_t dirs, char *data, uint8_t data_length){	
    30fa:	cf 92       	push	r12
    30fc:	df 92       	push	r13
    30fe:	ef 92       	push	r14
    3100:	ff 92       	push	r15
    3102:	0f 93       	push	r16
    3104:	1f 93       	push	r17
    3106:	cf 93       	push	r28
    3108:	df 93       	push	r29
    310a:	c8 2f       	mov	r28, r24
    310c:	8b 01       	movw	r16, r22
    310e:	f4 2e       	mov	r15, r20
 * This function returns '0' if no message was sent because the channels were busy, and '1' if it was successful 
 * in claiming channels and starting the message send process. Note that this function returning '1' doesn't
 * guarantee a successful transmission, as it's still possible for something to go wrong with the send.
 */
inline uint8_t all_ir_sends(uint8_t dirs_to_go, char* data, uint8_t data_length, uint16_t target, uint8_t cmd_flag){
	if(hp_ir_block_bm){
    3110:	80 91 5a 2f 	lds	r24, 0x2F5A	; 0x802f5a <hp_ir_block_bm>
    3114:	88 23       	and	r24, r24
    3116:	31 f0       	breq	.+12     	; 0x3124 <ir_cmd+0x2a>
		printf("Normal send blocked by hp.\r\n");
    3118:	8c ee       	ldi	r24, 0xEC	; 236
    311a:	90 e2       	ldi	r25, 0x20	; 32
    311c:	0e 94 25 57 	call	0xae4a	; 0xae4a <puts>
		return 0;
    3120:	e1 2c       	mov	r14, r1
    3122:	64 c0       	rjmp	.+200    	; 0x31ec <ir_cmd+0xf2>
	}
	if(!ir_is_available(dirs_to_go)){
    3124:	8c 2f       	mov	r24, r28
    3126:	0e 94 d0 17 	call	0x2fa0	; 0x2fa0 <ir_is_available>
    312a:	e8 2e       	mov	r14, r24
    312c:	81 11       	cpse	r24, r1
    312e:	2c c0       	rjmp	.+88     	; 0x3188 <ir_cmd+0x8e>
        printf_P(PSTR("Aborting IR send while trying:\r\n\t"));
    3130:	83 e9       	ldi	r24, 0x93	; 147
    3132:	95 e0       	ldi	r25, 0x05	; 5
    3134:	9f 93       	push	r25
    3136:	8f 93       	push	r24
    3138:	0e 94 f7 56 	call	0xadee	; 0xadee <printf_P>
		for(uint8_t i=0;i<data_length;i++){
    313c:	0f 90       	pop	r0
    313e:	0f 90       	pop	r0
    3140:	ff 20       	and	r15, r15
    3142:	c9 f0       	breq	.+50     	; 0x3176 <ir_cmd+0x7c>
    3144:	e8 01       	movw	r28, r16
    3146:	fa 94       	dec	r15
    3148:	cf 2c       	mov	r12, r15
    314a:	d1 2c       	mov	r13, r1
    314c:	8f ef       	ldi	r24, 0xFF	; 255
    314e:	c8 1a       	sub	r12, r24
    3150:	d8 0a       	sbc	r13, r24
    3152:	c0 0e       	add	r12, r16
    3154:	d1 1e       	adc	r13, r17
			printf("%02hX ",data[i]);
    3156:	08 e0       	ldi	r16, 0x08	; 8
    3158:	11 e2       	ldi	r17, 0x21	; 33
    315a:	99 91       	ld	r25, Y+
    315c:	1f 92       	push	r1
    315e:	9f 93       	push	r25
    3160:	1f 93       	push	r17
    3162:	0f 93       	push	r16
    3164:	0e 94 e3 56 	call	0xadc6	; 0xadc6 <printf>
		printf("Normal send blocked by hp.\r\n");
		return 0;
	}
	if(!ir_is_available(dirs_to_go)){
        printf_P(PSTR("Aborting IR send while trying:\r\n\t"));
		for(uint8_t i=0;i<data_length;i++){
    3168:	0f 90       	pop	r0
    316a:	0f 90       	pop	r0
    316c:	0f 90       	pop	r0
    316e:	0f 90       	pop	r0
    3170:	cc 15       	cp	r28, r12
    3172:	dd 05       	cpc	r29, r13
    3174:	91 f7       	brne	.-28     	; 0x315a <ir_cmd+0x60>
			printf("%02hX ",data[i]);
		}
		printf_P(PSTR("\r\nChannels are probably blocked by your previous message.\r\n"));
    3176:	87 e5       	ldi	r24, 0x57	; 87
    3178:	95 e0       	ldi	r25, 0x05	; 5
    317a:	9f 93       	push	r25
    317c:	8f 93       	push	r24
    317e:	0e 94 f7 56 	call	0xadee	; 0xadee <printf_P>
    3182:	0f 90       	pop	r0
    3184:	0f 90       	pop	r0
    3186:	32 c0       	rjmp	.+100    	; 0x31ec <ir_cmd+0xf2>
    3188:	a4 e2       	ldi	r26, 0x24	; 36
    318a:	b0 e2       	ldi	r27, 0x20	; 32
inline uint8_t all_ir_sends(uint8_t dirs_to_go, char* data, uint8_t data_length, uint16_t target, uint8_t cmd_flag){
	if(hp_ir_block_bm){
		printf("Normal send blocked by hp.\r\n");
		return 0;
	}
	if(!ir_is_available(dirs_to_go)){
    318c:	20 e0       	ldi	r18, 0x00	; 0
    318e:	30 e0       	ldi	r19, 0x00	; 0
		}
		printf_P(PSTR("\r\nChannels are probably blocked by your previous message.\r\n"));
        return 0;
    }        
	for(uint8_t dir=0;dir<6;dir++){
		if(dirs_to_go&(1<<dir)){		
    3190:	4c 2f       	mov	r20, r28
    3192:	50 e0       	ldi	r21, 0x00	; 0
			channel[dir]->CTRLB &= ~USART_RXEN_bm;
			ir_rxtx[dir].status = IR_STATUS_BUSY_bm;
    3194:	d9 e3       	ldi	r29, 0x39	; 57
    3196:	81 e0       	ldi	r24, 0x01	; 1
		}
		printf_P(PSTR("\r\nChannels are probably blocked by your previous message.\r\n"));
        return 0;
    }        
	for(uint8_t dir=0;dir<6;dir++){
		if(dirs_to_go&(1<<dir)){		
    3198:	ba 01       	movw	r22, r20
    319a:	02 2e       	mov	r0, r18
    319c:	02 c0       	rjmp	.+4      	; 0x31a2 <ir_cmd+0xa8>
    319e:	75 95       	asr	r23
    31a0:	67 95       	ror	r22
    31a2:	0a 94       	dec	r0
    31a4:	e2 f7       	brpl	.-8      	; 0x319e <ir_cmd+0xa4>
    31a6:	60 ff       	sbrs	r22, 0
    31a8:	13 c0       	rjmp	.+38     	; 0x31d0 <ir_cmd+0xd6>
			channel[dir]->CTRLB &= ~USART_RXEN_bm;
    31aa:	ed 91       	ld	r30, X+
    31ac:	fc 91       	ld	r31, X
    31ae:	11 97       	sbiw	r26, 0x01	; 1
    31b0:	94 81       	ldd	r25, Z+4	; 0x04
    31b2:	9f 7e       	andi	r25, 0xEF	; 239
    31b4:	94 83       	std	Z+4, r25	; 0x04
			ir_rxtx[dir].status = IR_STATUS_BUSY_bm;
    31b6:	d2 9f       	mul	r29, r18
    31b8:	f0 01       	movw	r30, r0
    31ba:	d3 9f       	mul	r29, r19
    31bc:	f0 0d       	add	r31, r0
    31be:	11 24       	eor	r1, r1
    31c0:	e1 53       	subi	r30, 0x31	; 49
    31c2:	f4 4d       	sbci	r31, 0xD4	; 212
    31c4:	80 af       	std	Z+56, r24	; 0x38
			if(cmd_flag) ir_rxtx[dir].status |= IR_STATUS_COMMAND_bm;
    31c6:	90 ad       	ldd	r25, Z+56	; 0x38
    31c8:	90 68       	ori	r25, 0x80	; 128
    31ca:	90 af       	std	Z+56, r25	; 0x38
			ir_rxtx[dir].target_ID=target;
    31cc:	10 86       	std	Z+8, r1	; 0x08
    31ce:	11 86       	std	Z+9, r1	; 0x09
    31d0:	2f 5f       	subi	r18, 0xFF	; 255
    31d2:	3f 4f       	sbci	r19, 0xFF	; 255
    31d4:	12 96       	adiw	r26, 0x02	; 2
			printf("%02hX ",data[i]);
		}
		printf_P(PSTR("\r\nChannels are probably blocked by your previous message.\r\n"));
        return 0;
    }        
	for(uint8_t dir=0;dir<6;dir++){
    31d6:	26 30       	cpi	r18, 0x06	; 6
    31d8:	31 05       	cpc	r19, r1
    31da:	f1 f6       	brne	.-68     	; 0x3198 <ir_cmd+0x9e>
			ir_rxtx[dir].status = IR_STATUS_BUSY_bm;
			if(cmd_flag) ir_rxtx[dir].status |= IR_STATUS_COMMAND_bm;
			ir_rxtx[dir].target_ID=target;
		}
	}
	send_msg(dirs_to_go, data, data_length, 0);
    31dc:	20 e0       	ldi	r18, 0x00	; 0
    31de:	4f 2d       	mov	r20, r15
    31e0:	b8 01       	movw	r22, r16
    31e2:	8c 2f       	mov	r24, r28
    31e4:	0e 94 4e 11 	call	0x229c	; 0x229c <send_msg>
	//printf("Sent msg of length %hu at time%%10000: %u.\r\n", data_length, (uint16_t)(get_time()%10000));
    return 1;
    31e8:	ee 24       	eor	r14, r14
    31ea:	e3 94       	inc	r14
	return all_ir_sends(dirs, data, data_length, target, 1);
}

uint8_t ir_cmd(uint8_t dirs, char *data, uint8_t data_length){	
	return all_ir_sends(dirs, data, data_length, 0, 1);
}
    31ec:	8e 2d       	mov	r24, r14
    31ee:	df 91       	pop	r29
    31f0:	cf 91       	pop	r28
    31f2:	1f 91       	pop	r17
    31f4:	0f 91       	pop	r16
    31f6:	ff 90       	pop	r15
    31f8:	ef 90       	pop	r14
    31fa:	df 90       	pop	r13
    31fc:	cf 90       	pop	r12
    31fe:	08 95       	ret

00003200 <ir_targeted_send>:

uint8_t ir_targeted_send(uint8_t dirs, char *data, uint8_t data_length, uint16_t target){
    3200:	bf 92       	push	r11
    3202:	cf 92       	push	r12
    3204:	df 92       	push	r13
    3206:	ef 92       	push	r14
    3208:	ff 92       	push	r15
    320a:	0f 93       	push	r16
    320c:	1f 93       	push	r17
    320e:	cf 93       	push	r28
    3210:	df 93       	push	r29
    3212:	c8 2e       	mov	r12, r24
    3214:	7b 01       	movw	r14, r22
    3216:	d4 2e       	mov	r13, r20
    3218:	89 01       	movw	r16, r18
 * This function returns '0' if no message was sent because the channels were busy, and '1' if it was successful 
 * in claiming channels and starting the message send process. Note that this function returning '1' doesn't
 * guarantee a successful transmission, as it's still possible for something to go wrong with the send.
 */
inline uint8_t all_ir_sends(uint8_t dirs_to_go, char* data, uint8_t data_length, uint16_t target, uint8_t cmd_flag){
	if(hp_ir_block_bm){
    321a:	80 91 5a 2f 	lds	r24, 0x2F5A	; 0x802f5a <hp_ir_block_bm>
    321e:	88 23       	and	r24, r24
    3220:	31 f0       	breq	.+12     	; 0x322e <ir_targeted_send+0x2e>
		printf("Normal send blocked by hp.\r\n");
    3222:	8c ee       	ldi	r24, 0xEC	; 236
    3224:	90 e2       	ldi	r25, 0x20	; 32
    3226:	0e 94 25 57 	call	0xae4a	; 0xae4a <puts>
		return 0;
    322a:	b1 2c       	mov	r11, r1
    322c:	5e c0       	rjmp	.+188    	; 0x32ea <ir_targeted_send+0xea>
	}
	if(!ir_is_available(dirs_to_go)){
    322e:	8c 2d       	mov	r24, r12
    3230:	0e 94 d0 17 	call	0x2fa0	; 0x2fa0 <ir_is_available>
    3234:	b8 2e       	mov	r11, r24
    3236:	81 11       	cpse	r24, r1
    3238:	2a c0       	rjmp	.+84     	; 0x328e <ir_targeted_send+0x8e>
        printf_P(PSTR("Aborting IR send while trying:\r\n\t"));
    323a:	83 e9       	ldi	r24, 0x93	; 147
    323c:	95 e0       	ldi	r25, 0x05	; 5
    323e:	9f 93       	push	r25
    3240:	8f 93       	push	r24
    3242:	0e 94 f7 56 	call	0xadee	; 0xadee <printf_P>
		for(uint8_t i=0;i<data_length;i++){
    3246:	0f 90       	pop	r0
    3248:	0f 90       	pop	r0
    324a:	dd 20       	and	r13, r13
    324c:	b9 f0       	breq	.+46     	; 0x327c <ir_targeted_send+0x7c>
    324e:	e7 01       	movw	r28, r14
    3250:	da 94       	dec	r13
    3252:	8d 2d       	mov	r24, r13
    3254:	90 e0       	ldi	r25, 0x00	; 0
    3256:	01 96       	adiw	r24, 0x01	; 1
    3258:	e8 0e       	add	r14, r24
    325a:	f9 1e       	adc	r15, r25
			printf("%02hX ",data[i]);
    325c:	08 e0       	ldi	r16, 0x08	; 8
    325e:	11 e2       	ldi	r17, 0x21	; 33
    3260:	99 91       	ld	r25, Y+
    3262:	1f 92       	push	r1
    3264:	9f 93       	push	r25
    3266:	1f 93       	push	r17
    3268:	0f 93       	push	r16
    326a:	0e 94 e3 56 	call	0xadc6	; 0xadc6 <printf>
		printf("Normal send blocked by hp.\r\n");
		return 0;
	}
	if(!ir_is_available(dirs_to_go)){
        printf_P(PSTR("Aborting IR send while trying:\r\n\t"));
		for(uint8_t i=0;i<data_length;i++){
    326e:	0f 90       	pop	r0
    3270:	0f 90       	pop	r0
    3272:	0f 90       	pop	r0
    3274:	0f 90       	pop	r0
    3276:	ce 15       	cp	r28, r14
    3278:	df 05       	cpc	r29, r15
    327a:	91 f7       	brne	.-28     	; 0x3260 <ir_targeted_send+0x60>
			printf("%02hX ",data[i]);
		}
		printf_P(PSTR("\r\nChannels are probably blocked by your previous message.\r\n"));
    327c:	87 e5       	ldi	r24, 0x57	; 87
    327e:	95 e0       	ldi	r25, 0x05	; 5
    3280:	9f 93       	push	r25
    3282:	8f 93       	push	r24
    3284:	0e 94 f7 56 	call	0xadee	; 0xadee <printf_P>
    3288:	0f 90       	pop	r0
    328a:	0f 90       	pop	r0
    328c:	2e c0       	rjmp	.+92     	; 0x32ea <ir_targeted_send+0xea>
    328e:	a4 e2       	ldi	r26, 0x24	; 36
    3290:	b0 e2       	ldi	r27, 0x20	; 32
inline uint8_t all_ir_sends(uint8_t dirs_to_go, char* data, uint8_t data_length, uint16_t target, uint8_t cmd_flag){
	if(hp_ir_block_bm){
		printf("Normal send blocked by hp.\r\n");
		return 0;
	}
	if(!ir_is_available(dirs_to_go)){
    3292:	e0 e0       	ldi	r30, 0x00	; 0
    3294:	f0 e0       	ldi	r31, 0x00	; 0
		}
		printf_P(PSTR("\r\nChannels are probably blocked by your previous message.\r\n"));
        return 0;
    }        
	for(uint8_t dir=0;dir<6;dir++){
		if(dirs_to_go&(1<<dir)){		
    3296:	4c 2d       	mov	r20, r12
    3298:	50 e0       	ldi	r21, 0x00	; 0
			channel[dir]->CTRLB &= ~USART_RXEN_bm;
			ir_rxtx[dir].status = IR_STATUS_BUSY_bm;
    329a:	69 e3       	ldi	r22, 0x39	; 57
    329c:	81 e0       	ldi	r24, 0x01	; 1
		}
		printf_P(PSTR("\r\nChannels are probably blocked by your previous message.\r\n"));
        return 0;
    }        
	for(uint8_t dir=0;dir<6;dir++){
		if(dirs_to_go&(1<<dir)){		
    329e:	9a 01       	movw	r18, r20
    32a0:	0e 2e       	mov	r0, r30
    32a2:	02 c0       	rjmp	.+4      	; 0x32a8 <ir_targeted_send+0xa8>
    32a4:	35 95       	asr	r19
    32a6:	27 95       	ror	r18
    32a8:	0a 94       	dec	r0
    32aa:	e2 f7       	brpl	.-8      	; 0x32a4 <ir_targeted_send+0xa4>
    32ac:	20 ff       	sbrs	r18, 0
    32ae:	10 c0       	rjmp	.+32     	; 0x32d0 <ir_targeted_send+0xd0>
			channel[dir]->CTRLB &= ~USART_RXEN_bm;
    32b0:	cd 91       	ld	r28, X+
    32b2:	dc 91       	ld	r29, X
    32b4:	11 97       	sbiw	r26, 0x01	; 1
    32b6:	9c 81       	ldd	r25, Y+4	; 0x04
    32b8:	9f 7e       	andi	r25, 0xEF	; 239
    32ba:	9c 83       	std	Y+4, r25	; 0x04
			ir_rxtx[dir].status = IR_STATUS_BUSY_bm;
    32bc:	6e 9f       	mul	r22, r30
    32be:	e0 01       	movw	r28, r0
    32c0:	6f 9f       	mul	r22, r31
    32c2:	d0 0d       	add	r29, r0
    32c4:	11 24       	eor	r1, r1
    32c6:	c1 53       	subi	r28, 0x31	; 49
    32c8:	d4 4d       	sbci	r29, 0xD4	; 212
    32ca:	88 af       	std	Y+56, r24	; 0x38
			if(cmd_flag) ir_rxtx[dir].status |= IR_STATUS_COMMAND_bm;
			ir_rxtx[dir].target_ID=target;
    32cc:	08 87       	std	Y+8, r16	; 0x08
    32ce:	19 87       	std	Y+9, r17	; 0x09
    32d0:	31 96       	adiw	r30, 0x01	; 1
    32d2:	12 96       	adiw	r26, 0x02	; 2
			printf("%02hX ",data[i]);
		}
		printf_P(PSTR("\r\nChannels are probably blocked by your previous message.\r\n"));
        return 0;
    }        
	for(uint8_t dir=0;dir<6;dir++){
    32d4:	e6 30       	cpi	r30, 0x06	; 6
    32d6:	f1 05       	cpc	r31, r1
    32d8:	11 f7       	brne	.-60     	; 0x329e <ir_targeted_send+0x9e>
			ir_rxtx[dir].status = IR_STATUS_BUSY_bm;
			if(cmd_flag) ir_rxtx[dir].status |= IR_STATUS_COMMAND_bm;
			ir_rxtx[dir].target_ID=target;
		}
	}
	send_msg(dirs_to_go, data, data_length, 0);
    32da:	20 e0       	ldi	r18, 0x00	; 0
    32dc:	4d 2d       	mov	r20, r13
    32de:	b7 01       	movw	r22, r14
    32e0:	8c 2d       	mov	r24, r12
    32e2:	0e 94 4e 11 	call	0x229c	; 0x229c <send_msg>
	//printf("Sent msg of length %hu at time%%10000: %u.\r\n", data_length, (uint16_t)(get_time()%10000));
    return 1;
    32e6:	bb 24       	eor	r11, r11
    32e8:	b3 94       	inc	r11
	return all_ir_sends(dirs, data, data_length, 0, 1);
}

uint8_t ir_targeted_send(uint8_t dirs, char *data, uint8_t data_length, uint16_t target){
	return all_ir_sends(dirs, data, data_length, target, 0);
}
    32ea:	8b 2d       	mov	r24, r11
    32ec:	df 91       	pop	r29
    32ee:	cf 91       	pop	r28
    32f0:	1f 91       	pop	r17
    32f2:	0f 91       	pop	r16
    32f4:	ff 90       	pop	r15
    32f6:	ef 90       	pop	r14
    32f8:	df 90       	pop	r13
    32fa:	cf 90       	pop	r12
    32fc:	bf 90       	pop	r11
    32fe:	08 95       	ret

00003300 <ir_send>:

uint8_t ir_send(uint8_t dirs, char *data, uint8_t data_length){
    3300:	cf 92       	push	r12
    3302:	df 92       	push	r13
    3304:	ef 92       	push	r14
    3306:	ff 92       	push	r15
    3308:	0f 93       	push	r16
    330a:	1f 93       	push	r17
    330c:	cf 93       	push	r28
    330e:	df 93       	push	r29
    3310:	c8 2f       	mov	r28, r24
    3312:	8b 01       	movw	r16, r22
    3314:	f4 2e       	mov	r15, r20
 * This function returns '0' if no message was sent because the channels were busy, and '1' if it was successful 
 * in claiming channels and starting the message send process. Note that this function returning '1' doesn't
 * guarantee a successful transmission, as it's still possible for something to go wrong with the send.
 */
inline uint8_t all_ir_sends(uint8_t dirs_to_go, char* data, uint8_t data_length, uint16_t target, uint8_t cmd_flag){
	if(hp_ir_block_bm){
    3316:	80 91 5a 2f 	lds	r24, 0x2F5A	; 0x802f5a <hp_ir_block_bm>
    331a:	88 23       	and	r24, r24
    331c:	31 f0       	breq	.+12     	; 0x332a <ir_send+0x2a>
		printf("Normal send blocked by hp.\r\n");
    331e:	8c ee       	ldi	r24, 0xEC	; 236
    3320:	90 e2       	ldi	r25, 0x20	; 32
    3322:	0e 94 25 57 	call	0xae4a	; 0xae4a <puts>
		return 0;
    3326:	e1 2c       	mov	r14, r1
    3328:	67 c0       	rjmp	.+206    	; 0x33f8 <ir_send+0xf8>
	}
	if(!ir_is_available(dirs_to_go)){
    332a:	8c 2f       	mov	r24, r28
    332c:	0e 94 d0 17 	call	0x2fa0	; 0x2fa0 <ir_is_available>
    3330:	e8 2e       	mov	r14, r24
    3332:	81 11       	cpse	r24, r1
    3334:	2c c0       	rjmp	.+88     	; 0x338e <ir_send+0x8e>
        printf_P(PSTR("Aborting IR send while trying:\r\n\t"));
    3336:	83 e9       	ldi	r24, 0x93	; 147
    3338:	95 e0       	ldi	r25, 0x05	; 5
    333a:	9f 93       	push	r25
    333c:	8f 93       	push	r24
    333e:	0e 94 f7 56 	call	0xadee	; 0xadee <printf_P>
		for(uint8_t i=0;i<data_length;i++){
    3342:	0f 90       	pop	r0
    3344:	0f 90       	pop	r0
    3346:	ff 20       	and	r15, r15
    3348:	c9 f0       	breq	.+50     	; 0x337c <ir_send+0x7c>
    334a:	e8 01       	movw	r28, r16
    334c:	fa 94       	dec	r15
    334e:	cf 2c       	mov	r12, r15
    3350:	d1 2c       	mov	r13, r1
    3352:	8f ef       	ldi	r24, 0xFF	; 255
    3354:	c8 1a       	sub	r12, r24
    3356:	d8 0a       	sbc	r13, r24
    3358:	c0 0e       	add	r12, r16
    335a:	d1 1e       	adc	r13, r17
			printf("%02hX ",data[i]);
    335c:	08 e0       	ldi	r16, 0x08	; 8
    335e:	11 e2       	ldi	r17, 0x21	; 33
    3360:	99 91       	ld	r25, Y+
    3362:	1f 92       	push	r1
    3364:	9f 93       	push	r25
    3366:	1f 93       	push	r17
    3368:	0f 93       	push	r16
    336a:	0e 94 e3 56 	call	0xadc6	; 0xadc6 <printf>
		printf("Normal send blocked by hp.\r\n");
		return 0;
	}
	if(!ir_is_available(dirs_to_go)){
        printf_P(PSTR("Aborting IR send while trying:\r\n\t"));
		for(uint8_t i=0;i<data_length;i++){
    336e:	0f 90       	pop	r0
    3370:	0f 90       	pop	r0
    3372:	0f 90       	pop	r0
    3374:	0f 90       	pop	r0
    3376:	cc 15       	cp	r28, r12
    3378:	dd 05       	cpc	r29, r13
    337a:	91 f7       	brne	.-28     	; 0x3360 <ir_send+0x60>
			printf("%02hX ",data[i]);
		}
		printf_P(PSTR("\r\nChannels are probably blocked by your previous message.\r\n"));
    337c:	87 e5       	ldi	r24, 0x57	; 87
    337e:	95 e0       	ldi	r25, 0x05	; 5
    3380:	9f 93       	push	r25
    3382:	8f 93       	push	r24
    3384:	0e 94 f7 56 	call	0xadee	; 0xadee <printf_P>
    3388:	0f 90       	pop	r0
    338a:	0f 90       	pop	r0
    338c:	35 c0       	rjmp	.+106    	; 0x33f8 <ir_send+0xf8>
    338e:	e4 e2       	ldi	r30, 0x24	; 36
    3390:	f0 e2       	ldi	r31, 0x20	; 32
inline uint8_t all_ir_sends(uint8_t dirs_to_go, char* data, uint8_t data_length, uint16_t target, uint8_t cmd_flag){
	if(hp_ir_block_bm){
		printf("Normal send blocked by hp.\r\n");
		return 0;
	}
	if(!ir_is_available(dirs_to_go)){
    3392:	20 e0       	ldi	r18, 0x00	; 0
    3394:	30 e0       	ldi	r19, 0x00	; 0
		}
		printf_P(PSTR("\r\nChannels are probably blocked by your previous message.\r\n"));
        return 0;
    }        
	for(uint8_t dir=0;dir<6;dir++){
		if(dirs_to_go&(1<<dir)){		
    3396:	4c 2f       	mov	r20, r28
    3398:	50 e0       	ldi	r21, 0x00	; 0
			channel[dir]->CTRLB &= ~USART_RXEN_bm;
			ir_rxtx[dir].status = IR_STATUS_BUSY_bm;
    339a:	d9 e3       	ldi	r29, 0x39	; 57
    339c:	81 e0       	ldi	r24, 0x01	; 1
		}
		printf_P(PSTR("\r\nChannels are probably blocked by your previous message.\r\n"));
        return 0;
    }        
	for(uint8_t dir=0;dir<6;dir++){
		if(dirs_to_go&(1<<dir)){		
    339e:	ba 01       	movw	r22, r20
    33a0:	02 2e       	mov	r0, r18
    33a2:	02 c0       	rjmp	.+4      	; 0x33a8 <ir_send+0xa8>
    33a4:	75 95       	asr	r23
    33a6:	67 95       	ror	r22
    33a8:	0a 94       	dec	r0
    33aa:	e2 f7       	brpl	.-8      	; 0x33a4 <ir_send+0xa4>
    33ac:	60 ff       	sbrs	r22, 0
    33ae:	16 c0       	rjmp	.+44     	; 0x33dc <ir_send+0xdc>
			channel[dir]->CTRLB &= ~USART_RXEN_bm;
    33b0:	a0 81       	ld	r26, Z
    33b2:	b1 81       	ldd	r27, Z+1	; 0x01
    33b4:	14 96       	adiw	r26, 0x04	; 4
    33b6:	9c 91       	ld	r25, X
    33b8:	14 97       	sbiw	r26, 0x04	; 4
    33ba:	9f 7e       	andi	r25, 0xEF	; 239
    33bc:	14 96       	adiw	r26, 0x04	; 4
    33be:	9c 93       	st	X, r25
			ir_rxtx[dir].status = IR_STATUS_BUSY_bm;
    33c0:	d2 9f       	mul	r29, r18
    33c2:	d0 01       	movw	r26, r0
    33c4:	d3 9f       	mul	r29, r19
    33c6:	b0 0d       	add	r27, r0
    33c8:	11 24       	eor	r1, r1
    33ca:	a1 53       	subi	r26, 0x31	; 49
    33cc:	b4 4d       	sbci	r27, 0xD4	; 212
    33ce:	d8 96       	adiw	r26, 0x38	; 56
    33d0:	8c 93       	st	X, r24
    33d2:	d8 97       	sbiw	r26, 0x38	; 56
			if(cmd_flag) ir_rxtx[dir].status |= IR_STATUS_COMMAND_bm;
			ir_rxtx[dir].target_ID=target;
    33d4:	18 96       	adiw	r26, 0x08	; 8
    33d6:	1d 92       	st	X+, r1
    33d8:	1c 92       	st	X, r1
    33da:	19 97       	sbiw	r26, 0x09	; 9
    33dc:	2f 5f       	subi	r18, 0xFF	; 255
    33de:	3f 4f       	sbci	r19, 0xFF	; 255
    33e0:	32 96       	adiw	r30, 0x02	; 2
			printf("%02hX ",data[i]);
		}
		printf_P(PSTR("\r\nChannels are probably blocked by your previous message.\r\n"));
        return 0;
    }        
	for(uint8_t dir=0;dir<6;dir++){
    33e2:	26 30       	cpi	r18, 0x06	; 6
    33e4:	31 05       	cpc	r19, r1
    33e6:	d9 f6       	brne	.-74     	; 0x339e <ir_send+0x9e>
			ir_rxtx[dir].status = IR_STATUS_BUSY_bm;
			if(cmd_flag) ir_rxtx[dir].status |= IR_STATUS_COMMAND_bm;
			ir_rxtx[dir].target_ID=target;
		}
	}
	send_msg(dirs_to_go, data, data_length, 0);
    33e8:	20 e0       	ldi	r18, 0x00	; 0
    33ea:	4f 2d       	mov	r20, r15
    33ec:	b8 01       	movw	r22, r16
    33ee:	8c 2f       	mov	r24, r28
    33f0:	0e 94 4e 11 	call	0x229c	; 0x229c <send_msg>
	//printf("Sent msg of length %hu at time%%10000: %u.\r\n", data_length, (uint16_t)(get_time()%10000));
    return 1;
    33f4:	ee 24       	eor	r14, r14
    33f6:	e3 94       	inc	r14
	return all_ir_sends(dirs, data, data_length, target, 0);
}

uint8_t ir_send(uint8_t dirs, char *data, uint8_t data_length){
	return all_ir_sends(dirs, data, data_length, 0, 0);
}
    33f8:	8e 2d       	mov	r24, r14
    33fa:	df 91       	pop	r29
    33fc:	cf 91       	pop	r28
    33fe:	1f 91       	pop	r17
    3400:	0f 91       	pop	r16
    3402:	ff 90       	pop	r15
    3404:	ef 90       	pop	r14
    3406:	df 90       	pop	r13
    3408:	cf 90       	pop	r12
    340a:	08 95       	ret

0000340c <__vector_25>:
	}
    return 1;
}

// ISRs for IR channel 0
ISR( USARTC0_RXC_vect ) { ir_receive(0); }
    340c:	1f 92       	push	r1
    340e:	0f 92       	push	r0
    3410:	0f b6       	in	r0, 0x3f	; 63
    3412:	0f 92       	push	r0
    3414:	11 24       	eor	r1, r1
    3416:	0b b6       	in	r0, 0x3b	; 59
    3418:	0f 92       	push	r0
    341a:	2f 93       	push	r18
    341c:	3f 93       	push	r19
    341e:	4f 93       	push	r20
    3420:	5f 93       	push	r21
    3422:	6f 93       	push	r22
    3424:	7f 93       	push	r23
    3426:	8f 93       	push	r24
    3428:	9f 93       	push	r25
    342a:	af 93       	push	r26
    342c:	bf 93       	push	r27
    342e:	ef 93       	push	r30
    3430:	ff 93       	push	r31
    3432:	80 e0       	ldi	r24, 0x00	; 0
    3434:	0e 94 91 14 	call	0x2922	; 0x2922 <ir_receive>
    3438:	ff 91       	pop	r31
    343a:	ef 91       	pop	r30
    343c:	bf 91       	pop	r27
    343e:	af 91       	pop	r26
    3440:	9f 91       	pop	r25
    3442:	8f 91       	pop	r24
    3444:	7f 91       	pop	r23
    3446:	6f 91       	pop	r22
    3448:	5f 91       	pop	r21
    344a:	4f 91       	pop	r20
    344c:	3f 91       	pop	r19
    344e:	2f 91       	pop	r18
    3450:	0f 90       	pop	r0
    3452:	0b be       	out	0x3b, r0	; 59
    3454:	0f 90       	pop	r0
    3456:	0f be       	out	0x3f, r0	; 63
    3458:	0f 90       	pop	r0
    345a:	1f 90       	pop	r1
    345c:	18 95       	reti

0000345e <__vector_27>:
ISR( USARTC0_TXC_vect ) { ir_transmit_complete(0); }
    345e:	1f 92       	push	r1
    3460:	0f 92       	push	r0
    3462:	0f b6       	in	r0, 0x3f	; 63
    3464:	0f 92       	push	r0
    3466:	11 24       	eor	r1, r1
    3468:	0b b6       	in	r0, 0x3b	; 59
    346a:	0f 92       	push	r0
    346c:	2f 93       	push	r18
    346e:	3f 93       	push	r19
    3470:	4f 93       	push	r20
    3472:	5f 93       	push	r21
    3474:	6f 93       	push	r22
    3476:	7f 93       	push	r23
    3478:	8f 93       	push	r24
    347a:	9f 93       	push	r25
    347c:	af 93       	push	r26
    347e:	bf 93       	push	r27
    3480:	ef 93       	push	r30
    3482:	ff 93       	push	r31
    3484:	80 e0       	ldi	r24, 0x00	; 0
    3486:	0e 94 8e 17 	call	0x2f1c	; 0x2f1c <ir_transmit_complete>
    348a:	ff 91       	pop	r31
    348c:	ef 91       	pop	r30
    348e:	bf 91       	pop	r27
    3490:	af 91       	pop	r26
    3492:	9f 91       	pop	r25
    3494:	8f 91       	pop	r24
    3496:	7f 91       	pop	r23
    3498:	6f 91       	pop	r22
    349a:	5f 91       	pop	r21
    349c:	4f 91       	pop	r20
    349e:	3f 91       	pop	r19
    34a0:	2f 91       	pop	r18
    34a2:	0f 90       	pop	r0
    34a4:	0b be       	out	0x3b, r0	; 59
    34a6:	0f 90       	pop	r0
    34a8:	0f be       	out	0x3f, r0	; 63
    34aa:	0f 90       	pop	r0
    34ac:	1f 90       	pop	r1
    34ae:	18 95       	reti

000034b0 <__vector_26>:
ISR( USARTC0_DRE_vect ) { ir_transmit(0); }
    34b0:	1f 92       	push	r1
    34b2:	0f 92       	push	r0
    34b4:	0f b6       	in	r0, 0x3f	; 63
    34b6:	0f 92       	push	r0
    34b8:	11 24       	eor	r1, r1
    34ba:	0b b6       	in	r0, 0x3b	; 59
    34bc:	0f 92       	push	r0
    34be:	2f 93       	push	r18
    34c0:	3f 93       	push	r19
    34c2:	4f 93       	push	r20
    34c4:	5f 93       	push	r21
    34c6:	6f 93       	push	r22
    34c8:	7f 93       	push	r23
    34ca:	8f 93       	push	r24
    34cc:	9f 93       	push	r25
    34ce:	af 93       	push	r26
    34d0:	bf 93       	push	r27
    34d2:	ef 93       	push	r30
    34d4:	ff 93       	push	r31
    34d6:	80 e0       	ldi	r24, 0x00	; 0
    34d8:	0e 94 a2 16 	call	0x2d44	; 0x2d44 <ir_transmit>
    34dc:	ff 91       	pop	r31
    34de:	ef 91       	pop	r30
    34e0:	bf 91       	pop	r27
    34e2:	af 91       	pop	r26
    34e4:	9f 91       	pop	r25
    34e6:	8f 91       	pop	r24
    34e8:	7f 91       	pop	r23
    34ea:	6f 91       	pop	r22
    34ec:	5f 91       	pop	r21
    34ee:	4f 91       	pop	r20
    34f0:	3f 91       	pop	r19
    34f2:	2f 91       	pop	r18
    34f4:	0f 90       	pop	r0
    34f6:	0b be       	out	0x3b, r0	; 59
    34f8:	0f 90       	pop	r0
    34fa:	0f be       	out	0x3f, r0	; 63
    34fc:	0f 90       	pop	r0
    34fe:	1f 90       	pop	r1
    3500:	18 95       	reti

00003502 <__vector_28>:

// ISRs for IR channel 1
ISR( USARTC1_RXC_vect ) { ir_receive(1); }
    3502:	1f 92       	push	r1
    3504:	0f 92       	push	r0
    3506:	0f b6       	in	r0, 0x3f	; 63
    3508:	0f 92       	push	r0
    350a:	11 24       	eor	r1, r1
    350c:	0b b6       	in	r0, 0x3b	; 59
    350e:	0f 92       	push	r0
    3510:	2f 93       	push	r18
    3512:	3f 93       	push	r19
    3514:	4f 93       	push	r20
    3516:	5f 93       	push	r21
    3518:	6f 93       	push	r22
    351a:	7f 93       	push	r23
    351c:	8f 93       	push	r24
    351e:	9f 93       	push	r25
    3520:	af 93       	push	r26
    3522:	bf 93       	push	r27
    3524:	ef 93       	push	r30
    3526:	ff 93       	push	r31
    3528:	81 e0       	ldi	r24, 0x01	; 1
    352a:	0e 94 91 14 	call	0x2922	; 0x2922 <ir_receive>
    352e:	ff 91       	pop	r31
    3530:	ef 91       	pop	r30
    3532:	bf 91       	pop	r27
    3534:	af 91       	pop	r26
    3536:	9f 91       	pop	r25
    3538:	8f 91       	pop	r24
    353a:	7f 91       	pop	r23
    353c:	6f 91       	pop	r22
    353e:	5f 91       	pop	r21
    3540:	4f 91       	pop	r20
    3542:	3f 91       	pop	r19
    3544:	2f 91       	pop	r18
    3546:	0f 90       	pop	r0
    3548:	0b be       	out	0x3b, r0	; 59
    354a:	0f 90       	pop	r0
    354c:	0f be       	out	0x3f, r0	; 63
    354e:	0f 90       	pop	r0
    3550:	1f 90       	pop	r1
    3552:	18 95       	reti

00003554 <__vector_30>:
ISR( USARTC1_TXC_vect ) { ir_transmit_complete(1); }
    3554:	1f 92       	push	r1
    3556:	0f 92       	push	r0
    3558:	0f b6       	in	r0, 0x3f	; 63
    355a:	0f 92       	push	r0
    355c:	11 24       	eor	r1, r1
    355e:	0b b6       	in	r0, 0x3b	; 59
    3560:	0f 92       	push	r0
    3562:	2f 93       	push	r18
    3564:	3f 93       	push	r19
    3566:	4f 93       	push	r20
    3568:	5f 93       	push	r21
    356a:	6f 93       	push	r22
    356c:	7f 93       	push	r23
    356e:	8f 93       	push	r24
    3570:	9f 93       	push	r25
    3572:	af 93       	push	r26
    3574:	bf 93       	push	r27
    3576:	ef 93       	push	r30
    3578:	ff 93       	push	r31
    357a:	81 e0       	ldi	r24, 0x01	; 1
    357c:	0e 94 8e 17 	call	0x2f1c	; 0x2f1c <ir_transmit_complete>
    3580:	ff 91       	pop	r31
    3582:	ef 91       	pop	r30
    3584:	bf 91       	pop	r27
    3586:	af 91       	pop	r26
    3588:	9f 91       	pop	r25
    358a:	8f 91       	pop	r24
    358c:	7f 91       	pop	r23
    358e:	6f 91       	pop	r22
    3590:	5f 91       	pop	r21
    3592:	4f 91       	pop	r20
    3594:	3f 91       	pop	r19
    3596:	2f 91       	pop	r18
    3598:	0f 90       	pop	r0
    359a:	0b be       	out	0x3b, r0	; 59
    359c:	0f 90       	pop	r0
    359e:	0f be       	out	0x3f, r0	; 63
    35a0:	0f 90       	pop	r0
    35a2:	1f 90       	pop	r1
    35a4:	18 95       	reti

000035a6 <__vector_29>:
ISR( USARTC1_DRE_vect ) { ir_transmit(1); }
    35a6:	1f 92       	push	r1
    35a8:	0f 92       	push	r0
    35aa:	0f b6       	in	r0, 0x3f	; 63
    35ac:	0f 92       	push	r0
    35ae:	11 24       	eor	r1, r1
    35b0:	0b b6       	in	r0, 0x3b	; 59
    35b2:	0f 92       	push	r0
    35b4:	2f 93       	push	r18
    35b6:	3f 93       	push	r19
    35b8:	4f 93       	push	r20
    35ba:	5f 93       	push	r21
    35bc:	6f 93       	push	r22
    35be:	7f 93       	push	r23
    35c0:	8f 93       	push	r24
    35c2:	9f 93       	push	r25
    35c4:	af 93       	push	r26
    35c6:	bf 93       	push	r27
    35c8:	ef 93       	push	r30
    35ca:	ff 93       	push	r31
    35cc:	81 e0       	ldi	r24, 0x01	; 1
    35ce:	0e 94 a2 16 	call	0x2d44	; 0x2d44 <ir_transmit>
    35d2:	ff 91       	pop	r31
    35d4:	ef 91       	pop	r30
    35d6:	bf 91       	pop	r27
    35d8:	af 91       	pop	r26
    35da:	9f 91       	pop	r25
    35dc:	8f 91       	pop	r24
    35de:	7f 91       	pop	r23
    35e0:	6f 91       	pop	r22
    35e2:	5f 91       	pop	r21
    35e4:	4f 91       	pop	r20
    35e6:	3f 91       	pop	r19
    35e8:	2f 91       	pop	r18
    35ea:	0f 90       	pop	r0
    35ec:	0b be       	out	0x3b, r0	; 59
    35ee:	0f 90       	pop	r0
    35f0:	0f be       	out	0x3f, r0	; 63
    35f2:	0f 90       	pop	r0
    35f4:	1f 90       	pop	r1
    35f6:	18 95       	reti

000035f8 <__vector_88>:

// ISRs for IR channel 2
ISR( USARTD0_RXC_vect ) { ir_receive(2); }
    35f8:	1f 92       	push	r1
    35fa:	0f 92       	push	r0
    35fc:	0f b6       	in	r0, 0x3f	; 63
    35fe:	0f 92       	push	r0
    3600:	11 24       	eor	r1, r1
    3602:	0b b6       	in	r0, 0x3b	; 59
    3604:	0f 92       	push	r0
    3606:	2f 93       	push	r18
    3608:	3f 93       	push	r19
    360a:	4f 93       	push	r20
    360c:	5f 93       	push	r21
    360e:	6f 93       	push	r22
    3610:	7f 93       	push	r23
    3612:	8f 93       	push	r24
    3614:	9f 93       	push	r25
    3616:	af 93       	push	r26
    3618:	bf 93       	push	r27
    361a:	ef 93       	push	r30
    361c:	ff 93       	push	r31
    361e:	82 e0       	ldi	r24, 0x02	; 2
    3620:	0e 94 91 14 	call	0x2922	; 0x2922 <ir_receive>
    3624:	ff 91       	pop	r31
    3626:	ef 91       	pop	r30
    3628:	bf 91       	pop	r27
    362a:	af 91       	pop	r26
    362c:	9f 91       	pop	r25
    362e:	8f 91       	pop	r24
    3630:	7f 91       	pop	r23
    3632:	6f 91       	pop	r22
    3634:	5f 91       	pop	r21
    3636:	4f 91       	pop	r20
    3638:	3f 91       	pop	r19
    363a:	2f 91       	pop	r18
    363c:	0f 90       	pop	r0
    363e:	0b be       	out	0x3b, r0	; 59
    3640:	0f 90       	pop	r0
    3642:	0f be       	out	0x3f, r0	; 63
    3644:	0f 90       	pop	r0
    3646:	1f 90       	pop	r1
    3648:	18 95       	reti

0000364a <__vector_90>:
ISR( USARTD0_TXC_vect ) { ir_transmit_complete(2); }
    364a:	1f 92       	push	r1
    364c:	0f 92       	push	r0
    364e:	0f b6       	in	r0, 0x3f	; 63
    3650:	0f 92       	push	r0
    3652:	11 24       	eor	r1, r1
    3654:	0b b6       	in	r0, 0x3b	; 59
    3656:	0f 92       	push	r0
    3658:	2f 93       	push	r18
    365a:	3f 93       	push	r19
    365c:	4f 93       	push	r20
    365e:	5f 93       	push	r21
    3660:	6f 93       	push	r22
    3662:	7f 93       	push	r23
    3664:	8f 93       	push	r24
    3666:	9f 93       	push	r25
    3668:	af 93       	push	r26
    366a:	bf 93       	push	r27
    366c:	ef 93       	push	r30
    366e:	ff 93       	push	r31
    3670:	82 e0       	ldi	r24, 0x02	; 2
    3672:	0e 94 8e 17 	call	0x2f1c	; 0x2f1c <ir_transmit_complete>
    3676:	ff 91       	pop	r31
    3678:	ef 91       	pop	r30
    367a:	bf 91       	pop	r27
    367c:	af 91       	pop	r26
    367e:	9f 91       	pop	r25
    3680:	8f 91       	pop	r24
    3682:	7f 91       	pop	r23
    3684:	6f 91       	pop	r22
    3686:	5f 91       	pop	r21
    3688:	4f 91       	pop	r20
    368a:	3f 91       	pop	r19
    368c:	2f 91       	pop	r18
    368e:	0f 90       	pop	r0
    3690:	0b be       	out	0x3b, r0	; 59
    3692:	0f 90       	pop	r0
    3694:	0f be       	out	0x3f, r0	; 63
    3696:	0f 90       	pop	r0
    3698:	1f 90       	pop	r1
    369a:	18 95       	reti

0000369c <__vector_89>:
ISR( USARTD0_DRE_vect ) { ir_transmit(2); }
    369c:	1f 92       	push	r1
    369e:	0f 92       	push	r0
    36a0:	0f b6       	in	r0, 0x3f	; 63
    36a2:	0f 92       	push	r0
    36a4:	11 24       	eor	r1, r1
    36a6:	0b b6       	in	r0, 0x3b	; 59
    36a8:	0f 92       	push	r0
    36aa:	2f 93       	push	r18
    36ac:	3f 93       	push	r19
    36ae:	4f 93       	push	r20
    36b0:	5f 93       	push	r21
    36b2:	6f 93       	push	r22
    36b4:	7f 93       	push	r23
    36b6:	8f 93       	push	r24
    36b8:	9f 93       	push	r25
    36ba:	af 93       	push	r26
    36bc:	bf 93       	push	r27
    36be:	ef 93       	push	r30
    36c0:	ff 93       	push	r31
    36c2:	82 e0       	ldi	r24, 0x02	; 2
    36c4:	0e 94 a2 16 	call	0x2d44	; 0x2d44 <ir_transmit>
    36c8:	ff 91       	pop	r31
    36ca:	ef 91       	pop	r30
    36cc:	bf 91       	pop	r27
    36ce:	af 91       	pop	r26
    36d0:	9f 91       	pop	r25
    36d2:	8f 91       	pop	r24
    36d4:	7f 91       	pop	r23
    36d6:	6f 91       	pop	r22
    36d8:	5f 91       	pop	r21
    36da:	4f 91       	pop	r20
    36dc:	3f 91       	pop	r19
    36de:	2f 91       	pop	r18
    36e0:	0f 90       	pop	r0
    36e2:	0b be       	out	0x3b, r0	; 59
    36e4:	0f 90       	pop	r0
    36e6:	0f be       	out	0x3f, r0	; 63
    36e8:	0f 90       	pop	r0
    36ea:	1f 90       	pop	r1
    36ec:	18 95       	reti

000036ee <__vector_58>:

// ISRs for IR channel 3
ISR( USARTE0_RXC_vect ) { ir_receive(3); }
    36ee:	1f 92       	push	r1
    36f0:	0f 92       	push	r0
    36f2:	0f b6       	in	r0, 0x3f	; 63
    36f4:	0f 92       	push	r0
    36f6:	11 24       	eor	r1, r1
    36f8:	0b b6       	in	r0, 0x3b	; 59
    36fa:	0f 92       	push	r0
    36fc:	2f 93       	push	r18
    36fe:	3f 93       	push	r19
    3700:	4f 93       	push	r20
    3702:	5f 93       	push	r21
    3704:	6f 93       	push	r22
    3706:	7f 93       	push	r23
    3708:	8f 93       	push	r24
    370a:	9f 93       	push	r25
    370c:	af 93       	push	r26
    370e:	bf 93       	push	r27
    3710:	ef 93       	push	r30
    3712:	ff 93       	push	r31
    3714:	83 e0       	ldi	r24, 0x03	; 3
    3716:	0e 94 91 14 	call	0x2922	; 0x2922 <ir_receive>
    371a:	ff 91       	pop	r31
    371c:	ef 91       	pop	r30
    371e:	bf 91       	pop	r27
    3720:	af 91       	pop	r26
    3722:	9f 91       	pop	r25
    3724:	8f 91       	pop	r24
    3726:	7f 91       	pop	r23
    3728:	6f 91       	pop	r22
    372a:	5f 91       	pop	r21
    372c:	4f 91       	pop	r20
    372e:	3f 91       	pop	r19
    3730:	2f 91       	pop	r18
    3732:	0f 90       	pop	r0
    3734:	0b be       	out	0x3b, r0	; 59
    3736:	0f 90       	pop	r0
    3738:	0f be       	out	0x3f, r0	; 63
    373a:	0f 90       	pop	r0
    373c:	1f 90       	pop	r1
    373e:	18 95       	reti

00003740 <__vector_60>:
ISR( USARTE0_TXC_vect ) { ir_transmit_complete(3); }
    3740:	1f 92       	push	r1
    3742:	0f 92       	push	r0
    3744:	0f b6       	in	r0, 0x3f	; 63
    3746:	0f 92       	push	r0
    3748:	11 24       	eor	r1, r1
    374a:	0b b6       	in	r0, 0x3b	; 59
    374c:	0f 92       	push	r0
    374e:	2f 93       	push	r18
    3750:	3f 93       	push	r19
    3752:	4f 93       	push	r20
    3754:	5f 93       	push	r21
    3756:	6f 93       	push	r22
    3758:	7f 93       	push	r23
    375a:	8f 93       	push	r24
    375c:	9f 93       	push	r25
    375e:	af 93       	push	r26
    3760:	bf 93       	push	r27
    3762:	ef 93       	push	r30
    3764:	ff 93       	push	r31
    3766:	83 e0       	ldi	r24, 0x03	; 3
    3768:	0e 94 8e 17 	call	0x2f1c	; 0x2f1c <ir_transmit_complete>
    376c:	ff 91       	pop	r31
    376e:	ef 91       	pop	r30
    3770:	bf 91       	pop	r27
    3772:	af 91       	pop	r26
    3774:	9f 91       	pop	r25
    3776:	8f 91       	pop	r24
    3778:	7f 91       	pop	r23
    377a:	6f 91       	pop	r22
    377c:	5f 91       	pop	r21
    377e:	4f 91       	pop	r20
    3780:	3f 91       	pop	r19
    3782:	2f 91       	pop	r18
    3784:	0f 90       	pop	r0
    3786:	0b be       	out	0x3b, r0	; 59
    3788:	0f 90       	pop	r0
    378a:	0f be       	out	0x3f, r0	; 63
    378c:	0f 90       	pop	r0
    378e:	1f 90       	pop	r1
    3790:	18 95       	reti

00003792 <__vector_59>:
ISR( USARTE0_DRE_vect ) { ir_transmit(3); }
    3792:	1f 92       	push	r1
    3794:	0f 92       	push	r0
    3796:	0f b6       	in	r0, 0x3f	; 63
    3798:	0f 92       	push	r0
    379a:	11 24       	eor	r1, r1
    379c:	0b b6       	in	r0, 0x3b	; 59
    379e:	0f 92       	push	r0
    37a0:	2f 93       	push	r18
    37a2:	3f 93       	push	r19
    37a4:	4f 93       	push	r20
    37a6:	5f 93       	push	r21
    37a8:	6f 93       	push	r22
    37aa:	7f 93       	push	r23
    37ac:	8f 93       	push	r24
    37ae:	9f 93       	push	r25
    37b0:	af 93       	push	r26
    37b2:	bf 93       	push	r27
    37b4:	ef 93       	push	r30
    37b6:	ff 93       	push	r31
    37b8:	83 e0       	ldi	r24, 0x03	; 3
    37ba:	0e 94 a2 16 	call	0x2d44	; 0x2d44 <ir_transmit>
    37be:	ff 91       	pop	r31
    37c0:	ef 91       	pop	r30
    37c2:	bf 91       	pop	r27
    37c4:	af 91       	pop	r26
    37c6:	9f 91       	pop	r25
    37c8:	8f 91       	pop	r24
    37ca:	7f 91       	pop	r23
    37cc:	6f 91       	pop	r22
    37ce:	5f 91       	pop	r21
    37d0:	4f 91       	pop	r20
    37d2:	3f 91       	pop	r19
    37d4:	2f 91       	pop	r18
    37d6:	0f 90       	pop	r0
    37d8:	0b be       	out	0x3b, r0	; 59
    37da:	0f 90       	pop	r0
    37dc:	0f be       	out	0x3f, r0	; 63
    37de:	0f 90       	pop	r0
    37e0:	1f 90       	pop	r1
    37e2:	18 95       	reti

000037e4 <__vector_61>:

// ISRs for IR channel 4
ISR( USARTE1_RXC_vect ) { ir_receive(4); }
    37e4:	1f 92       	push	r1
    37e6:	0f 92       	push	r0
    37e8:	0f b6       	in	r0, 0x3f	; 63
    37ea:	0f 92       	push	r0
    37ec:	11 24       	eor	r1, r1
    37ee:	0b b6       	in	r0, 0x3b	; 59
    37f0:	0f 92       	push	r0
    37f2:	2f 93       	push	r18
    37f4:	3f 93       	push	r19
    37f6:	4f 93       	push	r20
    37f8:	5f 93       	push	r21
    37fa:	6f 93       	push	r22
    37fc:	7f 93       	push	r23
    37fe:	8f 93       	push	r24
    3800:	9f 93       	push	r25
    3802:	af 93       	push	r26
    3804:	bf 93       	push	r27
    3806:	ef 93       	push	r30
    3808:	ff 93       	push	r31
    380a:	84 e0       	ldi	r24, 0x04	; 4
    380c:	0e 94 91 14 	call	0x2922	; 0x2922 <ir_receive>
    3810:	ff 91       	pop	r31
    3812:	ef 91       	pop	r30
    3814:	bf 91       	pop	r27
    3816:	af 91       	pop	r26
    3818:	9f 91       	pop	r25
    381a:	8f 91       	pop	r24
    381c:	7f 91       	pop	r23
    381e:	6f 91       	pop	r22
    3820:	5f 91       	pop	r21
    3822:	4f 91       	pop	r20
    3824:	3f 91       	pop	r19
    3826:	2f 91       	pop	r18
    3828:	0f 90       	pop	r0
    382a:	0b be       	out	0x3b, r0	; 59
    382c:	0f 90       	pop	r0
    382e:	0f be       	out	0x3f, r0	; 63
    3830:	0f 90       	pop	r0
    3832:	1f 90       	pop	r1
    3834:	18 95       	reti

00003836 <__vector_63>:
ISR( USARTE1_TXC_vect ) { ir_transmit_complete(4); }
    3836:	1f 92       	push	r1
    3838:	0f 92       	push	r0
    383a:	0f b6       	in	r0, 0x3f	; 63
    383c:	0f 92       	push	r0
    383e:	11 24       	eor	r1, r1
    3840:	0b b6       	in	r0, 0x3b	; 59
    3842:	0f 92       	push	r0
    3844:	2f 93       	push	r18
    3846:	3f 93       	push	r19
    3848:	4f 93       	push	r20
    384a:	5f 93       	push	r21
    384c:	6f 93       	push	r22
    384e:	7f 93       	push	r23
    3850:	8f 93       	push	r24
    3852:	9f 93       	push	r25
    3854:	af 93       	push	r26
    3856:	bf 93       	push	r27
    3858:	ef 93       	push	r30
    385a:	ff 93       	push	r31
    385c:	84 e0       	ldi	r24, 0x04	; 4
    385e:	0e 94 8e 17 	call	0x2f1c	; 0x2f1c <ir_transmit_complete>
    3862:	ff 91       	pop	r31
    3864:	ef 91       	pop	r30
    3866:	bf 91       	pop	r27
    3868:	af 91       	pop	r26
    386a:	9f 91       	pop	r25
    386c:	8f 91       	pop	r24
    386e:	7f 91       	pop	r23
    3870:	6f 91       	pop	r22
    3872:	5f 91       	pop	r21
    3874:	4f 91       	pop	r20
    3876:	3f 91       	pop	r19
    3878:	2f 91       	pop	r18
    387a:	0f 90       	pop	r0
    387c:	0b be       	out	0x3b, r0	; 59
    387e:	0f 90       	pop	r0
    3880:	0f be       	out	0x3f, r0	; 63
    3882:	0f 90       	pop	r0
    3884:	1f 90       	pop	r1
    3886:	18 95       	reti

00003888 <__vector_62>:
ISR( USARTE1_DRE_vect ) { ir_transmit(4); }
    3888:	1f 92       	push	r1
    388a:	0f 92       	push	r0
    388c:	0f b6       	in	r0, 0x3f	; 63
    388e:	0f 92       	push	r0
    3890:	11 24       	eor	r1, r1
    3892:	0b b6       	in	r0, 0x3b	; 59
    3894:	0f 92       	push	r0
    3896:	2f 93       	push	r18
    3898:	3f 93       	push	r19
    389a:	4f 93       	push	r20
    389c:	5f 93       	push	r21
    389e:	6f 93       	push	r22
    38a0:	7f 93       	push	r23
    38a2:	8f 93       	push	r24
    38a4:	9f 93       	push	r25
    38a6:	af 93       	push	r26
    38a8:	bf 93       	push	r27
    38aa:	ef 93       	push	r30
    38ac:	ff 93       	push	r31
    38ae:	84 e0       	ldi	r24, 0x04	; 4
    38b0:	0e 94 a2 16 	call	0x2d44	; 0x2d44 <ir_transmit>
    38b4:	ff 91       	pop	r31
    38b6:	ef 91       	pop	r30
    38b8:	bf 91       	pop	r27
    38ba:	af 91       	pop	r26
    38bc:	9f 91       	pop	r25
    38be:	8f 91       	pop	r24
    38c0:	7f 91       	pop	r23
    38c2:	6f 91       	pop	r22
    38c4:	5f 91       	pop	r21
    38c6:	4f 91       	pop	r20
    38c8:	3f 91       	pop	r19
    38ca:	2f 91       	pop	r18
    38cc:	0f 90       	pop	r0
    38ce:	0b be       	out	0x3b, r0	; 59
    38d0:	0f 90       	pop	r0
    38d2:	0f be       	out	0x3f, r0	; 63
    38d4:	0f 90       	pop	r0
    38d6:	1f 90       	pop	r1
    38d8:	18 95       	reti

000038da <__vector_119>:

// ISRs for IR channel 5
ISR( USARTF0_RXC_vect ) { ir_receive(5); }
    38da:	1f 92       	push	r1
    38dc:	0f 92       	push	r0
    38de:	0f b6       	in	r0, 0x3f	; 63
    38e0:	0f 92       	push	r0
    38e2:	11 24       	eor	r1, r1
    38e4:	0b b6       	in	r0, 0x3b	; 59
    38e6:	0f 92       	push	r0
    38e8:	2f 93       	push	r18
    38ea:	3f 93       	push	r19
    38ec:	4f 93       	push	r20
    38ee:	5f 93       	push	r21
    38f0:	6f 93       	push	r22
    38f2:	7f 93       	push	r23
    38f4:	8f 93       	push	r24
    38f6:	9f 93       	push	r25
    38f8:	af 93       	push	r26
    38fa:	bf 93       	push	r27
    38fc:	ef 93       	push	r30
    38fe:	ff 93       	push	r31
    3900:	85 e0       	ldi	r24, 0x05	; 5
    3902:	0e 94 91 14 	call	0x2922	; 0x2922 <ir_receive>
    3906:	ff 91       	pop	r31
    3908:	ef 91       	pop	r30
    390a:	bf 91       	pop	r27
    390c:	af 91       	pop	r26
    390e:	9f 91       	pop	r25
    3910:	8f 91       	pop	r24
    3912:	7f 91       	pop	r23
    3914:	6f 91       	pop	r22
    3916:	5f 91       	pop	r21
    3918:	4f 91       	pop	r20
    391a:	3f 91       	pop	r19
    391c:	2f 91       	pop	r18
    391e:	0f 90       	pop	r0
    3920:	0b be       	out	0x3b, r0	; 59
    3922:	0f 90       	pop	r0
    3924:	0f be       	out	0x3f, r0	; 63
    3926:	0f 90       	pop	r0
    3928:	1f 90       	pop	r1
    392a:	18 95       	reti

0000392c <__vector_121>:
ISR( USARTF0_TXC_vect ) { ir_transmit_complete(5); }
    392c:	1f 92       	push	r1
    392e:	0f 92       	push	r0
    3930:	0f b6       	in	r0, 0x3f	; 63
    3932:	0f 92       	push	r0
    3934:	11 24       	eor	r1, r1
    3936:	0b b6       	in	r0, 0x3b	; 59
    3938:	0f 92       	push	r0
    393a:	2f 93       	push	r18
    393c:	3f 93       	push	r19
    393e:	4f 93       	push	r20
    3940:	5f 93       	push	r21
    3942:	6f 93       	push	r22
    3944:	7f 93       	push	r23
    3946:	8f 93       	push	r24
    3948:	9f 93       	push	r25
    394a:	af 93       	push	r26
    394c:	bf 93       	push	r27
    394e:	ef 93       	push	r30
    3950:	ff 93       	push	r31
    3952:	85 e0       	ldi	r24, 0x05	; 5
    3954:	0e 94 8e 17 	call	0x2f1c	; 0x2f1c <ir_transmit_complete>
    3958:	ff 91       	pop	r31
    395a:	ef 91       	pop	r30
    395c:	bf 91       	pop	r27
    395e:	af 91       	pop	r26
    3960:	9f 91       	pop	r25
    3962:	8f 91       	pop	r24
    3964:	7f 91       	pop	r23
    3966:	6f 91       	pop	r22
    3968:	5f 91       	pop	r21
    396a:	4f 91       	pop	r20
    396c:	3f 91       	pop	r19
    396e:	2f 91       	pop	r18
    3970:	0f 90       	pop	r0
    3972:	0b be       	out	0x3b, r0	; 59
    3974:	0f 90       	pop	r0
    3976:	0f be       	out	0x3f, r0	; 63
    3978:	0f 90       	pop	r0
    397a:	1f 90       	pop	r1
    397c:	18 95       	reti

0000397e <__vector_120>:
ISR( USARTF0_DRE_vect ) { ir_transmit(5); }
    397e:	1f 92       	push	r1
    3980:	0f 92       	push	r0
    3982:	0f b6       	in	r0, 0x3f	; 63
    3984:	0f 92       	push	r0
    3986:	11 24       	eor	r1, r1
    3988:	0b b6       	in	r0, 0x3b	; 59
    398a:	0f 92       	push	r0
    398c:	2f 93       	push	r18
    398e:	3f 93       	push	r19
    3990:	4f 93       	push	r20
    3992:	5f 93       	push	r21
    3994:	6f 93       	push	r22
    3996:	7f 93       	push	r23
    3998:	8f 93       	push	r24
    399a:	9f 93       	push	r25
    399c:	af 93       	push	r26
    399e:	bf 93       	push	r27
    39a0:	ef 93       	push	r30
    39a2:	ff 93       	push	r31
    39a4:	85 e0       	ldi	r24, 0x05	; 5
    39a6:	0e 94 a2 16 	call	0x2d44	; 0x2d44 <ir_transmit>
    39aa:	ff 91       	pop	r31
    39ac:	ef 91       	pop	r30
    39ae:	bf 91       	pop	r27
    39b0:	af 91       	pop	r26
    39b2:	9f 91       	pop	r25
    39b4:	8f 91       	pop	r24
    39b6:	7f 91       	pop	r23
    39b8:	6f 91       	pop	r22
    39ba:	5f 91       	pop	r21
    39bc:	4f 91       	pop	r20
    39be:	3f 91       	pop	r19
    39c0:	2f 91       	pop	r18
    39c2:	0f 90       	pop	r0
    39c4:	0b be       	out	0x3b, r0	; 59
    39c6:	0f 90       	pop	r0
    39c8:	0f be       	out	0x3f, r0	; 63
    39ca:	0f 90       	pop	r0
    39cc:	1f 90       	pop	r1
    39ce:	18 95       	reti

000039d0 <ir_led_init>:
uint8_t tx_pins[6] = {PIN3_bm, PIN7_bm, PIN3_bm, PIN3_bm, PIN7_bm, PIN3_bm};
PORT_t* uart_ch[6] = {&PORTC, &PORTC, &PORTD, &PORTE, &PORTE, &PORTF};
uint8_t saved_usart_ctrlb_vals[6] = {0,0,0,0,0,0};

void ir_led_init()
{
    39d0:	cf 93       	push	r28
    39d2:	df 93       	push	r29
	/* Initialize carrier waves */
	PORTF.DIRSET = ALL_EMITTERS_CARWAV_bm;
    39d4:	a0 ea       	ldi	r26, 0xA0	; 160
    39d6:	b6 e0       	ldi	r27, 0x06	; 6
    39d8:	93 ef       	ldi	r25, 0xF3	; 243
    39da:	11 96       	adiw	r26, 0x01	; 1
    39dc:	9c 93       	st	X, r25
    39de:	11 97       	sbiw	r26, 0x01	; 1
	
	TCF2.CTRLE = TC_BYTEM_SPLITMODE_gc;		// "split mode" puts this timer counter into "Type 2 mode"
    39e0:	e0 e0       	ldi	r30, 0x00	; 0
    39e2:	fb e0       	ldi	r31, 0x0B	; 11
    39e4:	82 e0       	ldi	r24, 0x02	; 2
    39e6:	84 83       	std	Z+4, r24	; 0x04
	TCF2.CTRLA |= TC_CLKSEL_DIV4_gc;		// see CTRLA description in TC2 mode
    39e8:	80 81       	ld	r24, Z
    39ea:	83 60       	ori	r24, 0x03	; 3
    39ec:	80 83       	st	Z, r24
	
	TCF2.HPER = 211; TCF2.LPER = 211; // 32MHz / (4 * 211) = 38kHz
    39ee:	83 ed       	ldi	r24, 0xD3	; 211
    39f0:	87 a3       	std	Z+39, r24	; 0x27
    39f2:	86 a3       	std	Z+38, r24	; 0x26
	TCF2.HCMPA = 105; TCF2.HCMPB = 105; TCF2.HCMPC = 105; // 50% Duty Cycle
    39f4:	89 e6       	ldi	r24, 0x69	; 105
    39f6:	81 a7       	std	Z+41, r24	; 0x29
    39f8:	83 a7       	std	Z+43, r24	; 0x2b
    39fa:	85 a7       	std	Z+45, r24	; 0x2d
	TCF2.HCMPD = 105; TCF2.LCMPA = 105; TCF2.LCMPB = 105; // 50% Duty Cycle
    39fc:	87 a7       	std	Z+47, r24	; 0x2f
    39fe:	80 a7       	std	Z+40, r24	; 0x28
    3a00:	82 a7       	std	Z+42, r24	; 0x2a
	TCF2.CTRLB = ALL_EMITTERS_CARWAV_bm;	// Set TC outputs on carrier wave pins (see CTRLA description in TC2 mode)
    3a02:	91 83       	std	Z+1, r25	; 0x01

	// TX pins as outputs:
	PORTC.DIRSET = PIN3_bm | PIN7_bm;		// DIR 0,1
    3a04:	c0 e4       	ldi	r28, 0x40	; 64
    3a06:	d6 e0       	ldi	r29, 0x06	; 6
    3a08:	98 e8       	ldi	r25, 0x88	; 136
    3a0a:	99 83       	std	Y+1, r25	; 0x01
	PORTD.DIRSET = PIN3_bm;					// DIR 2
    3a0c:	20 e6       	ldi	r18, 0x60	; 96
    3a0e:	36 e0       	ldi	r19, 0x06	; 6
    3a10:	88 e0       	ldi	r24, 0x08	; 8
    3a12:	f9 01       	movw	r30, r18
    3a14:	81 83       	std	Z+1, r24	; 0x01
	PORTE.DIRSET = PIN3_bm | PIN7_bm;		// DIR 3,4
    3a16:	40 e8       	ldi	r20, 0x80	; 128
    3a18:	56 e0       	ldi	r21, 0x06	; 6
    3a1a:	fa 01       	movw	r30, r20
    3a1c:	91 83       	std	Z+1, r25	; 0x01
	PORTF.DIRSET = PIN3_bm;					// DIR 5
    3a1e:	11 96       	adiw	r26, 0x01	; 1
    3a20:	8c 93       	st	X, r24
    3a22:	11 97       	sbiw	r26, 0x01	; 1
	
	PORTC.OUTCLR = (PIN3_bm | PIN7_bm);
    3a24:	9e 83       	std	Y+6, r25	; 0x06
	PORTD.OUTCLR = PIN3_bm;
    3a26:	f9 01       	movw	r30, r18
    3a28:	86 83       	std	Z+6, r24	; 0x06
	PORTE.OUTCLR = (PIN3_bm | PIN7_bm);
    3a2a:	fa 01       	movw	r30, r20
    3a2c:	96 83       	std	Z+6, r25	; 0x06
	PORTF.OUTCLR = PIN3_bm;
    3a2e:	16 96       	adiw	r26, 0x06	; 6
    3a30:	8c 93       	st	X, r24
    3a32:	16 97       	sbiw	r26, 0x06	; 6
		
	// Invert the output pins:
	PORTC.PIN3CTRL = PORT_INVEN_bm;
    3a34:	80 e4       	ldi	r24, 0x40	; 64
    3a36:	8b 8b       	std	Y+19, r24	; 0x13
	PORTC.PIN7CTRL = PORT_INVEN_bm;
    3a38:	8f 8b       	std	Y+23, r24	; 0x17
	PORTD.PIN3CTRL = PORT_INVEN_bm;
    3a3a:	f9 01       	movw	r30, r18
    3a3c:	83 8b       	std	Z+19, r24	; 0x13
	PORTE.PIN3CTRL = PORT_INVEN_bm;
    3a3e:	fa 01       	movw	r30, r20
    3a40:	83 8b       	std	Z+19, r24	; 0x13
	PORTE.PIN7CTRL = PORT_INVEN_bm;
    3a42:	87 8b       	std	Z+23, r24	; 0x17
	PORTF.PIN3CTRL = PORT_INVEN_bm;
    3a44:	53 96       	adiw	r26, 0x13	; 19
    3a46:	8c 93       	st	X, r24
	
}
    3a48:	df 91       	pop	r29
    3a4a:	cf 91       	pop	r28
    3a4c:	08 95       	ret

00003a4e <ir_led_on>:

void ir_led_on(uint8_t direction)
{
    3a4e:	cf 93       	push	r28
    3a50:	df 93       	push	r29
	//Turning on the light.
	saved_usart_ctrlb_vals[direction]	  = channel[direction]->CTRLB;	// record the current state of the USART
    3a52:	90 e0       	ldi	r25, 0x00	; 0
    3a54:	dc 01       	movw	r26, r24
    3a56:	aa 0f       	add	r26, r26
    3a58:	bb 1f       	adc	r27, r27
    3a5a:	ad 01       	movw	r20, r26
    3a5c:	4c 5d       	subi	r20, 0xDC	; 220
    3a5e:	5f 4d       	sbci	r21, 0xDF	; 223
    3a60:	ea 01       	movw	r28, r20
    3a62:	e8 81       	ld	r30, Y
    3a64:	f9 81       	ldd	r31, Y+1	; 0x01
    3a66:	24 81       	ldd	r18, Z+4	; 0x04
    3a68:	fc 01       	movw	r30, r24
    3a6a:	e4 50       	subi	r30, 0x04	; 4
    3a6c:	fc 4d       	sbci	r31, 0xDC	; 220
    3a6e:	20 83       	st	Z, r18
	TCF2.CTRLB			 &= ~carrier_wave_pins[direction];	// disable carrier wave output
    3a70:	e0 e0       	ldi	r30, 0x00	; 0
    3a72:	fb e0       	ldi	r31, 0x0B	; 11
    3a74:	31 81       	ldd	r19, Z+1	; 0x01
    3a76:	ec 01       	movw	r28, r24
    3a78:	c2 5e       	subi	r28, 0xE2	; 226
    3a7a:	df 4d       	sbci	r29, 0xDF	; 223
    3a7c:	28 81       	ld	r18, Y
    3a7e:	20 95       	com	r18
    3a80:	23 23       	and	r18, r19
    3a82:	21 83       	std	Z+1, r18	; 0x01
	PORTF.DIRSET		  =  carrier_wave_pins[direction];	// enable user output on this pin
    3a84:	28 81       	ld	r18, Y
    3a86:	e0 ea       	ldi	r30, 0xA0	; 160
    3a88:	f6 e0       	ldi	r31, 0x06	; 6
    3a8a:	21 83       	std	Z+1, r18	; 0x01
	PORTF.OUT			 |=  carrier_wave_pins[direction];	// high signal on this pin
    3a8c:	34 81       	ldd	r19, Z+4	; 0x04
    3a8e:	28 81       	ld	r18, Y
    3a90:	23 2b       	or	r18, r19
    3a92:	24 83       	std	Z+4, r18	; 0x04
	channel[direction]->CTRLB  	  =  0;					// disable USART
    3a94:	ea 01       	movw	r28, r20
    3a96:	e8 81       	ld	r30, Y
    3a98:	f9 81       	ldd	r31, Y+1	; 0x01
    3a9a:	14 82       	std	Z+4, r1	; 0x04
	uart_ch[direction]->DIRSET =  tx_pins[direction];			// enable user output on this pin
    3a9c:	a4 5f       	subi	r26, 0xF4	; 244
    3a9e:	bf 4d       	sbci	r27, 0xDF	; 223
    3aa0:	cd 91       	ld	r28, X+
    3aa2:	dc 91       	ld	r29, X
    3aa4:	11 97       	sbiw	r26, 0x01	; 1
    3aa6:	fc 01       	movw	r30, r24
    3aa8:	e8 5e       	subi	r30, 0xE8	; 232
    3aaa:	ff 4d       	sbci	r31, 0xDF	; 223
    3aac:	80 81       	ld	r24, Z
    3aae:	89 83       	std	Y+1, r24	; 0x01
	uart_ch[direction]->OUT	 &= ~tx_pins[direction];			// low signal on TX pin (remember: these pins were inverted during init)
    3ab0:	0d 90       	ld	r0, X+
    3ab2:	bc 91       	ld	r27, X
    3ab4:	a0 2d       	mov	r26, r0
    3ab6:	14 96       	adiw	r26, 0x04	; 4
    3ab8:	9c 91       	ld	r25, X
    3aba:	14 97       	sbiw	r26, 0x04	; 4
    3abc:	80 81       	ld	r24, Z
    3abe:	80 95       	com	r24
    3ac0:	89 23       	and	r24, r25
    3ac2:	14 96       	adiw	r26, 0x04	; 4
    3ac4:	8c 93       	st	X, r24

}
    3ac6:	df 91       	pop	r29
    3ac8:	cf 91       	pop	r28
    3aca:	08 95       	ret

00003acc <ir_led_off>:

void ir_led_off(uint8_t direction)
{
	//Turning off the light.
	uart_ch[direction]->OUT  |=  tx_pins[direction];			// high signal on TX pin (turns IR blast OFF)
    3acc:	90 e0       	ldi	r25, 0x00	; 0
    3ace:	9c 01       	movw	r18, r24
    3ad0:	22 0f       	add	r18, r18
    3ad2:	33 1f       	adc	r19, r19
    3ad4:	f9 01       	movw	r30, r18
    3ad6:	e4 5f       	subi	r30, 0xF4	; 244
    3ad8:	ff 4d       	sbci	r31, 0xDF	; 223
    3ada:	01 90       	ld	r0, Z+
    3adc:	f0 81       	ld	r31, Z
    3ade:	e0 2d       	mov	r30, r0
    3ae0:	54 81       	ldd	r21, Z+4	; 0x04
    3ae2:	dc 01       	movw	r26, r24
    3ae4:	a8 5e       	subi	r26, 0xE8	; 232
    3ae6:	bf 4d       	sbci	r27, 0xDF	; 223
    3ae8:	4c 91       	ld	r20, X
    3aea:	45 2b       	or	r20, r21
    3aec:	44 83       	std	Z+4, r20	; 0x04
	channel[direction]->CTRLB	 =  saved_usart_ctrlb_vals[direction];	// re-enable USART (restore settings as it was before)
    3aee:	f9 01       	movw	r30, r18
    3af0:	ec 5d       	subi	r30, 0xDC	; 220
    3af2:	ff 4d       	sbci	r31, 0xDF	; 223
    3af4:	01 90       	ld	r0, Z+
    3af6:	f0 81       	ld	r31, Z
    3af8:	e0 2d       	mov	r30, r0
    3afa:	dc 01       	movw	r26, r24
    3afc:	a4 50       	subi	r26, 0x04	; 4
    3afe:	bc 4d       	sbci	r27, 0xDC	; 220
    3b00:	2c 91       	ld	r18, X
    3b02:	24 83       	std	Z+4, r18	; 0x04
	PORTF.OUT			&= ~carrier_wave_pins[direction];	// low signal on the carrier wave pin, just in casies.
    3b04:	a0 ea       	ldi	r26, 0xA0	; 160
    3b06:	b6 e0       	ldi	r27, 0x06	; 6
    3b08:	14 96       	adiw	r26, 0x04	; 4
    3b0a:	2c 91       	ld	r18, X
    3b0c:	14 97       	sbiw	r26, 0x04	; 4
    3b0e:	fc 01       	movw	r30, r24
    3b10:	e2 5e       	subi	r30, 0xE2	; 226
    3b12:	ff 4d       	sbci	r31, 0xDF	; 223
    3b14:	80 81       	ld	r24, Z
    3b16:	80 95       	com	r24
    3b18:	82 23       	and	r24, r18
    3b1a:	14 96       	adiw	r26, 0x04	; 4
    3b1c:	8c 93       	st	X, r24
	TCF2.CTRLB			|=  carrier_wave_pins[direction];	// re-enable carrier wave output
    3b1e:	a0 e0       	ldi	r26, 0x00	; 0
    3b20:	bb e0       	ldi	r27, 0x0B	; 11
    3b22:	11 96       	adiw	r26, 0x01	; 1
    3b24:	9c 91       	ld	r25, X
    3b26:	11 97       	sbiw	r26, 0x01	; 1
    3b28:	80 81       	ld	r24, Z
    3b2a:	89 2b       	or	r24, r25
    3b2c:	11 96       	adiw	r26, 0x01	; 1
    3b2e:	8c 93       	st	X, r24
    3b30:	08 95       	ret

00003b32 <set_all_ir_powers>:
}

void set_all_ir_powers(uint16_t power)
{
    3b32:	8f 92       	push	r8
    3b34:	9f 92       	push	r9
    3b36:	af 92       	push	r10
    3b38:	bf 92       	push	r11
    3b3a:	df 92       	push	r13
    3b3c:	ef 92       	push	r14
    3b3e:	ff 92       	push	r15
    3b40:	0f 93       	push	r16
    3b42:	1f 93       	push	r17
    3b44:	cf 93       	push	r28
    3b46:	df 93       	push	r29
    3b48:	00 d0       	rcall	.+0      	; 0x3b4a <set_all_ir_powers+0x18>
    3b4a:	00 d0       	rcall	.+0      	; 0x3b4c <set_all_ir_powers+0x1a>
    3b4c:	cd b7       	in	r28, 0x3d	; 61
    3b4e:	de b7       	in	r29, 0x3e	; 62
    3b50:	7c 01       	movw	r14, r24
	if(power>256) return;
    3b52:	81 30       	cpi	r24, 0x01	; 1
    3b54:	91 40       	sbci	r25, 0x01	; 1
    3b56:	08 f0       	brcs	.+2      	; 0x3b5a <set_all_ir_powers+0x28>
    3b58:	47 c1       	rjmp	.+654    	; 0x3de8 <set_all_ir_powers+0x2b6>
	if(curr_ir_power==power) return;
    3b5a:	80 91 aa 2f 	lds	r24, 0x2FAA	; 0x802faa <curr_ir_power>
    3b5e:	90 91 ab 2f 	lds	r25, 0x2FAB	; 0x802fab <curr_ir_power+0x1>
    3b62:	8e 15       	cp	r24, r14
    3b64:	9f 05       	cpc	r25, r15
    3b66:	09 f4       	brne	.+2      	; 0x3b6a <set_all_ir_powers+0x38>
    3b68:	3f c1       	rjmp	.+638    	; 0x3de8 <set_all_ir_powers+0x2b6>
	uint8_t power_high = (power>>8);
	uint8_t power_low = (power&0xFF);
	uint8_t write_buffer[6] = {0x00|power_high,power_low,0x10|power_high,power_low,0x60|power_high, power_low};
    3b6a:	f9 82       	std	Y+1, r15	; 0x01
    3b6c:	ea 82       	std	Y+2, r14	; 0x02
    3b6e:	8f 2d       	mov	r24, r15
    3b70:	80 61       	ori	r24, 0x10	; 16
    3b72:	8b 83       	std	Y+3, r24	; 0x03
    3b74:	ec 82       	std	Y+4, r14	; 0x04
    3b76:	8f 2d       	mov	r24, r15
    3b78:	80 66       	ori	r24, 0x60	; 96
    3b7a:	8d 83       	std	Y+5, r24	; 0x05
    3b7c:	ee 82       	std	Y+6, r14	; 0x06
	
	uint32_t startTime = get_time();
    3b7e:	0e 94 20 08 	call	0x1040	; 0x1040 <get_time>
    3b82:	4b 01       	movw	r8, r22
    3b84:	5c 01       	movw	r10, r24
	uint8_t result;	
	uint8_t printed = 0;
    3b86:	d1 2c       	mov	r13, r1
	while(twi->status!=TWIM_STATUS_READY){
		if((get_time()-startTime)>100){
			printf_P(TWI_WAITING_STR);
    3b88:	08 e6       	ldi	r16, 0x68	; 104
    3b8a:	16 e0       	ldi	r17, 0x06	; 6
	uint8_t write_buffer[6] = {0x00|power_high,power_low,0x10|power_high,power_low,0x60|power_high, power_low};
	
	uint32_t startTime = get_time();
	uint8_t result;	
	uint8_t printed = 0;
	while(twi->status!=TWIM_STATUS_READY){
    3b8c:	34 c0       	rjmp	.+104    	; 0x3bf6 <set_all_ir_powers+0xc4>
		if((get_time()-startTime)>100){
    3b8e:	0e 94 20 08 	call	0x1040	; 0x1040 <get_time>
    3b92:	dc 01       	movw	r26, r24
    3b94:	cb 01       	movw	r24, r22
    3b96:	88 19       	sub	r24, r8
    3b98:	99 09       	sbc	r25, r9
    3b9a:	aa 09       	sbc	r26, r10
    3b9c:	bb 09       	sbc	r27, r11
    3b9e:	85 36       	cpi	r24, 0x65	; 101
    3ba0:	91 05       	cpc	r25, r1
    3ba2:	a1 05       	cpc	r26, r1
    3ba4:	b1 05       	cpc	r27, r1
    3ba6:	68 f0       	brcs	.+26     	; 0x3bc2 <set_all_ir_powers+0x90>
			printf_P(TWI_WAITING_STR);
    3ba8:	1f 93       	push	r17
    3baa:	0f 93       	push	r16
    3bac:	0e 94 f7 56 	call	0xadee	; 0xadee <printf_P>
			printed = 1;
			delay_ms(10);
    3bb0:	8a e0       	ldi	r24, 0x0A	; 10
    3bb2:	90 e0       	ldi	r25, 0x00	; 0
    3bb4:	0e 94 33 3a 	call	0x7466	; 0x7466 <delay_ms>
    3bb8:	0f 90       	pop	r0
    3bba:	0f 90       	pop	r0
	uint8_t result;	
	uint8_t printed = 0;
	while(twi->status!=TWIM_STATUS_READY){
		if((get_time()-startTime)>100){
			printf_P(TWI_WAITING_STR);
			printed = 1;
    3bbc:	dd 24       	eor	r13, r13
    3bbe:	d3 94       	inc	r13
    3bc0:	1a c0       	rjmp	.+52     	; 0x3bf6 <set_all_ir_powers+0xc4>
			delay_ms(10);
		}else if((get_time()-startTime)>1000){
    3bc2:	0e 94 20 08 	call	0x1040	; 0x1040 <get_time>
    3bc6:	dc 01       	movw	r26, r24
    3bc8:	cb 01       	movw	r24, r22
    3bca:	88 19       	sub	r24, r8
    3bcc:	99 09       	sbc	r25, r9
    3bce:	aa 09       	sbc	r26, r10
    3bd0:	bb 09       	sbc	r27, r11
    3bd2:	89 3e       	cpi	r24, 0xE9	; 233
    3bd4:	93 40       	sbci	r25, 0x03	; 3
    3bd6:	a1 05       	cpc	r26, r1
    3bd8:	b1 05       	cpc	r27, r1
    3bda:	68 f0       	brcs	.+26     	; 0x3bf6 <set_all_ir_powers+0xc4>
			printf_P(TWI_TIMEOUT_STR);
    3bdc:	83 e4       	ldi	r24, 0x43	; 67
    3bde:	96 e0       	ldi	r25, 0x06	; 6
    3be0:	9f 93       	push	r25
    3be2:	8f 93       	push	r24
    3be4:	0e 94 f7 56 	call	0xadee	; 0xadee <printf_P>
			printf("(a)\r\n");
    3be8:	8f e0       	ldi	r24, 0x0F	; 15
    3bea:	91 e2       	ldi	r25, 0x21	; 33
    3bec:	0e 94 25 57 	call	0xae4a	; 0xae4a <puts>
			return;
    3bf0:	0f 90       	pop	r0
    3bf2:	0f 90       	pop	r0
    3bf4:	f9 c0       	rjmp	.+498    	; 0x3de8 <set_all_ir_powers+0x2b6>
	uint8_t write_buffer[6] = {0x00|power_high,power_low,0x10|power_high,power_low,0x60|power_high, power_low};
	
	uint32_t startTime = get_time();
	uint8_t result;	
	uint8_t printed = 0;
	while(twi->status!=TWIM_STATUS_READY){
    3bf6:	e0 91 68 2f 	lds	r30, 0x2F68	; 0x802f68 <twi>
    3bfa:	f0 91 69 2f 	lds	r31, 0x2F69	; 0x802f69 <twi+0x1>
    3bfe:	87 89       	ldd	r24, Z+23	; 0x17
    3c00:	81 11       	cpse	r24, r1
    3c02:	c5 cf       	rjmp	.-118    	; 0x3b8e <set_all_ir_powers+0x5c>
			printf_P(TWI_TIMEOUT_STR);
			printf("(a)\r\n");
			return;
		}			
	}
	result = TWI_MasterWrite(IR_POWER_ADDR_A, write_buffer, 6);
    3c04:	46 e0       	ldi	r20, 0x06	; 6
    3c06:	be 01       	movw	r22, r28
    3c08:	6f 5f       	subi	r22, 0xFF	; 255
    3c0a:	7f 4f       	sbci	r23, 0xFF	; 255
    3c0c:	8c e2       	ldi	r24, 0x2C	; 44
    3c0e:	0e 94 85 0e 	call	0x1d0a	; 0x1d0a <TWI_MasterWrite>
	while(!result){
    3c12:	88 23       	and	r24, r24
    3c14:	09 f4       	brne	.+2      	; 0x3c18 <set_all_ir_powers+0xe6>
    3c16:	46 c0       	rjmp	.+140    	; 0x3ca4 <set_all_ir_powers+0x172>
    3c18:	48 c0       	rjmp	.+144    	; 0x3caa <set_all_ir_powers+0x178>
		while(twi->status!=TWIM_STATUS_READY){
			if((get_time()-startTime)>100){
    3c1a:	0e 94 20 08 	call	0x1040	; 0x1040 <get_time>
    3c1e:	dc 01       	movw	r26, r24
    3c20:	cb 01       	movw	r24, r22
    3c22:	88 19       	sub	r24, r8
    3c24:	99 09       	sbc	r25, r9
    3c26:	aa 09       	sbc	r26, r10
    3c28:	bb 09       	sbc	r27, r11
    3c2a:	85 36       	cpi	r24, 0x65	; 101
    3c2c:	91 05       	cpc	r25, r1
    3c2e:	a1 05       	cpc	r26, r1
    3c30:	b1 05       	cpc	r27, r1
    3c32:	68 f0       	brcs	.+26     	; 0x3c4e <set_all_ir_powers+0x11c>
			printf_P(TWI_WAITING_STR);
    3c34:	1f 93       	push	r17
    3c36:	0f 93       	push	r16
    3c38:	0e 94 f7 56 	call	0xadee	; 0xadee <printf_P>
				printed = 1;				
				delay_ms(10);				
    3c3c:	8a e0       	ldi	r24, 0x0A	; 10
    3c3e:	90 e0       	ldi	r25, 0x00	; 0
    3c40:	0e 94 33 3a 	call	0x7466	; 0x7466 <delay_ms>
    3c44:	0f 90       	pop	r0
    3c46:	0f 90       	pop	r0
	result = TWI_MasterWrite(IR_POWER_ADDR_A, write_buffer, 6);
	while(!result){
		while(twi->status!=TWIM_STATUS_READY){
			if((get_time()-startTime)>100){
			printf_P(TWI_WAITING_STR);
				printed = 1;				
    3c48:	dd 24       	eor	r13, r13
    3c4a:	d3 94       	inc	r13
    3c4c:	1a c0       	rjmp	.+52     	; 0x3c82 <set_all_ir_powers+0x150>
				delay_ms(10);				
			}else if((get_time()-startTime)>1000){
    3c4e:	0e 94 20 08 	call	0x1040	; 0x1040 <get_time>
    3c52:	dc 01       	movw	r26, r24
    3c54:	cb 01       	movw	r24, r22
    3c56:	88 19       	sub	r24, r8
    3c58:	99 09       	sbc	r25, r9
    3c5a:	aa 09       	sbc	r26, r10
    3c5c:	bb 09       	sbc	r27, r11
    3c5e:	89 3e       	cpi	r24, 0xE9	; 233
    3c60:	93 40       	sbci	r25, 0x03	; 3
    3c62:	a1 05       	cpc	r26, r1
    3c64:	b1 05       	cpc	r27, r1
    3c66:	68 f0       	brcs	.+26     	; 0x3c82 <set_all_ir_powers+0x150>
				printf_P(TWI_TIMEOUT_STR);
    3c68:	83 e4       	ldi	r24, 0x43	; 67
    3c6a:	96 e0       	ldi	r25, 0x06	; 6
    3c6c:	9f 93       	push	r25
    3c6e:	8f 93       	push	r24
    3c70:	0e 94 f7 56 	call	0xadee	; 0xadee <printf_P>
				printf("(b)\r\n");
    3c74:	84 e1       	ldi	r24, 0x14	; 20
    3c76:	91 e2       	ldi	r25, 0x21	; 33
    3c78:	0e 94 25 57 	call	0xae4a	; 0xae4a <puts>
				return;
    3c7c:	0f 90       	pop	r0
    3c7e:	0f 90       	pop	r0
    3c80:	b3 c0       	rjmp	.+358    	; 0x3de8 <set_all_ir_powers+0x2b6>
			return;
		}			
	}
	result = TWI_MasterWrite(IR_POWER_ADDR_A, write_buffer, 6);
	while(!result){
		while(twi->status!=TWIM_STATUS_READY){
    3c82:	e0 91 68 2f 	lds	r30, 0x2F68	; 0x802f68 <twi>
    3c86:	f0 91 69 2f 	lds	r31, 0x2F69	; 0x802f69 <twi+0x1>
    3c8a:	87 89       	ldd	r24, Z+23	; 0x17
    3c8c:	81 11       	cpse	r24, r1
    3c8e:	c5 cf       	rjmp	.-118    	; 0x3c1a <set_all_ir_powers+0xe8>
				printf_P(TWI_TIMEOUT_STR);
				printf("(b)\r\n");
				return;
			}
		}	
		result = TWI_MasterWrite(IR_POWER_ADDR_A, write_buffer, 6);
    3c90:	46 e0       	ldi	r20, 0x06	; 6
    3c92:	be 01       	movw	r22, r28
    3c94:	6f 5f       	subi	r22, 0xFF	; 255
    3c96:	7f 4f       	sbci	r23, 0xFF	; 255
    3c98:	8c e2       	ldi	r24, 0x2C	; 44
    3c9a:	0e 94 85 0e 	call	0x1d0a	; 0x1d0a <TWI_MasterWrite>
			printf("(a)\r\n");
			return;
		}			
	}
	result = TWI_MasterWrite(IR_POWER_ADDR_A, write_buffer, 6);
	while(!result){
    3c9e:	88 23       	and	r24, r24
    3ca0:	81 f3       	breq	.-32     	; 0x3c82 <set_all_ir_powers+0x150>
    3ca2:	03 c0       	rjmp	.+6      	; 0x3caa <set_all_ir_powers+0x178>
		while(twi->status!=TWIM_STATUS_READY){
			if((get_time()-startTime)>100){
			printf_P(TWI_WAITING_STR);
    3ca4:	08 e6       	ldi	r16, 0x68	; 104
    3ca6:	16 e0       	ldi	r17, 0x06	; 6
    3ca8:	ec cf       	rjmp	.-40     	; 0x3c82 <set_all_ir_powers+0x150>
		}	
		result = TWI_MasterWrite(IR_POWER_ADDR_A, write_buffer, 6);
	}
	while(twi->status!=TWIM_STATUS_READY){
		if((get_time()-startTime)>100){
			printf_P(TWI_WAITING_STR);
    3caa:	08 e6       	ldi	r16, 0x68	; 104
    3cac:	16 e0       	ldi	r17, 0x06	; 6
    3cae:	34 c0       	rjmp	.+104    	; 0x3d18 <set_all_ir_powers+0x1e6>
			}
		}	
		result = TWI_MasterWrite(IR_POWER_ADDR_A, write_buffer, 6);
	}
	while(twi->status!=TWIM_STATUS_READY){
		if((get_time()-startTime)>100){
    3cb0:	0e 94 20 08 	call	0x1040	; 0x1040 <get_time>
    3cb4:	dc 01       	movw	r26, r24
    3cb6:	cb 01       	movw	r24, r22
    3cb8:	88 19       	sub	r24, r8
    3cba:	99 09       	sbc	r25, r9
    3cbc:	aa 09       	sbc	r26, r10
    3cbe:	bb 09       	sbc	r27, r11
    3cc0:	85 36       	cpi	r24, 0x65	; 101
    3cc2:	91 05       	cpc	r25, r1
    3cc4:	a1 05       	cpc	r26, r1
    3cc6:	b1 05       	cpc	r27, r1
    3cc8:	68 f0       	brcs	.+26     	; 0x3ce4 <set_all_ir_powers+0x1b2>
			printf_P(TWI_WAITING_STR);
    3cca:	1f 93       	push	r17
    3ccc:	0f 93       	push	r16
    3cce:	0e 94 f7 56 	call	0xadee	; 0xadee <printf_P>
			printed = 1;			
			delay_ms(10);			
    3cd2:	8a e0       	ldi	r24, 0x0A	; 10
    3cd4:	90 e0       	ldi	r25, 0x00	; 0
    3cd6:	0e 94 33 3a 	call	0x7466	; 0x7466 <delay_ms>
    3cda:	0f 90       	pop	r0
    3cdc:	0f 90       	pop	r0
		result = TWI_MasterWrite(IR_POWER_ADDR_A, write_buffer, 6);
	}
	while(twi->status!=TWIM_STATUS_READY){
		if((get_time()-startTime)>100){
			printf_P(TWI_WAITING_STR);
			printed = 1;			
    3cde:	dd 24       	eor	r13, r13
    3ce0:	d3 94       	inc	r13
    3ce2:	1a c0       	rjmp	.+52     	; 0x3d18 <set_all_ir_powers+0x1e6>
			delay_ms(10);			
		}else if((get_time()-startTime)>1000){
    3ce4:	0e 94 20 08 	call	0x1040	; 0x1040 <get_time>
    3ce8:	dc 01       	movw	r26, r24
    3cea:	cb 01       	movw	r24, r22
    3cec:	88 19       	sub	r24, r8
    3cee:	99 09       	sbc	r25, r9
    3cf0:	aa 09       	sbc	r26, r10
    3cf2:	bb 09       	sbc	r27, r11
    3cf4:	89 3e       	cpi	r24, 0xE9	; 233
    3cf6:	93 40       	sbci	r25, 0x03	; 3
    3cf8:	a1 05       	cpc	r26, r1
    3cfa:	b1 05       	cpc	r27, r1
    3cfc:	68 f0       	brcs	.+26     	; 0x3d18 <set_all_ir_powers+0x1e6>
			printf_P(TWI_TIMEOUT_STR);
    3cfe:	83 e4       	ldi	r24, 0x43	; 67
    3d00:	96 e0       	ldi	r25, 0x06	; 6
    3d02:	9f 93       	push	r25
    3d04:	8f 93       	push	r24
    3d06:	0e 94 f7 56 	call	0xadee	; 0xadee <printf_P>
			printf("(c)\r\n");
    3d0a:	89 e1       	ldi	r24, 0x19	; 25
    3d0c:	91 e2       	ldi	r25, 0x21	; 33
    3d0e:	0e 94 25 57 	call	0xae4a	; 0xae4a <puts>
			return;
    3d12:	0f 90       	pop	r0
    3d14:	0f 90       	pop	r0
    3d16:	68 c0       	rjmp	.+208    	; 0x3de8 <set_all_ir_powers+0x2b6>
				return;
			}
		}	
		result = TWI_MasterWrite(IR_POWER_ADDR_A, write_buffer, 6);
	}
	while(twi->status!=TWIM_STATUS_READY){
    3d18:	e0 91 68 2f 	lds	r30, 0x2F68	; 0x802f68 <twi>
    3d1c:	f0 91 69 2f 	lds	r31, 0x2F69	; 0x802f69 <twi+0x1>
    3d20:	87 89       	ldd	r24, Z+23	; 0x17
    3d22:	81 11       	cpse	r24, r1
    3d24:	c5 cf       	rjmp	.-118    	; 0x3cb0 <set_all_ir_powers+0x17e>
			printf_P(TWI_TIMEOUT_STR);
			printf("(c)\r\n");
			return;
		}
	}
	result = TWI_MasterWrite(IR_POWER_ADDR_B, write_buffer, 6);	
    3d26:	46 e0       	ldi	r20, 0x06	; 6
    3d28:	be 01       	movw	r22, r28
    3d2a:	6f 5f       	subi	r22, 0xFF	; 255
    3d2c:	7f 4f       	sbci	r23, 0xFF	; 255
    3d2e:	8e e2       	ldi	r24, 0x2E	; 46
    3d30:	0e 94 85 0e 	call	0x1d0a	; 0x1d0a <TWI_MasterWrite>
	while(!result){
    3d34:	88 23       	and	r24, r24
    3d36:	09 f4       	brne	.+2      	; 0x3d3a <set_all_ir_powers+0x208>
    3d38:	46 c0       	rjmp	.+140    	; 0x3dc6 <set_all_ir_powers+0x294>
    3d3a:	48 c0       	rjmp	.+144    	; 0x3dcc <set_all_ir_powers+0x29a>
		while(twi->status!=TWIM_STATUS_READY){
			if((get_time()-startTime)>100){
    3d3c:	0e 94 20 08 	call	0x1040	; 0x1040 <get_time>
    3d40:	dc 01       	movw	r26, r24
    3d42:	cb 01       	movw	r24, r22
    3d44:	88 19       	sub	r24, r8
    3d46:	99 09       	sbc	r25, r9
    3d48:	aa 09       	sbc	r26, r10
    3d4a:	bb 09       	sbc	r27, r11
    3d4c:	85 36       	cpi	r24, 0x65	; 101
    3d4e:	91 05       	cpc	r25, r1
    3d50:	a1 05       	cpc	r26, r1
    3d52:	b1 05       	cpc	r27, r1
    3d54:	68 f0       	brcs	.+26     	; 0x3d70 <set_all_ir_powers+0x23e>
				printf_P(TWI_WAITING_STR);
    3d56:	1f 93       	push	r17
    3d58:	0f 93       	push	r16
    3d5a:	0e 94 f7 56 	call	0xadee	; 0xadee <printf_P>
				printed = 1;				
				delay_ms(10);					
    3d5e:	8a e0       	ldi	r24, 0x0A	; 10
    3d60:	90 e0       	ldi	r25, 0x00	; 0
    3d62:	0e 94 33 3a 	call	0x7466	; 0x7466 <delay_ms>
    3d66:	0f 90       	pop	r0
    3d68:	0f 90       	pop	r0
	result = TWI_MasterWrite(IR_POWER_ADDR_B, write_buffer, 6);	
	while(!result){
		while(twi->status!=TWIM_STATUS_READY){
			if((get_time()-startTime)>100){
				printf_P(TWI_WAITING_STR);
				printed = 1;				
    3d6a:	dd 24       	eor	r13, r13
    3d6c:	d3 94       	inc	r13
    3d6e:	1a c0       	rjmp	.+52     	; 0x3da4 <set_all_ir_powers+0x272>
				delay_ms(10);					
			}else if((get_time()-startTime)>1000){
    3d70:	0e 94 20 08 	call	0x1040	; 0x1040 <get_time>
    3d74:	dc 01       	movw	r26, r24
    3d76:	cb 01       	movw	r24, r22
    3d78:	88 19       	sub	r24, r8
    3d7a:	99 09       	sbc	r25, r9
    3d7c:	aa 09       	sbc	r26, r10
    3d7e:	bb 09       	sbc	r27, r11
    3d80:	89 3e       	cpi	r24, 0xE9	; 233
    3d82:	93 40       	sbci	r25, 0x03	; 3
    3d84:	a1 05       	cpc	r26, r1
    3d86:	b1 05       	cpc	r27, r1
    3d88:	68 f0       	brcs	.+26     	; 0x3da4 <set_all_ir_powers+0x272>
				printf_P(TWI_TIMEOUT_STR);
    3d8a:	83 e4       	ldi	r24, 0x43	; 67
    3d8c:	96 e0       	ldi	r25, 0x06	; 6
    3d8e:	9f 93       	push	r25
    3d90:	8f 93       	push	r24
    3d92:	0e 94 f7 56 	call	0xadee	; 0xadee <printf_P>
				printf("(d)\r\n");
    3d96:	8e e1       	ldi	r24, 0x1E	; 30
    3d98:	91 e2       	ldi	r25, 0x21	; 33
    3d9a:	0e 94 25 57 	call	0xae4a	; 0xae4a <puts>
				return;
    3d9e:	0f 90       	pop	r0
    3da0:	0f 90       	pop	r0
    3da2:	22 c0       	rjmp	.+68     	; 0x3de8 <set_all_ir_powers+0x2b6>
			return;
		}
	}
	result = TWI_MasterWrite(IR_POWER_ADDR_B, write_buffer, 6);	
	while(!result){
		while(twi->status!=TWIM_STATUS_READY){
    3da4:	e0 91 68 2f 	lds	r30, 0x2F68	; 0x802f68 <twi>
    3da8:	f0 91 69 2f 	lds	r31, 0x2F69	; 0x802f69 <twi+0x1>
    3dac:	87 89       	ldd	r24, Z+23	; 0x17
    3dae:	81 11       	cpse	r24, r1
    3db0:	c5 cf       	rjmp	.-118    	; 0x3d3c <set_all_ir_powers+0x20a>
				printf_P(TWI_TIMEOUT_STR);
				printf("(d)\r\n");
				return;
			}
		}
		result = TWI_MasterWrite(IR_POWER_ADDR_B, write_buffer, 6);
    3db2:	46 e0       	ldi	r20, 0x06	; 6
    3db4:	be 01       	movw	r22, r28
    3db6:	6f 5f       	subi	r22, 0xFF	; 255
    3db8:	7f 4f       	sbci	r23, 0xFF	; 255
    3dba:	8e e2       	ldi	r24, 0x2E	; 46
    3dbc:	0e 94 85 0e 	call	0x1d0a	; 0x1d0a <TWI_MasterWrite>
			printf("(c)\r\n");
			return;
		}
	}
	result = TWI_MasterWrite(IR_POWER_ADDR_B, write_buffer, 6);	
	while(!result){
    3dc0:	88 23       	and	r24, r24
    3dc2:	81 f3       	breq	.-32     	; 0x3da4 <set_all_ir_powers+0x272>
    3dc4:	03 c0       	rjmp	.+6      	; 0x3dcc <set_all_ir_powers+0x29a>
		while(twi->status!=TWIM_STATUS_READY){
			if((get_time()-startTime)>100){
				printf_P(TWI_WAITING_STR);
    3dc6:	08 e6       	ldi	r16, 0x68	; 104
    3dc8:	16 e0       	ldi	r17, 0x06	; 6
    3dca:	ec cf       	rjmp	.-40     	; 0x3da4 <set_all_ir_powers+0x272>
				return;
			}
		}
		result = TWI_MasterWrite(IR_POWER_ADDR_B, write_buffer, 6);
	}
	if(printed){
    3dcc:	dd 20       	and	r13, r13
    3dce:	41 f0       	breq	.+16     	; 0x3de0 <set_all_ir_powers+0x2ae>
		printf_P(PSTR("\tDone waiting for TWI. IR powers set successfully.\r\n"));
    3dd0:	8e e0       	ldi	r24, 0x0E	; 14
    3dd2:	96 e0       	ldi	r25, 0x06	; 6
    3dd4:	9f 93       	push	r25
    3dd6:	8f 93       	push	r24
    3dd8:	0e 94 f7 56 	call	0xadee	; 0xadee <printf_P>
    3ddc:	0f 90       	pop	r0
    3dde:	0f 90       	pop	r0
	}
	curr_ir_power = power;
    3de0:	e0 92 aa 2f 	sts	0x2FAA, r14	; 0x802faa <curr_ir_power>
    3de4:	f0 92 ab 2f 	sts	0x2FAB, r15	; 0x802fab <curr_ir_power+0x1>
    3de8:	26 96       	adiw	r28, 0x06	; 6
    3dea:	cd bf       	out	0x3d, r28	; 61
    3dec:	de bf       	out	0x3e, r29	; 62
    3dee:	df 91       	pop	r29
    3df0:	cf 91       	pop	r28
    3df2:	1f 91       	pop	r17
    3df4:	0f 91       	pop	r16
    3df6:	ff 90       	pop	r15
    3df8:	ef 90       	pop	r14
    3dfa:	df 90       	pop	r13
    3dfc:	bf 90       	pop	r11
    3dfe:	af 90       	pop	r10
    3e00:	9f 90       	pop	r9
    3e02:	8f 90       	pop	r8
    3e04:	08 95       	ret

00003e06 <ir_sensor_init>:
		
		//ADCA.EVCTRL = ADC_EVSEL_1234_gc | ADC_EVACT_CH012_gc | ADC_SWEEP_012_gc;
		//ADCB.EVCTRL = ADC_EVSEL_567_gc | ADC_EVACT_CH012_gc | ADC_SWEEP_012_gc;
	#else
		/* SET INPUT PINS AS INPUTS */
		IR_SENSOR_PORT.DIRCLR = ALL_IR_SENSOR_PINS_bm;
    3e06:	e0 e2       	ldi	r30, 0x20	; 32
    3e08:	f6 e0       	ldi	r31, 0x06	; 6
    3e0a:	8c ef       	ldi	r24, 0xFC	; 252
    3e0c:	82 83       	std	Z+2, r24	; 0x02
		
		PORTB.PIN5CTRL = PORT_ISC_INPUT_DISABLE_gc;
    3e0e:	87 e0       	ldi	r24, 0x07	; 7
    3e10:	85 8b       	std	Z+21, r24	; 0x15
		PORTB.PIN6CTRL = PORT_ISC_INPUT_DISABLE_gc;
    3e12:	86 8b       	std	Z+22, r24	; 0x16
		PORTB.PIN7CTRL = PORT_ISC_INPUT_DISABLE_gc;
    3e14:	87 8b       	std	Z+23, r24	; 0x17
		PORTB.PIN4CTRL = PORT_ISC_INPUT_DISABLE_gc;
    3e16:	84 8b       	std	Z+20, r24	; 0x14
		PORTB.PIN2CTRL = PORT_ISC_INPUT_DISABLE_gc;
    3e18:	82 8b       	std	Z+18, r24	; 0x12
		PORTB.PIN3CTRL = PORT_ISC_INPUT_DISABLE_gc;
    3e1a:	83 8b       	std	Z+19, r24	; 0x13

		ADCB.REFCTRL = ADC_REFSEL_AREFA_gc;
    3e1c:	e0 e4       	ldi	r30, 0x40	; 64
    3e1e:	f2 e0       	ldi	r31, 0x02	; 2
    3e20:	90 e2       	ldi	r25, 0x20	; 32
    3e22:	92 83       	std	Z+2, r25	; 0x02
		ADCB.CTRLB = ADC_RESOLUTION_12BIT_gc | ADC_CONMODE_bm; //12bit resolution, and sets it to signed mode.
    3e24:	90 e1       	ldi	r25, 0x10	; 16
    3e26:	91 83       	std	Z+1, r25	; 0x01
		ADCB.PRESCALER = ADC_PRESCALER_DIV512_gc;
    3e28:	84 83       	std	Z+4, r24	; 0x04
		ADCB.CH0.CTRL = ADC_CH_INPUTMODE_DIFFWGAIN_gc | ADC_CH_GAIN2_bm;	// differential input. requires signed mode (see sec. 28.6 in manual)
    3e2a:	83 e1       	ldi	r24, 0x13	; 19
    3e2c:	80 a3       	std	Z+32, r24	; 0x20
		ADCB.CH0.MUXCTRL = ADC_CH_MUXNEG_INTGND_MODE4_gc;	// use VREF_IN for the negative input (0.54 V)
    3e2e:	84 e0       	ldi	r24, 0x04	; 4
    3e30:	81 a3       	std	Z+33, r24	; 0x21
		ADCB.CALL = PRODSIGNATURES_ADCBCAL0;
    3e32:	84 b5       	in	r24, 0x24	; 36
    3e34:	84 87       	std	Z+12, r24	; 0x0c
		ADCB.CALH = PRODSIGNATURES_ADCBCAL1;
    3e36:	85 b5       	in	r24, 0x25	; 37
    3e38:	85 87       	std	Z+13, r24	; 0x0d
		ADCB.CTRLA = ADC_ENABLE_bm;
    3e3a:	81 e0       	ldi	r24, 0x01	; 1
    3e3c:	80 83       	st	Z, r24
	#endif
	
	delay_ms(10);
    3e3e:	8a e0       	ldi	r24, 0x0A	; 10
    3e40:	90 e0       	ldi	r25, 0x00	; 0
    3e42:	0e 94 33 3a 	call	0x7466	; 0x7466 <delay_ms>
	
	for(uint8_t dir=0; dir<6; dir++){
		min_collision_vals[dir] = 32767;
    3e46:	ee ea       	ldi	r30, 0xAE	; 174
    3e48:	fb e2       	ldi	r31, 0x2B	; 43
    3e4a:	8f ef       	ldi	r24, 0xFF	; 255
    3e4c:	9f e7       	ldi	r25, 0x7F	; 127
    3e4e:	80 83       	st	Z, r24
    3e50:	91 83       	std	Z+1, r25	; 0x01
    3e52:	82 83       	std	Z+2, r24	; 0x02
    3e54:	93 83       	std	Z+3, r25	; 0x03
    3e56:	84 83       	std	Z+4, r24	; 0x04
    3e58:	95 83       	std	Z+5, r25	; 0x05
    3e5a:	86 83       	std	Z+6, r24	; 0x06
    3e5c:	97 83       	std	Z+7, r25	; 0x07
    3e5e:	80 87       	std	Z+8, r24	; 0x08
    3e60:	91 87       	std	Z+9, r25	; 0x09
    3e62:	82 87       	std	Z+10, r24	; 0x0a
    3e64:	93 87       	std	Z+11, r25	; 0x0b
	}
	for(uint8_t dir=0;dir<6;dir++){
		ir_sense_baseline[dir]=0;
    3e66:	e2 ee       	ldi	r30, 0xE2	; 226
    3e68:	fa e2       	ldi	r31, 0x2A	; 42
    3e6a:	10 82       	st	Z, r1
    3e6c:	11 82       	std	Z+1, r1	; 0x01
    3e6e:	12 82       	std	Z+2, r1	; 0x02
    3e70:	13 82       	std	Z+3, r1	; 0x03
    3e72:	14 82       	std	Z+4, r1	; 0x04
    3e74:	15 82       	std	Z+5, r1	; 0x05
    3e76:	16 82       	std	Z+6, r1	; 0x06
    3e78:	17 82       	std	Z+7, r1	; 0x07
    3e7a:	10 86       	std	Z+8, r1	; 0x08
    3e7c:	11 86       	std	Z+9, r1	; 0x09
    3e7e:	12 86       	std	Z+10, r1	; 0x0a
    3e80:	13 86       	std	Z+11, r1	; 0x0b
	}
	schedule_task(1000,initialize_ir_baselines,NULL);
    3e82:	20 e0       	ldi	r18, 0x00	; 0
    3e84:	30 e0       	ldi	r19, 0x00	; 0
    3e86:	4c e8       	ldi	r20, 0x8C	; 140
    3e88:	50 e2       	ldi	r21, 0x20	; 32
    3e8a:	68 ee       	ldi	r22, 0xE8	; 232
    3e8c:	73 e0       	ldi	r23, 0x03	; 3
    3e8e:	80 e0       	ldi	r24, 0x00	; 0
    3e90:	90 e0       	ldi	r25, 0x00	; 0
    3e92:	0e 94 2a 3d 	call	0x7a54	; 0x7a54 <schedule_task>
	schedule_periodic_task(13331, update_ir_baselines, NULL);
    3e96:	20 e0       	ldi	r18, 0x00	; 0
    3e98:	30 e0       	ldi	r19, 0x00	; 0
    3e9a:	44 ec       	ldi	r20, 0xC4	; 196
    3e9c:	50 e2       	ldi	r21, 0x20	; 32
    3e9e:	63 e1       	ldi	r22, 0x13	; 19
    3ea0:	74 e3       	ldi	r23, 0x34	; 52
    3ea2:	80 e0       	ldi	r24, 0x00	; 0
    3ea4:	90 e0       	ldi	r25, 0x00	; 0
    3ea6:	0e 94 db 3d 	call	0x7bb6	; 0x7bb6 <schedule_periodic_task>
    3eaa:	08 95       	ret

00003eac <meas_find_median>:
}	

// Finds the median of arr_len numbers by finding the max, finding the min, and returning the other value
// WARNING! This function modifies the array!
int16_t meas_find_median(int16_t* meas, uint8_t arr_len)
{
    3eac:	ef 92       	push	r14
    3eae:	ff 92       	push	r15
    3eb0:	0f 93       	push	r16
    3eb2:	1f 93       	push	r17
    3eb4:	cf 93       	push	r28
    3eb6:	df 93       	push	r29
    3eb8:	ec 01       	movw	r28, r24
	if(arr_len==1) return meas[0];
    3eba:	61 30       	cpi	r22, 0x01	; 1
    3ebc:	19 f4       	brne	.+6      	; 0x3ec4 <meas_find_median+0x18>
    3ebe:	88 81       	ld	r24, Y
    3ec0:	99 81       	ldd	r25, Y+1	; 0x01
    3ec2:	53 c0       	rjmp	.+166    	; 0x3f6a <meas_find_median+0xbe>
	else if(arr_len==2) return (meas[0]+meas[1])/2;
    3ec4:	62 30       	cpi	r22, 0x02	; 2
    3ec6:	59 f5       	brne	.+86     	; 0x3f1e <meas_find_median+0x72>
    3ec8:	28 81       	ld	r18, Y
    3eca:	39 81       	ldd	r19, Y+1	; 0x01
    3ecc:	8a 81       	ldd	r24, Y+2	; 0x02
    3ece:	9b 81       	ldd	r25, Y+3	; 0x03
    3ed0:	82 0f       	add	r24, r18
    3ed2:	93 1f       	adc	r25, r19
    3ed4:	99 23       	and	r25, r25
    3ed6:	0c f4       	brge	.+2      	; 0x3eda <meas_find_median+0x2e>
    3ed8:	01 96       	adiw	r24, 0x01	; 1
    3eda:	95 95       	asr	r25
    3edc:	87 95       	ror	r24
    3ede:	45 c0       	rjmp	.+138    	; 0x3f6a <meas_find_median+0xbe>
    3ee0:	92 e0       	ldi	r25, 0x02	; 2
    3ee2:	e9 0e       	add	r14, r25
    3ee4:	f1 1c       	adc	r15, r1
	
	for(uint8_t i=0; i<arr_len ; i++)
	{
		for(uint8_t j=i+1 ; j<arr_len ; j++)
    3ee6:	8f 5f       	subi	r24, 0xFF	; 255
    3ee8:	86 17       	cp	r24, r22
    3eea:	f1 f0       	breq	.+60     	; 0x3f28 <meas_find_median+0x7c>
    3eec:	98 2f       	mov	r25, r24
    3eee:	87 01       	movw	r16, r14
		{
			if(meas[j] < meas[i])
    3ef0:	e9 2f       	mov	r30, r25
    3ef2:	f0 e0       	ldi	r31, 0x00	; 0
    3ef4:	ee 0f       	add	r30, r30
    3ef6:	ff 1f       	adc	r31, r31
    3ef8:	ec 0f       	add	r30, r28
    3efa:	fd 1f       	adc	r31, r29
    3efc:	40 81       	ld	r20, Z
    3efe:	51 81       	ldd	r21, Z+1	; 0x01
    3f00:	d7 01       	movw	r26, r14
    3f02:	2d 91       	ld	r18, X+
    3f04:	3c 91       	ld	r19, X
    3f06:	42 17       	cp	r20, r18
    3f08:	53 07       	cpc	r21, r19
    3f0a:	2c f4       	brge	.+10     	; 0x3f16 <meas_find_median+0x6a>
			{
				int16_t temp = meas[i];
				meas[i] = meas[j];
    3f0c:	d8 01       	movw	r26, r16
    3f0e:	4d 93       	st	X+, r20
    3f10:	5c 93       	st	X, r21
				meas[j] = temp;
    3f12:	20 83       	st	Z, r18
    3f14:	31 83       	std	Z+1, r19	; 0x01
	if(arr_len==1) return meas[0];
	else if(arr_len==2) return (meas[0]+meas[1])/2;
	
	for(uint8_t i=0; i<arr_len ; i++)
	{
		for(uint8_t j=i+1 ; j<arr_len ; j++)
    3f16:	9f 5f       	subi	r25, 0xFF	; 255
    3f18:	96 13       	cpse	r25, r22
    3f1a:	ea cf       	rjmp	.-44     	; 0x3ef0 <meas_find_median+0x44>
    3f1c:	e1 cf       	rjmp	.-62     	; 0x3ee0 <meas_find_median+0x34>
int16_t meas_find_median(int16_t* meas, uint8_t arr_len)
{
	if(arr_len==1) return meas[0];
	else if(arr_len==2) return (meas[0]+meas[1])/2;
	
	for(uint8_t i=0; i<arr_len ; i++)
    3f1e:	66 23       	and	r22, r22
    3f20:	29 f0       	breq	.+10     	; 0x3f2c <meas_find_median+0x80>
    3f22:	7c 01       	movw	r14, r24
    3f24:	80 e0       	ldi	r24, 0x00	; 0
    3f26:	df cf       	rjmp	.-66     	; 0x3ee6 <meas_find_median+0x3a>
				meas[i] = meas[j];
				meas[j] = temp;
			}
		}
	}
	if(arr_len%2==0) return (meas[arr_len/2-1]+meas[arr_len/2])/2;
    3f28:	60 fd       	sbrc	r22, 0
    3f2a:	15 c0       	rjmp	.+42     	; 0x3f56 <meas_find_median+0xaa>
    3f2c:	66 95       	lsr	r22
    3f2e:	e6 2f       	mov	r30, r22
    3f30:	f0 e0       	ldi	r31, 0x00	; 0
    3f32:	e1 50       	subi	r30, 0x01	; 1
    3f34:	f0 48       	sbci	r31, 0x80	; 128
    3f36:	ee 0f       	add	r30, r30
    3f38:	ff 1f       	adc	r31, r31
    3f3a:	ec 0f       	add	r30, r28
    3f3c:	fd 1f       	adc	r31, r29
    3f3e:	20 81       	ld	r18, Z
    3f40:	31 81       	ldd	r19, Z+1	; 0x01
    3f42:	82 81       	ldd	r24, Z+2	; 0x02
    3f44:	93 81       	ldd	r25, Z+3	; 0x03
    3f46:	82 0f       	add	r24, r18
    3f48:	93 1f       	adc	r25, r19
    3f4a:	99 23       	and	r25, r25
    3f4c:	0c f4       	brge	.+2      	; 0x3f50 <meas_find_median+0xa4>
    3f4e:	01 96       	adiw	r24, 0x01	; 1
    3f50:	95 95       	asr	r25
    3f52:	87 95       	ror	r24
    3f54:	0a c0       	rjmp	.+20     	; 0x3f6a <meas_find_median+0xbe>
	else return meas[arr_len/2];
    3f56:	66 95       	lsr	r22
    3f58:	26 2f       	mov	r18, r22
    3f5a:	30 e0       	ldi	r19, 0x00	; 0
    3f5c:	22 0f       	add	r18, r18
    3f5e:	33 1f       	adc	r19, r19
    3f60:	fe 01       	movw	r30, r28
    3f62:	e2 0f       	add	r30, r18
    3f64:	f3 1f       	adc	r31, r19
    3f66:	80 81       	ld	r24, Z
    3f68:	91 81       	ldd	r25, Z+1	; 0x01
    3f6a:	df 91       	pop	r29
    3f6c:	cf 91       	pop	r28
    3f6e:	1f 91       	pop	r17
    3f70:	0f 91       	pop	r16
    3f72:	ff 90       	pop	r15
    3f74:	ef 90       	pop	r14
    3f76:	08 95       	ret

00003f78 <get_ir_sensors>:
	}

}

void get_ir_sensors(int16_t* output_arr, uint8_t meas_per_ch)
{			
    3f78:	2f 92       	push	r2
    3f7a:	3f 92       	push	r3
    3f7c:	4f 92       	push	r4
    3f7e:	5f 92       	push	r5
    3f80:	6f 92       	push	r6
    3f82:	7f 92       	push	r7
    3f84:	8f 92       	push	r8
    3f86:	9f 92       	push	r9
    3f88:	af 92       	push	r10
    3f8a:	bf 92       	push	r11
    3f8c:	cf 92       	push	r12
    3f8e:	df 92       	push	r13
    3f90:	ef 92       	push	r14
    3f92:	ff 92       	push	r15
    3f94:	0f 93       	push	r16
    3f96:	1f 93       	push	r17
    3f98:	cf 93       	push	r28
    3f9a:	df 93       	push	r29
    3f9c:	1f 92       	push	r1
    3f9e:	cd b7       	in	r28, 0x3d	; 61
    3fa0:	de b7       	in	r29, 0x3e	; 62
    3fa2:	89 83       	std	Y+1, r24	; 0x01
    3fa4:	69 2e       	mov	r6, r25
    3fa6:	76 2e       	mov	r7, r22
		else
			output_arr[dir] = meas[dir][0];
	}
	//for(uint8_t i=0;i<6;i++) printf("%d ", output_arr[i]);
	//printf("\r\n");	
}
    3fa8:	4d b6       	in	r4, 0x3d	; 61
    3faa:	5e b6       	in	r5, 0x3e	; 62

}

void get_ir_sensors(int16_t* output_arr, uint8_t meas_per_ch)
{			
	int16_t meas[6][meas_per_ch];	
    3fac:	86 2f       	mov	r24, r22
    3fae:	90 e0       	ldi	r25, 0x00	; 0
    3fb0:	6c 01       	movw	r12, r24
    3fb2:	cc 0c       	add	r12, r12
    3fb4:	dd 1c       	adc	r13, r13
    3fb6:	8c 0d       	add	r24, r12
    3fb8:	9d 1d       	adc	r25, r13
    3fba:	88 0f       	add	r24, r24
    3fbc:	99 1f       	adc	r25, r25
    3fbe:	88 0f       	add	r24, r24
    3fc0:	99 1f       	adc	r25, r25
    3fc2:	2d b7       	in	r18, 0x3d	; 61
    3fc4:	3e b7       	in	r19, 0x3e	; 62
    3fc6:	28 1b       	sub	r18, r24
    3fc8:	39 0b       	sbc	r19, r25
    3fca:	2d bf       	out	0x3d, r18	; 61
    3fcc:	3e bf       	out	0x3e, r19	; 62
    3fce:	0d b7       	in	r16, 0x3d	; 61
    3fd0:	1e b7       	in	r17, 0x3e	; 62
    3fd2:	0f 5f       	subi	r16, 0xFF	; 255
    3fd4:	1f 4f       	sbci	r17, 0xFF	; 255
    3fd6:	18 01       	movw	r2, r16
    3fd8:	63 e3       	ldi	r22, 0x33	; 51
    3fda:	71 e2       	ldi	r23, 0x21	; 33
    3fdc:	a8 01       	movw	r20, r16
    3fde:	0f 2e       	mov	r0, r31
    3fe0:	f9 e3       	ldi	r31, 0x39	; 57
    3fe2:	ef 2e       	mov	r14, r31
    3fe4:	f1 e2       	ldi	r31, 0x21	; 33
    3fe6:	ff 2e       	mov	r15, r31
    3fe8:	f0 2d       	mov	r31, r0
    3fea:	aa 24       	eor	r10, r10
    3fec:	aa 94       	dec	r10
    3fee:	a7 0c       	add	r10, r7
    3ff0:	b1 2c       	mov	r11, r1
    3ff2:	aa 0c       	add	r10, r10
    3ff4:	bb 1c       	adc	r11, r11
				}
			}
		}
	#else
		for(uint8_t dir=0;dir<6;dir++){
			ADCB.CH0.MUXCTRL &= MUX_SENSOR_CLR; //clear previous sensor selection
    3ff6:	e0 e4       	ldi	r30, 0x40	; 64
    3ff8:	f2 e0       	ldi	r31, 0x02	; 2
    3ffa:	32 e0       	ldi	r19, 0x02	; 2
    3ffc:	a3 0e       	add	r10, r19
    3ffe:	b1 1c       	adc	r11, r1
			for(uint8_t meas_count=0; meas_count<meas_per_ch; meas_count++){
				ATOMIC_BLOCK(ATOMIC_RESTORESTATE){		
					ADCB.CH0.CTRL |= ADC_CH_START_bm;
					while (ADCB.CH0.INTFLAGS==0){};		// wait for measurement to complete
					meas[dir][meas_count] = ADCB.CH0RES;
					ADCB.CH0.INTFLAGS=1; // clear the complete flag					
    4000:	88 24       	eor	r8, r8
    4002:	83 94       	inc	r8
				}
			}
		}
	#else
		for(uint8_t dir=0;dir<6;dir++){
			ADCB.CH0.MUXCTRL &= MUX_SENSOR_CLR; //clear previous sensor selection
    4004:	81 a1       	ldd	r24, Z+33	; 0x21
    4006:	87 70       	andi	r24, 0x07	; 7
    4008:	81 a3       	std	Z+33, r24	; 0x21
			ADCB.CH0.MUXCTRL |= mux_sensor_selectors[dir];			
    400a:	81 a1       	ldd	r24, Z+33	; 0x21
    400c:	db 01       	movw	r26, r22
    400e:	9d 91       	ld	r25, X+
    4010:	bd 01       	movw	r22, r26
    4012:	89 2b       	or	r24, r25
    4014:	81 a3       	std	Z+33, r24	; 0x21
			for(uint8_t meas_count=0; meas_count<meas_per_ch; meas_count++){
    4016:	77 20       	and	r7, r7
    4018:	a9 f0       	breq	.+42     	; 0x4044 <__stack+0x45>
    401a:	95 01       	movw	r18, r10
    401c:	24 0f       	add	r18, r20
    401e:	35 1f       	adc	r19, r21
    4020:	da 01       	movw	r26, r20
				ATOMIC_BLOCK(ATOMIC_RESTORESTATE){		
    4022:	9f b6       	in	r9, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    4024:	f8 94       	cli
					ADCB.CH0.CTRL |= ADC_CH_START_bm;
    4026:	80 a1       	ldd	r24, Z+32	; 0x20
    4028:	80 68       	ori	r24, 0x80	; 128
    402a:	80 a3       	std	Z+32, r24	; 0x20
					while (ADCB.CH0.INTFLAGS==0){};		// wait for measurement to complete
    402c:	83 a1       	ldd	r24, Z+35	; 0x23
    402e:	88 23       	and	r24, r24
    4030:	e9 f3       	breq	.-6      	; 0x402c <__stack+0x2d>
					meas[dir][meas_count] = ADCB.CH0RES;
    4032:	80 89       	ldd	r24, Z+16	; 0x10
    4034:	91 89       	ldd	r25, Z+17	; 0x11
    4036:	8d 93       	st	X+, r24
    4038:	9d 93       	st	X+, r25
					ADCB.CH0.INTFLAGS=1; // clear the complete flag					
    403a:	83 a2       	std	Z+35, r8	; 0x23
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    403c:	9f be       	out	0x3f, r9	; 63
		}
	#else
		for(uint8_t dir=0;dir<6;dir++){
			ADCB.CH0.MUXCTRL &= MUX_SENSOR_CLR; //clear previous sensor selection
			ADCB.CH0.MUXCTRL |= mux_sensor_selectors[dir];			
			for(uint8_t meas_count=0; meas_count<meas_per_ch; meas_count++){
    403e:	a2 17       	cp	r26, r18
    4040:	b3 07       	cpc	r27, r19
    4042:	79 f7       	brne	.-34     	; 0x4022 <__stack+0x23>
    4044:	4c 0d       	add	r20, r12
    4046:	5d 1d       	adc	r21, r13
					ir_sense_channels[dir]->INTFLAGS=1;
				}
			}
		}
	#else
		for(uint8_t dir=0;dir<6;dir++){
    4048:	6e 15       	cp	r22, r14
    404a:	7f 05       	cpc	r23, r15
    404c:	d9 f6       	brne	.-74     	; 0x4004 <__stack+0x5>
    404e:	0c 5f       	subi	r16, 0xFC	; 252
    4050:	1f 4f       	sbci	r17, 0xFF	; 255
    4052:	0f 2e       	mov	r0, r31
    4054:	f2 ee       	ldi	r31, 0xE2	; 226
    4056:	8f 2e       	mov	r8, r31
    4058:	fa e2       	ldi	r31, 0x2A	; 42
    405a:	9f 2e       	mov	r9, r31
    405c:	f0 2d       	mov	r31, r0
    405e:	e9 80       	ldd	r14, Y+1	; 0x01
    4060:	f6 2c       	mov	r15, r6
    4062:	a1 2c       	mov	r10, r1
    4064:	b1 2c       	mov	r11, r1
	
	
	for(uint8_t dir=0;dir<6;dir++)
	{
		if(meas_per_ch>2){
			int16_t median = meas_find_median(&(meas[dir][2]),meas_per_ch-2);
    4066:	0f 2e       	mov	r0, r31
    4068:	fe ef       	ldi	r31, 0xFE	; 254
    406a:	6f 2e       	mov	r6, r31
    406c:	f0 2d       	mov	r31, r0
    406e:	67 0c       	add	r6, r7
	#endif	
	
	
	for(uint8_t dir=0;dir<6;dir++)
	{
		if(meas_per_ch>2){
    4070:	b2 e0       	ldi	r27, 0x02	; 2
    4072:	b7 15       	cp	r27, r7
    4074:	68 f4       	brcc	.+26     	; 0x4090 <__stack+0x91>
			int16_t median = meas_find_median(&(meas[dir][2]),meas_per_ch-2);
    4076:	66 2d       	mov	r22, r6
    4078:	c8 01       	movw	r24, r16
    407a:	0e 94 56 1f 	call	0x3eac	; 0x3eac <meas_find_median>
			//printf("%d ",median);
			output_arr[dir] = median-ir_sense_baseline[dir];
    407e:	f4 01       	movw	r30, r8
    4080:	20 81       	ld	r18, Z
    4082:	31 81       	ldd	r19, Z+1	; 0x01
    4084:	82 1b       	sub	r24, r18
    4086:	93 0b       	sbc	r25, r19
    4088:	d7 01       	movw	r26, r14
    408a:	8d 93       	st	X+, r24
    408c:	9c 93       	st	X, r25
    408e:	1f c0       	rjmp	.+62     	; 0x40ce <__stack+0xcf>
		}			
		else if(meas_per_ch==2)
    4090:	b2 e0       	ldi	r27, 0x02	; 2
    4092:	7b 12       	cpse	r7, r27
    4094:	0e c0       	rjmp	.+28     	; 0x40b2 <__stack+0xb3>
			output_arr[dir] = meas_find_median(&(meas[dir][1]),meas_per_ch-1)-ir_sense_baseline[dir];
    4096:	61 e0       	ldi	r22, 0x01	; 1
    4098:	c8 01       	movw	r24, r16
    409a:	02 97       	sbiw	r24, 0x02	; 2
    409c:	0e 94 56 1f 	call	0x3eac	; 0x3eac <meas_find_median>
    40a0:	f4 01       	movw	r30, r8
    40a2:	20 81       	ld	r18, Z
    40a4:	31 81       	ldd	r19, Z+1	; 0x01
    40a6:	82 1b       	sub	r24, r18
    40a8:	93 0b       	sbc	r25, r19
    40aa:	d7 01       	movw	r26, r14
    40ac:	8d 93       	st	X+, r24
    40ae:	9c 93       	st	X, r25
    40b0:	0e c0       	rjmp	.+28     	; 0x40ce <__stack+0xcf>
		else
			output_arr[dir] = meas[dir][0];
    40b2:	ca 9c       	mul	r12, r10
    40b4:	f0 01       	movw	r30, r0
    40b6:	cb 9c       	mul	r12, r11
    40b8:	f0 0d       	add	r31, r0
    40ba:	da 9c       	mul	r13, r10
    40bc:	f0 0d       	add	r31, r0
    40be:	11 24       	eor	r1, r1
    40c0:	e2 0d       	add	r30, r2
    40c2:	f3 1d       	adc	r31, r3
    40c4:	80 81       	ld	r24, Z
    40c6:	91 81       	ldd	r25, Z+1	; 0x01
    40c8:	f7 01       	movw	r30, r14
    40ca:	80 83       	st	Z, r24
    40cc:	91 83       	std	Z+1, r25	; 0x01
    40ce:	ff ef       	ldi	r31, 0xFF	; 255
    40d0:	af 1a       	sub	r10, r31
    40d2:	bf 0a       	sbc	r11, r31
    40d4:	0c 0d       	add	r16, r12
    40d6:	1d 1d       	adc	r17, r13
    40d8:	22 e0       	ldi	r18, 0x02	; 2
    40da:	82 0e       	add	r8, r18
    40dc:	91 1c       	adc	r9, r1
    40de:	32 e0       	ldi	r19, 0x02	; 2
    40e0:	e3 0e       	add	r14, r19
    40e2:	f1 1c       	adc	r15, r1
			}			
		}
	#endif	
	
	
	for(uint8_t dir=0;dir<6;dir++)
    40e4:	86 e0       	ldi	r24, 0x06	; 6
    40e6:	a8 16       	cp	r10, r24
    40e8:	b1 04       	cpc	r11, r1
    40ea:	11 f6       	brne	.-124    	; 0x4070 <__stack+0x71>
		else
			output_arr[dir] = meas[dir][0];
	}
	//for(uint8_t i=0;i<6;i++) printf("%d ", output_arr[i]);
	//printf("\r\n");	
}
    40ec:	4d be       	out	0x3d, r4	; 61
    40ee:	5e be       	out	0x3e, r5	; 62
    40f0:	0f 90       	pop	r0
    40f2:	df 91       	pop	r29
    40f4:	cf 91       	pop	r28
    40f6:	1f 91       	pop	r17
    40f8:	0f 91       	pop	r16
    40fa:	ff 90       	pop	r15
    40fc:	ef 90       	pop	r14
    40fe:	df 90       	pop	r13
    4100:	cf 90       	pop	r12
    4102:	bf 90       	pop	r11
    4104:	af 90       	pop	r10
    4106:	9f 90       	pop	r9
    4108:	8f 90       	pop	r8
    410a:	7f 90       	pop	r7
    410c:	6f 90       	pop	r6
    410e:	5f 90       	pop	r5
    4110:	4f 90       	pop	r4
    4112:	3f 90       	pop	r3
    4114:	2f 90       	pop	r2
    4116:	08 95       	ret

00004118 <initialize_ir_baselines>:
	}
	schedule_task(1000,initialize_ir_baselines,NULL);
	schedule_periodic_task(13331, update_ir_baselines, NULL);
}

void initialize_ir_baselines(){
    4118:	ef 92       	push	r14
    411a:	ff 92       	push	r15
    411c:	0f 93       	push	r16
    411e:	1f 93       	push	r17
    4120:	cf 93       	push	r28
    4122:	df 93       	push	r29
	get_ir_sensors(ir_sense_baseline, 13);
    4124:	6d e0       	ldi	r22, 0x0D	; 13
    4126:	82 ee       	ldi	r24, 0xE2	; 226
    4128:	9a e2       	ldi	r25, 0x2A	; 42
    412a:	0e 94 bc 1f 	call	0x3f78	; 0x3f78 <get_ir_sensors>
	printf("Baselines:");
    412e:	83 e2       	ldi	r24, 0x23	; 35
    4130:	91 e2       	ldi	r25, 0x21	; 33
    4132:	9f 93       	push	r25
    4134:	8f 93       	push	r24
    4136:	0e 94 e3 56 	call	0xadc6	; 0xadc6 <printf>
    413a:	c2 ee       	ldi	r28, 0xE2	; 226
    413c:	da e2       	ldi	r29, 0x2A	; 42
    413e:	0f 2e       	mov	r0, r31
    4140:	fe ee       	ldi	r31, 0xEE	; 238
    4142:	ef 2e       	mov	r14, r31
    4144:	fa e2       	ldi	r31, 0x2A	; 42
    4146:	ff 2e       	mov	r15, r31
    4148:	f0 2d       	mov	r31, r0
    414a:	0f 90       	pop	r0
    414c:	0f 90       	pop	r0
	for(uint8_t dir=0;dir<6;dir++){
		printf(" %4d", ir_sense_baseline[dir]);
    414e:	0e e2       	ldi	r16, 0x2E	; 46
    4150:	11 e2       	ldi	r17, 0x21	; 33
    4152:	88 81       	ld	r24, Y
    4154:	99 81       	ldd	r25, Y+1	; 0x01
    4156:	22 96       	adiw	r28, 0x02	; 2
    4158:	9f 93       	push	r25
    415a:	8f 93       	push	r24
    415c:	1f 93       	push	r17
    415e:	0f 93       	push	r16
    4160:	0e 94 e3 56 	call	0xadc6	; 0xadc6 <printf>
}

void initialize_ir_baselines(){
	get_ir_sensors(ir_sense_baseline, 13);
	printf("Baselines:");
	for(uint8_t dir=0;dir<6;dir++){
    4164:	0f 90       	pop	r0
    4166:	0f 90       	pop	r0
    4168:	0f 90       	pop	r0
    416a:	0f 90       	pop	r0
    416c:	ce 15       	cp	r28, r14
    416e:	df 05       	cpc	r29, r15
    4170:	81 f7       	brne	.-32     	; 0x4152 <initialize_ir_baselines+0x3a>
		printf(" %4d", ir_sense_baseline[dir]);
	}
	printf("\r\n");	
    4172:	80 ed       	ldi	r24, 0xD0	; 208
    4174:	90 e2       	ldi	r25, 0x20	; 32
    4176:	0e 94 25 57 	call	0xae4a	; 0xae4a <puts>
}
    417a:	df 91       	pop	r29
    417c:	cf 91       	pop	r28
    417e:	1f 91       	pop	r17
    4180:	0f 91       	pop	r16
    4182:	ff 90       	pop	r15
    4184:	ef 90       	pop	r14
    4186:	08 95       	ret

00004188 <update_ir_baselines>:

void update_ir_baselines(){
    4188:	cf 92       	push	r12
    418a:	df 92       	push	r13
    418c:	ef 92       	push	r14
    418e:	ff 92       	push	r15
    4190:	0f 93       	push	r16
    4192:	1f 93       	push	r17
    4194:	cf 93       	push	r28
    4196:	df 93       	push	r29
    4198:	cd b7       	in	r28, 0x3d	; 61
    419a:	de b7       	in	r29, 0x3e	; 62
    419c:	2c 97       	sbiw	r28, 0x0c	; 12
    419e:	cd bf       	out	0x3d, r28	; 61
    41a0:	de bf       	out	0x3e, r29	; 62
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    41a2:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    41a4:	f8 94       	cli
		if(hp_ir_block_bm){
    41a6:	80 91 5a 2f 	lds	r24, 0x2F5A	; 0x802f5a <hp_ir_block_bm>
    41aa:	81 11       	cpse	r24, r1
    41ac:	12 c0       	rjmp	.+36     	; 0x41d2 <update_ir_baselines+0x4a>
			return;
		}
		hp_ir_block_bm=0xFF;
    41ae:	8f ef       	ldi	r24, 0xFF	; 255
    41b0:	80 93 5a 2f 	sts	0x2F5A, r24	; 0x802f5a <hp_ir_block_bm>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    41b4:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
    41b6:	ce 01       	movw	r24, r28
    41b8:	01 96       	adiw	r24, 0x01	; 1
    41ba:	7c 01       	movw	r14, r24
    41bc:	02 ee       	ldi	r16, 0xE2	; 226
    41be:	1a e2       	ldi	r17, 0x2A	; 42
    41c0:	0f 2e       	mov	r0, r31
    41c2:	fe ee       	ldi	r31, 0xEE	; 238
    41c4:	cf 2e       	mov	r12, r31
    41c6:	fa e2       	ldi	r31, 0x2A	; 42
    41c8:	df 2e       	mov	r13, r31
    41ca:	f0 2d       	mov	r31, r0
    41cc:	f8 01       	movw	r30, r16
    41ce:	dc 01       	movw	r26, r24
    41d0:	02 c0       	rjmp	.+4      	; 0x41d6 <update_ir_baselines+0x4e>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    41d2:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
    41d4:	28 c0       	rjmp	.+80     	; 0x4226 <update_ir_baselines+0x9e>
	}
	int16_t prevBaselines[6];
	for(uint8_t dir=0; dir<6; dir++){
		prevBaselines[dir] = ir_sense_baseline[dir]; //zeroing the baseline array.
    41d6:	80 81       	ld	r24, Z
    41d8:	91 81       	ldd	r25, Z+1	; 0x01
    41da:	8d 93       	st	X+, r24
    41dc:	9d 93       	st	X+, r25
		ir_sense_baseline[dir] = 0;
    41de:	11 92       	st	Z+, r1
    41e0:	11 92       	st	Z+, r1
			return;
		}
		hp_ir_block_bm=0xFF;
	}
	int16_t prevBaselines[6];
	for(uint8_t dir=0; dir<6; dir++){
    41e2:	ec 15       	cp	r30, r12
    41e4:	fd 05       	cpc	r31, r13
    41e6:	b9 f7       	brne	.-18     	; 0x41d6 <update_ir_baselines+0x4e>
		prevBaselines[dir] = ir_sense_baseline[dir]; //zeroing the baseline array.
		ir_sense_baseline[dir] = 0;
	}
	get_ir_sensors(ir_sense_baseline, 13);
    41e8:	6d e0       	ldi	r22, 0x0D	; 13
    41ea:	82 ee       	ldi	r24, 0xE2	; 226
    41ec:	9a e2       	ldi	r25, 0x2A	; 42
    41ee:	0e 94 bc 1f 	call	0x3f78	; 0x3f78 <get_ir_sensors>
    41f2:	f8 01       	movw	r30, r16
	for(uint8_t dir=0;dir<6;dir++){
		ir_sense_baseline[dir] = (ir_sense_baseline[dir]+prevBaselines[dir])/2;
    41f4:	d7 01       	movw	r26, r14
    41f6:	2d 91       	ld	r18, X+
    41f8:	3d 91       	ld	r19, X+
    41fa:	7d 01       	movw	r14, r26
    41fc:	80 81       	ld	r24, Z
    41fe:	91 81       	ldd	r25, Z+1	; 0x01
    4200:	82 0f       	add	r24, r18
    4202:	93 1f       	adc	r25, r19
    4204:	99 23       	and	r25, r25
    4206:	0c f4       	brge	.+2      	; 0x420a <update_ir_baselines+0x82>
    4208:	01 96       	adiw	r24, 0x01	; 1
    420a:	95 95       	asr	r25
    420c:	87 95       	ror	r24
    420e:	80 83       	st	Z, r24
    4210:	91 83       	std	Z+1, r25	; 0x01
    4212:	0e 5f       	subi	r16, 0xFE	; 254
    4214:	1f 4f       	sbci	r17, 0xFF	; 255
	for(uint8_t dir=0; dir<6; dir++){
		prevBaselines[dir] = ir_sense_baseline[dir]; //zeroing the baseline array.
		ir_sense_baseline[dir] = 0;
	}
	get_ir_sensors(ir_sense_baseline, 13);
	for(uint8_t dir=0;dir<6;dir++){
    4216:	0c 15       	cp	r16, r12
    4218:	1d 05       	cpc	r17, r13
    421a:	59 f7       	brne	.-42     	; 0x41f2 <update_ir_baselines+0x6a>
		ir_sense_baseline[dir] = (ir_sense_baseline[dir]+prevBaselines[dir])/2;
	}
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    421c:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    421e:	f8 94       	cli
		hp_ir_block_bm = 0;
    4220:	10 92 5a 2f 	sts	0x2F5A, r1	; 0x802f5a <hp_ir_block_bm>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    4224:	8f bf       	out	0x3f, r24	; 63
	}

}
    4226:	2c 96       	adiw	r28, 0x0c	; 12
    4228:	cd bf       	out	0x3d, r28	; 61
    422a:	de bf       	out	0x3e, r29	; 62
    422c:	df 91       	pop	r29
    422e:	cf 91       	pop	r28
    4230:	1f 91       	pop	r17
    4232:	0f 91       	pop	r16
    4234:	ff 90       	pop	r15
    4236:	ef 90       	pop	r14
    4238:	df 90       	pop	r13
    423a:	cf 90       	pop	r12
    423c:	08 95       	ret

0000423e <check_collisions>:
	}
	//for(uint8_t i=0;i<6;i++) printf("%d ", output_arr[i]);
	//printf("\r\n");	
}

uint8_t check_collisions(){
    423e:	af 92       	push	r10
    4240:	bf 92       	push	r11
    4242:	cf 92       	push	r12
    4244:	df 92       	push	r13
    4246:	ef 92       	push	r14
    4248:	ff 92       	push	r15
    424a:	0f 93       	push	r16
    424c:	1f 93       	push	r17
    424e:	cf 93       	push	r28
    4250:	df 93       	push	r29
    4252:	cd b7       	in	r28, 0x3d	; 61
    4254:	de b7       	in	r29, 0x3e	; 62
    4256:	68 97       	sbiw	r28, 0x18	; 24
    4258:	cd bf       	out	0x3d, r28	; 61
    425a:	de bf       	out	0x3e, r29	; 62
	int16_t baseline_meas[6];
	int16_t measured_vals[6];
	uint8_t dirs=0;
	//wait_for_ir(ALL_DIRS);
	for(uint8_t i=0;i<6;i++) ir_rxtx[i].status = IR_STATUS_BUSY_bm;	
    425c:	81 e0       	ldi	r24, 0x01	; 1
    425e:	80 93 07 2c 	sts	0x2C07, r24	; 0x802c07 <ir_rxtx+0x38>
    4262:	80 93 40 2c 	sts	0x2C40, r24	; 0x802c40 <ir_rxtx+0x71>
    4266:	80 93 79 2c 	sts	0x2C79, r24	; 0x802c79 <ir_rxtx+0xaa>
    426a:	80 93 b2 2c 	sts	0x2CB2, r24	; 0x802cb2 <ir_rxtx+0xe3>
    426e:	80 93 eb 2c 	sts	0x2CEB, r24	; 0x802ceb <ir_rxtx+0x11c>
    4272:	80 93 24 2d 	sts	0x2D24, r24	; 0x802d24 <ir_rxtx+0x155>

void ir_led_init();
void set_all_ir_powers(uint16_t power);
void ir_led_on(uint8_t direction);
void ir_led_off(uint8_t direction);
    4276:	e0 90 aa 2f 	lds	r14, 0x2FAA	; 0x802faa <curr_ir_power>
    427a:	f0 90 ab 2f 	lds	r15, 0x2FAB	; 0x802fab <curr_ir_power+0x1>
	uint16_t curr_power = get_all_ir_powers();
	set_all_ir_powers(256);
    427e:	80 e0       	ldi	r24, 0x00	; 0
    4280:	91 e0       	ldi	r25, 0x01	; 1
    4282:	0e 94 99 1d 	call	0x3b32	; 0x3b32 <set_all_ir_powers>
	//printf("coll base: ");
	get_ir_sensors(baseline_meas, 5);
    4286:	65 e0       	ldi	r22, 0x05	; 5
    4288:	ce 01       	movw	r24, r28
    428a:	01 96       	adiw	r24, 0x01	; 1
    428c:	0e 94 bc 1f 	call	0x3f78	; 0x3f78 <get_ir_sensors>
	//printf("\r\n");
	for(uint8_t i=0;i<6;i++) ir_led_on(i);
    4290:	10 e0       	ldi	r17, 0x00	; 0
    4292:	81 2f       	mov	r24, r17
    4294:	0e 94 27 1d 	call	0x3a4e	; 0x3a4e <ir_led_on>
    4298:	1f 5f       	subi	r17, 0xFF	; 255
    429a:	16 30       	cpi	r17, 0x06	; 6
    429c:	d1 f7       	brne	.-12     	; 0x4292 <check_collisions+0x54>
}

static __inline__ void      /* exactly 4 cycles/loop, max 2**16 loops */
_delay_loop_2_x( uint16_t __n )
{                                               /* cycles per loop      */
    __asm__ volatile (                          /* __n..one        zero */
    429e:	8f ec       	ldi	r24, 0xCF	; 207
    42a0:	97 e0       	ldi	r25, 0x07	; 7
    42a2:	01 97       	sbiw	r24, 0x01	; 1
    42a4:	f1 f7       	brne	.-4      	; 0x42a2 <check_collisions+0x64>
    42a6:	00 00       	nop
 * These NOPs will be used for very short delays where
 * it is more code efficient than executing loops.
 *
 */
static __inline__ void _NOP1 (void) { __asm__ volatile ( "nop    " "\n\t" ); }
static __inline__ void _NOP2 (void) { __asm__ volatile ( "rjmp 1f" "\n\t"  "1:" "\n\t" ); }
    42a8:	00 c0       	rjmp	.+0      	; 0x42aa <check_collisions+0x6c>
	busy_delay_us(250);	
	//delay_ms(250);
	//printf("Coll results: ");
	get_ir_sensors(measured_vals, 5);
    42aa:	65 e0       	ldi	r22, 0x05	; 5
    42ac:	ce 01       	movw	r24, r28
    42ae:	0d 96       	adiw	r24, 0x0d	; 13
    42b0:	0e 94 bc 1f 	call	0x3f78	; 0x3f78 <get_ir_sensors>
	//printf("\r\n");
	for(uint8_t i=0;i<6;i++) ir_led_off(i);
    42b4:	10 e0       	ldi	r17, 0x00	; 0
    42b6:	81 2f       	mov	r24, r17
    42b8:	0e 94 66 1d 	call	0x3acc	; 0x3acc <ir_led_off>
    42bc:	1f 5f       	subi	r17, 0xFF	; 255
    42be:	16 30       	cpi	r17, 0x06	; 6
    42c0:	d1 f7       	brne	.-12     	; 0x42b6 <check_collisions+0x78>
    42c2:	ce 01       	movw	r24, r28
    42c4:	0d 96       	adiw	r24, 0x0d	; 13
    42c6:	9e 01       	movw	r18, r28
    42c8:	2f 5f       	subi	r18, 0xFF	; 255
    42ca:	3f 4f       	sbci	r19, 0xFF	; 255
    42cc:	59 01       	movw	r10, r18
    42ce:	ee ea       	ldi	r30, 0xAE	; 174
    42d0:	fb e2       	ldi	r31, 0x2B	; 43
    42d2:	40 e0       	ldi	r20, 0x00	; 0
    42d4:	50 e0       	ldi	r21, 0x00	; 0
    42d6:	10 e0       	ldi	r17, 0x00	; 0
		int16_t measure_above_base = measured_vals[i]-baseline_meas[i];
		//printf("%4d ", measure_above_base);
		if(measure_above_base<min_collision_vals[i]) min_collision_vals[i]=measure_above_base;
		//printf("%4d ", measure_above_base-min_collision_vals[i]);
		if((measure_above_base-min_collision_vals[i])>20){
			dirs = dirs|(1<<i);
    42d8:	61 e0       	ldi	r22, 0x01	; 1
    42da:	70 e0       	ldi	r23, 0x00	; 0
	//printf("\r\n");
	for(uint8_t i=0;i<6;i++) ir_led_off(i);
	
	for(uint8_t i=0;i<6;i++)
	{
		int16_t measure_above_base = measured_vals[i]-baseline_meas[i];
    42dc:	dc 01       	movw	r26, r24
    42de:	2d 91       	ld	r18, X+
    42e0:	3d 91       	ld	r19, X+
    42e2:	cd 01       	movw	r24, r26
    42e4:	d5 01       	movw	r26, r10
    42e6:	cd 90       	ld	r12, X+
    42e8:	dd 90       	ld	r13, X+
    42ea:	5d 01       	movw	r10, r26
    42ec:	2c 19       	sub	r18, r12
    42ee:	3d 09       	sbc	r19, r13
		//printf("%4d ", measure_above_base);
		if(measure_above_base<min_collision_vals[i]) min_collision_vals[i]=measure_above_base;
    42f0:	c0 80       	ld	r12, Z
    42f2:	d1 80       	ldd	r13, Z+1	; 0x01
    42f4:	2c 15       	cp	r18, r12
    42f6:	3d 05       	cpc	r19, r13
    42f8:	1c f4       	brge	.+6      	; 0x4300 <check_collisions+0xc2>
    42fa:	20 83       	st	Z, r18
    42fc:	31 83       	std	Z+1, r19	; 0x01
    42fe:	0d c0       	rjmp	.+26     	; 0x431a <check_collisions+0xdc>
		//printf("%4d ", measure_above_base-min_collision_vals[i]);
		if((measure_above_base-min_collision_vals[i])>20){
    4300:	2c 19       	sub	r18, r12
    4302:	3d 09       	sbc	r19, r13
    4304:	25 31       	cpi	r18, 0x15	; 21
    4306:	31 05       	cpc	r19, r1
    4308:	44 f0       	brlt	.+16     	; 0x431a <check_collisions+0xdc>
			dirs = dirs|(1<<i);
    430a:	9b 01       	movw	r18, r22
    430c:	04 2e       	mov	r0, r20
    430e:	02 c0       	rjmp	.+4      	; 0x4314 <check_collisions+0xd6>
    4310:	22 0f       	add	r18, r18
    4312:	33 1f       	adc	r19, r19
    4314:	0a 94       	dec	r0
    4316:	e2 f7       	brpl	.-8      	; 0x4310 <check_collisions+0xd2>
    4318:	12 2b       	or	r17, r18
    431a:	4f 5f       	subi	r20, 0xFF	; 255
    431c:	5f 4f       	sbci	r21, 0xFF	; 255
    431e:	32 96       	adiw	r30, 0x02	; 2
	//printf("Coll results: ");
	get_ir_sensors(measured_vals, 5);
	//printf("\r\n");
	for(uint8_t i=0;i<6;i++) ir_led_off(i);
	
	for(uint8_t i=0;i<6;i++)
    4320:	46 30       	cpi	r20, 0x06	; 6
    4322:	51 05       	cpc	r21, r1
    4324:	d9 f6       	brne	.-74     	; 0x42dc <check_collisions+0x9e>
		if((measure_above_base-min_collision_vals[i])>20){
			dirs = dirs|(1<<i);
		}
	}
	//printf("\r\n");
	set_all_ir_powers(curr_power);
    4326:	c7 01       	movw	r24, r14
    4328:	0e 94 99 1d 	call	0x3b32	; 0x3b32 <set_all_ir_powers>
	for(uint8_t i=0;i<6;i++) ir_rxtx[i].status = 0;		
    432c:	10 92 07 2c 	sts	0x2C07, r1	; 0x802c07 <ir_rxtx+0x38>
    4330:	10 92 40 2c 	sts	0x2C40, r1	; 0x802c40 <ir_rxtx+0x71>
    4334:	10 92 79 2c 	sts	0x2C79, r1	; 0x802c79 <ir_rxtx+0xaa>
    4338:	10 92 b2 2c 	sts	0x2CB2, r1	; 0x802cb2 <ir_rxtx+0xe3>
    433c:	10 92 eb 2c 	sts	0x2CEB, r1	; 0x802ceb <ir_rxtx+0x11c>
    4340:	10 92 24 2d 	sts	0x2D24, r1	; 0x802d24 <ir_rxtx+0x155>
	return dirs;
}	
    4344:	81 2f       	mov	r24, r17
    4346:	68 96       	adiw	r28, 0x18	; 24
    4348:	cd bf       	out	0x3d, r28	; 61
    434a:	de bf       	out	0x3e, r29	; 62
    434c:	df 91       	pop	r29
    434e:	cf 91       	pop	r28
    4350:	1f 91       	pop	r17
    4352:	0f 91       	pop	r16
    4354:	ff 90       	pop	r15
    4356:	ef 90       	pop	r14
    4358:	df 90       	pop	r13
    435a:	cf 90       	pop	r12
    435c:	bf 90       	pop	r11
    435e:	af 90       	pop	r10
    4360:	08 95       	ret

00004362 <stop_move>:
		printf("\r\n");
	}
	printf("\r\n");
}
void broadcast_motor_adjusts()
{
    4362:	83 e0       	ldi	r24, 0x03	; 3
    4364:	80 93 01 08 	sts	0x0801, r24	; 0x800801 <__TEXT_REGION_LENGTH__+0x700801>
    4368:	80 93 41 08 	sts	0x0841, r24	; 0x800841 <__TEXT_REGION_LENGTH__+0x700841>
    436c:	80 93 01 09 	sts	0x0901, r24	; 0x800901 <__TEXT_REGION_LENGTH__+0x700901>
    4370:	93 e3       	ldi	r25, 0x33	; 51
    4372:	90 93 46 06 	sts	0x0646, r25	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
    4376:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
    437a:	10 92 ec 28 	sts	0x28EC, r1	; 0x8028ec <motor_status>
    437e:	80 91 8f 24 	lds	r24, 0x248F	; 0x80248f <current_motor_task>
    4382:	90 91 90 24 	lds	r25, 0x2490	; 0x802490 <current_motor_task+0x1>
    4386:	0e 94 d0 3a 	call	0x75a0	; 0x75a0 <remove_task>
    438a:	08 95       	ret

0000438c <is_moving>:
    438c:	80 91 ec 28 	lds	r24, 0x28EC	; 0x8028ec <motor_status>
    4390:	88 23       	and	r24, r24
    4392:	24 f4       	brge	.+8      	; 0x439c <is_moving+0x10>
    4394:	80 91 ec 28 	lds	r24, 0x28EC	; 0x8028ec <motor_status>
    4398:	87 70       	andi	r24, 0x07	; 7
    439a:	08 95       	ret
    439c:	8f ef       	ldi	r24, 0xFF	; 255
    439e:	08 95       	ret

000043a0 <move_steps>:
    43a0:	4f 92       	push	r4
    43a2:	5f 92       	push	r5
    43a4:	6f 92       	push	r6
    43a6:	7f 92       	push	r7
    43a8:	8f 92       	push	r8
    43aa:	9f 92       	push	r9
    43ac:	af 92       	push	r10
    43ae:	bf 92       	push	r11
    43b0:	cf 92       	push	r12
    43b2:	df 92       	push	r13
    43b4:	ef 92       	push	r14
    43b6:	ff 92       	push	r15
    43b8:	0f 93       	push	r16
    43ba:	1f 93       	push	r17
    43bc:	cf 93       	push	r28
    43be:	df 93       	push	r29
    43c0:	cd b7       	in	r28, 0x3d	; 61
    43c2:	de b7       	in	r29, 0x3e	; 62
    43c4:	29 97       	sbiw	r28, 0x09	; 9
    43c6:	cd bf       	out	0x3d, r28	; 61
    43c8:	de bf       	out	0x3e, r29	; 62
    43ca:	18 2f       	mov	r17, r24
    43cc:	7b 01       	movw	r14, r22
    43ce:	0e 94 c6 21 	call	0x438c	; 0x438c <is_moving>
    43d2:	88 23       	and	r24, r24
    43d4:	0c f0       	brlt	.+2      	; 0x43d8 <move_steps+0x38>
    43d6:	25 c1       	rjmp	.+586    	; 0x4622 <move_steps+0x282>
    43d8:	81 2f       	mov	r24, r17
    43da:	87 70       	andi	r24, 0x07	; 7
    43dc:	80 68       	ori	r24, 0x80	; 128
    43de:	80 93 ec 28 	sts	0x28EC, r24	; 0x8028ec <motor_status>
    43e2:	a0 90 71 2a 	lds	r10, 0x2A71	; 0x802a71 <motor_on_time>
    43e6:	b0 90 72 2a 	lds	r11, 0x2A72	; 0x802a72 <motor_on_time+0x1>
    43ea:	aa 0c       	add	r10, r10
    43ec:	bb 1c       	adc	r11, r11
    43ee:	aa 0c       	add	r10, r10
    43f0:	bb 1c       	adc	r11, r11
    43f2:	aa 0c       	add	r10, r10
    43f4:	bb 1c       	adc	r11, r11
    43f6:	aa 0c       	add	r10, r10
    43f8:	bb 1c       	adc	r11, r11
    43fa:	aa 0c       	add	r10, r10
    43fc:	bb 1c       	adc	r11, r11
    43fe:	80 90 39 2b 	lds	r8, 0x2B39	; 0x802b39 <motor_off_time>
    4402:	90 90 3a 2b 	lds	r9, 0x2B3A	; 0x802b3a <motor_off_time+0x1>
    4406:	88 0c       	add	r8, r8
    4408:	99 1c       	adc	r9, r9
    440a:	88 0c       	add	r8, r8
    440c:	99 1c       	adc	r9, r9
    440e:	88 0c       	add	r8, r8
    4410:	99 1c       	adc	r9, r9
    4412:	88 0c       	add	r8, r8
    4414:	99 1c       	adc	r9, r9
    4416:	88 0c       	add	r8, r8
    4418:	99 1c       	adc	r9, r9
    441a:	81 2f       	mov	r24, r17
    441c:	90 e0       	ldi	r25, 0x00	; 0
    441e:	fc 01       	movw	r30, r24
    4420:	ee 0f       	add	r30, r30
    4422:	ff 1f       	adc	r31, r31
    4424:	e8 0f       	add	r30, r24
    4426:	f9 1f       	adc	r31, r25
    4428:	ee 0f       	add	r30, r30
    442a:	ff 1f       	adc	r31, r31
    442c:	e9 5d       	subi	r30, 0xD9	; 217
    442e:	f2 4d       	sbci	r31, 0xD2	; 210
    4430:	ce 01       	movw	r24, r28
    4432:	01 96       	adiw	r24, 0x01	; 1
    4434:	6c 01       	movw	r12, r24
    4436:	9e 01       	movw	r18, r28
    4438:	29 5f       	subi	r18, 0xF9	; 249
    443a:	3f 4f       	sbci	r19, 0xFF	; 255
    443c:	29 01       	movw	r4, r18
    443e:	00 e0       	ldi	r16, 0x00	; 0
    4440:	10 e0       	ldi	r17, 0x00	; 0
    4442:	3f 01       	movw	r6, r30
    4444:	60 81       	ld	r22, Z
    4446:	71 81       	ldd	r23, Z+1	; 0x01
    4448:	61 15       	cp	r22, r1
    444a:	71 05       	cpc	r23, r1
    444c:	31 f4       	brne	.+12     	; 0x445a <move_steps+0xba>
    444e:	dc 01       	movw	r26, r24
    4450:	1d 92       	st	X+, r1
    4452:	1c 92       	st	X, r1
    4454:	d9 01       	movw	r26, r18
    4456:	1c 92       	st	X, r1
    4458:	19 c0       	rjmp	.+50     	; 0x448c <move_steps+0xec>
    445a:	ab 01       	movw	r20, r22
    445c:	77 23       	and	r23, r23
    445e:	24 f4       	brge	.+8      	; 0x4468 <move_steps+0xc8>
    4460:	44 27       	eor	r20, r20
    4462:	55 27       	eor	r21, r21
    4464:	46 1b       	sub	r20, r22
    4466:	57 0b       	sbc	r21, r23
    4468:	4a 0d       	add	r20, r10
    446a:	5b 1d       	adc	r21, r11
    446c:	dc 01       	movw	r26, r24
    446e:	4d 93       	st	X+, r20
    4470:	5c 93       	st	X, r21
    4472:	d3 01       	movw	r26, r6
    4474:	11 96       	adiw	r26, 0x01	; 1
    4476:	6c 91       	ld	r22, X
    4478:	66 0f       	add	r22, r22
    447a:	66 0b       	sbc	r22, r22
    447c:	66 0f       	add	r22, r22
    447e:	6f 5f       	subi	r22, 0xFF	; 255
    4480:	d9 01       	movw	r26, r18
    4482:	6c 93       	st	X, r22
    4484:	08 0d       	add	r16, r8
    4486:	19 1d       	adc	r17, r9
    4488:	04 0f       	add	r16, r20
    448a:	15 1f       	adc	r17, r21
    448c:	32 96       	adiw	r30, 0x02	; 2
    448e:	02 96       	adiw	r24, 0x02	; 2
    4490:	2f 5f       	subi	r18, 0xFF	; 255
    4492:	3f 4f       	sbci	r19, 0xFF	; 255
    4494:	84 15       	cp	r24, r4
    4496:	95 05       	cpc	r25, r5
    4498:	a1 f6       	brne	.-88     	; 0x4442 <move_steps+0xa2>
    449a:	40 e0       	ldi	r20, 0x00	; 0
    449c:	59 e0       	ldi	r21, 0x09	; 9
    449e:	fa 01       	movw	r30, r20
    44a0:	06 a3       	std	Z+38, r16	; 0x26
    44a2:	17 a3       	std	Z+39, r17	; 0x27
    44a4:	a0 e4       	ldi	r26, 0x40	; 64
    44a6:	b8 e0       	ldi	r27, 0x08	; 8
    44a8:	96 96       	adiw	r26, 0x26	; 38
    44aa:	0d 93       	st	X+, r16
    44ac:	1c 93       	st	X, r17
    44ae:	97 97       	sbiw	r26, 0x27	; 39
    44b0:	80 e0       	ldi	r24, 0x00	; 0
    44b2:	98 e0       	ldi	r25, 0x08	; 8
    44b4:	fc 01       	movw	r30, r24
    44b6:	06 a3       	std	Z+38, r16	; 0x26
    44b8:	17 a3       	std	Z+39, r17	; 0x27
    44ba:	29 81       	ldd	r18, Y+1	; 0x01
    44bc:	3a 81       	ldd	r19, Y+2	; 0x02
    44be:	22 a7       	std	Z+42, r18	; 0x2a
    44c0:	33 a7       	std	Z+43, r19	; 0x2b
    44c2:	20 a7       	std	Z+40, r18	; 0x28
    44c4:	31 a7       	std	Z+41, r19	; 0x29
    44c6:	8b 81       	ldd	r24, Y+3	; 0x03
    44c8:	9c 81       	ldd	r25, Y+4	; 0x04
    44ca:	9a 96       	adiw	r26, 0x2a	; 42
    44cc:	8d 93       	st	X+, r24
    44ce:	9c 93       	st	X, r25
    44d0:	9b 97       	sbiw	r26, 0x2b	; 43
    44d2:	98 96       	adiw	r26, 0x28	; 40
    44d4:	8d 93       	st	X+, r24
    44d6:	9c 93       	st	X, r25
    44d8:	99 97       	sbiw	r26, 0x29	; 41
    44da:	8d 81       	ldd	r24, Y+5	; 0x05
    44dc:	9e 81       	ldd	r25, Y+6	; 0x06
    44de:	da 01       	movw	r26, r20
    44e0:	9a 96       	adiw	r26, 0x2a	; 42
    44e2:	8d 93       	st	X+, r24
    44e4:	9c 93       	st	X, r25
    44e6:	9b 97       	sbiw	r26, 0x2b	; 43
    44e8:	98 96       	adiw	r26, 0x28	; 40
    44ea:	8d 93       	st	X+, r24
    44ec:	9c 93       	st	X, r25
    44ee:	99 97       	sbiw	r26, 0x29	; 41
    44f0:	a0 90 39 2b 	lds	r10, 0x2B39	; 0x802b39 <motor_off_time>
    44f4:	b0 90 3a 2b 	lds	r11, 0x2B3A	; 0x802b3a <motor_off_time+0x1>
    44f8:	aa 0c       	add	r10, r10
    44fa:	bb 1c       	adc	r11, r11
    44fc:	aa 0c       	add	r10, r10
    44fe:	bb 1c       	adc	r11, r11
    4500:	aa 0c       	add	r10, r10
    4502:	bb 1c       	adc	r11, r11
    4504:	aa 0c       	add	r10, r10
    4506:	bb 1c       	adc	r11, r11
    4508:	aa 0c       	add	r10, r10
    450a:	bb 1c       	adc	r11, r11
    450c:	40 e0       	ldi	r20, 0x00	; 0
    450e:	20 e0       	ldi	r18, 0x00	; 0
    4510:	30 e0       	ldi	r19, 0x00	; 0
    4512:	68 94       	set
    4514:	88 24       	eor	r8, r8
    4516:	86 f8       	bld	r8, 6
    4518:	99 24       	eor	r9, r9
    451a:	93 f8       	bld	r9, 3
    451c:	61 2c       	mov	r6, r1
    451e:	68 94       	set
    4520:	77 24       	eor	r7, r7
    4522:	73 f8       	bld	r7, 3
    4524:	0f 2e       	mov	r0, r31
    4526:	41 2c       	mov	r4, r1
    4528:	f9 e0       	ldi	r31, 0x09	; 9
    452a:	5f 2e       	mov	r5, r31
    452c:	f0 2d       	mov	r31, r0
    452e:	d6 01       	movw	r26, r12
    4530:	ed 91       	ld	r30, X+
    4532:	fd 91       	ld	r31, X+
    4534:	6d 01       	movw	r12, r26
    4536:	30 97       	sbiw	r30, 0x00	; 0
    4538:	69 f1       	breq	.+90     	; 0x4594 <move_steps+0x1f4>
    453a:	41 30       	cpi	r20, 0x01	; 1
    453c:	81 f0       	breq	.+32     	; 0x455e <move_steps+0x1be>
    453e:	18 f0       	brcs	.+6      	; 0x4546 <move_steps+0x1a6>
    4540:	42 30       	cpi	r20, 0x02	; 2
    4542:	c9 f0       	breq	.+50     	; 0x4576 <move_steps+0x1d6>
    4544:	23 c0       	rjmp	.+70     	; 0x458c <move_steps+0x1ec>
    4546:	c8 01       	movw	r24, r16
    4548:	82 1b       	sub	r24, r18
    454a:	93 0b       	sbc	r25, r19
    454c:	b8 01       	movw	r22, r16
    454e:	0e 94 52 52 	call	0xa4a4	; 0xa4a4 <__udivmodhi4>
    4552:	d3 01       	movw	r26, r6
    4554:	90 96       	adiw	r26, 0x20	; 32
    4556:	8d 93       	st	X+, r24
    4558:	9c 93       	st	X, r25
    455a:	91 97       	sbiw	r26, 0x21	; 33
    455c:	17 c0       	rjmp	.+46     	; 0x458c <move_steps+0x1ec>
    455e:	c8 01       	movw	r24, r16
    4560:	82 1b       	sub	r24, r18
    4562:	93 0b       	sbc	r25, r19
    4564:	b8 01       	movw	r22, r16
    4566:	0e 94 52 52 	call	0xa4a4	; 0xa4a4 <__udivmodhi4>
    456a:	d4 01       	movw	r26, r8
    456c:	90 96       	adiw	r26, 0x20	; 32
    456e:	8d 93       	st	X+, r24
    4570:	9c 93       	st	X, r25
    4572:	91 97       	sbiw	r26, 0x21	; 33
    4574:	0b c0       	rjmp	.+22     	; 0x458c <move_steps+0x1ec>
    4576:	c8 01       	movw	r24, r16
    4578:	82 1b       	sub	r24, r18
    457a:	93 0b       	sbc	r25, r19
    457c:	b8 01       	movw	r22, r16
    457e:	0e 94 52 52 	call	0xa4a4	; 0xa4a4 <__udivmodhi4>
    4582:	d2 01       	movw	r26, r4
    4584:	90 96       	adiw	r26, 0x20	; 32
    4586:	8d 93       	st	X+, r24
    4588:	9c 93       	st	X, r25
    458a:	91 97       	sbiw	r26, 0x21	; 33
    458c:	2a 0d       	add	r18, r10
    458e:	3b 1d       	adc	r19, r11
    4590:	2e 0f       	add	r18, r30
    4592:	3f 1f       	adc	r19, r31
    4594:	4f 5f       	subi	r20, 0xFF	; 255
    4596:	43 30       	cpi	r20, 0x03	; 3
    4598:	51 f6       	brne	.-108    	; 0x452e <move_steps+0x18e>
    459a:	20 17       	cp	r18, r16
    459c:	31 07       	cpc	r19, r17
    459e:	09 f4       	brne	.+2      	; 0x45a2 <move_steps+0x202>
    45a0:	44 c0       	rjmp	.+136    	; 0x462a <move_steps+0x28a>
    45a2:	1f 93       	push	r17
    45a4:	0f 93       	push	r16
    45a6:	3f 93       	push	r19
    45a8:	2f 93       	push	r18
    45aa:	88 ef       	ldi	r24, 0xF8	; 248
    45ac:	96 e0       	ldi	r25, 0x06	; 6
    45ae:	9f 93       	push	r25
    45b0:	8f 93       	push	r24
    45b2:	0e 94 f7 56 	call	0xadee	; 0xadee <printf_P>
    45b6:	0f 90       	pop	r0
    45b8:	0f 90       	pop	r0
    45ba:	0f 90       	pop	r0
    45bc:	0f 90       	pop	r0
    45be:	0f 90       	pop	r0
    45c0:	0f 90       	pop	r0
    45c2:	33 c0       	rjmp	.+102    	; 0x462a <move_steps+0x28a>
    45c4:	e0 e0       	ldi	r30, 0x00	; 0
    45c6:	f9 e0       	ldi	r31, 0x09	; 9
    45c8:	81 81       	ldd	r24, Z+1	; 0x01
    45ca:	80 61       	ori	r24, 0x10	; 16
    45cc:	81 83       	std	Z+1, r24	; 0x01
    45ce:	07 c0       	rjmp	.+14     	; 0x45de <move_steps+0x23e>
    45d0:	18 16       	cp	r1, r24
    45d2:	2c f4       	brge	.+10     	; 0x45de <move_steps+0x23e>
    45d4:	e0 e0       	ldi	r30, 0x00	; 0
    45d6:	f9 e0       	ldi	r31, 0x09	; 9
    45d8:	81 81       	ldd	r24, Z+1	; 0x01
    45da:	80 62       	ori	r24, 0x20	; 32
    45dc:	81 83       	std	Z+1, r24	; 0x01
    45de:	98 01       	movw	r18, r16
    45e0:	d7 01       	movw	r26, r14
    45e2:	0e 94 ac 52 	call	0xa558	; 0xa558 <__umulhisi3>
    45e6:	68 94       	set
    45e8:	14 f8       	bld	r1, 4
    45ea:	96 95       	lsr	r25
    45ec:	87 95       	ror	r24
    45ee:	77 95       	ror	r23
    45f0:	67 95       	ror	r22
    45f2:	16 94       	lsr	r1
    45f4:	d1 f7       	brne	.-12     	; 0x45ea <move_steps+0x24a>
    45f6:	20 e0       	ldi	r18, 0x00	; 0
    45f8:	30 e0       	ldi	r19, 0x00	; 0
    45fa:	41 eb       	ldi	r20, 0xB1	; 177
    45fc:	51 e2       	ldi	r21, 0x21	; 33
    45fe:	0e 94 2a 3d 	call	0x7a54	; 0x7a54 <schedule_task>
    4602:	80 93 8f 24 	sts	0x248F, r24	; 0x80248f <current_motor_task>
    4606:	90 93 90 24 	sts	0x2490, r25	; 0x802490 <current_motor_task+0x1>
    460a:	89 2b       	or	r24, r25
    460c:	61 f4       	brne	.+24     	; 0x4626 <move_steps+0x286>
    460e:	89 e3       	ldi	r24, 0x39	; 57
    4610:	91 e2       	ldi	r25, 0x21	; 33
    4612:	9f 93       	push	r25
    4614:	8f 93       	push	r24
    4616:	0e 94 e3 56 	call	0xadc6	; 0xadc6 <printf>
    461a:	0f 90       	pop	r0
    461c:	0f 90       	pop	r0
    461e:	81 e0       	ldi	r24, 0x01	; 1
    4620:	30 c0       	rjmp	.+96     	; 0x4682 <move_steps+0x2e2>
    4622:	80 e0       	ldi	r24, 0x00	; 0
    4624:	2e c0       	rjmp	.+92     	; 0x4682 <move_steps+0x2e2>
    4626:	81 e0       	ldi	r24, 0x01	; 1
    4628:	2c c0       	rjmp	.+88     	; 0x4682 <move_steps+0x2e2>
    462a:	8f 81       	ldd	r24, Y+7	; 0x07
    462c:	88 23       	and	r24, r24
    462e:	34 f4       	brge	.+12     	; 0x463c <move_steps+0x29c>
    4630:	e0 e0       	ldi	r30, 0x00	; 0
    4632:	f8 e0       	ldi	r31, 0x08	; 8
    4634:	81 81       	ldd	r24, Z+1	; 0x01
    4636:	80 61       	ori	r24, 0x10	; 16
    4638:	81 83       	std	Z+1, r24	; 0x01
    463a:	1a c0       	rjmp	.+52     	; 0x4670 <move_steps+0x2d0>
    463c:	18 16       	cp	r1, r24
    463e:	c4 f4       	brge	.+48     	; 0x4670 <move_steps+0x2d0>
    4640:	e0 e0       	ldi	r30, 0x00	; 0
    4642:	f8 e0       	ldi	r31, 0x08	; 8
    4644:	81 81       	ldd	r24, Z+1	; 0x01
    4646:	80 62       	ori	r24, 0x20	; 32
    4648:	81 83       	std	Z+1, r24	; 0x01
    464a:	12 c0       	rjmp	.+36     	; 0x4670 <move_steps+0x2d0>
    464c:	e0 e4       	ldi	r30, 0x40	; 64
    464e:	f8 e0       	ldi	r31, 0x08	; 8
    4650:	81 81       	ldd	r24, Z+1	; 0x01
    4652:	80 61       	ori	r24, 0x10	; 16
    4654:	81 83       	std	Z+1, r24	; 0x01
    4656:	07 c0       	rjmp	.+14     	; 0x4666 <move_steps+0x2c6>
    4658:	18 16       	cp	r1, r24
    465a:	74 f4       	brge	.+28     	; 0x4678 <move_steps+0x2d8>
    465c:	e0 e4       	ldi	r30, 0x40	; 64
    465e:	f8 e0       	ldi	r31, 0x08	; 8
    4660:	81 81       	ldd	r24, Z+1	; 0x01
    4662:	80 62       	ori	r24, 0x20	; 32
    4664:	81 83       	std	Z+1, r24	; 0x01
    4666:	89 85       	ldd	r24, Y+9	; 0x09
    4668:	88 23       	and	r24, r24
    466a:	0c f0       	brlt	.+2      	; 0x466e <move_steps+0x2ce>
    466c:	b1 cf       	rjmp	.-158    	; 0x45d0 <move_steps+0x230>
    466e:	aa cf       	rjmp	.-172    	; 0x45c4 <move_steps+0x224>
    4670:	88 85       	ldd	r24, Y+8	; 0x08
    4672:	88 23       	and	r24, r24
    4674:	8c f7       	brge	.-30     	; 0x4658 <move_steps+0x2b8>
    4676:	ea cf       	rjmp	.-44     	; 0x464c <move_steps+0x2ac>
    4678:	89 85       	ldd	r24, Y+9	; 0x09
    467a:	88 23       	and	r24, r24
    467c:	0c f0       	brlt	.+2      	; 0x4680 <move_steps+0x2e0>
    467e:	a8 cf       	rjmp	.-176    	; 0x45d0 <move_steps+0x230>
    4680:	a1 cf       	rjmp	.-190    	; 0x45c4 <move_steps+0x224>
    4682:	29 96       	adiw	r28, 0x09	; 9
    4684:	cd bf       	out	0x3d, r28	; 61
    4686:	de bf       	out	0x3e, r29	; 62
    4688:	df 91       	pop	r29
    468a:	cf 91       	pop	r28
    468c:	1f 91       	pop	r17
    468e:	0f 91       	pop	r16
    4690:	ff 90       	pop	r15
    4692:	ef 90       	pop	r14
    4694:	df 90       	pop	r13
    4696:	cf 90       	pop	r12
    4698:	bf 90       	pop	r11
    469a:	af 90       	pop	r10
    469c:	9f 90       	pop	r9
    469e:	8f 90       	pop	r8
    46a0:	7f 90       	pop	r7
    46a2:	6f 90       	pop	r6
    46a4:	5f 90       	pop	r5
    46a6:	4f 90       	pop	r4
    46a8:	08 95       	ret

000046aa <walk>:
    46aa:	8f 92       	push	r8
    46ac:	9f 92       	push	r9
    46ae:	af 92       	push	r10
    46b0:	bf 92       	push	r11
    46b2:	ff 92       	push	r15
    46b4:	0f 93       	push	r16
    46b6:	1f 93       	push	r17
    46b8:	cf 93       	push	r28
    46ba:	df 93       	push	r29
    46bc:	f8 2e       	mov	r15, r24
    46be:	eb 01       	movw	r28, r22
    46c0:	e8 2f       	mov	r30, r24
    46c2:	f0 e0       	ldi	r31, 0x00	; 0
    46c4:	ee 0f       	add	r30, r30
    46c6:	ff 1f       	adc	r31, r31
    46c8:	e1 54       	subi	r30, 0x41	; 65
    46ca:	f4 4d       	sbci	r31, 0xD4	; 212
    46cc:	00 81       	ld	r16, Z
    46ce:	11 81       	ldd	r17, Z+1	; 0x01
    46d0:	86 ee       	ldi	r24, 0xE6	; 230
    46d2:	93 e0       	ldi	r25, 0x03	; 3
    46d4:	80 1b       	sub	r24, r16
    46d6:	91 0b       	sbc	r25, r17
    46d8:	8f 3c       	cpi	r24, 0xCF	; 207
    46da:	97 40       	sbci	r25, 0x07	; 7
    46dc:	60 f4       	brcc	.+24     	; 0x46f6 <walk+0x4c>
    46de:	83 e6       	ldi	r24, 0x63	; 99
    46e0:	91 e2       	ldi	r25, 0x21	; 33
    46e2:	0e 94 25 57 	call	0xae4a	; 0xae4a <puts>
    46e6:	85 e0       	ldi	r24, 0x05	; 5
    46e8:	8f 15       	cp	r24, r15
    46ea:	18 f0       	brcs	.+6      	; 0x46f2 <walk+0x48>
    46ec:	08 e5       	ldi	r16, 0x58	; 88
    46ee:	12 e0       	ldi	r17, 0x02	; 2
    46f0:	02 c0       	rjmp	.+4      	; 0x46f6 <walk+0x4c>
    46f2:	00 ed       	ldi	r16, 0xD0	; 208
    46f4:	17 e0       	ldi	r17, 0x07	; 7
    46f6:	be 01       	movw	r22, r28
    46f8:	80 e0       	ldi	r24, 0x00	; 0
    46fa:	90 e0       	ldi	r25, 0x00	; 0
    46fc:	0e 94 65 4a 	call	0x94ca	; 0x94ca <__floatunsisf>
    4700:	4b 01       	movw	r8, r22
    4702:	5c 01       	movw	r10, r24
    4704:	b8 01       	movw	r22, r16
    4706:	80 e0       	ldi	r24, 0x00	; 0
    4708:	90 e0       	ldi	r25, 0x00	; 0
    470a:	0e 94 65 4a 	call	0x94ca	; 0x94ca <__floatunsisf>
    470e:	20 e0       	ldi	r18, 0x00	; 0
    4710:	30 e0       	ldi	r19, 0x00	; 0
    4712:	4a e7       	ldi	r20, 0x7A	; 122
    4714:	54 e4       	ldi	r21, 0x44	; 68
    4716:	0e 94 bd 49 	call	0x937a	; 0x937a <__divsf3>
    471a:	9b 01       	movw	r18, r22
    471c:	ac 01       	movw	r20, r24
    471e:	c5 01       	movw	r24, r10
    4720:	b4 01       	movw	r22, r8
    4722:	0e 94 bd 49 	call	0x937a	; 0x937a <__divsf3>
    4726:	4b 01       	movw	r8, r22
    4728:	5c 01       	movw	r10, r24
    472a:	8a e0       	ldi	r24, 0x0A	; 10
    472c:	90 e0       	ldi	r25, 0x00	; 0
    472e:	0e 94 33 3a 	call	0x7466	; 0x7466 <delay_ms>
    4732:	c5 01       	movw	r24, r10
    4734:	b4 01       	movw	r22, r8
    4736:	0e 94 36 4a 	call	0x946c	; 0x946c <__fixunssfsi>
    473a:	06 2f       	mov	r16, r22
    473c:	17 2f       	mov	r17, r23
    473e:	7f 93       	push	r23
    4740:	6f 93       	push	r22
    4742:	df 93       	push	r29
    4744:	cf 93       	push	r28
    4746:	1f 92       	push	r1
    4748:	ff 92       	push	r15
    474a:	8a eb       	ldi	r24, 0xBA	; 186
    474c:	96 e0       	ldi	r25, 0x06	; 6
    474e:	9f 93       	push	r25
    4750:	8f 93       	push	r24
    4752:	0e 94 f7 56 	call	0xadee	; 0xadee <printf_P>
    4756:	8a e0       	ldi	r24, 0x0A	; 10
    4758:	90 e0       	ldi	r25, 0x00	; 0
    475a:	0e 94 33 3a 	call	0x7466	; 0x7466 <delay_ms>
    475e:	60 2f       	mov	r22, r16
    4760:	71 2f       	mov	r23, r17
    4762:	8f 2d       	mov	r24, r15
    4764:	0e 94 d0 21 	call	0x43a0	; 0x43a0 <move_steps>
    4768:	8d b7       	in	r24, 0x3d	; 61
    476a:	9e b7       	in	r25, 0x3e	; 62
    476c:	08 96       	adiw	r24, 0x08	; 8
    476e:	8d bf       	out	0x3d, r24	; 61
    4770:	9e bf       	out	0x3e, r25	; 62
    4772:	df 91       	pop	r29
    4774:	cf 91       	pop	r28
    4776:	1f 91       	pop	r17
    4778:	0f 91       	pop	r16
    477a:	ff 90       	pop	r15
    477c:	bf 90       	pop	r11
    477e:	af 90       	pop	r10
    4780:	9f 90       	pop	r9
    4782:	8f 90       	pop	r8
    4784:	08 95       	ret

00004786 <set_mm_per_kilostep>:
    4786:	e8 2f       	mov	r30, r24
    4788:	f0 e0       	ldi	r31, 0x00	; 0
    478a:	ee 0f       	add	r30, r30
    478c:	ff 1f       	adc	r31, r31
    478e:	e1 54       	subi	r30, 0x41	; 65
    4790:	f4 4d       	sbci	r31, 0xD4	; 212
    4792:	60 83       	st	Z, r22
    4794:	71 83       	std	Z+1, r23	; 0x01
    4796:	08 95       	ret

00004798 <read_motor_settings>:
    4798:	df 92       	push	r13
    479a:	ef 92       	push	r14
    479c:	ff 92       	push	r15
    479e:	0f 93       	push	r16
    47a0:	1f 93       	push	r17
    47a2:	cf 93       	push	r28
    47a4:	df 93       	push	r29
    47a6:	c0 e1       	ldi	r28, 0x10	; 16
    47a8:	d0 e0       	ldi	r29, 0x00	; 0
    47aa:	19 c0       	rjmp	.+50     	; 0x47de <read_motor_settings+0x46>
    47ac:	ce 01       	movw	r24, r28
    47ae:	0e 94 c5 0b 	call	0x178a	; 0x178a <EEPROM_read_byte>
    47b2:	d8 2e       	mov	r13, r24
    47b4:	ce 01       	movw	r24, r28
    47b6:	01 96       	adiw	r24, 0x01	; 1
    47b8:	0e 94 c5 0b 	call	0x178a	; 0x178a <EEPROM_read_byte>
    47bc:	2d 2d       	mov	r18, r13
    47be:	30 e0       	ldi	r19, 0x00	; 0
    47c0:	32 2f       	mov	r19, r18
    47c2:	22 27       	eor	r18, r18
    47c4:	28 2b       	or	r18, r24
    47c6:	f7 01       	movw	r30, r14
    47c8:	21 93       	st	Z+, r18
    47ca:	31 93       	st	Z+, r19
    47cc:	7f 01       	movw	r14, r30
    47ce:	22 96       	adiw	r28, 0x02	; 2
    47d0:	c0 17       	cp	r28, r16
    47d2:	d1 07       	cpc	r29, r17
    47d4:	59 f7       	brne	.-42     	; 0x47ac <read_motor_settings+0x14>
    47d6:	e8 01       	movw	r28, r16
    47d8:	00 34       	cpi	r16, 0x40	; 64
    47da:	11 05       	cpc	r17, r1
    47dc:	41 f0       	breq	.+16     	; 0x47ee <read_motor_settings+0x56>
    47de:	ce 01       	movw	r24, r28
    47e0:	89 5e       	subi	r24, 0xE9	; 233
    47e2:	92 4d       	sbci	r25, 0xD2	; 210
    47e4:	7c 01       	movw	r14, r24
    47e6:	8e 01       	movw	r16, r28
    47e8:	0a 5f       	subi	r16, 0xFA	; 250
    47ea:	1f 4f       	sbci	r17, 0xFF	; 255
    47ec:	df cf       	rjmp	.-66     	; 0x47ac <read_motor_settings+0x14>
    47ee:	cf eb       	ldi	r28, 0xBF	; 191
    47f0:	db e2       	ldi	r29, 0x2B	; 43
    47f2:	c8 01       	movw	r24, r16
    47f4:	0e 94 c5 0b 	call	0x178a	; 0x178a <EEPROM_read_byte>
    47f8:	f8 2e       	mov	r15, r24
    47fa:	c8 01       	movw	r24, r16
    47fc:	01 96       	adiw	r24, 0x01	; 1
    47fe:	0e 94 c5 0b 	call	0x178a	; 0x178a <EEPROM_read_byte>
    4802:	2f 2d       	mov	r18, r15
    4804:	30 e0       	ldi	r19, 0x00	; 0
    4806:	32 2f       	mov	r19, r18
    4808:	22 27       	eor	r18, r18
    480a:	28 2b       	or	r18, r24
    480c:	29 93       	st	Y+, r18
    480e:	39 93       	st	Y+, r19
    4810:	0e 5f       	subi	r16, 0xFE	; 254
    4812:	1f 4f       	sbci	r17, 0xFF	; 255
    4814:	00 35       	cpi	r16, 0x50	; 80
    4816:	11 05       	cpc	r17, r1
    4818:	61 f7       	brne	.-40     	; 0x47f2 <read_motor_settings+0x5a>
    481a:	df 91       	pop	r29
    481c:	cf 91       	pop	r28
    481e:	1f 91       	pop	r17
    4820:	0f 91       	pop	r16
    4822:	ff 90       	pop	r15
    4824:	ef 90       	pop	r14
    4826:	df 90       	pop	r13
    4828:	08 95       	ret

0000482a <motor_init>:
    482a:	cf 93       	push	r28
    482c:	df 93       	push	r29
    482e:	a0 e4       	ldi	r26, 0x40	; 64
    4830:	b6 e0       	ldi	r27, 0x06	; 6
    4832:	83 e3       	ldi	r24, 0x33	; 51
    4834:	11 96       	adiw	r26, 0x01	; 1
    4836:	8c 93       	st	X, r24
    4838:	11 97       	sbiw	r26, 0x01	; 1
    483a:	e0 e6       	ldi	r30, 0x60	; 96
    483c:	f6 e0       	ldi	r31, 0x06	; 6
    483e:	83 e0       	ldi	r24, 0x03	; 3
    4840:	81 83       	std	Z+1, r24	; 0x01
    4842:	c0 e0       	ldi	r28, 0x00	; 0
    4844:	d8 e0       	ldi	r29, 0x08	; 8
    4846:	97 e0       	ldi	r25, 0x07	; 7
    4848:	98 83       	st	Y, r25
    484a:	89 83       	std	Y+1, r24	; 0x01
    484c:	c0 e4       	ldi	r28, 0x40	; 64
    484e:	d8 e0       	ldi	r29, 0x08	; 8
    4850:	98 83       	st	Y, r25
    4852:	89 83       	std	Y+1, r24	; 0x01
    4854:	c0 e0       	ldi	r28, 0x00	; 0
    4856:	d9 e0       	ldi	r29, 0x09	; 9
    4858:	98 83       	st	Y, r25
    485a:	89 83       	std	Y+1, r24	; 0x01
    485c:	90 e4       	ldi	r25, 0x40	; 64
    485e:	54 96       	adiw	r26, 0x14	; 20
    4860:	9c 93       	st	X, r25
    4862:	54 97       	sbiw	r26, 0x14	; 20
    4864:	55 96       	adiw	r26, 0x15	; 21
    4866:	9c 93       	st	X, r25
    4868:	55 97       	sbiw	r26, 0x15	; 21
    486a:	90 8b       	std	Z+16, r25	; 0x10
    486c:	91 8b       	std	Z+17, r25	; 0x11
    486e:	90 e3       	ldi	r25, 0x30	; 48
    4870:	16 96       	adiw	r26, 0x06	; 6
    4872:	9c 93       	st	X, r25
    4874:	86 83       	std	Z+6, r24	; 0x06
    4876:	10 92 ec 28 	sts	0x28EC, r1	; 0x8028ec <motor_status>
    487a:	84 e1       	ldi	r24, 0x14	; 20
    487c:	90 e0       	ldi	r25, 0x00	; 0
    487e:	80 93 71 2a 	sts	0x2A71, r24	; 0x802a71 <motor_on_time>
    4882:	90 93 72 2a 	sts	0x2A72, r25	; 0x802a72 <motor_on_time+0x1>
    4886:	88 e2       	ldi	r24, 0x28	; 40
    4888:	90 e0       	ldi	r25, 0x00	; 0
    488a:	80 93 39 2b 	sts	0x2B39, r24	; 0x802b39 <motor_off_time>
    488e:	90 93 3a 2b 	sts	0x2B3A, r25	; 0x802b3a <motor_off_time+0x1>
    4892:	0e 94 cc 23 	call	0x4798	; 0x4798 <read_motor_settings>
    4896:	df 91       	pop	r29
    4898:	cf 91       	pop	r28
    489a:	08 95       	ret

0000489c <write_motor_settings>:
    489c:	df 92       	push	r13
    489e:	ef 92       	push	r14
    48a0:	ff 92       	push	r15
    48a2:	0f 93       	push	r16
    48a4:	1f 93       	push	r17
    48a6:	cf 93       	push	r28
    48a8:	df 93       	push	r29
    48aa:	c0 e1       	ldi	r28, 0x10	; 16
    48ac:	d0 e0       	ldi	r29, 0x00	; 0
    48ae:	16 c0       	rjmp	.+44     	; 0x48dc <write_motor_settings+0x40>
    48b0:	f8 01       	movw	r30, r16
    48b2:	d0 80       	ld	r13, Z
    48b4:	61 81       	ldd	r22, Z+1	; 0x01
    48b6:	0e 5f       	subi	r16, 0xFE	; 254
    48b8:	1f 4f       	sbci	r17, 0xFF	; 255
    48ba:	ce 01       	movw	r24, r28
    48bc:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <EEPROM_write_byte>
    48c0:	6d 2d       	mov	r22, r13
    48c2:	ce 01       	movw	r24, r28
    48c4:	01 96       	adiw	r24, 0x01	; 1
    48c6:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <EEPROM_write_byte>
    48ca:	22 96       	adiw	r28, 0x02	; 2
    48cc:	ce 15       	cp	r28, r14
    48ce:	df 05       	cpc	r29, r15
    48d0:	79 f7       	brne	.-34     	; 0x48b0 <write_motor_settings+0x14>
    48d2:	e7 01       	movw	r28, r14
    48d4:	f0 e4       	ldi	r31, 0x40	; 64
    48d6:	ef 16       	cp	r14, r31
    48d8:	f1 04       	cpc	r15, r1
    48da:	41 f0       	breq	.+16     	; 0x48ec <write_motor_settings+0x50>
    48dc:	8e 01       	movw	r16, r28
    48de:	09 5e       	subi	r16, 0xE9	; 233
    48e0:	12 4d       	sbci	r17, 0xD2	; 210
    48e2:	7e 01       	movw	r14, r28
    48e4:	86 e0       	ldi	r24, 0x06	; 6
    48e6:	e8 0e       	add	r14, r24
    48e8:	f1 1c       	adc	r15, r1
    48ea:	e2 cf       	rjmp	.-60     	; 0x48b0 <write_motor_settings+0x14>
    48ec:	cf eb       	ldi	r28, 0xBF	; 191
    48ee:	db e2       	ldi	r29, 0x2B	; 43
    48f0:	18 81       	ld	r17, Y
    48f2:	69 81       	ldd	r22, Y+1	; 0x01
    48f4:	22 96       	adiw	r28, 0x02	; 2
    48f6:	c7 01       	movw	r24, r14
    48f8:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <EEPROM_write_byte>
    48fc:	61 2f       	mov	r22, r17
    48fe:	c7 01       	movw	r24, r14
    4900:	01 96       	adiw	r24, 0x01	; 1
    4902:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <EEPROM_write_byte>
    4906:	e2 e0       	ldi	r30, 0x02	; 2
    4908:	ee 0e       	add	r14, r30
    490a:	f1 1c       	adc	r15, r1
    490c:	f0 e5       	ldi	r31, 0x50	; 80
    490e:	ef 16       	cp	r14, r31
    4910:	f1 04       	cpc	r15, r1
    4912:	71 f7       	brne	.-36     	; 0x48f0 <write_motor_settings+0x54>
    4914:	df 91       	pop	r29
    4916:	cf 91       	pop	r28
    4918:	1f 91       	pop	r17
    491a:	0f 91       	pop	r16
    491c:	ff 90       	pop	r15
    491e:	ef 90       	pop	r14
    4920:	df 90       	pop	r13
    4922:	08 95       	ret

00004924 <print_motor_values>:
    4924:	8f 92       	push	r8
    4926:	9f 92       	push	r9
    4928:	af 92       	push	r10
    492a:	bf 92       	push	r11
    492c:	cf 92       	push	r12
    492e:	df 92       	push	r13
    4930:	ef 92       	push	r14
    4932:	ff 92       	push	r15
    4934:	1f 93       	push	r17
    4936:	cf 93       	push	r28
    4938:	df 93       	push	r29
    493a:	8b ea       	ldi	r24, 0xAB	; 171
    493c:	96 e0       	ldi	r25, 0x06	; 6
    493e:	9f 93       	push	r25
    4940:	8f 93       	push	r24
    4942:	0e 94 f7 56 	call	0xadee	; 0xadee <printf_P>
    4946:	0f 2e       	mov	r0, r31
    4948:	f7 e2       	ldi	r31, 0x27	; 39
    494a:	af 2e       	mov	r10, r31
    494c:	fd e2       	ldi	r31, 0x2D	; 45
    494e:	bf 2e       	mov	r11, r31
    4950:	f0 2d       	mov	r31, r0
    4952:	0f 90       	pop	r0
    4954:	0f 90       	pop	r0
    4956:	c1 2c       	mov	r12, r1
    4958:	d1 2c       	mov	r13, r1
    495a:	0f 2e       	mov	r0, r31
    495c:	f1 ea       	ldi	r31, 0xA1	; 161
    495e:	8f 2e       	mov	r8, r31
    4960:	f6 e0       	ldi	r31, 0x06	; 6
    4962:	9f 2e       	mov	r9, r31
    4964:	f0 2d       	mov	r31, r0
    4966:	0f 2e       	mov	r0, r31
    4968:	fc e9       	ldi	r31, 0x9C	; 156
    496a:	ef 2e       	mov	r14, r31
    496c:	f1 e2       	ldi	r31, 0x21	; 33
    496e:	ff 2e       	mov	r15, r31
    4970:	f0 2d       	mov	r31, r0
    4972:	df 92       	push	r13
    4974:	cf 92       	push	r12
    4976:	9f 92       	push	r9
    4978:	8f 92       	push	r8
    497a:	0e 94 f7 56 	call	0xadee	; 0xadee <printf_P>
    497e:	0f 90       	pop	r0
    4980:	0f 90       	pop	r0
    4982:	0f 90       	pop	r0
    4984:	0f 90       	pop	r0
    4986:	e5 01       	movw	r28, r10
    4988:	10 e0       	ldi	r17, 0x00	; 0
    498a:	88 81       	ld	r24, Y
    498c:	99 81       	ldd	r25, Y+1	; 0x01
    498e:	22 96       	adiw	r28, 0x02	; 2
    4990:	9f 93       	push	r25
    4992:	8f 93       	push	r24
    4994:	ff 92       	push	r15
    4996:	ef 92       	push	r14
    4998:	0e 94 e3 56 	call	0xadc6	; 0xadc6 <printf>
    499c:	1f 5f       	subi	r17, 0xFF	; 255
    499e:	0f 90       	pop	r0
    49a0:	0f 90       	pop	r0
    49a2:	0f 90       	pop	r0
    49a4:	0f 90       	pop	r0
    49a6:	13 30       	cpi	r17, 0x03	; 3
    49a8:	81 f7       	brne	.-32     	; 0x498a <print_motor_values+0x66>
    49aa:	80 ed       	ldi	r24, 0xD0	; 208
    49ac:	90 e2       	ldi	r25, 0x20	; 32
    49ae:	0e 94 25 57 	call	0xae4a	; 0xae4a <puts>
    49b2:	8f ef       	ldi	r24, 0xFF	; 255
    49b4:	c8 1a       	sub	r12, r24
    49b6:	d8 0a       	sbc	r13, r24
    49b8:	86 e0       	ldi	r24, 0x06	; 6
    49ba:	a8 0e       	add	r10, r24
    49bc:	b1 1c       	adc	r11, r1
    49be:	88 e0       	ldi	r24, 0x08	; 8
    49c0:	c8 16       	cp	r12, r24
    49c2:	d1 04       	cpc	r13, r1
    49c4:	b1 f6       	brne	.-84     	; 0x4972 <print_motor_values+0x4e>
    49c6:	80 ed       	ldi	r24, 0xD0	; 208
    49c8:	90 e2       	ldi	r25, 0x20	; 32
    49ca:	0e 94 25 57 	call	0xae4a	; 0xae4a <puts>
    49ce:	df 91       	pop	r29
    49d0:	cf 91       	pop	r28
    49d2:	1f 91       	pop	r17
    49d4:	ff 90       	pop	r15
    49d6:	ef 90       	pop	r14
    49d8:	df 90       	pop	r13
    49da:	cf 90       	pop	r12
    49dc:	bf 90       	pop	r11
    49de:	af 90       	pop	r10
    49e0:	9f 90       	pop	r9
    49e2:	8f 90       	pop	r8
    49e4:	08 95       	ret

000049e6 <print_dist_per_step>:
	// TODO: Deprecated?
}

void print_dist_per_step()
{
    49e6:	ef 92       	push	r14
    49e8:	ff 92       	push	r15
    49ea:	0f 93       	push	r16
    49ec:	1f 93       	push	r17
    49ee:	cf 93       	push	r28
    49f0:	df 93       	push	r29
	printf_P(PSTR("Dist (mm) per kilostep\r\n"));
    49f2:	88 e8       	ldi	r24, 0x88	; 136
    49f4:	96 e0       	ldi	r25, 0x06	; 6
    49f6:	9f 93       	push	r25
    49f8:	8f 93       	push	r24
    49fa:	0e 94 f7 56 	call	0xadee	; 0xadee <printf_P>
    49fe:	0f eb       	ldi	r16, 0xBF	; 191
    4a00:	1b e2       	ldi	r17, 0x2B	; 43
    4a02:	0f 90       	pop	r0
    4a04:	0f 90       	pop	r0
    4a06:	c0 e0       	ldi	r28, 0x00	; 0
    4a08:	d0 e0       	ldi	r29, 0x00	; 0
	for(uint8_t direction = 0 ; direction<8; direction++)
	{
		printf_P(PSTR("\t%i\t%hu\r\n"), direction, mm_per_kilostep[direction]);	
    4a0a:	0f 2e       	mov	r0, r31
    4a0c:	fe e7       	ldi	r31, 0x7E	; 126
    4a0e:	ef 2e       	mov	r14, r31
    4a10:	f6 e0       	ldi	r31, 0x06	; 6
    4a12:	ff 2e       	mov	r15, r31
    4a14:	f0 2d       	mov	r31, r0
    4a16:	f8 01       	movw	r30, r16
    4a18:	80 81       	ld	r24, Z
    4a1a:	91 81       	ldd	r25, Z+1	; 0x01
    4a1c:	0e 5f       	subi	r16, 0xFE	; 254
    4a1e:	1f 4f       	sbci	r17, 0xFF	; 255
    4a20:	9f 93       	push	r25
    4a22:	8f 93       	push	r24
    4a24:	df 93       	push	r29
    4a26:	cf 93       	push	r28
    4a28:	ff 92       	push	r15
    4a2a:	ef 92       	push	r14
    4a2c:	0e 94 f7 56 	call	0xadee	; 0xadee <printf_P>
    4a30:	21 96       	adiw	r28, 0x01	; 1
}

void print_dist_per_step()
{
	printf_P(PSTR("Dist (mm) per kilostep\r\n"));
	for(uint8_t direction = 0 ; direction<8; direction++)
    4a32:	0f 90       	pop	r0
    4a34:	0f 90       	pop	r0
    4a36:	0f 90       	pop	r0
    4a38:	0f 90       	pop	r0
    4a3a:	0f 90       	pop	r0
    4a3c:	0f 90       	pop	r0
    4a3e:	c8 30       	cpi	r28, 0x08	; 8
    4a40:	d1 05       	cpc	r29, r1
    4a42:	49 f7       	brne	.-46     	; 0x4a16 <print_dist_per_step+0x30>
	{
		printf_P(PSTR("\t%i\t%hu\r\n"), direction, mm_per_kilostep[direction]);	
	}
    4a44:	df 91       	pop	r29
    4a46:	cf 91       	pop	r28
    4a48:	1f 91       	pop	r17
    4a4a:	0f 91       	pop	r16
    4a4c:	ff 90       	pop	r15
    4a4e:	ef 90       	pop	r14
    4a50:	08 95       	ret

00004a52 <pc_comm_putchar>:
	serial_in_index = temp_index;
}

int pc_comm_putchar(char c, FILE *stream)
{
	while( (PC_USART.STATUS & USART_DREIF_bm) == 0 ) {}
    4a52:	e0 eb       	ldi	r30, 0xB0	; 176
    4a54:	f9 e0       	ldi	r31, 0x09	; 9
    4a56:	91 81       	ldd	r25, Z+1	; 0x01
    4a58:	95 ff       	sbrs	r25, 5
    4a5a:	fd cf       	rjmp	.-6      	; 0x4a56 <pc_comm_putchar+0x4>
	PC_USART.DATA = c;
    4a5c:	80 93 b0 09 	sts	0x09B0, r24	; 0x8009b0 <__TEXT_REGION_LENGTH__+0x7009b0>
	return 1;
}
    4a60:	81 e0       	ldi	r24, 0x01	; 1
    4a62:	90 e0       	ldi	r25, 0x00	; 0
    4a64:	08 95       	ret

00004a66 <pc_comm_init>:

static FILE mystdout = FDEV_SETUP_STREAM (pc_comm_putchar,NULL,_FDEV_SETUP_WRITE);

void pc_comm_init()
{
	PC_PORT.DIRSET = PIN7_bm; 	// TX as output
    4a66:	e0 e6       	ldi	r30, 0x60	; 96
    4a68:	f6 e0       	ldi	r31, 0x06	; 6
    4a6a:	80 e8       	ldi	r24, 0x80	; 128
    4a6c:	81 83       	std	Z+1, r24	; 0x01
	PC_PORT.DIRCLR = PIN6_bm;	// RX as input
    4a6e:	80 e4       	ldi	r24, 0x40	; 64
    4a70:	82 83       	std	Z+2, r24	; 0x02

	PC_USART.CTRLC = (uint8_t) USART_CHSIZE_8BIT_gc | USART_PMODE_DISABLED_gc;
    4a72:	e0 eb       	ldi	r30, 0xB0	; 176
    4a74:	f9 e0       	ldi	r31, 0x09	; 9
    4a76:	83 e0       	ldi	r24, 0x03	; 3
    4a78:	85 83       	std	Z+5, r24	; 0x05

	PC_USART.BAUDCTRLA = 0b00010111;		// Baud rate 115200
    4a7a:	87 e1       	ldi	r24, 0x17	; 23
    4a7c:	86 83       	std	Z+6, r24	; 0x06
	PC_USART.BAUDCTRLB = 0b10100100;		// BSCALE = -6, BSEL = 1047 @ 32MHz clock
    4a7e:	84 ea       	ldi	r24, 0xA4	; 164
    4a80:	87 83       	std	Z+7, r24	; 0x07

	PC_USART.CTRLB |= USART_RXEN_bm;
    4a82:	84 81       	ldd	r24, Z+4	; 0x04
    4a84:	80 61       	ori	r24, 0x10	; 16
    4a86:	84 83       	std	Z+4, r24	; 0x04
	PC_USART.CTRLB |= USART_TXEN_bm;
    4a88:	84 81       	ldd	r24, Z+4	; 0x04
    4a8a:	88 60       	ori	r24, 0x08	; 8
    4a8c:	84 83       	std	Z+4, r24	; 0x04

	stdout = &mystdout;
    4a8e:	80 e3       	ldi	r24, 0x30	; 48
    4a90:	90 e2       	ldi	r25, 0x20	; 32
    4a92:	80 93 f7 2f 	sts	0x2FF7, r24	; 0x802ff7 <__iob+0x2>
    4a96:	90 93 f8 2f 	sts	0x2FF8, r25	; 0x802ff8 <__iob+0x3>
	serial_in_index = 0;
    4a9a:	10 92 e6 26 	sts	0x26E6, r1	; 0x8026e6 <serial_in_index>
    4a9e:	10 92 e7 26 	sts	0x26E7, r1	; 0x8026e7 <serial_in_index+0x1>
	
	PC_USART.CTRLA = (uint8_t) USART_RXCINTLVL_MED_gc;
    4aa2:	80 e2       	ldi	r24, 0x20	; 32
    4aa4:	83 83       	std	Z+3, r24	; 0x03
	printf("\n");
    4aa6:	8a e0       	ldi	r24, 0x0A	; 10
    4aa8:	90 e0       	ldi	r25, 0x00	; 0
    4aaa:	0e 94 1f 57 	call	0xae3e	; 0xae3e <putchar>
    4aae:	08 95       	ret

00004ab0 <handle_up_arrow>:
		putchar(data);
	}
}

void handle_up_arrow()
{
    4ab0:	0f 93       	push	r16
    4ab2:	1f 93       	push	r17
    4ab4:	cf 93       	push	r28
	uint8_t temp_index = serial_in_index;
    4ab6:	80 91 e6 26 	lds	r24, 0x26E6	; 0x8026e6 <serial_in_index>
    4aba:	90 91 e7 26 	lds	r25, 0x26E7	; 0x8026e7 <serial_in_index+0x1>
    4abe:	c8 2f       	mov	r28, r24
    4ac0:	99 27       	eor	r25, r25
			
	while(serial_in_buffer[temp_index] != '\0')
    4ac2:	fc 01       	movw	r30, r24
    4ac4:	e3 56       	subi	r30, 0x63	; 99
    4ac6:	fb 4d       	sbci	r31, 0xDB	; 219
    4ac8:	80 81       	ld	r24, Z
    4aca:	88 23       	and	r24, r24
    4acc:	81 f0       	breq	.+32     	; 0x4aee <handle_up_arrow+0x3e>
	{
		putchar(serial_in_buffer[temp_index]);
    4ace:	05 ef       	ldi	r16, 0xF5	; 245
    4ad0:	1f e2       	ldi	r17, 0x2F	; 47
    4ad2:	f8 01       	movw	r30, r16
    4ad4:	62 81       	ldd	r22, Z+2	; 0x02
    4ad6:	73 81       	ldd	r23, Z+3	; 0x03
    4ad8:	90 e0       	ldi	r25, 0x00	; 0
    4ada:	0e 94 ab 56 	call	0xad56	; 0xad56 <fputc>
		temp_index++;
    4ade:	cf 5f       	subi	r28, 0xFF	; 255

void handle_up_arrow()
{
	uint8_t temp_index = serial_in_index;
			
	while(serial_in_buffer[temp_index] != '\0')
    4ae0:	ec 2f       	mov	r30, r28
    4ae2:	f0 e0       	ldi	r31, 0x00	; 0
    4ae4:	e3 56       	subi	r30, 0x63	; 99
    4ae6:	fb 4d       	sbci	r31, 0xDB	; 219
    4ae8:	80 81       	ld	r24, Z
    4aea:	81 11       	cpse	r24, r1
    4aec:	f2 cf       	rjmp	.-28     	; 0x4ad2 <handle_up_arrow+0x22>
	{
		putchar(serial_in_buffer[temp_index]);
		temp_index++;
	}
				
	serial_in_index = temp_index;
    4aee:	8c 2f       	mov	r24, r28
    4af0:	90 e0       	ldi	r25, 0x00	; 0
    4af2:	80 93 e6 26 	sts	0x26E6, r24	; 0x8026e6 <serial_in_index>
    4af6:	90 93 e7 26 	sts	0x26E7, r25	; 0x8026e7 <serial_in_index+0x1>
}
    4afa:	cf 91       	pop	r28
    4afc:	1f 91       	pop	r17
    4afe:	0f 91       	pop	r16
    4b00:	08 95       	ret

00004b02 <handle_serial_input>:

ISR( USARTD1_RXC_vect ) { handle_serial_input(); }

void handle_serial_input()
{
	char data = PC_USART.DATA;
    4b02:	80 91 b0 09 	lds	r24, 0x09B0	; 0x8009b0 <__TEXT_REGION_LENGTH__+0x7009b0>
	if(escaped_arrow==1)
    4b06:	90 91 26 2d 	lds	r25, 0x2D26	; 0x802d26 <escaped_arrow>
    4b0a:	91 30       	cpi	r25, 0x01	; 1
    4b0c:	39 f4       	brne	.+14     	; 0x4b1c <handle_serial_input+0x1a>
	{
		if(data == 65)
    4b0e:	81 34       	cpi	r24, 0x41	; 65
    4b10:	11 f4       	brne	.+4      	; 0x4b16 <handle_serial_input+0x14>
		{
			handle_up_arrow();
    4b12:	0e 94 58 25 	call	0x4ab0	; 0x4ab0 <handle_up_arrow>
		}
		escaped_arrow=0;
    4b16:	10 92 26 2d 	sts	0x2D26, r1	; 0x802d26 <escaped_arrow>
    4b1a:	08 95       	ret
	}
	else if(escaped)
    4b1c:	90 91 94 24 	lds	r25, 0x2494	; 0x802494 <escaped>
    4b20:	99 23       	and	r25, r25
    4b22:	41 f0       	breq	.+16     	; 0x4b34 <handle_serial_input+0x32>
	{
		if(data == 91)
    4b24:	8b 35       	cpi	r24, 0x5B	; 91
    4b26:	19 f4       	brne	.+6      	; 0x4b2e <handle_serial_input+0x2c>
		{
			escaped_arrow=1;	
    4b28:	81 e0       	ldi	r24, 0x01	; 1
    4b2a:	80 93 26 2d 	sts	0x2D26, r24	; 0x802d26 <escaped_arrow>
		}
		escaped=0;
    4b2e:	10 92 94 24 	sts	0x2494, r1	; 0x802494 <escaped>
    4b32:	08 95       	ret
	}
	else if(data == '\r' || data == '\n') //We got the newline character.
    4b34:	8d 30       	cpi	r24, 0x0D	; 13
    4b36:	11 f0       	breq	.+4      	; 0x4b3c <handle_serial_input+0x3a>
    4b38:	8a 30       	cpi	r24, 0x0A	; 10
    4b3a:	a9 f4       	brne	.+42     	; 0x4b66 <handle_serial_input+0x64>
	{
		printf("\r\n");
    4b3c:	80 ed       	ldi	r24, 0xD0	; 208
    4b3e:	90 e2       	ldi	r25, 0x20	; 32
    4b40:	0e 94 25 57 	call	0xae4a	; 0xae4a <puts>
		serial_in_buffer[serial_in_index]='\0';
    4b44:	60 91 e6 26 	lds	r22, 0x26E6	; 0x8026e6 <serial_in_index>
    4b48:	70 91 e7 26 	lds	r23, 0x26E7	; 0x8026e7 <serial_in_index+0x1>
    4b4c:	fb 01       	movw	r30, r22
    4b4e:	e3 56       	subi	r30, 0x63	; 99
    4b50:	fb 4d       	sbci	r31, 0xDB	; 219
    4b52:	10 82       	st	Z, r1
		handle_serial_command(serial_in_buffer,serial_in_index);
    4b54:	8d e9       	ldi	r24, 0x9D	; 157
    4b56:	94 e2       	ldi	r25, 0x24	; 36
    4b58:	0e 94 8b 46 	call	0x8d16	; 0x8d16 <handle_serial_command>
		serial_in_index = 0;
    4b5c:	10 92 e6 26 	sts	0x26E6, r1	; 0x8026e6 <serial_in_index>
    4b60:	10 92 e7 26 	sts	0x26E7, r1	; 0x8026e7 <serial_in_index+0x1>
    4b64:	08 95       	ret
	}
	else if(data == '\b') //We got the backspace character.
    4b66:	88 30       	cpi	r24, 0x08	; 8
    4b68:	a1 f4       	brne	.+40     	; 0x4b92 <handle_serial_input+0x90>
	{
		if(serial_in_index > 0) serial_in_index--;
    4b6a:	80 91 e6 26 	lds	r24, 0x26E6	; 0x8026e6 <serial_in_index>
    4b6e:	90 91 e7 26 	lds	r25, 0x26E7	; 0x8026e7 <serial_in_index+0x1>
    4b72:	00 97       	sbiw	r24, 0x00	; 0
    4b74:	29 f0       	breq	.+10     	; 0x4b80 <handle_serial_input+0x7e>
    4b76:	01 97       	sbiw	r24, 0x01	; 1
    4b78:	80 93 e6 26 	sts	0x26E6, r24	; 0x8026e6 <serial_in_index>
    4b7c:	90 93 e7 26 	sts	0x26E7, r25	; 0x8026e7 <serial_in_index+0x1>
		printf("\b \b");
    4b80:	80 ea       	ldi	r24, 0xA0	; 160
    4b82:	91 e2       	ldi	r25, 0x21	; 33
    4b84:	9f 93       	push	r25
    4b86:	8f 93       	push	r24
    4b88:	0e 94 e3 56 	call	0xadc6	; 0xadc6 <printf>
    4b8c:	0f 90       	pop	r0
    4b8e:	0f 90       	pop	r0
    4b90:	08 95       	ret
	}
	else if(data == 27) //escape pressed.
    4b92:	8b 31       	cpi	r24, 0x1B	; 27
    4b94:	21 f4       	brne	.+8      	; 0x4b9e <handle_serial_input+0x9c>
	{
		escaped = 1;
    4b96:	81 e0       	ldi	r24, 0x01	; 1
    4b98:	80 93 94 24 	sts	0x2494, r24	; 0x802494 <escaped>
    4b9c:	08 95       	ret
	}
	else if(serial_in_index==BUFFER_SIZE) //Buffer overflow
    4b9e:	20 91 e6 26 	lds	r18, 0x26E6	; 0x8026e6 <serial_in_index>
    4ba2:	30 91 e7 26 	lds	r19, 0x26E7	; 0x8026e7 <serial_in_index+0x1>
    4ba6:	20 34       	cpi	r18, 0x40	; 64
    4ba8:	31 05       	cpc	r19, r1
    4baa:	91 f4       	brne	.+36     	; 0x4bd0 <handle_serial_input+0xce>
	{
		printf_P(PSTR("\r\nERROR: Serial input buffer capacity of %u characters exceeded.\r\n"),BUFFER_SIZE);
    4bac:	1f 92       	push	r1
    4bae:	80 e4       	ldi	r24, 0x40	; 64
    4bb0:	8f 93       	push	r24
    4bb2:	84 e3       	ldi	r24, 0x34	; 52
    4bb4:	97 e0       	ldi	r25, 0x07	; 7
    4bb6:	9f 93       	push	r25
    4bb8:	8f 93       	push	r24
    4bba:	0e 94 f7 56 	call	0xadee	; 0xadee <printf_P>
		serial_in_index = 0;
    4bbe:	10 92 e6 26 	sts	0x26E6, r1	; 0x8026e6 <serial_in_index>
    4bc2:	10 92 e7 26 	sts	0x26E7, r1	; 0x8026e7 <serial_in_index+0x1>
    4bc6:	0f 90       	pop	r0
    4bc8:	0f 90       	pop	r0
    4bca:	0f 90       	pop	r0
    4bcc:	0f 90       	pop	r0
    4bce:	08 95       	ret
	}
	else //Everything is fine. Add the character to the buffer.
	{
		serial_in_buffer[serial_in_index] = data;
    4bd0:	f9 01       	movw	r30, r18
    4bd2:	e3 56       	subi	r30, 0x63	; 99
    4bd4:	fb 4d       	sbci	r31, 0xDB	; 219
    4bd6:	80 83       	st	Z, r24
		//printf("Got char '%c'\r\n",data);
		serial_in_index++;
    4bd8:	2f 5f       	subi	r18, 0xFF	; 255
    4bda:	3f 4f       	sbci	r19, 0xFF	; 255
    4bdc:	20 93 e6 26 	sts	0x26E6, r18	; 0x8026e6 <serial_in_index>
    4be0:	30 93 e7 26 	sts	0x26E7, r19	; 0x8026e7 <serial_in_index+0x1>
		putchar(data);
    4be4:	60 91 f7 2f 	lds	r22, 0x2FF7	; 0x802ff7 <__iob+0x2>
    4be8:	70 91 f8 2f 	lds	r23, 0x2FF8	; 0x802ff8 <__iob+0x3>
    4bec:	90 e0       	ldi	r25, 0x00	; 0
    4bee:	0e 94 ab 56 	call	0xad56	; 0xad56 <fputc>
    4bf2:	08 95       	ret

00004bf4 <__vector_91>:
	
	PC_USART.CTRLA = (uint8_t) USART_RXCINTLVL_MED_gc;
	printf("\n");
}

ISR( USARTD1_RXC_vect ) { handle_serial_input(); }
    4bf4:	1f 92       	push	r1
    4bf6:	0f 92       	push	r0
    4bf8:	0f b6       	in	r0, 0x3f	; 63
    4bfa:	0f 92       	push	r0
    4bfc:	11 24       	eor	r1, r1
    4bfe:	0b b6       	in	r0, 0x3b	; 59
    4c00:	0f 92       	push	r0
    4c02:	2f 93       	push	r18
    4c04:	3f 93       	push	r19
    4c06:	4f 93       	push	r20
    4c08:	5f 93       	push	r21
    4c0a:	6f 93       	push	r22
    4c0c:	7f 93       	push	r23
    4c0e:	8f 93       	push	r24
    4c10:	9f 93       	push	r25
    4c12:	af 93       	push	r26
    4c14:	bf 93       	push	r27
    4c16:	ef 93       	push	r30
    4c18:	ff 93       	push	r31
    4c1a:	0e 94 81 25 	call	0x4b02	; 0x4b02 <handle_serial_input>
    4c1e:	ff 91       	pop	r31
    4c20:	ef 91       	pop	r30
    4c22:	bf 91       	pop	r27
    4c24:	af 91       	pop	r26
    4c26:	9f 91       	pop	r25
    4c28:	8f 91       	pop	r24
    4c2a:	7f 91       	pop	r23
    4c2c:	6f 91       	pop	r22
    4c2e:	5f 91       	pop	r21
    4c30:	4f 91       	pop	r20
    4c32:	3f 91       	pop	r19
    4c34:	2f 91       	pop	r18
    4c36:	0f 90       	pop	r0
    4c38:	0b be       	out	0x3b, r0	; 59
    4c3a:	0f 90       	pop	r0
    4c3c:	0f be       	out	0x3f, r0	; 63
    4c3e:	0f 90       	pop	r0
    4c40:	1f 90       	pop	r1
    4c42:	18 95       	reti

00004c44 <cap_monitor_init>:
	ACA.WINCTRL |= AC_WINTMODE_INSIDE_gc | AES_INTLVL_LO_gc;
}

void disable_leg_status_interrupt()
{
	ACA.WINCTRL &= ~(AC_WINTMODE_INSIDE_gc | AC_WINTMODE_OUTSIDE_gc | AES_INTLVL_LO_gc);
    4c44:	83 e0       	ldi	r24, 0x03	; 3
    4c46:	80 93 22 06 	sts	0x0622, r24	; 0x800622 <__TEXT_REGION_LENGTH__+0x700622>
    4c4a:	e0 e9       	ldi	r30, 0x90	; 144
    4c4c:	f3 e0       	ldi	r31, 0x03	; 3
    4c4e:	81 e0       	ldi	r24, 0x01	; 1
    4c50:	80 83       	st	Z, r24
    4c52:	81 83       	std	Z+1, r24	; 0x01
    4c54:	88 e0       	ldi	r24, 0x08	; 8
    4c56:	82 83       	std	Z+2, r24	; 0x02
    4c58:	83 83       	std	Z+3, r24	; 0x03
    4c5a:	80 e1       	ldi	r24, 0x10	; 16
    4c5c:	86 83       	std	Z+6, r24	; 0x06
    4c5e:	08 95       	ret

00004c60 <leg_monitor_init>:
    4c60:	e0 e0       	ldi	r30, 0x00	; 0
    4c62:	f6 e0       	ldi	r31, 0x06	; 6
    4c64:	8f e1       	ldi	r24, 0x1F	; 31
    4c66:	82 83       	std	Z+2, r24	; 0x02
    4c68:	87 e0       	ldi	r24, 0x07	; 7
    4c6a:	80 8b       	std	Z+16, r24	; 0x10
    4c6c:	81 8b       	std	Z+17, r24	; 0x11
    4c6e:	82 8b       	std	Z+18, r24	; 0x12
    4c70:	83 8b       	std	Z+19, r24	; 0x13
    4c72:	84 8b       	std	Z+20, r24	; 0x14
    4c74:	e0 e8       	ldi	r30, 0x80	; 128
    4c76:	f3 e0       	ldi	r31, 0x03	; 3
    4c78:	80 e1       	ldi	r24, 0x10	; 16
    4c7a:	86 83       	std	Z+6, r24	; 0x06
    4c7c:	82 83       	std	Z+2, r24	; 0x02
    4c7e:	81 e1       	ldi	r24, 0x11	; 17
    4c80:	83 83       	std	Z+3, r24	; 0x03
    4c82:	89 e0       	ldi	r24, 0x09	; 9
    4c84:	80 83       	st	Z, r24
    4c86:	81 83       	std	Z+1, r24	; 0x01
    4c88:	08 95       	ret

00004c8a <power_init>:
    4c8a:	0e 94 22 26 	call	0x4c44	; 0x4c44 <cap_monitor_init>
    4c8e:	0e 94 30 26 	call	0x4c60	; 0x4c60 <leg_monitor_init>
    4c92:	08 95       	ret

00004c94 <leg_status>:
		}
	}
}

int8_t leg_status(uint8_t leg)
{
    4c94:	cf 93       	push	r28
    4c96:	df 93       	push	r29
    4c98:	1f 92       	push	r1
    4c9a:	cd b7       	in	r28, 0x3d	; 61
    4c9c:	de b7       	in	r29, 0x3e	; 62
	volatile uint8_t status;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    4c9e:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    4ca0:	f8 94       	cli
	{
		switch (leg)
    4ca2:	81 30       	cpi	r24, 0x01	; 1
    4ca4:	19 f0       	breq	.+6      	; 0x4cac <leg_status+0x18>
    4ca6:	82 30       	cpi	r24, 0x02	; 2
    4ca8:	41 f0       	breq	.+16     	; 0x4cba <leg_status+0x26>
    4caa:	0e c0       	rjmp	.+28     	; 0x4cc8 <leg_status+0x34>
		{
			case 1:
				ACA.AC0MUXCTRL = AC_MUXNEG_PIN0_gc | AC_MUXPOS_PIN3_gc;
    4cac:	e0 e8       	ldi	r30, 0x80	; 128
    4cae:	f3 e0       	ldi	r31, 0x03	; 3
    4cb0:	88 e1       	ldi	r24, 0x18	; 24
    4cb2:	82 83       	std	Z+2, r24	; 0x02
				ACA.AC1MUXCTRL = AC_MUXNEG_PIN1_gc | AC_MUXPOS_PIN3_gc;
    4cb4:	89 e1       	ldi	r24, 0x19	; 25
    4cb6:	83 83       	std	Z+3, r24	; 0x03
				break;
    4cb8:	09 c0       	rjmp	.+18     	; 0x4ccc <leg_status+0x38>
			case 2:
				ACA.AC0MUXCTRL = AC_MUXNEG_PIN0_gc | AC_MUXPOS_PIN4_gc;
    4cba:	e0 e8       	ldi	r30, 0x80	; 128
    4cbc:	f3 e0       	ldi	r31, 0x03	; 3
    4cbe:	80 e2       	ldi	r24, 0x20	; 32
    4cc0:	82 83       	std	Z+2, r24	; 0x02
				ACA.AC1MUXCTRL = AC_MUXNEG_PIN1_gc | AC_MUXPOS_PIN4_gc;
    4cc2:	81 e2       	ldi	r24, 0x21	; 33
    4cc4:	83 83       	std	Z+3, r24	; 0x03
				break;
    4cc6:	02 c0       	rjmp	.+4      	; 0x4ccc <leg_status+0x38>
		}
		if(leg!=0) delay_us(100);		//The comparators seem to need a bit of time.
    4cc8:	88 23       	and	r24, r24
    4cca:	01 f1       	breq	.+64     	; 0x4d0c <leg_status+0x78>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    4ccc:	ef e1       	ldi	r30, 0x1F	; 31
    4cce:	f3 e0       	ldi	r31, 0x03	; 3
    4cd0:	31 97       	sbiw	r30, 0x01	; 1
    4cd2:	f1 f7       	brne	.-4      	; 0x4cd0 <leg_status+0x3c>
    4cd4:	00 c0       	rjmp	.+0      	; 0x4cd6 <leg_status+0x42>
    4cd6:	00 00       	nop
		status = ACA.STATUS;
    4cd8:	e0 e8       	ldi	r30, 0x80	; 128
    4cda:	f3 e0       	ldi	r31, 0x03	; 3
    4cdc:	87 81       	ldd	r24, Z+7	; 0x07
    4cde:	89 83       	std	Y+1, r24	; 0x01
		if(leg!=0)//Set MUX back to leg 0.
		{
			ACA.AC0MUXCTRL = AC_MUXNEG_PIN0_gc | AC_MUXPOS_PIN2_gc;
    4ce0:	80 e1       	ldi	r24, 0x10	; 16
    4ce2:	82 83       	std	Z+2, r24	; 0x02
			ACA.AC1MUXCTRL = AC_MUXNEG_PIN1_gc | AC_MUXPOS_PIN2_gc;
    4ce4:	81 e1       	ldi	r24, 0x11	; 17
    4ce6:	83 83       	std	Z+3, r24	; 0x03
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    4ce8:	9f bf       	out	0x3f, r25	; 63
		}
	}
	switch (status & AC_WSTATE_gm)
    4cea:	89 81       	ldd	r24, Y+1	; 0x01
    4cec:	80 7c       	andi	r24, 0xC0	; 192
    4cee:	80 34       	cpi	r24, 0x40	; 64
    4cf0:	29 f0       	breq	.+10     	; 0x4cfc <leg_status+0x68>
    4cf2:	80 38       	cpi	r24, 0x80	; 128
    4cf4:	29 f0       	breq	.+10     	; 0x4d00 <leg_status+0x6c>
    4cf6:	81 11       	cpse	r24, r1
    4cf8:	05 c0       	rjmp	.+10     	; 0x4d04 <leg_status+0x70>
    4cfa:	06 c0       	rjmp	.+12     	; 0x4d08 <leg_status+0x74>
	{
		case AC_WSTATE_ABOVE_gc:	return 1;
		case AC_WSTATE_INSIDE_gc:	return 0;
    4cfc:	80 e0       	ldi	r24, 0x00	; 0
    4cfe:	0a c0       	rjmp	.+20     	; 0x4d14 <leg_status+0x80>
		case AC_WSTATE_BELOW_gc:	return -1;
    4d00:	8f ef       	ldi	r24, 0xFF	; 255
    4d02:	08 c0       	rjmp	.+16     	; 0x4d14 <leg_status+0x80>
		default:					return 127;
    4d04:	8f e7       	ldi	r24, 0x7F	; 127
    4d06:	06 c0       	rjmp	.+12     	; 0x4d14 <leg_status+0x80>
			ACA.AC1MUXCTRL = AC_MUXNEG_PIN1_gc | AC_MUXPOS_PIN2_gc;
		}
	}
	switch (status & AC_WSTATE_gm)
	{
		case AC_WSTATE_ABOVE_gc:	return 1;
    4d08:	81 e0       	ldi	r24, 0x01	; 1
    4d0a:	04 c0       	rjmp	.+8      	; 0x4d14 <leg_status+0x80>
				ACA.AC0MUXCTRL = AC_MUXNEG_PIN0_gc | AC_MUXPOS_PIN4_gc;
				ACA.AC1MUXCTRL = AC_MUXNEG_PIN1_gc | AC_MUXPOS_PIN4_gc;
				break;
		}
		if(leg!=0) delay_us(100);		//The comparators seem to need a bit of time.
		status = ACA.STATUS;
    4d0c:	80 91 87 03 	lds	r24, 0x0387	; 0x800387 <__TEXT_REGION_LENGTH__+0x700387>
    4d10:	89 83       	std	Y+1, r24	; 0x01
    4d12:	ea cf       	rjmp	.-44     	; 0x4ce8 <leg_status+0x54>
		case AC_WSTATE_ABOVE_gc:	return 1;
		case AC_WSTATE_INSIDE_gc:	return 0;
		case AC_WSTATE_BELOW_gc:	return -1;
		default:					return 127;
	}
}
    4d14:	0f 90       	pop	r0
    4d16:	df 91       	pop	r29
    4d18:	cf 91       	pop	r28
    4d1a:	08 95       	ret

00004d1c <leg_float>:
}

void leg_float()
{
	//disable_leg_status_interrupt();
	if(leg_status(0) != 0 ||leg_status(1) != 0 || leg_status(2) != 0) return;
    4d1c:	80 e0       	ldi	r24, 0x00	; 0
    4d1e:	0e 94 4a 26 	call	0x4c94	; 0x4c94 <leg_status>
    4d22:	81 11       	cpse	r24, r1
    4d24:	14 c0       	rjmp	.+40     	; 0x4d4e <leg_float+0x32>
    4d26:	81 e0       	ldi	r24, 0x01	; 1
    4d28:	0e 94 4a 26 	call	0x4c94	; 0x4c94 <leg_status>
    4d2c:	81 11       	cpse	r24, r1
    4d2e:	0f c0       	rjmp	.+30     	; 0x4d4e <leg_float+0x32>
    4d30:	82 e0       	ldi	r24, 0x02	; 2
    4d32:	0e 94 4a 26 	call	0x4c94	; 0x4c94 <leg_status>
    4d36:	81 11       	cpse	r24, r1
    4d38:	0a c0       	rjmp	.+20     	; 0x4d4e <leg_float+0x32>
	printf("!\r\n");
    4d3a:	84 ea       	ldi	r24, 0xA4	; 164
    4d3c:	91 e2       	ldi	r25, 0x21	; 33
    4d3e:	0e 94 25 57 	call	0xae4a	; 0xae4a <puts>
	if(user_leg_status_interrupt) user_leg_status_interrupt();
    4d42:	80 e0       	ldi	r24, 0x00	; 0
    4d44:	90 e0       	ldi	r25, 0x00	; 0
    4d46:	89 2b       	or	r24, r25
    4d48:	11 f0       	breq	.+4      	; 0x4d4e <leg_float+0x32>
    4d4a:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    4d4e:	08 95       	ret

00004d50 <__vector_70>:
	//enable_leg_status_interrupt();
}


ISR(ACA_ACW_vect)
{
    4d50:	1f 92       	push	r1
    4d52:	0f 92       	push	r0
    4d54:	0f b6       	in	r0, 0x3f	; 63
    4d56:	0f 92       	push	r0
    4d58:	11 24       	eor	r1, r1
    4d5a:	0b b6       	in	r0, 0x3b	; 59
    4d5c:	0f 92       	push	r0
    4d5e:	cf 92       	push	r12
    4d60:	df 92       	push	r13
    4d62:	ef 92       	push	r14
    4d64:	ff 92       	push	r15
    4d66:	2f 93       	push	r18
    4d68:	3f 93       	push	r19
    4d6a:	4f 93       	push	r20
    4d6c:	5f 93       	push	r21
    4d6e:	6f 93       	push	r22
    4d70:	7f 93       	push	r23
    4d72:	8f 93       	push	r24
    4d74:	9f 93       	push	r25
    4d76:	af 93       	push	r26
    4d78:	bf 93       	push	r27
    4d7a:	cf 93       	push	r28
    4d7c:	df 93       	push	r29
    4d7e:	ef 93       	push	r30
    4d80:	ff 93       	push	r31
	uint32_t now = get_time();
    4d82:	0e 94 20 08 	call	0x1040	; 0x1040 <get_time>
    4d86:	6b 01       	movw	r12, r22
    4d88:	7c 01       	movw	r14, r24
	if((now-last_int_time)>200)
    4d8a:	80 91 a4 2b 	lds	r24, 0x2BA4	; 0x802ba4 <last_int_time>
    4d8e:	90 91 a5 2b 	lds	r25, 0x2BA5	; 0x802ba5 <last_int_time+0x1>
    4d92:	a0 91 a6 2b 	lds	r26, 0x2BA6	; 0x802ba6 <last_int_time+0x2>
    4d96:	b0 91 a7 2b 	lds	r27, 0x2BA7	; 0x802ba7 <last_int_time+0x3>
    4d9a:	a7 01       	movw	r20, r14
    4d9c:	96 01       	movw	r18, r12
    4d9e:	28 1b       	sub	r18, r24
    4da0:	39 0b       	sbc	r19, r25
    4da2:	4a 0b       	sbc	r20, r26
    4da4:	5b 0b       	sbc	r21, r27
    4da6:	29 3c       	cpi	r18, 0xC9	; 201
    4da8:	31 05       	cpc	r19, r1
    4daa:	41 05       	cpc	r20, r1
    4dac:	51 05       	cpc	r21, r1
    4dae:	08 f4       	brcc	.+2      	; 0x4db2 <__vector_70+0x62>
    4db0:	a8 c0       	rjmp	.+336    	; 0x4f02 <__vector_70+0x1b2>
	{	
		if(ACA.WINCTRL & 0x8)
    4db2:	80 91 86 03 	lds	r24, 0x0386	; 0x800386 <__TEXT_REGION_LENGTH__+0x700386>
    4db6:	83 ff       	sbrs	r24, 3
    4db8:	53 c0       	rjmp	.+166    	; 0x4e60 <__vector_70+0x110>
		{
			printf("I'm down!");
    4dba:	87 ea       	ldi	r24, 0xA7	; 167
    4dbc:	91 e2       	ldi	r25, 0x21	; 33
    4dbe:	9f 93       	push	r25
    4dc0:	8f 93       	push	r24
    4dc2:	0e 94 e3 56 	call	0xadc6	; 0xadc6 <printf>
			delay_ms(10);
    4dc6:	8a e0       	ldi	r24, 0x0A	; 10
    4dc8:	90 e0       	ldi	r25, 0x00	; 0
    4dca:	0e 94 33 3a 	call	0x7466	; 0x7466 <delay_ms>
			printf("\tLeg Status': %hd\t%hd\t%hd\r\n", leg_status(0),leg_status(1),leg_status(2));
    4dce:	82 e0       	ldi	r24, 0x02	; 2
    4dd0:	0e 94 4a 26 	call	0x4c94	; 0x4c94 <leg_status>
    4dd4:	d8 2f       	mov	r29, r24
    4dd6:	81 e0       	ldi	r24, 0x01	; 1
    4dd8:	0e 94 4a 26 	call	0x4c94	; 0x4c94 <leg_status>
    4ddc:	c8 2f       	mov	r28, r24
    4dde:	80 e0       	ldi	r24, 0x00	; 0
    4de0:	0e 94 4a 26 	call	0x4c94	; 0x4c94 <leg_status>
    4de4:	2d 2f       	mov	r18, r29
    4de6:	0d 2e       	mov	r0, r29
    4de8:	00 0c       	add	r0, r0
    4dea:	33 0b       	sbc	r19, r19
    4dec:	3f 93       	push	r19
    4dee:	df 93       	push	r29
    4df0:	2c 2f       	mov	r18, r28
    4df2:	0c 2e       	mov	r0, r28
    4df4:	00 0c       	add	r0, r0
    4df6:	33 0b       	sbc	r19, r19
    4df8:	3f 93       	push	r19
    4dfa:	cf 93       	push	r28
    4dfc:	28 2f       	mov	r18, r24
    4dfe:	08 2e       	mov	r0, r24
    4e00:	00 0c       	add	r0, r0
    4e02:	33 0b       	sbc	r19, r19
    4e04:	3f 93       	push	r19
    4e06:	8f 93       	push	r24
    4e08:	81 eb       	ldi	r24, 0xB1	; 177
    4e0a:	91 e2       	ldi	r25, 0x21	; 33
    4e0c:	9f 93       	push	r25
    4e0e:	8f 93       	push	r24
    4e10:	0e 94 e3 56 	call	0xadc6	; 0xadc6 <printf>
			last_int_time=now;
    4e14:	c0 92 a4 2b 	sts	0x2BA4, r12	; 0x802ba4 <last_int_time>
    4e18:	d0 92 a5 2b 	sts	0x2BA5, r13	; 0x802ba5 <last_int_time+0x1>
    4e1c:	e0 92 a6 2b 	sts	0x2BA6, r14	; 0x802ba6 <last_int_time+0x2>
    4e20:	f0 92 a7 2b 	sts	0x2BA7, r15	; 0x802ba7 <last_int_time+0x3>
			ACA.WINCTRL = AC_WEN_bm | AES_INTLVL_LO_gc | AC_WINTMODE_INSIDE_gc;
    4e24:	85 e1       	ldi	r24, 0x15	; 21
    4e26:	80 93 86 03 	sts	0x0386, r24	; 0x800386 <__TEXT_REGION_LENGTH__+0x700386>
			remove_task(leg_task);				
    4e2a:	80 91 58 2f 	lds	r24, 0x2F58	; 0x802f58 <leg_task>
    4e2e:	90 91 59 2f 	lds	r25, 0x2F59	; 0x802f59 <leg_task+0x1>
    4e32:	0e 94 d0 3a 	call	0x75a0	; 0x75a0 <remove_task>
			leg_task = schedule_task(500, leg_float, NULL);	
    4e36:	20 e0       	ldi	r18, 0x00	; 0
    4e38:	30 e0       	ldi	r19, 0x00	; 0
    4e3a:	4e e8       	ldi	r20, 0x8E	; 142
    4e3c:	56 e2       	ldi	r21, 0x26	; 38
    4e3e:	64 ef       	ldi	r22, 0xF4	; 244
    4e40:	71 e0       	ldi	r23, 0x01	; 1
    4e42:	80 e0       	ldi	r24, 0x00	; 0
    4e44:	90 e0       	ldi	r25, 0x00	; 0
    4e46:	0e 94 2a 3d 	call	0x7a54	; 0x7a54 <schedule_task>
    4e4a:	80 93 58 2f 	sts	0x2F58, r24	; 0x802f58 <leg_task>
    4e4e:	90 93 59 2f 	sts	0x2F59, r25	; 0x802f59 <leg_task+0x1>
    4e52:	4d b7       	in	r20, 0x3d	; 61
    4e54:	5e b7       	in	r21, 0x3e	; 62
    4e56:	46 5f       	subi	r20, 0xF6	; 246
    4e58:	5f 4f       	sbci	r21, 0xFF	; 255
    4e5a:	4d bf       	out	0x3d, r20	; 61
    4e5c:	5e bf       	out	0x3e, r21	; 62
    4e5e:	51 c0       	rjmp	.+162    	; 0x4f02 <__vector_70+0x1b2>
		}
		else
		{
			printf("I'm up!\t");
    4e60:	8d ec       	ldi	r24, 0xCD	; 205
    4e62:	91 e2       	ldi	r25, 0x21	; 33
    4e64:	9f 93       	push	r25
    4e66:	8f 93       	push	r24
    4e68:	0e 94 e3 56 	call	0xadc6	; 0xadc6 <printf>
			delay_ms(10);			
    4e6c:	8a e0       	ldi	r24, 0x0A	; 10
    4e6e:	90 e0       	ldi	r25, 0x00	; 0
    4e70:	0e 94 33 3a 	call	0x7466	; 0x7466 <delay_ms>
			printf("\tLeg Status': %hd\t%hd\t%hd\r\n", leg_status(0),leg_status(1),leg_status(2));
    4e74:	82 e0       	ldi	r24, 0x02	; 2
    4e76:	0e 94 4a 26 	call	0x4c94	; 0x4c94 <leg_status>
    4e7a:	d8 2f       	mov	r29, r24
    4e7c:	81 e0       	ldi	r24, 0x01	; 1
    4e7e:	0e 94 4a 26 	call	0x4c94	; 0x4c94 <leg_status>
    4e82:	c8 2f       	mov	r28, r24
    4e84:	80 e0       	ldi	r24, 0x00	; 0
    4e86:	0e 94 4a 26 	call	0x4c94	; 0x4c94 <leg_status>
    4e8a:	2d 2f       	mov	r18, r29
    4e8c:	0d 2e       	mov	r0, r29
    4e8e:	00 0c       	add	r0, r0
    4e90:	33 0b       	sbc	r19, r19
    4e92:	3f 93       	push	r19
    4e94:	df 93       	push	r29
    4e96:	2c 2f       	mov	r18, r28
    4e98:	0c 2e       	mov	r0, r28
    4e9a:	00 0c       	add	r0, r0
    4e9c:	33 0b       	sbc	r19, r19
    4e9e:	3f 93       	push	r19
    4ea0:	cf 93       	push	r28
    4ea2:	28 2f       	mov	r18, r24
    4ea4:	08 2e       	mov	r0, r24
    4ea6:	00 0c       	add	r0, r0
    4ea8:	33 0b       	sbc	r19, r19
    4eaa:	3f 93       	push	r19
    4eac:	8f 93       	push	r24
    4eae:	81 eb       	ldi	r24, 0xB1	; 177
    4eb0:	91 e2       	ldi	r25, 0x21	; 33
    4eb2:	9f 93       	push	r25
    4eb4:	8f 93       	push	r24
    4eb6:	0e 94 e3 56 	call	0xadc6	; 0xadc6 <printf>
			last_int_time=now;
    4eba:	c0 92 a4 2b 	sts	0x2BA4, r12	; 0x802ba4 <last_int_time>
    4ebe:	d0 92 a5 2b 	sts	0x2BA5, r13	; 0x802ba5 <last_int_time+0x1>
    4ec2:	e0 92 a6 2b 	sts	0x2BA6, r14	; 0x802ba6 <last_int_time+0x2>
    4ec6:	f0 92 a7 2b 	sts	0x2BA7, r15	; 0x802ba7 <last_int_time+0x3>
			ACA.WINCTRL = AC_WEN_bm | AES_INTLVL_LO_gc | AC_WINTMODE_OUTSIDE_gc;
    4eca:	8d e1       	ldi	r24, 0x1D	; 29
    4ecc:	80 93 86 03 	sts	0x0386, r24	; 0x800386 <__TEXT_REGION_LENGTH__+0x700386>
			remove_task(leg_task);
    4ed0:	80 91 58 2f 	lds	r24, 0x2F58	; 0x802f58 <leg_task>
    4ed4:	90 91 59 2f 	lds	r25, 0x2F59	; 0x802f59 <leg_task+0x1>
    4ed8:	0e 94 d0 3a 	call	0x75a0	; 0x75a0 <remove_task>
			leg_task = schedule_task(500, leg_float, NULL);
    4edc:	20 e0       	ldi	r18, 0x00	; 0
    4ede:	30 e0       	ldi	r19, 0x00	; 0
    4ee0:	4e e8       	ldi	r20, 0x8E	; 142
    4ee2:	56 e2       	ldi	r21, 0x26	; 38
    4ee4:	64 ef       	ldi	r22, 0xF4	; 244
    4ee6:	71 e0       	ldi	r23, 0x01	; 1
    4ee8:	80 e0       	ldi	r24, 0x00	; 0
    4eea:	90 e0       	ldi	r25, 0x00	; 0
    4eec:	0e 94 2a 3d 	call	0x7a54	; 0x7a54 <schedule_task>
    4ef0:	80 93 58 2f 	sts	0x2F58, r24	; 0x802f58 <leg_task>
    4ef4:	90 93 59 2f 	sts	0x2F59, r25	; 0x802f59 <leg_task+0x1>
    4ef8:	8d b7       	in	r24, 0x3d	; 61
    4efa:	9e b7       	in	r25, 0x3e	; 62
    4efc:	0a 96       	adiw	r24, 0x0a	; 10
    4efe:	8d bf       	out	0x3d, r24	; 61
    4f00:	9e bf       	out	0x3e, r25	; 62
		}
	}
}
    4f02:	ff 91       	pop	r31
    4f04:	ef 91       	pop	r30
    4f06:	df 91       	pop	r29
    4f08:	cf 91       	pop	r28
    4f0a:	bf 91       	pop	r27
    4f0c:	af 91       	pop	r26
    4f0e:	9f 91       	pop	r25
    4f10:	8f 91       	pop	r24
    4f12:	7f 91       	pop	r23
    4f14:	6f 91       	pop	r22
    4f16:	5f 91       	pop	r21
    4f18:	4f 91       	pop	r20
    4f1a:	3f 91       	pop	r19
    4f1c:	2f 91       	pop	r18
    4f1e:	ff 90       	pop	r15
    4f20:	ef 90       	pop	r14
    4f22:	df 90       	pop	r13
    4f24:	cf 90       	pop	r12
    4f26:	0f 90       	pop	r0
    4f28:	0b be       	out	0x3b, r0	; 59
    4f2a:	0f 90       	pop	r0
    4f2c:	0f be       	out	0x3f, r0	; 63
    4f2e:	0f 90       	pop	r0
    4f30:	1f 90       	pop	r1
    4f32:	18 95       	reti

00004f34 <random_init>:
    // Setting this bit will reset the AES crypto module to its initial status on the next positive edge of
    // the peripheral clock. All registers, pointers, and memories in the module are set to their initial
    // value. When written to one, the bit stays high for one clock cycle before it is reset to zero by
    // hardware. (p. 320)

	AES.CTRL = AES_RESET_bm;
    4f34:	e0 ec       	ldi	r30, 0xC0	; 192
    4f36:	f0 e0       	ldi	r31, 0x00	; 0
    4f38:	80 e2       	ldi	r24, 0x20	; 32
    4f3a:	80 83       	st	Z, r24
    // After encryption/decryption is done, the last subkey can be read sequentially, byte-by-byte,
    // through the KEY register.
    // Loading the initial data to the KEY register should be done after setting the appropriate AES
    // mode and direction. (p. 322)

	AES.KEY = PRODSIGNATURES_LOTNUM0;
    4f3c:	88 b1       	in	r24, 0x08	; 8
    4f3e:	83 83       	std	Z+3, r24	; 0x03
	AES.KEY = PRODSIGNATURES_LOTNUM1;
    4f40:	89 b1       	in	r24, 0x09	; 9
    4f42:	83 83       	std	Z+3, r24	; 0x03
	AES.KEY = PRODSIGNATURES_LOTNUM2;
    4f44:	8a b1       	in	r24, 0x0a	; 10
    4f46:	83 83       	std	Z+3, r24	; 0x03
	AES.KEY = PRODSIGNATURES_LOTNUM3;
    4f48:	8b b1       	in	r24, 0x0b	; 11
    4f4a:	83 83       	std	Z+3, r24	; 0x03

	AES.KEY = PRODSIGNATURES_LOTNUM4;
    4f4c:	8c b1       	in	r24, 0x0c	; 12
    4f4e:	83 83       	std	Z+3, r24	; 0x03
	AES.KEY = PRODSIGNATURES_LOTNUM5;
    4f50:	8d b1       	in	r24, 0x0d	; 13
    4f52:	83 83       	std	Z+3, r24	; 0x03
	AES.KEY = PRODSIGNATURES_WAFNUM;
    4f54:	80 b3       	in	r24, 0x10	; 16
    4f56:	83 83       	std	Z+3, r24	; 0x03
	AES.KEY = PRODSIGNATURES_COORDX0;
    4f58:	82 b3       	in	r24, 0x12	; 18
    4f5a:	83 83       	std	Z+3, r24	; 0x03

	AES.KEY = PRODSIGNATURES_COORDX1;
    4f5c:	83 b3       	in	r24, 0x13	; 19
    4f5e:	83 83       	std	Z+3, r24	; 0x03
	AES.KEY = PRODSIGNATURES_COORDY0;
    4f60:	84 b3       	in	r24, 0x14	; 20
    4f62:	83 83       	std	Z+3, r24	; 0x03
	AES.KEY = PRODSIGNATURES_COORDY1;
    4f64:	85 b3       	in	r24, 0x15	; 21
    4f66:	83 83       	std	Z+3, r24	; 0x03
	AES.KEY = ADCA.CH0.RESL;
    4f68:	a0 e0       	ldi	r26, 0x00	; 0
    4f6a:	b2 e0       	ldi	r27, 0x02	; 2
    4f6c:	94 96       	adiw	r26, 0x24	; 36
    4f6e:	8c 91       	ld	r24, X
    4f70:	94 97       	sbiw	r26, 0x24	; 36
    4f72:	83 83       	std	Z+3, r24	; 0x03

	AES.KEY = ADCA.CH1.RESL;
    4f74:	9c 96       	adiw	r26, 0x2c	; 44
    4f76:	8c 91       	ld	r24, X
    4f78:	9c 97       	sbiw	r26, 0x2c	; 44
    4f7a:	83 83       	std	Z+3, r24	; 0x03
	AES.KEY = ADCA.CH2.RESL;
    4f7c:	d4 96       	adiw	r26, 0x34	; 52
    4f7e:	8c 91       	ld	r24, X
    4f80:	83 83       	std	Z+3, r24	; 0x03
	AES.KEY = ADCB.CH0.RESL;
    4f82:	a0 e4       	ldi	r26, 0x40	; 64
    4f84:	b2 e0       	ldi	r27, 0x02	; 2
    4f86:	94 96       	adiw	r26, 0x24	; 36
    4f88:	8c 91       	ld	r24, X
    4f8a:	94 97       	sbiw	r26, 0x24	; 36
    4f8c:	83 83       	std	Z+3, r24	; 0x03
	AES.KEY = ADCB.CH1.RESL;
    4f8e:	9c 96       	adiw	r26, 0x2c	; 44
    4f90:	8c 91       	ld	r24, X
    4f92:	83 83       	std	Z+3, r24	; 0x03

	r_round = 1;
    4f94:	81 e0       	ldi	r24, 0x01	; 1
    4f96:	80 93 ef 2f 	sts	0x2FEF, r24	; 0x802fef <r_round>
    4f9a:	80 e1       	ldi	r24, 0x10	; 16
    // through the STATE register.
    // Loading the initial data to the STATE register should be done after setting the appropriate AES
    // mode and direction. This register can not be accessed during encryption/decryption. (p. 321)

	for (uint8_t i = 0; i < 16; i++)
		AES.STATE = r_round;
    4f9c:	91 e0       	ldi	r25, 0x01	; 1
    4f9e:	92 83       	std	Z+2, r25	; 0x02
    4fa0:	81 50       	subi	r24, 0x01	; 1
    // After encryption/decryption is done, the ciphertext/plaintext can be read sequentially, byte-by-byte,
    // through the STATE register.
    // Loading the initial data to the STATE register should be done after setting the appropriate AES
    // mode and direction. This register can not be accessed during encryption/decryption. (p. 321)

	for (uint8_t i = 0; i < 16; i++)
    4fa2:	e9 f7       	brne	.-6      	; 0x4f9e <random_init+0x6a>
    // Setting this bit starts the encryption/decryption procedure, and this bit remains set while the
    // encryption/decryption is ongoing. Writing this bit to zero will stop/abort any ongoing encryption/
    // decryption process. This bit is automatically cleared if the SRIF or the ERROR flags in
    // STATUS are set. (p. 320)

	AES.CTRL = AES_START_bm | AES_XOR_bm;
    4fa4:	84 e8       	ldi	r24, 0x84	; 132
    4fa6:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>

	r_position = 0;
    4faa:	10 92 f0 2f 	sts	0x2FF0, r1	; 0x802ff0 <r_position>
    4fae:	08 95       	ret

00004fb0 <rand_byte>:
}

uint8_t rand_byte()
{
	uint8_t r;
	if (r_position == 0) while (!(AES.STATUS & AES_SRIF_bm));
    4fb0:	90 91 f0 2f 	lds	r25, 0x2FF0	; 0x802ff0 <r_position>
    4fb4:	91 11       	cpse	r25, r1
    4fb6:	15 c0       	rjmp	.+42     	; 0x4fe2 <rand_byte+0x32>
    4fb8:	e0 ec       	ldi	r30, 0xC0	; 192
    4fba:	f0 e0       	ldi	r31, 0x00	; 0
    4fbc:	81 81       	ldd	r24, Z+1	; 0x01
    4fbe:	80 ff       	sbrs	r24, 0
    4fc0:	fd cf       	rjmp	.-6      	; 0x4fbc <rand_byte+0xc>
    4fc2:	09 c0       	rjmp	.+18     	; 0x4fd6 <rand_byte+0x26>
	r = AES.STATE;
	r_position++;
	if (r_position > 15)
	{
		for (uint8_t i = 0; i < 16; i++) AES.STATE = r_round;
    4fc4:	22 83       	std	Z+2, r18	; 0x02
    4fc6:	91 50       	subi	r25, 0x01	; 1
    4fc8:	e9 f7       	brne	.-6      	; 0x4fc4 <rand_byte+0x14>
		AES.CTRL = AES_START_bm | AES_XOR_bm;
    4fca:	94 e8       	ldi	r25, 0x84	; 132
    4fcc:	90 93 c0 00 	sts	0x00C0, r25	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
		r_position = 0;
    4fd0:	10 92 f0 2f 	sts	0x2FF0, r1	; 0x802ff0 <r_position>
    4fd4:	08 95       	ret

uint8_t rand_byte()
{
	uint8_t r;
	if (r_position == 0) while (!(AES.STATUS & AES_SRIF_bm));
	r = AES.STATE;
    4fd6:	80 91 c2 00 	lds	r24, 0x00C2	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
	r_position++;
    4fda:	91 e0       	ldi	r25, 0x01	; 1
    4fdc:	90 93 f0 2f 	sts	0x2FF0, r25	; 0x802ff0 <r_position>
    4fe0:	08 95       	ret

uint8_t rand_byte()
{
	uint8_t r;
	if (r_position == 0) while (!(AES.STATUS & AES_SRIF_bm));
	r = AES.STATE;
    4fe2:	80 91 c2 00 	lds	r24, 0x00C2	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
	r_position++;
    4fe6:	9f 5f       	subi	r25, 0xFF	; 255
    4fe8:	90 93 f0 2f 	sts	0x2FF0, r25	; 0x802ff0 <r_position>
	if (r_position > 15)
    4fec:	90 31       	cpi	r25, 0x10	; 16
    4fee:	30 f0       	brcs	.+12     	; 0x4ffc <rand_byte+0x4c>
	{
		for (uint8_t i = 0; i < 16; i++) AES.STATE = r_round;
    4ff0:	20 91 ef 2f 	lds	r18, 0x2FEF	; 0x802fef <r_round>
    4ff4:	90 e1       	ldi	r25, 0x10	; 16
    4ff6:	e0 ec       	ldi	r30, 0xC0	; 192
    4ff8:	f0 e0       	ldi	r31, 0x00	; 0
    4ffa:	e4 cf       	rjmp	.-56     	; 0x4fc4 <rand_byte+0x14>
		AES.CTRL = AES_START_bm | AES_XOR_bm;
		r_position = 0;
	}
	return r;
}
    4ffc:	08 95       	ret

00004ffe <rand_short>:

uint16_t rand_short()
{
    4ffe:	cf 93       	push	r28
	return ((uint16_t)rand_byte()<<8)|((uint16_t)rand_byte());
    5000:	0e 94 d8 27 	call	0x4fb0	; 0x4fb0 <rand_byte>
    5004:	c8 2f       	mov	r28, r24
    5006:	0e 94 d8 27 	call	0x4fb0	; 0x4fb0 <rand_byte>
    500a:	2c 2f       	mov	r18, r28
    500c:	30 e0       	ldi	r19, 0x00	; 0
    500e:	32 2f       	mov	r19, r18
    5010:	22 27       	eor	r18, r18
}
    5012:	a9 01       	movw	r20, r18
    5014:	48 2b       	or	r20, r24
    5016:	ca 01       	movw	r24, r20
    5018:	cf 91       	pop	r28
    501a:	08 95       	ret

0000501c <range_algs_init>:
float amplitude_model(float r, uint8_t power){
	if(power==255)			return 15.91+(12985.5/powf(r+0.89,2.0));
	//else if(power ==250)	return (1100./((r-4.)*(r-4.)))+12.5;
	else					printf_P(PSTR("ERROR: Unexpected power: %hhu\r\n"),power);
	return 0;
}
    501c:	10 92 e8 28 	sts	0x28E8, r1	; 0x8028e8 <sensorHealthHistory>
    5020:	10 92 e9 28 	sts	0x28E9, r1	; 0x8028e9 <sensorHealthHistory+0x1>
    5024:	10 92 ea 28 	sts	0x28EA, r1	; 0x8028ea <sensorHealthHistory+0x2>
    5028:	10 92 eb 28 	sts	0x28EB, r1	; 0x8028eb <sensorHealthHistory+0x3>
    502c:	ee ee       	ldi	r30, 0xEE	; 238
    502e:	fa e2       	ldi	r31, 0x2A	; 42
    5030:	86 e3       	ldi	r24, 0x36	; 54
    5032:	9b e2       	ldi	r25, 0x2B	; 43
    5034:	10 82       	st	Z, r1
    5036:	11 82       	std	Z+1, r1	; 0x01
    5038:	12 82       	std	Z+2, r1	; 0x02
    503a:	13 82       	std	Z+3, r1	; 0x03
    503c:	14 82       	std	Z+4, r1	; 0x04
    503e:	15 82       	std	Z+5, r1	; 0x05
    5040:	16 82       	std	Z+6, r1	; 0x06
    5042:	17 82       	std	Z+7, r1	; 0x07
    5044:	10 86       	std	Z+8, r1	; 0x08
    5046:	11 86       	std	Z+9, r1	; 0x09
    5048:	12 86       	std	Z+10, r1	; 0x0a
    504a:	13 86       	std	Z+11, r1	; 0x0b
    504c:	3c 96       	adiw	r30, 0x0c	; 12
    504e:	e8 17       	cp	r30, r24
    5050:	f9 07       	cpc	r31, r25
    5052:	81 f7       	brne	.-32     	; 0x5034 <range_algs_init+0x18>
    5054:	10 92 5c 2f 	sts	0x2F5C, r1	; 0x802f5c <rnbCmdID>
    5058:	10 92 5d 2f 	sts	0x2F5D, r1	; 0x802f5d <rnbCmdID+0x1>
    505c:	10 92 36 2b 	sts	0x2B36, r1	; 0x802b36 <rnbProcessingFlag>
    5060:	08 95       	ret

00005062 <expected_bright_mat>:
    5062:	4f 92       	push	r4
    5064:	5f 92       	push	r5
    5066:	6f 92       	push	r6
    5068:	7f 92       	push	r7
    506a:	8f 92       	push	r8
    506c:	9f 92       	push	r9
    506e:	af 92       	push	r10
    5070:	bf 92       	push	r11
    5072:	cf 92       	push	r12
    5074:	df 92       	push	r13
    5076:	ef 92       	push	r14
    5078:	ff 92       	push	r15
    507a:	0f 93       	push	r16
    507c:	1f 93       	push	r17
    507e:	cf 93       	push	r28
    5080:	df 93       	push	r29
    5082:	cd b7       	in	r28, 0x3d	; 61
    5084:	de b7       	in	r29, 0x3e	; 62
    5086:	2c 97       	sbiw	r28, 0x0c	; 12
    5088:	cd bf       	out	0x3d, r28	; 61
    508a:	de bf       	out	0x3e, r29	; 62
    508c:	69 83       	std	Y+1, r22	; 0x01
    508e:	7a 83       	std	Y+2, r23	; 0x02
    5090:	8b 83       	std	Y+3, r24	; 0x03
    5092:	9c 83       	std	Y+4, r25	; 0x04
    5094:	29 01       	movw	r4, r18
    5096:	3a 01       	movw	r6, r20
    5098:	c8 01       	movw	r24, r16
    509a:	b7 01       	movw	r22, r14
    509c:	ec 2d       	mov	r30, r12
    509e:	f0 e0       	ldi	r31, 0x00	; 0
    50a0:	ee 0f       	add	r30, r30
    50a2:	ff 1f       	adc	r31, r31
    50a4:	ee 0f       	add	r30, r30
    50a6:	ff 1f       	adc	r31, r31
    50a8:	e2 5c       	subi	r30, 0xC2	; 194
    50aa:	ff 4d       	sbci	r31, 0xDF	; 223
    50ac:	20 81       	ld	r18, Z
    50ae:	31 81       	ldd	r19, Z+1	; 0x01
    50b0:	42 81       	ldd	r20, Z+2	; 0x02
    50b2:	53 81       	ldd	r21, Z+3	; 0x03
    50b4:	0e 94 be 48 	call	0x917c	; 0x917c <__addsf3>
    50b8:	6b 01       	movw	r12, r22
    50ba:	7c 01       	movw	r14, r24
    50bc:	0e 94 b8 49 	call	0x9370	; 0x9370 <cos>
    50c0:	6d 83       	std	Y+5, r22	; 0x05
    50c2:	7e 83       	std	Y+6, r23	; 0x06
    50c4:	8f 83       	std	Y+7, r24	; 0x07
    50c6:	98 87       	std	Y+8, r25	; 0x08
    50c8:	c7 01       	movw	r24, r14
    50ca:	b6 01       	movw	r22, r12
    50cc:	0e 94 83 4d 	call	0x9b06	; 0x9b06 <sin>
    50d0:	69 87       	std	Y+9, r22	; 0x09
    50d2:	7a 87       	std	Y+10, r23	; 0x0a
    50d4:	8b 87       	std	Y+11, r24	; 0x0b
    50d6:	9c 87       	std	Y+12, r25	; 0x0c
    50d8:	c3 01       	movw	r24, r6
    50da:	b2 01       	movw	r22, r4
    50dc:	0e 94 b8 49 	call	0x9370	; 0x9370 <cos>
    50e0:	b1 2c       	mov	r11, r1
    50e2:	95 01       	movw	r18, r10
    50e4:	22 0f       	add	r18, r18
    50e6:	33 1f       	adc	r19, r19
    50e8:	22 0f       	add	r18, r18
    50ea:	33 1f       	adc	r19, r19
    50ec:	22 0f       	add	r18, r18
    50ee:	33 1f       	adc	r19, r19
    50f0:	89 01       	movw	r16, r18
    50f2:	04 55       	subi	r16, 0x54	; 84
    50f4:	1d 4d       	sbci	r17, 0xDD	; 221
    50f6:	f8 01       	movw	r30, r16
    50f8:	80 80       	ld	r8, Z
    50fa:	91 80       	ldd	r9, Z+1	; 0x01
    50fc:	a2 80       	ldd	r10, Z+2	; 0x02
    50fe:	b3 80       	ldd	r11, Z+3	; 0x03
    5100:	29 81       	ldd	r18, Y+1	; 0x01
    5102:	3a 81       	ldd	r19, Y+2	; 0x02
    5104:	4b 81       	ldd	r20, Y+3	; 0x03
    5106:	5c 81       	ldd	r21, Y+4	; 0x04
    5108:	0e 94 c6 4c 	call	0x998c	; 0x998c <__mulsf3>
    510c:	6b 01       	movw	r12, r22
    510e:	7c 01       	movw	r14, r24
    5110:	a5 01       	movw	r20, r10
    5112:	94 01       	movw	r18, r8
    5114:	6d 81       	ldd	r22, Y+5	; 0x05
    5116:	7e 81       	ldd	r23, Y+6	; 0x06
    5118:	8f 81       	ldd	r24, Y+7	; 0x07
    511a:	98 85       	ldd	r25, Y+8	; 0x08
    511c:	0e 94 bd 48 	call	0x917a	; 0x917a <__subsf3>
    5120:	28 e9       	ldi	r18, 0x98	; 152
    5122:	3c e4       	ldi	r19, 0x4C	; 76
    5124:	45 e0       	ldi	r20, 0x05	; 5
    5126:	50 e4       	ldi	r21, 0x40	; 64
    5128:	0e 94 c6 4c 	call	0x998c	; 0x998c <__mulsf3>
    512c:	9b 01       	movw	r18, r22
    512e:	ac 01       	movw	r20, r24
    5130:	c7 01       	movw	r24, r14
    5132:	b6 01       	movw	r22, r12
    5134:	0e 94 be 48 	call	0x917c	; 0x917c <__addsf3>
    5138:	6b 01       	movw	r12, r22
    513a:	7c 01       	movw	r14, r24
    513c:	c3 01       	movw	r24, r6
    513e:	b2 01       	movw	r22, r4
    5140:	0e 94 83 4d 	call	0x9b06	; 0x9b06 <sin>
    5144:	f8 01       	movw	r30, r16
    5146:	44 80       	ldd	r4, Z+4	; 0x04
    5148:	55 80       	ldd	r5, Z+5	; 0x05
    514a:	66 80       	ldd	r6, Z+6	; 0x06
    514c:	77 80       	ldd	r7, Z+7	; 0x07
    514e:	29 81       	ldd	r18, Y+1	; 0x01
    5150:	3a 81       	ldd	r19, Y+2	; 0x02
    5152:	4b 81       	ldd	r20, Y+3	; 0x03
    5154:	5c 81       	ldd	r21, Y+4	; 0x04
    5156:	0e 94 c6 4c 	call	0x998c	; 0x998c <__mulsf3>
    515a:	69 83       	std	Y+1, r22	; 0x01
    515c:	7a 83       	std	Y+2, r23	; 0x02
    515e:	8b 83       	std	Y+3, r24	; 0x03
    5160:	9c 83       	std	Y+4, r25	; 0x04
    5162:	a3 01       	movw	r20, r6
    5164:	92 01       	movw	r18, r4
    5166:	69 85       	ldd	r22, Y+9	; 0x09
    5168:	7a 85       	ldd	r23, Y+10	; 0x0a
    516a:	8b 85       	ldd	r24, Y+11	; 0x0b
    516c:	9c 85       	ldd	r25, Y+12	; 0x0c
    516e:	0e 94 bd 48 	call	0x917a	; 0x917a <__subsf3>
    5172:	28 e9       	ldi	r18, 0x98	; 152
    5174:	3c e4       	ldi	r19, 0x4C	; 76
    5176:	45 e0       	ldi	r20, 0x05	; 5
    5178:	50 e4       	ldi	r21, 0x40	; 64
    517a:	0e 94 c6 4c 	call	0x998c	; 0x998c <__mulsf3>
    517e:	9b 01       	movw	r18, r22
    5180:	ac 01       	movw	r20, r24
    5182:	69 81       	ldd	r22, Y+1	; 0x01
    5184:	7a 81       	ldd	r23, Y+2	; 0x02
    5186:	8b 81       	ldd	r24, Y+3	; 0x03
    5188:	9c 81       	ldd	r25, Y+4	; 0x04
    518a:	0e 94 be 48 	call	0x917c	; 0x917c <__addsf3>
    518e:	69 83       	std	Y+1, r22	; 0x01
    5190:	7a 83       	std	Y+2, r23	; 0x02
    5192:	8b 83       	std	Y+3, r24	; 0x03
    5194:	9c 83       	std	Y+4, r25	; 0x04
    5196:	a7 01       	movw	r20, r14
    5198:	96 01       	movw	r18, r12
    519a:	c5 01       	movw	r24, r10
    519c:	b4 01       	movw	r22, r8
    519e:	0e 94 c6 4c 	call	0x998c	; 0x998c <__mulsf3>
    51a2:	4b 01       	movw	r8, r22
    51a4:	5c 01       	movw	r10, r24
    51a6:	29 81       	ldd	r18, Y+1	; 0x01
    51a8:	3a 81       	ldd	r19, Y+2	; 0x02
    51aa:	4b 81       	ldd	r20, Y+3	; 0x03
    51ac:	5c 81       	ldd	r21, Y+4	; 0x04
    51ae:	c3 01       	movw	r24, r6
    51b0:	b2 01       	movw	r22, r4
    51b2:	0e 94 c6 4c 	call	0x998c	; 0x998c <__mulsf3>
    51b6:	9b 01       	movw	r18, r22
    51b8:	ac 01       	movw	r20, r24
    51ba:	c5 01       	movw	r24, r10
    51bc:	b4 01       	movw	r22, r8
    51be:	0e 94 be 48 	call	0x917c	; 0x917c <__addsf3>
    51c2:	4b 01       	movw	r8, r22
    51c4:	5c 01       	movw	r10, r24
    51c6:	c7 01       	movw	r24, r14
    51c8:	b6 01       	movw	r22, r12
    51ca:	90 58       	subi	r25, 0x80	; 128
    51cc:	2d 81       	ldd	r18, Y+5	; 0x05
    51ce:	3e 81       	ldd	r19, Y+6	; 0x06
    51d0:	4f 81       	ldd	r20, Y+7	; 0x07
    51d2:	58 85       	ldd	r21, Y+8	; 0x08
    51d4:	0e 94 c6 4c 	call	0x998c	; 0x998c <__mulsf3>
    51d8:	2b 01       	movw	r4, r22
    51da:	3c 01       	movw	r6, r24
    51dc:	29 85       	ldd	r18, Y+9	; 0x09
    51de:	3a 85       	ldd	r19, Y+10	; 0x0a
    51e0:	4b 85       	ldd	r20, Y+11	; 0x0b
    51e2:	5c 85       	ldd	r21, Y+12	; 0x0c
    51e4:	69 81       	ldd	r22, Y+1	; 0x01
    51e6:	7a 81       	ldd	r23, Y+2	; 0x02
    51e8:	8b 81       	ldd	r24, Y+3	; 0x03
    51ea:	9c 81       	ldd	r25, Y+4	; 0x04
    51ec:	0e 94 c6 4c 	call	0x998c	; 0x998c <__mulsf3>
    51f0:	9b 01       	movw	r18, r22
    51f2:	ac 01       	movw	r20, r24
    51f4:	c3 01       	movw	r24, r6
    51f6:	b2 01       	movw	r22, r4
    51f8:	0e 94 bd 48 	call	0x917a	; 0x917a <__subsf3>
    51fc:	2b 01       	movw	r4, r22
    51fe:	3c 01       	movw	r6, r24
    5200:	29 81       	ldd	r18, Y+1	; 0x01
    5202:	3a 81       	ldd	r19, Y+2	; 0x02
    5204:	4b 81       	ldd	r20, Y+3	; 0x03
    5206:	5c 81       	ldd	r21, Y+4	; 0x04
    5208:	c7 01       	movw	r24, r14
    520a:	b6 01       	movw	r22, r12
    520c:	0e 94 25 4c 	call	0x984a	; 0x984a <hypot>
    5210:	6b 01       	movw	r12, r22
    5212:	7c 01       	movw	r14, r24
    5214:	20 e0       	ldi	r18, 0x00	; 0
    5216:	30 e0       	ldi	r19, 0x00	; 0
    5218:	a9 01       	movw	r20, r18
    521a:	c5 01       	movw	r24, r10
    521c:	b4 01       	movw	r22, r8
    521e:	0e 94 12 4c 	call	0x9824	; 0x9824 <__gesf2>
    5222:	18 16       	cp	r1, r24
    5224:	0c f0       	brlt	.+2      	; 0x5228 <expected_bright_mat+0x1c6>
    5226:	49 c0       	rjmp	.+146    	; 0x52ba <expected_bright_mat+0x258>
    5228:	20 e0       	ldi	r18, 0x00	; 0
    522a:	30 e0       	ldi	r19, 0x00	; 0
    522c:	a9 01       	movw	r20, r18
    522e:	c3 01       	movw	r24, r6
    5230:	b2 01       	movw	r22, r4
    5232:	0e 94 12 4c 	call	0x9824	; 0x9824 <__gesf2>
    5236:	18 16       	cp	r1, r24
    5238:	0c f0       	brlt	.+2      	; 0x523c <expected_bright_mat+0x1da>
    523a:	43 c0       	rjmp	.+134    	; 0x52c2 <expected_bright_mat+0x260>
    523c:	2a e0       	ldi	r18, 0x0A	; 10
    523e:	37 ed       	ldi	r19, 0xD7	; 215
    5240:	43 e6       	ldi	r20, 0x63	; 99
    5242:	5f e3       	ldi	r21, 0x3F	; 63
    5244:	c7 01       	movw	r24, r14
    5246:	b6 01       	movw	r22, r12
    5248:	0e 94 be 48 	call	0x917c	; 0x917c <__addsf3>
    524c:	69 83       	std	Y+1, r22	; 0x01
    524e:	7a 83       	std	Y+2, r23	; 0x02
    5250:	8b 83       	std	Y+3, r24	; 0x03
    5252:	9c 83       	std	Y+4, r25	; 0x04
    5254:	a3 01       	movw	r20, r6
    5256:	92 01       	movw	r18, r4
    5258:	c5 01       	movw	r24, r10
    525a:	b4 01       	movw	r22, r8
    525c:	0e 94 c6 4c 	call	0x998c	; 0x998c <__mulsf3>
    5260:	4b 01       	movw	r8, r22
    5262:	5c 01       	movw	r10, r24
    5264:	29 81       	ldd	r18, Y+1	; 0x01
    5266:	3a 81       	ldd	r19, Y+2	; 0x02
    5268:	4b 81       	ldd	r20, Y+3	; 0x03
    526a:	5c 81       	ldd	r21, Y+4	; 0x04
    526c:	ca 01       	movw	r24, r20
    526e:	b9 01       	movw	r22, r18
    5270:	0e 94 c6 4c 	call	0x998c	; 0x998c <__mulsf3>
    5274:	9b 01       	movw	r18, r22
    5276:	ac 01       	movw	r20, r24
    5278:	60 e0       	ldi	r22, 0x00	; 0
    527a:	76 ee       	ldi	r23, 0xE6	; 230
    527c:	8a e4       	ldi	r24, 0x4A	; 74
    527e:	96 e4       	ldi	r25, 0x46	; 70
    5280:	0e 94 bd 49 	call	0x937a	; 0x937a <__divsf3>
    5284:	2c e5       	ldi	r18, 0x5C	; 92
    5286:	3f e8       	ldi	r19, 0x8F	; 143
    5288:	4e e7       	ldi	r20, 0x7E	; 126
    528a:	51 e4       	ldi	r21, 0x41	; 65
    528c:	0e 94 be 48 	call	0x917c	; 0x917c <__addsf3>
    5290:	9b 01       	movw	r18, r22
    5292:	ac 01       	movw	r20, r24
    5294:	c5 01       	movw	r24, r10
    5296:	b4 01       	movw	r22, r8
    5298:	0e 94 c6 4c 	call	0x998c	; 0x998c <__mulsf3>
    529c:	4b 01       	movw	r8, r22
    529e:	5c 01       	movw	r10, r24
    52a0:	a7 01       	movw	r20, r14
    52a2:	96 01       	movw	r18, r12
    52a4:	c7 01       	movw	r24, r14
    52a6:	b6 01       	movw	r22, r12
    52a8:	0e 94 c6 4c 	call	0x998c	; 0x998c <__mulsf3>
    52ac:	9b 01       	movw	r18, r22
    52ae:	ac 01       	movw	r20, r24
    52b0:	c5 01       	movw	r24, r10
    52b2:	b4 01       	movw	r22, r8
    52b4:	0e 94 bd 49 	call	0x937a	; 0x937a <__divsf3>
    52b8:	07 c0       	rjmp	.+14     	; 0x52c8 <expected_bright_mat+0x266>
    52ba:	60 e0       	ldi	r22, 0x00	; 0
    52bc:	70 e0       	ldi	r23, 0x00	; 0
    52be:	cb 01       	movw	r24, r22
    52c0:	03 c0       	rjmp	.+6      	; 0x52c8 <expected_bright_mat+0x266>
    52c2:	60 e0       	ldi	r22, 0x00	; 0
    52c4:	70 e0       	ldi	r23, 0x00	; 0
    52c6:	cb 01       	movw	r24, r22
    52c8:	2c 96       	adiw	r28, 0x0c	; 12
    52ca:	cd bf       	out	0x3d, r28	; 61
    52cc:	de bf       	out	0x3e, r29	; 62
    52ce:	df 91       	pop	r29
    52d0:	cf 91       	pop	r28
    52d2:	1f 91       	pop	r17
    52d4:	0f 91       	pop	r16
    52d6:	ff 90       	pop	r15
    52d8:	ef 90       	pop	r14
    52da:	df 90       	pop	r13
    52dc:	cf 90       	pop	r12
    52de:	bf 90       	pop	r11
    52e0:	af 90       	pop	r10
    52e2:	9f 90       	pop	r9
    52e4:	8f 90       	pop	r8
    52e6:	7f 90       	pop	r7
    52e8:	6f 90       	pop	r6
    52ea:	5f 90       	pop	r5
    52ec:	4f 90       	pop	r4
    52ee:	08 95       	ret

000052f0 <calculate_innovation>:
    52f0:	2f 92       	push	r2
    52f2:	3f 92       	push	r3
    52f4:	4f 92       	push	r4
    52f6:	5f 92       	push	r5
    52f8:	6f 92       	push	r6
    52fa:	7f 92       	push	r7
    52fc:	8f 92       	push	r8
    52fe:	9f 92       	push	r9
    5300:	af 92       	push	r10
    5302:	bf 92       	push	r11
    5304:	cf 92       	push	r12
    5306:	df 92       	push	r13
    5308:	ef 92       	push	r14
    530a:	ff 92       	push	r15
    530c:	0f 93       	push	r16
    530e:	1f 93       	push	r17
    5310:	cf 93       	push	r28
    5312:	df 93       	push	r29
    5314:	cd b7       	in	r28, 0x3d	; 61
    5316:	de b7       	in	r29, 0x3e	; 62
    5318:	ca 5a       	subi	r28, 0xAA	; 170
    531a:	d1 09       	sbc	r29, r1
    531c:	cd bf       	out	0x3d, r28	; 61
    531e:	de bf       	out	0x3e, r29	; 62
    5320:	c9 56       	subi	r28, 0x69	; 105
    5322:	df 4f       	sbci	r29, 0xFF	; 255
    5324:	68 83       	st	Y, r22
    5326:	79 83       	std	Y+1, r23	; 0x01
    5328:	8a 83       	std	Y+2, r24	; 0x02
    532a:	9b 83       	std	Y+3, r25	; 0x03
    532c:	c7 59       	subi	r28, 0x97	; 151
    532e:	d0 40       	sbci	r29, 0x00	; 0
    5330:	c5 56       	subi	r28, 0x65	; 101
    5332:	df 4f       	sbci	r29, 0xFF	; 255
    5334:	28 83       	st	Y, r18
    5336:	39 83       	std	Y+1, r19	; 0x01
    5338:	4a 83       	std	Y+2, r20	; 0x02
    533a:	5b 83       	std	Y+3, r21	; 0x03
    533c:	cb 59       	subi	r28, 0x9B	; 155
    533e:	d0 40       	sbci	r29, 0x00	; 0
    5340:	c1 56       	subi	r28, 0x61	; 97
    5342:	df 4f       	sbci	r29, 0xFF	; 255
    5344:	e8 82       	st	Y, r14
    5346:	f9 82       	std	Y+1, r15	; 0x01
    5348:	0a 83       	std	Y+2, r16	; 0x02
    534a:	1b 83       	std	Y+3, r17	; 0x03
    534c:	cf 59       	subi	r28, 0x9F	; 159
    534e:	d0 40       	sbci	r29, 0x00	; 0
    5350:	9e 01       	movw	r18, r28
    5352:	2f 5f       	subi	r18, 0xFF	; 255
    5354:	3f 4f       	sbci	r19, 0xFF	; 255
    5356:	c9 55       	subi	r28, 0x59	; 89
    5358:	df 4f       	sbci	r29, 0xFF	; 255
    535a:	28 83       	st	Y, r18
    535c:	39 83       	std	Y+1, r19	; 0x01
    535e:	c7 5a       	subi	r28, 0xA7	; 167
    5360:	d0 40       	sbci	r29, 0x00	; 0
    5362:	8e ee       	ldi	r24, 0xEE	; 238
    5364:	9a e2       	ldi	r25, 0x2A	; 42
    5366:	c7 55       	subi	r28, 0x57	; 87
    5368:	df 4f       	sbci	r29, 0xFF	; 255
    536a:	88 83       	st	Y, r24
    536c:	99 83       	std	Y+1, r25	; 0x01
    536e:	c9 5a       	subi	r28, 0xA9	; 169
    5370:	d0 40       	sbci	r29, 0x00	; 0
    5372:	b1 2c       	mov	r11, r1
    5374:	61 2c       	mov	r6, r1
    5376:	71 2c       	mov	r7, r1
    5378:	43 01       	movw	r8, r6
    537a:	cd 56       	subi	r28, 0x6D	; 109
    537c:	df 4f       	sbci	r29, 0xFF	; 255
    537e:	68 82       	st	Y, r6
    5380:	79 82       	std	Y+1, r7	; 0x01
    5382:	8a 82       	std	Y+2, r8	; 0x02
    5384:	9b 82       	std	Y+3, r9	; 0x03
    5386:	c3 59       	subi	r28, 0x93	; 147
    5388:	d0 40       	sbci	r29, 0x00	; 0
    538a:	cd 55       	subi	r28, 0x5D	; 93
    538c:	df 4f       	sbci	r29, 0xFF	; 255
    538e:	28 83       	st	Y, r18
    5390:	39 83       	std	Y+1, r19	; 0x01
    5392:	c3 5a       	subi	r28, 0xA3	; 163
    5394:	d0 40       	sbci	r29, 0x00	; 0
    5396:	cb 55       	subi	r28, 0x5B	; 91
    5398:	df 4f       	sbci	r29, 0xFF	; 255
    539a:	88 83       	st	Y, r24
    539c:	99 83       	std	Y+1, r25	; 0x01
    539e:	c5 5a       	subi	r28, 0xA5	; 165
    53a0:	d0 40       	sbci	r29, 0x00	; 0
    53a2:	23 01       	movw	r4, r6
    53a4:	34 01       	movw	r6, r8
    53a6:	6d c0       	rjmp	.+218    	; 0x5482 <calculate_innovation+0x192>
    53a8:	ad 2c       	mov	r10, r13
    53aa:	cb 2c       	mov	r12, r11
    53ac:	c1 56       	subi	r28, 0x61	; 97
    53ae:	df 4f       	sbci	r29, 0xFF	; 255
    53b0:	e8 80       	ld	r14, Y
    53b2:	f9 80       	ldd	r15, Y+1	; 0x01
    53b4:	0a 81       	ldd	r16, Y+2	; 0x02
    53b6:	1b 81       	ldd	r17, Y+3	; 0x03
    53b8:	cf 59       	subi	r28, 0x9F	; 159
    53ba:	d0 40       	sbci	r29, 0x00	; 0
    53bc:	c5 56       	subi	r28, 0x65	; 101
    53be:	df 4f       	sbci	r29, 0xFF	; 255
    53c0:	28 81       	ld	r18, Y
    53c2:	39 81       	ldd	r19, Y+1	; 0x01
    53c4:	4a 81       	ldd	r20, Y+2	; 0x02
    53c6:	5b 81       	ldd	r21, Y+3	; 0x03
    53c8:	cb 59       	subi	r28, 0x9B	; 155
    53ca:	d0 40       	sbci	r29, 0x00	; 0
    53cc:	c9 56       	subi	r28, 0x69	; 105
    53ce:	df 4f       	sbci	r29, 0xFF	; 255
    53d0:	68 81       	ld	r22, Y
    53d2:	79 81       	ldd	r23, Y+1	; 0x01
    53d4:	8a 81       	ldd	r24, Y+2	; 0x02
    53d6:	9b 81       	ldd	r25, Y+3	; 0x03
    53d8:	c7 59       	subi	r28, 0x97	; 151
    53da:	d0 40       	sbci	r29, 0x00	; 0
    53dc:	0e 94 31 28 	call	0x5062	; 0x5062 <expected_bright_mat>
    53e0:	f4 01       	movw	r30, r8
    53e2:	61 93       	st	Z+, r22
    53e4:	71 93       	st	Z+, r23
    53e6:	81 93       	st	Z+, r24
    53e8:	91 93       	st	Z+, r25
    53ea:	4f 01       	movw	r8, r30
    53ec:	9b 01       	movw	r18, r22
    53ee:	ac 01       	movw	r20, r24
    53f0:	0e 94 c6 4c 	call	0x998c	; 0x998c <__mulsf3>
    53f4:	9b 01       	movw	r18, r22
    53f6:	ac 01       	movw	r20, r24
    53f8:	cd 56       	subi	r28, 0x6D	; 109
    53fa:	df 4f       	sbci	r29, 0xFF	; 255
    53fc:	68 81       	ld	r22, Y
    53fe:	79 81       	ldd	r23, Y+1	; 0x01
    5400:	8a 81       	ldd	r24, Y+2	; 0x02
    5402:	9b 81       	ldd	r25, Y+3	; 0x03
    5404:	c3 59       	subi	r28, 0x93	; 147
    5406:	d0 40       	sbci	r29, 0x00	; 0
    5408:	0e 94 be 48 	call	0x917c	; 0x917c <__addsf3>
    540c:	cd 56       	subi	r28, 0x6D	; 109
    540e:	df 4f       	sbci	r29, 0xFF	; 255
    5410:	68 83       	st	Y, r22
    5412:	79 83       	std	Y+1, r23	; 0x01
    5414:	8a 83       	std	Y+2, r24	; 0x02
    5416:	9b 83       	std	Y+3, r25	; 0x03
    5418:	c3 59       	subi	r28, 0x93	; 147
    541a:	d0 40       	sbci	r29, 0x00	; 0
    541c:	f1 01       	movw	r30, r2
    541e:	a1 91       	ld	r26, Z+
    5420:	b1 91       	ld	r27, Z+
    5422:	1f 01       	movw	r2, r30
    5424:	9d 01       	movw	r18, r26
    5426:	0e 94 a4 52 	call	0xa548	; 0xa548 <__mulhisi3>
    542a:	0e 94 67 4a 	call	0x94ce	; 0x94ce <__floatsisf>
    542e:	9b 01       	movw	r18, r22
    5430:	ac 01       	movw	r20, r24
    5432:	c3 01       	movw	r24, r6
    5434:	b2 01       	movw	r22, r4
    5436:	0e 94 be 48 	call	0x917c	; 0x917c <__addsf3>
    543a:	2b 01       	movw	r4, r22
    543c:	3c 01       	movw	r6, r24
    543e:	d3 94       	inc	r13
    5440:	f6 e0       	ldi	r31, 0x06	; 6
    5442:	df 12       	cpse	r13, r31
    5444:	b1 cf       	rjmp	.-158    	; 0x53a8 <calculate_innovation+0xb8>
    5446:	b3 94       	inc	r11
    5448:	cd 55       	subi	r28, 0x5D	; 93
    544a:	df 4f       	sbci	r29, 0xFF	; 255
    544c:	28 81       	ld	r18, Y
    544e:	39 81       	ldd	r19, Y+1	; 0x01
    5450:	c3 5a       	subi	r28, 0xA3	; 163
    5452:	d0 40       	sbci	r29, 0x00	; 0
    5454:	28 5e       	subi	r18, 0xE8	; 232
    5456:	3f 4f       	sbci	r19, 0xFF	; 255
    5458:	cd 55       	subi	r28, 0x5D	; 93
    545a:	df 4f       	sbci	r29, 0xFF	; 255
    545c:	28 83       	st	Y, r18
    545e:	39 83       	std	Y+1, r19	; 0x01
    5460:	c3 5a       	subi	r28, 0xA3	; 163
    5462:	d0 40       	sbci	r29, 0x00	; 0
    5464:	cb 55       	subi	r28, 0x5B	; 91
    5466:	df 4f       	sbci	r29, 0xFF	; 255
    5468:	88 81       	ld	r24, Y
    546a:	99 81       	ldd	r25, Y+1	; 0x01
    546c:	c5 5a       	subi	r28, 0xA5	; 165
    546e:	d0 40       	sbci	r29, 0x00	; 0
    5470:	0c 96       	adiw	r24, 0x0c	; 12
    5472:	cb 55       	subi	r28, 0x5B	; 91
    5474:	df 4f       	sbci	r29, 0xFF	; 255
    5476:	88 83       	st	Y, r24
    5478:	99 83       	std	Y+1, r25	; 0x01
    547a:	c5 5a       	subi	r28, 0xA5	; 165
    547c:	d0 40       	sbci	r29, 0x00	; 0
    547e:	bf 16       	cp	r11, r31
    5480:	71 f0       	breq	.+28     	; 0x549e <calculate_innovation+0x1ae>
    5482:	cb 55       	subi	r28, 0x5B	; 91
    5484:	df 4f       	sbci	r29, 0xFF	; 255
    5486:	28 80       	ld	r2, Y
    5488:	39 80       	ldd	r3, Y+1	; 0x01
    548a:	c5 5a       	subi	r28, 0xA5	; 165
    548c:	d0 40       	sbci	r29, 0x00	; 0
    548e:	cd 55       	subi	r28, 0x5D	; 93
    5490:	df 4f       	sbci	r29, 0xFF	; 255
    5492:	88 80       	ld	r8, Y
    5494:	99 80       	ldd	r9, Y+1	; 0x01
    5496:	c3 5a       	subi	r28, 0xA3	; 163
    5498:	d0 40       	sbci	r29, 0x00	; 0
    549a:	d1 2c       	mov	r13, r1
    549c:	85 cf       	rjmp	.-246    	; 0x53a8 <calculate_innovation+0xb8>
    549e:	43 01       	movw	r8, r6
    54a0:	32 01       	movw	r6, r4
    54a2:	20 e0       	ldi	r18, 0x00	; 0
    54a4:	30 e0       	ldi	r19, 0x00	; 0
    54a6:	40 e0       	ldi	r20, 0x00	; 0
    54a8:	5f eb       	ldi	r21, 0xBF	; 191
    54aa:	cd 56       	subi	r28, 0x6D	; 109
    54ac:	df 4f       	sbci	r29, 0xFF	; 255
    54ae:	68 81       	ld	r22, Y
    54b0:	79 81       	ldd	r23, Y+1	; 0x01
    54b2:	8a 81       	ldd	r24, Y+2	; 0x02
    54b4:	9b 81       	ldd	r25, Y+3	; 0x03
    54b6:	c3 59       	subi	r28, 0x93	; 147
    54b8:	d0 40       	sbci	r29, 0x00	; 0
    54ba:	0e 94 33 4d 	call	0x9a66	; 0x9a66 <pow>
    54be:	e6 2e       	mov	r14, r22
    54c0:	37 2e       	mov	r3, r23
    54c2:	28 2e       	mov	r2, r24
    54c4:	c9 56       	subi	r28, 0x69	; 105
    54c6:	df 4f       	sbci	r29, 0xFF	; 255
    54c8:	98 83       	st	Y, r25
    54ca:	c7 59       	subi	r28, 0x97	; 151
    54cc:	d0 40       	sbci	r29, 0x00	; 0
    54ce:	20 e0       	ldi	r18, 0x00	; 0
    54d0:	30 e0       	ldi	r19, 0x00	; 0
    54d2:	40 e0       	ldi	r20, 0x00	; 0
    54d4:	5f eb       	ldi	r21, 0xBF	; 191
    54d6:	c4 01       	movw	r24, r8
    54d8:	b3 01       	movw	r22, r6
    54da:	0e 94 33 4d 	call	0x9a66	; 0x9a66 <pow>
    54de:	c5 56       	subi	r28, 0x65	; 101
    54e0:	df 4f       	sbci	r29, 0xFF	; 255
    54e2:	68 83       	st	Y, r22
    54e4:	cb 59       	subi	r28, 0x9B	; 155
    54e6:	d0 40       	sbci	r29, 0x00	; 0
    54e8:	c1 56       	subi	r28, 0x61	; 97
    54ea:	df 4f       	sbci	r29, 0xFF	; 255
    54ec:	78 83       	st	Y, r23
    54ee:	cf 59       	subi	r28, 0x9F	; 159
    54f0:	d0 40       	sbci	r29, 0x00	; 0
    54f2:	cd 55       	subi	r28, 0x5D	; 93
    54f4:	df 4f       	sbci	r29, 0xFF	; 255
    54f6:	88 83       	st	Y, r24
    54f8:	c3 5a       	subi	r28, 0xA3	; 163
    54fa:	d0 40       	sbci	r29, 0x00	; 0
    54fc:	cb 55       	subi	r28, 0x5B	; 91
    54fe:	df 4f       	sbci	r29, 0xFF	; 255
    5500:	98 83       	st	Y, r25
    5502:	c5 5a       	subi	r28, 0xA5	; 165
    5504:	d0 40       	sbci	r29, 0x00	; 0
    5506:	fe 01       	movw	r30, r28
    5508:	ef 56       	subi	r30, 0x6F	; 111
    550a:	ff 4f       	sbci	r31, 0xFF	; 255
    550c:	cf 56       	subi	r28, 0x6F	; 111
    550e:	df 4f       	sbci	r29, 0xFF	; 255
    5510:	e8 83       	st	Y, r30
    5512:	f9 83       	std	Y+1, r31	; 0x01
    5514:	c1 59       	subi	r28, 0x91	; 145
    5516:	d0 40       	sbci	r29, 0x00	; 0
    5518:	41 2c       	mov	r4, r1
    551a:	51 2c       	mov	r5, r1
    551c:	32 01       	movw	r6, r4
    551e:	0e 2d       	mov	r16, r14
    5520:	76 c0       	rjmp	.+236    	; 0x560e <calculate_innovation+0x31e>
    5522:	f6 01       	movw	r30, r12
    5524:	61 91       	ld	r22, Z+
    5526:	71 91       	ld	r23, Z+
    5528:	6f 01       	movw	r12, r30
    552a:	f7 01       	movw	r30, r14
    552c:	81 90       	ld	r8, Z+
    552e:	91 90       	ld	r9, Z+
    5530:	a1 90       	ld	r10, Z+
    5532:	b1 90       	ld	r11, Z+
    5534:	7f 01       	movw	r14, r30
    5536:	07 2e       	mov	r0, r23
    5538:	00 0c       	add	r0, r0
    553a:	88 0b       	sbc	r24, r24
    553c:	99 0b       	sbc	r25, r25
    553e:	0e 94 67 4a 	call	0x94ce	; 0x94ce <__floatsisf>
    5542:	c5 56       	subi	r28, 0x65	; 101
    5544:	df 4f       	sbci	r29, 0xFF	; 255
    5546:	28 81       	ld	r18, Y
    5548:	cb 59       	subi	r28, 0x9B	; 155
    554a:	d0 40       	sbci	r29, 0x00	; 0
    554c:	c1 56       	subi	r28, 0x61	; 97
    554e:	df 4f       	sbci	r29, 0xFF	; 255
    5550:	38 81       	ld	r19, Y
    5552:	cf 59       	subi	r28, 0x9F	; 159
    5554:	d0 40       	sbci	r29, 0x00	; 0
    5556:	cd 55       	subi	r28, 0x5D	; 93
    5558:	df 4f       	sbci	r29, 0xFF	; 255
    555a:	48 81       	ld	r20, Y
    555c:	c3 5a       	subi	r28, 0xA3	; 163
    555e:	d0 40       	sbci	r29, 0x00	; 0
    5560:	cb 55       	subi	r28, 0x5B	; 91
    5562:	df 4f       	sbci	r29, 0xFF	; 255
    5564:	58 81       	ld	r21, Y
    5566:	c5 5a       	subi	r28, 0xA5	; 165
    5568:	d0 40       	sbci	r29, 0x00	; 0
    556a:	0e 94 c6 4c 	call	0x998c	; 0x998c <__mulsf3>
    556e:	cd 56       	subi	r28, 0x6D	; 109
    5570:	df 4f       	sbci	r29, 0xFF	; 255
    5572:	68 83       	st	Y, r22
    5574:	79 83       	std	Y+1, r23	; 0x01
    5576:	8a 83       	std	Y+2, r24	; 0x02
    5578:	9b 83       	std	Y+3, r25	; 0x03
    557a:	c3 59       	subi	r28, 0x93	; 147
    557c:	d0 40       	sbci	r29, 0x00	; 0
    557e:	20 2f       	mov	r18, r16
    5580:	33 2d       	mov	r19, r3
    5582:	42 2d       	mov	r20, r2
    5584:	c9 56       	subi	r28, 0x69	; 105
    5586:	df 4f       	sbci	r29, 0xFF	; 255
    5588:	58 81       	ld	r21, Y
    558a:	c7 59       	subi	r28, 0x97	; 151
    558c:	d0 40       	sbci	r29, 0x00	; 0
    558e:	c5 01       	movw	r24, r10
    5590:	b4 01       	movw	r22, r8
    5592:	0e 94 c6 4c 	call	0x998c	; 0x998c <__mulsf3>
    5596:	9b 01       	movw	r18, r22
    5598:	ac 01       	movw	r20, r24
    559a:	cd 56       	subi	r28, 0x6D	; 109
    559c:	df 4f       	sbci	r29, 0xFF	; 255
    559e:	68 81       	ld	r22, Y
    55a0:	79 81       	ldd	r23, Y+1	; 0x01
    55a2:	8a 81       	ldd	r24, Y+2	; 0x02
    55a4:	9b 81       	ldd	r25, Y+3	; 0x03
    55a6:	c3 59       	subi	r28, 0x93	; 147
    55a8:	d0 40       	sbci	r29, 0x00	; 0
    55aa:	0e 94 bd 48 	call	0x917a	; 0x917a <__subsf3>
    55ae:	9b 01       	movw	r18, r22
    55b0:	ac 01       	movw	r20, r24
    55b2:	5f 77       	andi	r21, 0x7F	; 127
    55b4:	c3 01       	movw	r24, r6
    55b6:	b2 01       	movw	r22, r4
    55b8:	0e 94 be 48 	call	0x917c	; 0x917c <__addsf3>
    55bc:	2b 01       	movw	r4, r22
    55be:	3c 01       	movw	r6, r24
    55c0:	11 50       	subi	r17, 0x01	; 1
    55c2:	09 f0       	breq	.+2      	; 0x55c6 <calculate_innovation+0x2d6>
    55c4:	ae cf       	rjmp	.-164    	; 0x5522 <calculate_innovation+0x232>
    55c6:	c7 55       	subi	r28, 0x57	; 87
    55c8:	df 4f       	sbci	r29, 0xFF	; 255
    55ca:	28 81       	ld	r18, Y
    55cc:	39 81       	ldd	r19, Y+1	; 0x01
    55ce:	c9 5a       	subi	r28, 0xA9	; 169
    55d0:	d0 40       	sbci	r29, 0x00	; 0
    55d2:	24 5f       	subi	r18, 0xF4	; 244
    55d4:	3f 4f       	sbci	r19, 0xFF	; 255
    55d6:	c7 55       	subi	r28, 0x57	; 87
    55d8:	df 4f       	sbci	r29, 0xFF	; 255
    55da:	28 83       	st	Y, r18
    55dc:	39 83       	std	Y+1, r19	; 0x01
    55de:	c9 5a       	subi	r28, 0xA9	; 169
    55e0:	d0 40       	sbci	r29, 0x00	; 0
    55e2:	c9 55       	subi	r28, 0x59	; 89
    55e4:	df 4f       	sbci	r29, 0xFF	; 255
    55e6:	88 81       	ld	r24, Y
    55e8:	99 81       	ldd	r25, Y+1	; 0x01
    55ea:	c7 5a       	subi	r28, 0xA7	; 167
    55ec:	d0 40       	sbci	r29, 0x00	; 0
    55ee:	48 96       	adiw	r24, 0x18	; 24
    55f0:	c9 55       	subi	r28, 0x59	; 89
    55f2:	df 4f       	sbci	r29, 0xFF	; 255
    55f4:	88 83       	st	Y, r24
    55f6:	99 83       	std	Y+1, r25	; 0x01
    55f8:	c7 5a       	subi	r28, 0xA7	; 167
    55fa:	d0 40       	sbci	r29, 0x00	; 0
    55fc:	cf 56       	subi	r28, 0x6F	; 111
    55fe:	df 4f       	sbci	r29, 0xFF	; 255
    5600:	e8 81       	ld	r30, Y
    5602:	f9 81       	ldd	r31, Y+1	; 0x01
    5604:	c1 59       	subi	r28, 0x91	; 145
    5606:	d0 40       	sbci	r29, 0x00	; 0
    5608:	8e 17       	cp	r24, r30
    560a:	9f 07       	cpc	r25, r31
    560c:	89 f0       	breq	.+34     	; 0x5630 <calculate_innovation+0x340>
    560e:	c9 55       	subi	r28, 0x59	; 89
    5610:	df 4f       	sbci	r29, 0xFF	; 255
    5612:	c8 80       	ld	r12, Y
    5614:	d9 80       	ldd	r13, Y+1	; 0x01
    5616:	c7 5a       	subi	r28, 0xA7	; 167
    5618:	d0 40       	sbci	r29, 0x00	; 0
    561a:	c7 55       	subi	r28, 0x57	; 87
    561c:	df 4f       	sbci	r29, 0xFF	; 255
    561e:	e8 80       	ld	r14, Y
    5620:	f9 80       	ldd	r15, Y+1	; 0x01
    5622:	c9 5a       	subi	r28, 0xA9	; 169
    5624:	d0 40       	sbci	r29, 0x00	; 0
    5626:	16 e0       	ldi	r17, 0x06	; 6
    5628:	c7 01       	movw	r24, r14
    562a:	76 01       	movw	r14, r12
    562c:	6c 01       	movw	r12, r24
    562e:	79 cf       	rjmp	.-270    	; 0x5522 <calculate_innovation+0x232>
    5630:	c3 01       	movw	r24, r6
    5632:	b2 01       	movw	r22, r4
    5634:	c6 55       	subi	r28, 0x56	; 86
    5636:	df 4f       	sbci	r29, 0xFF	; 255
    5638:	cd bf       	out	0x3d, r28	; 61
    563a:	de bf       	out	0x3e, r29	; 62
    563c:	df 91       	pop	r29
    563e:	cf 91       	pop	r28
    5640:	1f 91       	pop	r17
    5642:	0f 91       	pop	r16
    5644:	ff 90       	pop	r15
    5646:	ef 90       	pop	r14
    5648:	df 90       	pop	r13
    564a:	cf 90       	pop	r12
    564c:	bf 90       	pop	r11
    564e:	af 90       	pop	r10
    5650:	9f 90       	pop	r9
    5652:	8f 90       	pop	r8
    5654:	7f 90       	pop	r7
    5656:	6f 90       	pop	r6
    5658:	5f 90       	pop	r5
    565a:	4f 90       	pop	r4
    565c:	3f 90       	pop	r3
    565e:	2f 90       	pop	r2
    5660:	08 95       	ret

00005662 <calculate_bearing_and_heading>:
    5662:	2f 92       	push	r2
    5664:	3f 92       	push	r3
    5666:	4f 92       	push	r4
    5668:	5f 92       	push	r5
    566a:	6f 92       	push	r6
    566c:	7f 92       	push	r7
    566e:	8f 92       	push	r8
    5670:	9f 92       	push	r9
    5672:	af 92       	push	r10
    5674:	bf 92       	push	r11
    5676:	cf 92       	push	r12
    5678:	df 92       	push	r13
    567a:	ef 92       	push	r14
    567c:	ff 92       	push	r15
    567e:	0f 93       	push	r16
    5680:	1f 93       	push	r17
    5682:	cf 93       	push	r28
    5684:	df 93       	push	r29
    5686:	cd b7       	in	r28, 0x3d	; 61
    5688:	de b7       	in	r29, 0x3e	; 62
    568a:	62 97       	sbiw	r28, 0x12	; 18
    568c:	cd bf       	out	0x3d, r28	; 61
    568e:	de bf       	out	0x3e, r29	; 62
    5690:	8d 87       	std	Y+13, r24	; 0x0d
    5692:	9e 87       	std	Y+14, r25	; 0x0e
    5694:	6f 87       	std	Y+15, r22	; 0x0f
    5696:	78 8b       	std	Y+16, r23	; 0x10
    5698:	0f 2e       	mov	r0, r31
    569a:	fe ee       	ldi	r31, 0xEE	; 238
    569c:	8f 2e       	mov	r8, r31
    569e:	fa e2       	ldi	r31, 0x2A	; 42
    56a0:	9f 2e       	mov	r9, r31
    56a2:	f0 2d       	mov	r31, r0
    56a4:	21 2c       	mov	r2, r1
    56a6:	41 2c       	mov	r4, r1
    56a8:	51 2c       	mov	r5, r1
    56aa:	32 01       	movw	r6, r4
    56ac:	49 86       	std	Y+9, r4	; 0x09
    56ae:	5a 86       	std	Y+10, r5	; 0x0a
    56b0:	6b 86       	std	Y+11, r6	; 0x0b
    56b2:	7c 86       	std	Y+12, r7	; 0x0c
    56b4:	4d 82       	std	Y+5, r4	; 0x05
    56b6:	5e 82       	std	Y+6, r5	; 0x06
    56b8:	6f 82       	std	Y+7, r6	; 0x07
    56ba:	78 86       	std	Y+8, r7	; 0x08
    56bc:	49 82       	std	Y+1, r4	; 0x01
    56be:	5a 82       	std	Y+2, r5	; 0x02
    56c0:	6b 82       	std	Y+3, r6	; 0x03
    56c2:	7c 82       	std	Y+4, r7	; 0x04
    56c4:	0f 2e       	mov	r0, r31
    56c6:	f6 e0       	ldi	r31, 0x06	; 6
    56c8:	af 2e       	mov	r10, r31
    56ca:	b1 2c       	mov	r11, r1
    56cc:	f0 2d       	mov	r31, r0
    56ce:	73 01       	movw	r14, r6
    56d0:	62 01       	movw	r12, r4
    56d2:	12 2d       	mov	r17, r2
    56d4:	14 01       	movw	r2, r8
    56d6:	f1 01       	movw	r30, r2
    56d8:	61 91       	ld	r22, Z+
    56da:	71 91       	ld	r23, Z+
    56dc:	1f 01       	movw	r2, r30
    56de:	07 2e       	mov	r0, r23
    56e0:	00 0c       	add	r0, r0
    56e2:	88 0b       	sbc	r24, r24
    56e4:	99 0b       	sbc	r25, r25
    56e6:	0e 94 67 4a 	call	0x94ce	; 0x94ce <__floatsisf>
    56ea:	2b 01       	movw	r4, r22
    56ec:	3c 01       	movw	r6, r24
    56ee:	fb ea       	ldi	r31, 0xAB	; 171
    56f0:	1f 9f       	mul	r17, r31
    56f2:	01 2d       	mov	r16, r1
    56f4:	11 24       	eor	r1, r1
    56f6:	06 95       	lsr	r16
    56f8:	06 95       	lsr	r16
    56fa:	80 2f       	mov	r24, r16
    56fc:	88 0f       	add	r24, r24
    56fe:	80 0f       	add	r24, r16
    5700:	88 0f       	add	r24, r24
    5702:	81 2e       	mov	r8, r17
    5704:	88 1a       	sub	r8, r24
    5706:	91 2c       	mov	r9, r1
    5708:	c4 01       	movw	r24, r8
    570a:	88 0f       	add	r24, r24
    570c:	99 1f       	adc	r25, r25
    570e:	88 0f       	add	r24, r24
    5710:	99 1f       	adc	r25, r25
    5712:	88 0f       	add	r24, r24
    5714:	99 1f       	adc	r25, r25
    5716:	9c 01       	movw	r18, r24
    5718:	24 55       	subi	r18, 0x54	; 84
    571a:	3d 4d       	sbci	r19, 0xDD	; 221
    571c:	29 8b       	std	Y+17, r18	; 0x11
    571e:	3a 8b       	std	Y+18, r19	; 0x12
    5720:	f9 01       	movw	r30, r18
    5722:	20 81       	ld	r18, Z
    5724:	31 81       	ldd	r19, Z+1	; 0x01
    5726:	42 81       	ldd	r20, Z+2	; 0x02
    5728:	53 81       	ldd	r21, Z+3	; 0x03
    572a:	c3 01       	movw	r24, r6
    572c:	b2 01       	movw	r22, r4
    572e:	0e 94 c6 4c 	call	0x998c	; 0x998c <__mulsf3>
    5732:	9b 01       	movw	r18, r22
    5734:	ac 01       	movw	r20, r24
    5736:	69 81       	ldd	r22, Y+1	; 0x01
    5738:	7a 81       	ldd	r23, Y+2	; 0x02
    573a:	8b 81       	ldd	r24, Y+3	; 0x03
    573c:	9c 81       	ldd	r25, Y+4	; 0x04
    573e:	0e 94 be 48 	call	0x917c	; 0x917c <__addsf3>
    5742:	69 83       	std	Y+1, r22	; 0x01
    5744:	7a 83       	std	Y+2, r23	; 0x02
    5746:	8b 83       	std	Y+3, r24	; 0x03
    5748:	9c 83       	std	Y+4, r25	; 0x04
    574a:	e9 89       	ldd	r30, Y+17	; 0x11
    574c:	fa 89       	ldd	r31, Y+18	; 0x12
    574e:	24 81       	ldd	r18, Z+4	; 0x04
    5750:	35 81       	ldd	r19, Z+5	; 0x05
    5752:	46 81       	ldd	r20, Z+6	; 0x06
    5754:	57 81       	ldd	r21, Z+7	; 0x07
    5756:	c3 01       	movw	r24, r6
    5758:	b2 01       	movw	r22, r4
    575a:	0e 94 c6 4c 	call	0x998c	; 0x998c <__mulsf3>
    575e:	9b 01       	movw	r18, r22
    5760:	ac 01       	movw	r20, r24
    5762:	6d 81       	ldd	r22, Y+5	; 0x05
    5764:	7e 81       	ldd	r23, Y+6	; 0x06
    5766:	8f 81       	ldd	r24, Y+7	; 0x07
    5768:	98 85       	ldd	r25, Y+8	; 0x08
    576a:	0e 94 be 48 	call	0x917c	; 0x917c <__addsf3>
    576e:	6d 83       	std	Y+5, r22	; 0x05
    5770:	7e 83       	std	Y+6, r23	; 0x06
    5772:	8f 83       	std	Y+7, r24	; 0x07
    5774:	98 87       	std	Y+8, r25	; 0x08
    5776:	c5 01       	movw	r24, r10
    5778:	80 1b       	sub	r24, r16
    577a:	91 09       	sbc	r25, r1
    577c:	88 0d       	add	r24, r8
    577e:	99 1d       	adc	r25, r9
    5780:	b5 01       	movw	r22, r10
    5782:	0e 94 66 52 	call	0xa4cc	; 0xa4cc <__divmodhi4>
    5786:	88 0f       	add	r24, r24
    5788:	99 1f       	adc	r25, r25
    578a:	88 0f       	add	r24, r24
    578c:	99 1f       	adc	r25, r25
    578e:	88 0f       	add	r24, r24
    5790:	99 1f       	adc	r25, r25
    5792:	9c 01       	movw	r18, r24
    5794:	24 58       	subi	r18, 0x84	; 132
    5796:	3d 4d       	sbci	r19, 0xDD	; 221
    5798:	49 01       	movw	r8, r18
    579a:	f9 01       	movw	r30, r18
    579c:	20 81       	ld	r18, Z
    579e:	31 81       	ldd	r19, Z+1	; 0x01
    57a0:	42 81       	ldd	r20, Z+2	; 0x02
    57a2:	53 81       	ldd	r21, Z+3	; 0x03
    57a4:	c3 01       	movw	r24, r6
    57a6:	b2 01       	movw	r22, r4
    57a8:	0e 94 c6 4c 	call	0x998c	; 0x998c <__mulsf3>
    57ac:	9b 01       	movw	r18, r22
    57ae:	ac 01       	movw	r20, r24
    57b0:	69 85       	ldd	r22, Y+9	; 0x09
    57b2:	7a 85       	ldd	r23, Y+10	; 0x0a
    57b4:	8b 85       	ldd	r24, Y+11	; 0x0b
    57b6:	9c 85       	ldd	r25, Y+12	; 0x0c
    57b8:	0e 94 be 48 	call	0x917c	; 0x917c <__addsf3>
    57bc:	69 87       	std	Y+9, r22	; 0x09
    57be:	7a 87       	std	Y+10, r23	; 0x0a
    57c0:	8b 87       	std	Y+11, r24	; 0x0b
    57c2:	9c 87       	std	Y+12, r25	; 0x0c
    57c4:	f4 01       	movw	r30, r8
    57c6:	24 81       	ldd	r18, Z+4	; 0x04
    57c8:	35 81       	ldd	r19, Z+5	; 0x05
    57ca:	46 81       	ldd	r20, Z+6	; 0x06
    57cc:	57 81       	ldd	r21, Z+7	; 0x07
    57ce:	c3 01       	movw	r24, r6
    57d0:	b2 01       	movw	r22, r4
    57d2:	0e 94 c6 4c 	call	0x998c	; 0x998c <__mulsf3>
    57d6:	9b 01       	movw	r18, r22
    57d8:	ac 01       	movw	r20, r24
    57da:	c7 01       	movw	r24, r14
    57dc:	b6 01       	movw	r22, r12
    57de:	0e 94 be 48 	call	0x917c	; 0x917c <__addsf3>
    57e2:	6b 01       	movw	r12, r22
    57e4:	7c 01       	movw	r14, r24
    57e6:	1f 5f       	subi	r17, 0xFF	; 255
    57e8:	14 32       	cpi	r17, 0x24	; 36
    57ea:	09 f0       	breq	.+2      	; 0x57ee <calculate_bearing_and_heading+0x18c>
    57ec:	74 cf       	rjmp	.-280    	; 0x56d6 <calculate_bearing_and_heading+0x74>
    57ee:	29 81       	ldd	r18, Y+1	; 0x01
    57f0:	3a 81       	ldd	r19, Y+2	; 0x02
    57f2:	4b 81       	ldd	r20, Y+3	; 0x03
    57f4:	5c 81       	ldd	r21, Y+4	; 0x04
    57f6:	6d 81       	ldd	r22, Y+5	; 0x05
    57f8:	7e 81       	ldd	r23, Y+6	; 0x06
    57fa:	8f 81       	ldd	r24, Y+7	; 0x07
    57fc:	98 85       	ldd	r25, Y+8	; 0x08
    57fe:	0e 94 3d 49 	call	0x927a	; 0x927a <atan2>
    5802:	ed 85       	ldd	r30, Y+13	; 0x0d
    5804:	fe 85       	ldd	r31, Y+14	; 0x0e
    5806:	60 83       	st	Z, r22
    5808:	71 83       	std	Z+1, r23	; 0x01
    580a:	82 83       	std	Z+2, r24	; 0x02
    580c:	93 83       	std	Z+3, r25	; 0x03
    580e:	29 85       	ldd	r18, Y+9	; 0x09
    5810:	3a 85       	ldd	r19, Y+10	; 0x0a
    5812:	4b 85       	ldd	r20, Y+11	; 0x0b
    5814:	5c 85       	ldd	r21, Y+12	; 0x0c
    5816:	c7 01       	movw	r24, r14
    5818:	b6 01       	movw	r22, r12
    581a:	0e 94 3d 49 	call	0x927a	; 0x927a <atan2>
    581e:	ef 85       	ldd	r30, Y+15	; 0x0f
    5820:	f8 89       	ldd	r31, Y+16	; 0x10
    5822:	60 83       	st	Z, r22
    5824:	71 83       	std	Z+1, r23	; 0x01
    5826:	82 83       	std	Z+2, r24	; 0x02
    5828:	93 83       	std	Z+3, r25	; 0x03
    582a:	62 96       	adiw	r28, 0x12	; 18
    582c:	cd bf       	out	0x3d, r28	; 61
    582e:	de bf       	out	0x3e, r29	; 62
    5830:	df 91       	pop	r29
    5832:	cf 91       	pop	r28
    5834:	1f 91       	pop	r17
    5836:	0f 91       	pop	r16
    5838:	ff 90       	pop	r15
    583a:	ef 90       	pop	r14
    583c:	df 90       	pop	r13
    583e:	cf 90       	pop	r12
    5840:	bf 90       	pop	r11
    5842:	af 90       	pop	r10
    5844:	9f 90       	pop	r9
    5846:	8f 90       	pop	r8
    5848:	7f 90       	pop	r7
    584a:	6f 90       	pop	r6
    584c:	5f 90       	pop	r5
    584e:	4f 90       	pop	r4
    5850:	3f 90       	pop	r3
    5852:	2f 90       	pop	r2
    5854:	08 95       	ret

00005856 <processBrightMeas>:
    5856:	6f 92       	push	r6
    5858:	7f 92       	push	r7
    585a:	8f 92       	push	r8
    585c:	9f 92       	push	r9
    585e:	af 92       	push	r10
    5860:	bf 92       	push	r11
    5862:	cf 92       	push	r12
    5864:	df 92       	push	r13
    5866:	ef 92       	push	r14
    5868:	ff 92       	push	r15
    586a:	0f 93       	push	r16
    586c:	1f 93       	push	r17
    586e:	cf 93       	push	r28
    5870:	df 93       	push	r29
    5872:	6e ee       	ldi	r22, 0xEE	; 238
    5874:	7a e2       	ldi	r23, 0x2A	; 42
    5876:	0f 2e       	mov	r0, r31
    5878:	f6 e3       	ldi	r31, 0x36	; 54
    587a:	ef 2e       	mov	r14, r31
    587c:	fb e2       	ldi	r31, 0x2B	; 43
    587e:	ff 2e       	mov	r15, r31
    5880:	f0 2d       	mov	r31, r0
    5882:	0f 2e       	mov	r0, r31
    5884:	ff e3       	ldi	r31, 0x3F	; 63
    5886:	bf 2e       	mov	r11, r31
    5888:	f0 2d       	mov	r31, r0
    588a:	00 e0       	ldi	r16, 0x00	; 0
    588c:	10 e0       	ldi	r17, 0x00	; 0
    588e:	2f c0       	rjmp	.+94     	; 0x58ee <processBrightMeas+0x98>
    5890:	df 01       	movw	r26, r30
    5892:	40 81       	ld	r20, Z
    5894:	51 81       	ldd	r21, Z+1	; 0x01
    5896:	81 e0       	ldi	r24, 0x01	; 1
    5898:	90 e0       	ldi	r25, 0x00	; 0
    589a:	41 15       	cp	r20, r1
    589c:	51 05       	cpc	r21, r1
    589e:	11 f4       	brne	.+4      	; 0x58a4 <processBrightMeas+0x4e>
    58a0:	80 e0       	ldi	r24, 0x00	; 0
    58a2:	90 e0       	ldi	r25, 0x00	; 0
    58a4:	02 2e       	mov	r0, r18
    58a6:	02 c0       	rjmp	.+4      	; 0x58ac <processBrightMeas+0x56>
    58a8:	88 0f       	add	r24, r24
    58aa:	99 1f       	adc	r25, r25
    58ac:	0a 94       	dec	r0
    58ae:	e2 f7       	brpl	.-8      	; 0x58a8 <processBrightMeas+0x52>
    58b0:	80 95       	com	r24
    58b2:	b8 22       	and	r11, r24
    58b4:	c1 e0       	ldi	r28, 0x01	; 1
    58b6:	d0 e0       	ldi	r29, 0x00	; 0
    58b8:	14 16       	cp	r1, r20
    58ba:	15 06       	cpc	r1, r21
    58bc:	14 f0       	brlt	.+4      	; 0x58c2 <processBrightMeas+0x6c>
    58be:	c0 e0       	ldi	r28, 0x00	; 0
    58c0:	d0 e0       	ldi	r29, 0x00	; 0
    58c2:	c4 9f       	mul	r28, r20
    58c4:	c0 01       	movw	r24, r0
    58c6:	c5 9f       	mul	r28, r21
    58c8:	90 0d       	add	r25, r0
    58ca:	d4 9f       	mul	r29, r20
    58cc:	90 0d       	add	r25, r0
    58ce:	11 24       	eor	r1, r1
    58d0:	8d 93       	st	X+, r24
    58d2:	9c 93       	st	X, r25
    58d4:	32 96       	adiw	r30, 0x02	; 2
    58d6:	08 0f       	add	r16, r24
    58d8:	19 1f       	adc	r17, r25
    58da:	2f 5f       	subi	r18, 0xFF	; 255
    58dc:	3f 4f       	sbci	r19, 0xFF	; 255
    58de:	26 30       	cpi	r18, 0x06	; 6
    58e0:	31 05       	cpc	r19, r1
    58e2:	b1 f6       	brne	.-84     	; 0x5890 <processBrightMeas+0x3a>
    58e4:	64 5f       	subi	r22, 0xF4	; 244
    58e6:	7f 4f       	sbci	r23, 0xFF	; 255
    58e8:	6e 15       	cp	r22, r14
    58ea:	7f 05       	cpc	r23, r15
    58ec:	21 f0       	breq	.+8      	; 0x58f6 <processBrightMeas+0xa0>
    58ee:	fb 01       	movw	r30, r22
    58f0:	20 e0       	ldi	r18, 0x00	; 0
    58f2:	30 e0       	ldi	r19, 0x00	; 0
    58f4:	cd cf       	rjmp	.-102    	; 0x5890 <processBrightMeas+0x3a>
    58f6:	c1 2c       	mov	r12, r1
    58f8:	d1 2c       	mov	r13, r1
    58fa:	e1 2c       	mov	r14, r1
    58fc:	f1 2c       	mov	r15, r1
    58fe:	e0 e0       	ldi	r30, 0x00	; 0
    5900:	cb 2d       	mov	r28, r11
    5902:	d0 e0       	ldi	r29, 0x00	; 0
    5904:	0f 2e       	mov	r0, r31
    5906:	ff e0       	ldi	r31, 0x0F	; 15
    5908:	af 2e       	mov	r10, r31
    590a:	b1 2c       	mov	r11, r1
    590c:	f0 2d       	mov	r31, r0
    590e:	88 24       	eor	r8, r8
    5910:	83 94       	inc	r8
    5912:	91 2c       	mov	r9, r1
    5914:	0f 2e       	mov	r0, r31
    5916:	f7 e9       	ldi	r31, 0x97	; 151
    5918:	6f 2e       	mov	r6, r31
    591a:	f7 e0       	ldi	r31, 0x07	; 7
    591c:	7f 2e       	mov	r7, r31
    591e:	f0 2d       	mov	r31, r0
    5920:	2e 2d       	mov	r18, r14
    5922:	3f 2d       	mov	r19, r15
    5924:	ce 01       	movw	r24, r28
    5926:	0e 2c       	mov	r0, r14
    5928:	02 c0       	rjmp	.+4      	; 0x592e <processBrightMeas+0xd8>
    592a:	95 95       	asr	r25
    592c:	87 95       	ror	r24
    592e:	0a 94       	dec	r0
    5930:	e2 f7       	brpl	.-8      	; 0x592a <processBrightMeas+0xd4>
    5932:	80 ff       	sbrs	r24, 0
    5934:	20 c0       	rjmp	.+64     	; 0x5976 <processBrightMeas+0x120>
    5936:	c4 01       	movw	r24, r8
    5938:	0c 2c       	mov	r0, r12
    593a:	02 c0       	rjmp	.+4      	; 0x5940 <processBrightMeas+0xea>
    593c:	88 0f       	add	r24, r24
    593e:	99 1f       	adc	r25, r25
    5940:	0a 94       	dec	r0
    5942:	e2 f7       	brpl	.-8      	; 0x593c <processBrightMeas+0xe6>
    5944:	09 2e       	mov	r0, r25
    5946:	00 0c       	add	r0, r0
    5948:	aa 0b       	sbc	r26, r26
    594a:	bb 0b       	sbc	r27, r27
    594c:	40 91 e8 28 	lds	r20, 0x28E8	; 0x8028e8 <sensorHealthHistory>
    5950:	50 91 e9 28 	lds	r21, 0x28E9	; 0x8028e9 <sensorHealthHistory+0x1>
    5954:	60 91 ea 28 	lds	r22, 0x28EA	; 0x8028ea <sensorHealthHistory+0x2>
    5958:	70 91 eb 28 	lds	r23, 0x28EB	; 0x8028eb <sensorHealthHistory+0x3>
    595c:	84 0f       	add	r24, r20
    595e:	95 1f       	adc	r25, r21
    5960:	a6 1f       	adc	r26, r22
    5962:	b7 1f       	adc	r27, r23
    5964:	80 93 e8 28 	sts	0x28E8, r24	; 0x8028e8 <sensorHealthHistory>
    5968:	90 93 e9 28 	sts	0x28E9, r25	; 0x8028e9 <sensorHealthHistory+0x1>
    596c:	a0 93 ea 28 	sts	0x28EA, r26	; 0x8028ea <sensorHealthHistory+0x2>
    5970:	b0 93 eb 28 	sts	0x28EB, r27	; 0x8028eb <sensorHealthHistory+0x3>
    5974:	21 c0       	rjmp	.+66     	; 0x59b8 <processBrightMeas+0x162>
    5976:	c5 01       	movw	r24, r10
    5978:	0c 2c       	mov	r0, r12
    597a:	02 c0       	rjmp	.+4      	; 0x5980 <processBrightMeas+0x12a>
    597c:	88 0f       	add	r24, r24
    597e:	99 1f       	adc	r25, r25
    5980:	0a 94       	dec	r0
    5982:	e2 f7       	brpl	.-8      	; 0x597c <processBrightMeas+0x126>
    5984:	80 95       	com	r24
    5986:	90 95       	com	r25
    5988:	09 2e       	mov	r0, r25
    598a:	00 0c       	add	r0, r0
    598c:	aa 0b       	sbc	r26, r26
    598e:	bb 0b       	sbc	r27, r27
    5990:	40 91 e8 28 	lds	r20, 0x28E8	; 0x8028e8 <sensorHealthHistory>
    5994:	50 91 e9 28 	lds	r21, 0x28E9	; 0x8028e9 <sensorHealthHistory+0x1>
    5998:	60 91 ea 28 	lds	r22, 0x28EA	; 0x8028ea <sensorHealthHistory+0x2>
    599c:	70 91 eb 28 	lds	r23, 0x28EB	; 0x8028eb <sensorHealthHistory+0x3>
    59a0:	84 23       	and	r24, r20
    59a2:	95 23       	and	r25, r21
    59a4:	a6 23       	and	r26, r22
    59a6:	b7 23       	and	r27, r23
    59a8:	80 93 e8 28 	sts	0x28E8, r24	; 0x8028e8 <sensorHealthHistory>
    59ac:	90 93 e9 28 	sts	0x28E9, r25	; 0x8028e9 <sensorHealthHistory+0x1>
    59b0:	a0 93 ea 28 	sts	0x28EA, r26	; 0x8028ea <sensorHealthHistory+0x2>
    59b4:	b0 93 eb 28 	sts	0x28EB, r27	; 0x8028eb <sensorHealthHistory+0x3>
    59b8:	80 91 e8 28 	lds	r24, 0x28E8	; 0x8028e8 <sensorHealthHistory>
    59bc:	90 91 e9 28 	lds	r25, 0x28E9	; 0x8028e9 <sensorHealthHistory+0x1>
    59c0:	a0 91 ea 28 	lds	r26, 0x28EA	; 0x8028ea <sensorHealthHistory+0x2>
    59c4:	b0 91 eb 28 	lds	r27, 0x28EB	; 0x8028eb <sensorHealthHistory+0x3>
    59c8:	0c 2c       	mov	r0, r12
    59ca:	04 c0       	rjmp	.+8      	; 0x59d4 <processBrightMeas+0x17e>
    59cc:	b6 95       	lsr	r27
    59ce:	a7 95       	ror	r26
    59d0:	97 95       	ror	r25
    59d2:	87 95       	ror	r24
    59d4:	0a 94       	dec	r0
    59d6:	d2 f7       	brpl	.-12     	; 0x59cc <processBrightMeas+0x176>
    59d8:	8f 70       	andi	r24, 0x0F	; 15
    59da:	99 27       	eor	r25, r25
    59dc:	aa 27       	eor	r26, r26
    59de:	bb 27       	eor	r27, r27
    59e0:	0f 97       	sbiw	r24, 0x0f	; 15
    59e2:	a1 05       	cpc	r26, r1
    59e4:	b1 05       	cpc	r27, r1
    59e6:	61 f5       	brne	.+88     	; 0x5a40 <processBrightMeas+0x1ea>
    59e8:	3f 93       	push	r19
    59ea:	2f 93       	push	r18
    59ec:	7f 92       	push	r7
    59ee:	6f 92       	push	r6
    59f0:	0e 94 f7 56 	call	0xadee	; 0xadee <printf_P>
    59f4:	c5 01       	movw	r24, r10
    59f6:	0c 2c       	mov	r0, r12
    59f8:	02 c0       	rjmp	.+4      	; 0x59fe <processBrightMeas+0x1a8>
    59fa:	88 0f       	add	r24, r24
    59fc:	99 1f       	adc	r25, r25
    59fe:	0a 94       	dec	r0
    5a00:	e2 f7       	brpl	.-8      	; 0x59fa <processBrightMeas+0x1a4>
    5a02:	80 95       	com	r24
    5a04:	90 95       	com	r25
    5a06:	09 2e       	mov	r0, r25
    5a08:	00 0c       	add	r0, r0
    5a0a:	aa 0b       	sbc	r26, r26
    5a0c:	bb 0b       	sbc	r27, r27
    5a0e:	40 91 e8 28 	lds	r20, 0x28E8	; 0x8028e8 <sensorHealthHistory>
    5a12:	50 91 e9 28 	lds	r21, 0x28E9	; 0x8028e9 <sensorHealthHistory+0x1>
    5a16:	60 91 ea 28 	lds	r22, 0x28EA	; 0x8028ea <sensorHealthHistory+0x2>
    5a1a:	70 91 eb 28 	lds	r23, 0x28EB	; 0x8028eb <sensorHealthHistory+0x3>
    5a1e:	84 23       	and	r24, r20
    5a20:	95 23       	and	r25, r21
    5a22:	a6 23       	and	r26, r22
    5a24:	b7 23       	and	r27, r23
    5a26:	80 93 e8 28 	sts	0x28E8, r24	; 0x8028e8 <sensorHealthHistory>
    5a2a:	90 93 e9 28 	sts	0x28E9, r25	; 0x8028e9 <sensorHealthHistory+0x1>
    5a2e:	a0 93 ea 28 	sts	0x28EA, r26	; 0x8028ea <sensorHealthHistory+0x2>
    5a32:	b0 93 eb 28 	sts	0x28EB, r27	; 0x8028eb <sensorHealthHistory+0x3>
    5a36:	0f 90       	pop	r0
    5a38:	0f 90       	pop	r0
    5a3a:	0f 90       	pop	r0
    5a3c:	0f 90       	pop	r0
    5a3e:	e1 e0       	ldi	r30, 0x01	; 1
    5a40:	8f ef       	ldi	r24, 0xFF	; 255
    5a42:	e8 1a       	sub	r14, r24
    5a44:	f8 0a       	sbc	r15, r24
    5a46:	84 e0       	ldi	r24, 0x04	; 4
    5a48:	c8 0e       	add	r12, r24
    5a4a:	d1 1c       	adc	r13, r1
    5a4c:	86 e0       	ldi	r24, 0x06	; 6
    5a4e:	e8 16       	cp	r14, r24
    5a50:	f1 04       	cpc	r15, r1
    5a52:	09 f0       	breq	.+2      	; 0x5a56 <processBrightMeas+0x200>
    5a54:	65 cf       	rjmp	.-310    	; 0x5920 <processBrightMeas+0xca>
    5a56:	e1 11       	cpse	r30, r1
    5a58:	0e 94 ea 0a 	call	0x15d4	; 0x15d4 <startup_light_sequence>
    5a5c:	c8 01       	movw	r24, r16
    5a5e:	df 91       	pop	r29
    5a60:	cf 91       	pop	r28
    5a62:	1f 91       	pop	r17
    5a64:	0f 91       	pop	r16
    5a66:	ff 90       	pop	r15
    5a68:	ef 90       	pop	r14
    5a6a:	df 90       	pop	r13
    5a6c:	cf 90       	pop	r12
    5a6e:	bf 90       	pop	r11
    5a70:	af 90       	pop	r10
    5a72:	9f 90       	pop	r9
    5a74:	8f 90       	pop	r8
    5a76:	7f 90       	pop	r7
    5a78:	6f 90       	pop	r6
    5a7a:	08 95       	ret

00005a7c <ir_range_meas>:
    5a7c:	8f 92       	push	r8
    5a7e:	9f 92       	push	r9
    5a80:	af 92       	push	r10
    5a82:	bf 92       	push	r11
    5a84:	cf 92       	push	r12
    5a86:	df 92       	push	r13
    5a88:	ef 92       	push	r14
    5a8a:	ff 92       	push	r15
    5a8c:	0f 93       	push	r16
    5a8e:	1f 93       	push	r17
    5a90:	cf 93       	push	r28
    5a92:	df 93       	push	r29
    5a94:	80 91 9b 24 	lds	r24, 0x249B	; 0x80249b <cmd_arrival_dir>
    5a98:	80 91 e5 24 	lds	r24, 0x24E5	; 0x8024e5 <cmd_sender_dir>
    5a9c:	c1 2c       	mov	r12, r1
    5a9e:	d1 2c       	mov	r13, r1
    5aa0:	76 01       	movw	r14, r12
    5aa2:	68 94       	set
    5aa4:	c3 f8       	bld	r12, 3
    5aa6:	0e 94 20 08 	call	0x1040	; 0x1040 <get_time>
    5aaa:	00 91 bb 2b 	lds	r16, 0x2BBB	; 0x802bbb <rnbCmdSentTime>
    5aae:	10 91 bc 2b 	lds	r17, 0x2BBC	; 0x802bbc <rnbCmdSentTime+0x1>
    5ab2:	20 91 bd 2b 	lds	r18, 0x2BBD	; 0x802bbd <rnbCmdSentTime+0x2>
    5ab6:	30 91 be 2b 	lds	r19, 0x2BBE	; 0x802bbe <rnbCmdSentTime+0x3>
    5aba:	46 01       	movw	r8, r12
    5abc:	57 01       	movw	r10, r14
    5abe:	80 1a       	sub	r8, r16
    5ac0:	91 0a       	sbc	r9, r17
    5ac2:	a2 0a       	sbc	r10, r18
    5ac4:	b3 0a       	sbc	r11, r19
    5ac6:	dc 01       	movw	r26, r24
    5ac8:	cb 01       	movw	r24, r22
    5aca:	88 0d       	add	r24, r8
    5acc:	99 1d       	adc	r25, r9
    5ace:	aa 1d       	adc	r26, r10
    5ad0:	bb 1d       	adc	r27, r11
    5ad2:	4e 97       	sbiw	r24, 0x1e	; 30
    5ad4:	a1 05       	cpc	r26, r1
    5ad6:	b1 05       	cpc	r27, r1
    5ad8:	30 f3       	brcs	.-52     	; 0x5aa6 <ir_range_meas+0x2a>
    5ada:	bf b6       	in	r11, 0x3f	; 63
    5adc:	f8 94       	cli
    5ade:	0e 94 20 08 	call	0x1040	; 0x1040 <get_time>
    5ae2:	6b 01       	movw	r12, r22
    5ae4:	7c 01       	movw	r14, r24
    5ae6:	0e 94 20 08 	call	0x1040	; 0x1040 <get_time>
    5aea:	dc 01       	movw	r26, r24
    5aec:	cb 01       	movw	r24, r22
    5aee:	8c 19       	sub	r24, r12
    5af0:	9d 09       	sbc	r25, r13
    5af2:	ae 09       	sbc	r26, r14
    5af4:	bf 09       	sbc	r27, r15
    5af6:	02 97       	sbiw	r24, 0x02	; 2
    5af8:	a1 05       	cpc	r26, r1
    5afa:	b1 05       	cpc	r27, r1
    5afc:	a0 f3       	brcs	.-24     	; 0x5ae6 <ir_range_meas+0x6a>
    5afe:	ce ee       	ldi	r28, 0xEE	; 238
    5b00:	da e2       	ldi	r29, 0x2A	; 42
    5b02:	06 e3       	ldi	r16, 0x36	; 54
    5b04:	1b e2       	ldi	r17, 0x2B	; 43
    5b06:	0e 94 20 08 	call	0x1040	; 0x1040 <get_time>
    5b0a:	6b 01       	movw	r12, r22
    5b0c:	7c 01       	movw	r14, r24
    5b0e:	69 e0       	ldi	r22, 0x09	; 9
    5b10:	ce 01       	movw	r24, r28
    5b12:	0e 94 bc 1f 	call	0x3f78	; 0x3f78 <get_ir_sensors>
    5b16:	0e 94 20 08 	call	0x1040	; 0x1040 <get_time>
    5b1a:	dc 01       	movw	r26, r24
    5b1c:	cb 01       	movw	r24, r22
    5b1e:	8c 19       	sub	r24, r12
    5b20:	9d 09       	sbc	r25, r13
    5b22:	ae 09       	sbc	r26, r14
    5b24:	bf 09       	sbc	r27, r15
    5b26:	08 97       	sbiw	r24, 0x08	; 8
    5b28:	a1 05       	cpc	r26, r1
    5b2a:	b1 05       	cpc	r27, r1
    5b2c:	a0 f3       	brcs	.-24     	; 0x5b16 <ir_range_meas+0x9a>
    5b2e:	88 e0       	ldi	r24, 0x08	; 8
    5b30:	90 e0       	ldi	r25, 0x00	; 0
    5b32:	0e 94 33 3a 	call	0x7466	; 0x7466 <delay_ms>
    5b36:	2c 96       	adiw	r28, 0x0c	; 12
    5b38:	c0 17       	cp	r28, r16
    5b3a:	d1 07       	cpc	r29, r17
    5b3c:	21 f7       	brne	.-56     	; 0x5b06 <ir_range_meas+0x8a>
    5b3e:	bf be       	out	0x3f, r11	; 63
    5b40:	df 91       	pop	r29
    5b42:	cf 91       	pop	r28
    5b44:	1f 91       	pop	r17
    5b46:	0f 91       	pop	r16
    5b48:	ff 90       	pop	r15
    5b4a:	ef 90       	pop	r14
    5b4c:	df 90       	pop	r13
    5b4e:	cf 90       	pop	r12
    5b50:	bf 90       	pop	r11
    5b52:	af 90       	pop	r10
    5b54:	9f 90       	pop	r9
    5b56:	8f 90       	pop	r8
    5b58:	08 95       	ret

00005b5a <ir_range_blast>:
    5b5a:	cf 92       	push	r12
    5b5c:	df 92       	push	r13
    5b5e:	ef 92       	push	r14
    5b60:	ff 92       	push	r15
    5b62:	cf 93       	push	r28
    5b64:	df 93       	push	r29
    5b66:	0e 94 20 08 	call	0x1040	; 0x1040 <get_time>
    5b6a:	c0 90 bb 2b 	lds	r12, 0x2BBB	; 0x802bbb <rnbCmdSentTime>
    5b6e:	d0 90 bc 2b 	lds	r13, 0x2BBC	; 0x802bbc <rnbCmdSentTime+0x1>
    5b72:	e0 90 bd 2b 	lds	r14, 0x2BBD	; 0x802bbd <rnbCmdSentTime+0x2>
    5b76:	f0 90 be 2b 	lds	r15, 0x2BBE	; 0x802bbe <rnbCmdSentTime+0x3>
    5b7a:	dc 01       	movw	r26, r24
    5b7c:	cb 01       	movw	r24, r22
    5b7e:	8c 19       	sub	r24, r12
    5b80:	9d 09       	sbc	r25, r13
    5b82:	ae 09       	sbc	r26, r14
    5b84:	bf 09       	sbc	r27, r15
    5b86:	4e 97       	sbiw	r24, 0x1e	; 30
    5b88:	a1 05       	cpc	r26, r1
    5b8a:	b1 05       	cpc	r27, r1
    5b8c:	60 f3       	brcs	.-40     	; 0x5b66 <ir_range_blast+0xc>
    5b8e:	df b7       	in	r29, 0x3f	; 63
    5b90:	f8 94       	cli
    5b92:	0e 94 20 08 	call	0x1040	; 0x1040 <get_time>
    5b96:	6b 01       	movw	r12, r22
    5b98:	7c 01       	movw	r14, r24
    5b9a:	80 e0       	ldi	r24, 0x00	; 0
    5b9c:	91 e0       	ldi	r25, 0x01	; 1
    5b9e:	0e 94 99 1d 	call	0x3b32	; 0x3b32 <set_all_ir_powers>
    5ba2:	0e 94 20 08 	call	0x1040	; 0x1040 <get_time>
    5ba6:	dc 01       	movw	r26, r24
    5ba8:	cb 01       	movw	r24, r22
    5baa:	8c 19       	sub	r24, r12
    5bac:	9d 09       	sbc	r25, r13
    5bae:	ae 09       	sbc	r26, r14
    5bb0:	bf 09       	sbc	r27, r15
    5bb2:	02 97       	sbiw	r24, 0x02	; 2
    5bb4:	a1 05       	cpc	r26, r1
    5bb6:	b1 05       	cpc	r27, r1
    5bb8:	a0 f3       	brcs	.-24     	; 0x5ba2 <ir_range_blast+0x48>
    5bba:	c0 e0       	ldi	r28, 0x00	; 0
    5bbc:	0e 94 20 08 	call	0x1040	; 0x1040 <get_time>
    5bc0:	6b 01       	movw	r12, r22
    5bc2:	7c 01       	movw	r14, r24
    5bc4:	8c 2f       	mov	r24, r28
    5bc6:	0e 94 27 1d 	call	0x3a4e	; 0x3a4e <ir_led_on>
    5bca:	0e 94 20 08 	call	0x1040	; 0x1040 <get_time>
    5bce:	dc 01       	movw	r26, r24
    5bd0:	cb 01       	movw	r24, r22
    5bd2:	8c 19       	sub	r24, r12
    5bd4:	9d 09       	sbc	r25, r13
    5bd6:	ae 09       	sbc	r26, r14
    5bd8:	bf 09       	sbc	r27, r15
    5bda:	08 97       	sbiw	r24, 0x08	; 8
    5bdc:	a1 05       	cpc	r26, r1
    5bde:	b1 05       	cpc	r27, r1
    5be0:	a0 f3       	brcs	.-24     	; 0x5bca <ir_range_blast+0x70>
    5be2:	8c 2f       	mov	r24, r28
    5be4:	0e 94 66 1d 	call	0x3acc	; 0x3acc <ir_led_off>
    5be8:	88 e0       	ldi	r24, 0x08	; 8
    5bea:	90 e0       	ldi	r25, 0x00	; 0
    5bec:	0e 94 33 3a 	call	0x7466	; 0x7466 <delay_ms>
    5bf0:	cf 5f       	subi	r28, 0xFF	; 255
    5bf2:	c6 30       	cpi	r28, 0x06	; 6
    5bf4:	19 f7       	brne	.-58     	; 0x5bbc <ir_range_blast+0x62>
    5bf6:	df bf       	out	0x3f, r29	; 63
    5bf8:	df 91       	pop	r29
    5bfa:	cf 91       	pop	r28
    5bfc:	ff 90       	pop	r15
    5bfe:	ef 90       	pop	r14
    5c00:	df 90       	pop	r13
    5c02:	cf 90       	pop	r12
    5c04:	08 95       	ret

00005c06 <broadcast_rnb_data>:
    5c06:	cf 93       	push	r28
    5c08:	df 93       	push	r29
    5c0a:	1f 92       	push	r1
    5c0c:	cd b7       	in	r28, 0x3d	; 61
    5c0e:	de b7       	in	r29, 0x3e	; 62
    5c10:	9f b7       	in	r25, 0x3f	; 63
    5c12:	f8 94       	cli
    5c14:	80 91 36 2b 	lds	r24, 0x2B36	; 0x802b36 <rnbProcessingFlag>
    5c18:	81 11       	cpse	r24, r1
    5c1a:	04 c0       	rjmp	.+8      	; 0x5c24 <broadcast_rnb_data+0x1e>
    5c1c:	81 e0       	ldi	r24, 0x01	; 1
    5c1e:	80 93 36 2b 	sts	0x2B36, r24	; 0x802b36 <rnbProcessingFlag>
    5c22:	01 c0       	rjmp	.+2      	; 0x5c26 <broadcast_rnb_data+0x20>
    5c24:	80 e0       	ldi	r24, 0x00	; 0
    5c26:	9f bf       	out	0x3f, r25	; 63
    5c28:	88 23       	and	r24, r24
    5c2a:	59 f1       	breq	.+86     	; 0x5c82 <broadcast_rnb_data+0x7c>
    5c2c:	0e 94 20 08 	call	0x1040	; 0x1040 <get_time>
    5c30:	60 93 bb 2b 	sts	0x2BBB, r22	; 0x802bbb <rnbCmdSentTime>
    5c34:	70 93 bc 2b 	sts	0x2BBC, r23	; 0x802bbc <rnbCmdSentTime+0x1>
    5c38:	80 93 bd 2b 	sts	0x2BBD, r24	; 0x802bbd <rnbCmdSentTime+0x2>
    5c3c:	90 93 be 2b 	sts	0x2BBE, r25	; 0x802bbe <rnbCmdSentTime+0x3>
    5c40:	82 e7       	ldi	r24, 0x72	; 114
    5c42:	89 83       	std	Y+1, r24	; 0x01
    5c44:	20 91 bb 2b 	lds	r18, 0x2BBB	; 0x802bbb <rnbCmdSentTime>
    5c48:	30 91 bc 2b 	lds	r19, 0x2BBC	; 0x802bbc <rnbCmdSentTime+0x1>
    5c4c:	40 91 bd 2b 	lds	r20, 0x2BBD	; 0x802bbd <rnbCmdSentTime+0x2>
    5c50:	50 91 be 2b 	lds	r21, 0x2BBE	; 0x802bbe <rnbCmdSentTime+0x3>
    5c54:	41 e4       	ldi	r20, 0x41	; 65
    5c56:	be 01       	movw	r22, r28
    5c58:	6f 5f       	subi	r22, 0xFF	; 255
    5c5a:	7f 4f       	sbci	r23, 0xFF	; 255
    5c5c:	8f e3       	ldi	r24, 0x3F	; 63
    5c5e:	0e 94 79 12 	call	0x24f2	; 0x24f2 <hp_ir_targeted_cmd>
    5c62:	88 23       	and	r24, r24
    5c64:	71 f0       	breq	.+28     	; 0x5c82 <broadcast_rnb_data+0x7c>
    5c66:	8f b7       	in	r24, 0x3f	; 63
    5c68:	f8 94       	cli
    5c6a:	9f ef       	ldi	r25, 0xFF	; 255
    5c6c:	90 93 5a 2f 	sts	0x2F5A, r25	; 0x802f5a <hp_ir_block_bm>
    5c70:	8f bf       	out	0x3f, r24	; 63
    5c72:	8f ef       	ldi	r24, 0xFF	; 255
    5c74:	0e 94 ad 2d 	call	0x5b5a	; 0x5b5a <ir_range_blast>
    5c78:	8f b7       	in	r24, 0x3f	; 63
    5c7a:	f8 94       	cli
    5c7c:	10 92 5a 2f 	sts	0x2F5A, r1	; 0x802f5a <hp_ir_block_bm>
    5c80:	8f bf       	out	0x3f, r24	; 63
    5c82:	8f b7       	in	r24, 0x3f	; 63
    5c84:	f8 94       	cli
    5c86:	10 92 36 2b 	sts	0x2B36, r1	; 0x802b36 <rnbProcessingFlag>
    5c8a:	8f bf       	out	0x3f, r24	; 63
    5c8c:	0f 90       	pop	r0
    5c8e:	df 91       	pop	r29
    5c90:	cf 91       	pop	r28
    5c92:	08 95       	ret

00005c94 <pretty_angle>:
    5c94:	cf 92       	push	r12
    5c96:	df 92       	push	r13
    5c98:	ef 92       	push	r14
    5c9a:	ff 92       	push	r15
    5c9c:	6b 01       	movw	r12, r22
    5c9e:	7c 01       	movw	r14, r24
    5ca0:	20 e0       	ldi	r18, 0x00	; 0
    5ca2:	30 e0       	ldi	r19, 0x00	; 0
    5ca4:	a9 01       	movw	r20, r18
    5ca6:	0e 94 12 4c 	call	0x9824	; 0x9824 <__gesf2>
    5caa:	88 23       	and	r24, r24
    5cac:	ac f0       	brlt	.+42     	; 0x5cd8 <pretty_angle+0x44>
    5cae:	2b ed       	ldi	r18, 0xDB	; 219
    5cb0:	3f e0       	ldi	r19, 0x0F	; 15
    5cb2:	49 e4       	ldi	r20, 0x49	; 73
    5cb4:	50 e4       	ldi	r21, 0x40	; 64
    5cb6:	c7 01       	movw	r24, r14
    5cb8:	b6 01       	movw	r22, r12
    5cba:	0e 94 be 48 	call	0x917c	; 0x917c <__addsf3>
    5cbe:	2b ed       	ldi	r18, 0xDB	; 219
    5cc0:	3f e0       	ldi	r19, 0x0F	; 15
    5cc2:	49 ec       	ldi	r20, 0xC9	; 201
    5cc4:	50 e4       	ldi	r21, 0x40	; 64
    5cc6:	0e 94 ad 4a 	call	0x955a	; 0x955a <fmod>
    5cca:	2b ed       	ldi	r18, 0xDB	; 219
    5ccc:	3f e0       	ldi	r19, 0x0F	; 15
    5cce:	49 e4       	ldi	r20, 0x49	; 73
    5cd0:	50 e4       	ldi	r21, 0x40	; 64
    5cd2:	0e 94 bd 48 	call	0x917a	; 0x917a <__subsf3>
    5cd6:	14 c0       	rjmp	.+40     	; 0x5d00 <pretty_angle+0x6c>
    5cd8:	2b ed       	ldi	r18, 0xDB	; 219
    5cda:	3f e0       	ldi	r19, 0x0F	; 15
    5cdc:	49 e4       	ldi	r20, 0x49	; 73
    5cde:	50 e4       	ldi	r21, 0x40	; 64
    5ce0:	c7 01       	movw	r24, r14
    5ce2:	b6 01       	movw	r22, r12
    5ce4:	0e 94 bd 48 	call	0x917a	; 0x917a <__subsf3>
    5ce8:	2b ed       	ldi	r18, 0xDB	; 219
    5cea:	3f e0       	ldi	r19, 0x0F	; 15
    5cec:	49 ec       	ldi	r20, 0xC9	; 201
    5cee:	50 e4       	ldi	r21, 0x40	; 64
    5cf0:	0e 94 ad 4a 	call	0x955a	; 0x955a <fmod>
    5cf4:	2b ed       	ldi	r18, 0xDB	; 219
    5cf6:	3f e0       	ldi	r19, 0x0F	; 15
    5cf8:	49 e4       	ldi	r20, 0x49	; 73
    5cfa:	50 e4       	ldi	r21, 0x40	; 64
    5cfc:	0e 94 be 48 	call	0x917c	; 0x917c <__addsf3>
    5d00:	ff 90       	pop	r15
    5d02:	ef 90       	pop	r14
    5d04:	df 90       	pop	r13
    5d06:	cf 90       	pop	r12
    5d08:	08 95       	ret

00005d0a <rad_to_deg>:
    5d0a:	0e 94 4a 2e 	call	0x5c94	; 0x5c94 <pretty_angle>
    5d0e:	2b ed       	ldi	r18, 0xDB	; 219
    5d10:	3f e0       	ldi	r19, 0x0F	; 15
    5d12:	49 e4       	ldi	r20, 0x49	; 73
    5d14:	50 e4       	ldi	r21, 0x40	; 64
    5d16:	0e 94 bd 49 	call	0x937a	; 0x937a <__divsf3>
    5d1a:	20 e0       	ldi	r18, 0x00	; 0
    5d1c:	30 e0       	ldi	r19, 0x00	; 0
    5d1e:	44 e3       	ldi	r20, 0x34	; 52
    5d20:	53 e4       	ldi	r21, 0x43	; 67
    5d22:	0e 94 c6 4c 	call	0x998c	; 0x998c <__mulsf3>
    5d26:	08 95       	ret

00005d28 <sensor_model>:
    5d28:	8f 92       	push	r8
    5d2a:	9f 92       	push	r9
    5d2c:	af 92       	push	r10
    5d2e:	bf 92       	push	r11
    5d30:	cf 92       	push	r12
    5d32:	df 92       	push	r13
    5d34:	ef 92       	push	r14
    5d36:	ff 92       	push	r15
    5d38:	4b 01       	movw	r8, r22
    5d3a:	5c 01       	movw	r10, r24
    5d3c:	6b 01       	movw	r12, r22
    5d3e:	7c 01       	movw	r14, r24
    5d40:	e8 94       	clt
    5d42:	f7 f8       	bld	r15, 7
    5d44:	20 e0       	ldi	r18, 0x00	; 0
    5d46:	30 e0       	ldi	r19, 0x00	; 0
    5d48:	40 ec       	ldi	r20, 0xC0	; 192
    5d4a:	5f e3       	ldi	r21, 0x3F	; 63
    5d4c:	c7 01       	movw	r24, r14
    5d4e:	b6 01       	movw	r22, r12
    5d50:	0e 94 12 4c 	call	0x9824	; 0x9824 <__gesf2>
    5d54:	88 23       	and	r24, r24
    5d56:	64 f5       	brge	.+88     	; 0x5db0 <sensor_model+0x88>
    5d58:	22 e5       	ldi	r18, 0x52	; 82
    5d5a:	38 eb       	ldi	r19, 0xB8	; 184
    5d5c:	4e e1       	ldi	r20, 0x1E	; 30
    5d5e:	5f e3       	ldi	r21, 0x3F	; 63
    5d60:	c7 01       	movw	r24, r14
    5d62:	b6 01       	movw	r22, r12
    5d64:	0e 94 b3 49 	call	0x9366	; 0x9366 <__cmpsf2>
    5d68:	18 16       	cp	r1, r24
    5d6a:	8c f0       	brlt	.+34     	; 0x5d8e <sensor_model+0x66>
    5d6c:	20 e0       	ldi	r18, 0x00	; 0
    5d6e:	30 e0       	ldi	r19, 0x00	; 0
    5d70:	40 e8       	ldi	r20, 0x80	; 128
    5d72:	50 e4       	ldi	r21, 0x40	; 64
    5d74:	c5 01       	movw	r24, r10
    5d76:	b4 01       	movw	r22, r8
    5d78:	0e 94 33 4d 	call	0x9a66	; 0x9a66 <pow>
    5d7c:	9b 01       	movw	r18, r22
    5d7e:	ac 01       	movw	r20, r24
    5d80:	60 e0       	ldi	r22, 0x00	; 0
    5d82:	70 e0       	ldi	r23, 0x00	; 0
    5d84:	80 e8       	ldi	r24, 0x80	; 128
    5d86:	9f e3       	ldi	r25, 0x3F	; 63
    5d88:	0e 94 bd 48 	call	0x917a	; 0x917a <__subsf3>
    5d8c:	14 c0       	rjmp	.+40     	; 0x5db6 <sensor_model+0x8e>
    5d8e:	20 e0       	ldi	r18, 0x00	; 0
    5d90:	30 e0       	ldi	r19, 0x00	; 0
    5d92:	40 e8       	ldi	r20, 0x80	; 128
    5d94:	50 e4       	ldi	r21, 0x40	; 64
    5d96:	c5 01       	movw	r24, r10
    5d98:	b4 01       	movw	r22, r8
    5d9a:	0e 94 33 4d 	call	0x9a66	; 0x9a66 <pow>
    5d9e:	9b 01       	movw	r18, r22
    5da0:	ac 01       	movw	r20, r24
    5da2:	60 e0       	ldi	r22, 0x00	; 0
    5da4:	70 e0       	ldi	r23, 0x00	; 0
    5da6:	80 e0       	ldi	r24, 0x00	; 0
    5da8:	9e e3       	ldi	r25, 0x3E	; 62
    5daa:	0e 94 bd 49 	call	0x937a	; 0x937a <__divsf3>
    5dae:	03 c0       	rjmp	.+6      	; 0x5db6 <sensor_model+0x8e>
    5db0:	60 e0       	ldi	r22, 0x00	; 0
    5db2:	70 e0       	ldi	r23, 0x00	; 0
    5db4:	cb 01       	movw	r24, r22
    5db6:	ff 90       	pop	r15
    5db8:	ef 90       	pop	r14
    5dba:	df 90       	pop	r13
    5dbc:	cf 90       	pop	r12
    5dbe:	bf 90       	pop	r11
    5dc0:	af 90       	pop	r10
    5dc2:	9f 90       	pop	r9
    5dc4:	8f 90       	pop	r8
    5dc6:	08 95       	ret

00005dc8 <emitter_model>:
    5dc8:	8f 92       	push	r8
    5dca:	9f 92       	push	r9
    5dcc:	af 92       	push	r10
    5dce:	bf 92       	push	r11
    5dd0:	cf 92       	push	r12
    5dd2:	df 92       	push	r13
    5dd4:	ef 92       	push	r14
    5dd6:	ff 92       	push	r15
    5dd8:	6b 01       	movw	r12, r22
    5dda:	7c 01       	movw	r14, r24
    5ddc:	4b 01       	movw	r8, r22
    5dde:	5c 01       	movw	r10, r24
    5de0:	e8 94       	clt
    5de2:	b7 f8       	bld	r11, 7
    5de4:	20 e0       	ldi	r18, 0x00	; 0
    5de6:	30 e0       	ldi	r19, 0x00	; 0
    5de8:	40 ec       	ldi	r20, 0xC0	; 192
    5dea:	5f e3       	ldi	r21, 0x3F	; 63
    5dec:	c5 01       	movw	r24, r10
    5dee:	b4 01       	movw	r22, r8
    5df0:	0e 94 12 4c 	call	0x9824	; 0x9824 <__gesf2>
    5df4:	88 23       	and	r24, r24
    5df6:	e4 f5       	brge	.+120    	; 0x5e70 <emitter_model+0xa8>
    5df8:	2c ee       	ldi	r18, 0xEC	; 236
    5dfa:	31 e5       	ldi	r19, 0x51	; 81
    5dfc:	48 e3       	ldi	r20, 0x38	; 56
    5dfe:	5f e3       	ldi	r21, 0x3F	; 63
    5e00:	c5 01       	movw	r24, r10
    5e02:	b4 01       	movw	r22, r8
    5e04:	0e 94 b3 49 	call	0x9366	; 0x9366 <__cmpsf2>
    5e08:	18 16       	cp	r1, r24
    5e0a:	0c f1       	brlt	.+66     	; 0x5e4e <emitter_model+0x86>
    5e0c:	20 e0       	ldi	r18, 0x00	; 0
    5e0e:	30 e0       	ldi	r19, 0x00	; 0
    5e10:	40 e8       	ldi	r20, 0x80	; 128
    5e12:	50 e4       	ldi	r21, 0x40	; 64
    5e14:	c7 01       	movw	r24, r14
    5e16:	b6 01       	movw	r22, r12
    5e18:	0e 94 33 4d 	call	0x9a66	; 0x9a66 <pow>
    5e1c:	4b 01       	movw	r8, r22
    5e1e:	5c 01       	movw	r10, r24
    5e20:	a7 01       	movw	r20, r14
    5e22:	96 01       	movw	r18, r12
    5e24:	c7 01       	movw	r24, r14
    5e26:	b6 01       	movw	r22, r12
    5e28:	0e 94 c6 4c 	call	0x998c	; 0x998c <__mulsf3>
    5e2c:	20 e0       	ldi	r18, 0x00	; 0
    5e2e:	30 e0       	ldi	r19, 0x00	; 0
    5e30:	40 e0       	ldi	r20, 0x00	; 0
    5e32:	5f e3       	ldi	r21, 0x3F	; 63
    5e34:	0e 94 c6 4c 	call	0x998c	; 0x998c <__mulsf3>
    5e38:	27 ed       	ldi	r18, 0xD7	; 215
    5e3a:	33 ea       	ldi	r19, 0xA3	; 163
    5e3c:	40 e7       	ldi	r20, 0x70	; 112
    5e3e:	5f e3       	ldi	r21, 0x3F	; 63
    5e40:	0e 94 be 48 	call	0x917c	; 0x917c <__addsf3>
    5e44:	a5 01       	movw	r20, r10
    5e46:	94 01       	movw	r18, r8
    5e48:	0e 94 bd 48 	call	0x917a	; 0x917a <__subsf3>
    5e4c:	14 c0       	rjmp	.+40     	; 0x5e76 <emitter_model+0xae>
    5e4e:	20 e0       	ldi	r18, 0x00	; 0
    5e50:	30 e0       	ldi	r19, 0x00	; 0
    5e52:	40 e8       	ldi	r20, 0x80	; 128
    5e54:	50 e4       	ldi	r21, 0x40	; 64
    5e56:	c7 01       	movw	r24, r14
    5e58:	b6 01       	movw	r22, r12
    5e5a:	0e 94 33 4d 	call	0x9a66	; 0x9a66 <pow>
    5e5e:	9b 01       	movw	r18, r22
    5e60:	ac 01       	movw	r20, r24
    5e62:	60 e0       	ldi	r22, 0x00	; 0
    5e64:	70 e0       	ldi	r23, 0x00	; 0
    5e66:	80 e8       	ldi	r24, 0x80	; 128
    5e68:	9e e3       	ldi	r25, 0x3E	; 62
    5e6a:	0e 94 bd 49 	call	0x937a	; 0x937a <__divsf3>
    5e6e:	03 c0       	rjmp	.+6      	; 0x5e76 <emitter_model+0xae>
    5e70:	60 e0       	ldi	r22, 0x00	; 0
    5e72:	70 e0       	ldi	r23, 0x00	; 0
    5e74:	cb 01       	movw	r24, r22
    5e76:	ff 90       	pop	r15
    5e78:	ef 90       	pop	r14
    5e7a:	df 90       	pop	r13
    5e7c:	cf 90       	pop	r12
    5e7e:	bf 90       	pop	r11
    5e80:	af 90       	pop	r10
    5e82:	9f 90       	pop	r9
    5e84:	8f 90       	pop	r8
    5e86:	08 95       	ret

00005e88 <inverse_amplitude_model>:

float inverse_amplitude_model(float ADC_val, uint8_t power){
    5e88:	cf 92       	push	r12
    5e8a:	df 92       	push	r13
    5e8c:	ef 92       	push	r14
    5e8e:	ff 92       	push	r15
    5e90:	6b 01       	movw	r12, r22
    5e92:	7c 01       	movw	r14, r24
	if(power == 255)		return 2*(-1.5+(131.5/sqrtf(ADC_val-3.85)));
    5e94:	4f 3f       	cpi	r20, 0xFF	; 255
    5e96:	e9 f4       	brne	.+58     	; 0x5ed2 <inverse_amplitude_model+0x4a>
    5e98:	26 e6       	ldi	r18, 0x66	; 102
    5e9a:	36 e6       	ldi	r19, 0x66	; 102
    5e9c:	46 e7       	ldi	r20, 0x76	; 118
    5e9e:	50 e4       	ldi	r21, 0x40	; 64
    5ea0:	c7 01       	movw	r24, r14
    5ea2:	b6 01       	movw	r22, r12
    5ea4:	0e 94 bd 48 	call	0x917a	; 0x917a <__subsf3>
    5ea8:	0e 94 91 4d 	call	0x9b22	; 0x9b22 <sqrt>
    5eac:	9b 01       	movw	r18, r22
    5eae:	ac 01       	movw	r20, r24
    5eb0:	60 e0       	ldi	r22, 0x00	; 0
    5eb2:	70 e8       	ldi	r23, 0x80	; 128
    5eb4:	83 e0       	ldi	r24, 0x03	; 3
    5eb6:	93 e4       	ldi	r25, 0x43	; 67
    5eb8:	0e 94 bd 49 	call	0x937a	; 0x937a <__divsf3>
    5ebc:	20 e0       	ldi	r18, 0x00	; 0
    5ebe:	30 e0       	ldi	r19, 0x00	; 0
    5ec0:	40 ec       	ldi	r20, 0xC0	; 192
    5ec2:	5f e3       	ldi	r21, 0x3F	; 63
    5ec4:	0e 94 bd 48 	call	0x917a	; 0x917a <__subsf3>
    5ec8:	9b 01       	movw	r18, r22
    5eca:	ac 01       	movw	r20, r24
    5ecc:	0e 94 be 48 	call	0x917c	; 0x917c <__addsf3>
    5ed0:	0f c0       	rjmp	.+30     	; 0x5ef0 <inverse_amplitude_model+0x68>
	//else if(power == 250) return (33.166/sqrtf(ADC_val - 12.5)) + 4;
	else					printf_P(PSTR("ERROR: Unexpected power: %hhu\r\n"),power);
    5ed2:	1f 92       	push	r1
    5ed4:	4f 93       	push	r20
    5ed6:	87 e7       	ldi	r24, 0x77	; 119
    5ed8:	97 e0       	ldi	r25, 0x07	; 7
    5eda:	9f 93       	push	r25
    5edc:	8f 93       	push	r24
    5ede:	0e 94 f7 56 	call	0xadee	; 0xadee <printf_P>
	return 0;
    5ee2:	0f 90       	pop	r0
    5ee4:	0f 90       	pop	r0
    5ee6:	0f 90       	pop	r0
    5ee8:	0f 90       	pop	r0
    5eea:	60 e0       	ldi	r22, 0x00	; 0
    5eec:	70 e0       	ldi	r23, 0x00	; 0
    5eee:	cb 01       	movw	r24, r22
}
    5ef0:	ff 90       	pop	r15
    5ef2:	ef 90       	pop	r14
    5ef4:	df 90       	pop	r13
    5ef6:	cf 90       	pop	r12
    5ef8:	08 95       	ret

00005efa <get_initial_range_guess>:
	*bearing = atan2f(bearingY, bearingX);	
	*heading = atan2f(headingY, headingX);
	
}

float get_initial_range_guess(float bearing, float heading, uint8_t power){
    5efa:	3f 92       	push	r3
    5efc:	4f 92       	push	r4
    5efe:	5f 92       	push	r5
    5f00:	6f 92       	push	r6
    5f02:	7f 92       	push	r7
    5f04:	8f 92       	push	r8
    5f06:	9f 92       	push	r9
    5f08:	af 92       	push	r10
    5f0a:	bf 92       	push	r11
    5f0c:	cf 92       	push	r12
    5f0e:	df 92       	push	r13
    5f10:	ef 92       	push	r14
    5f12:	ff 92       	push	r15
    5f14:	0f 93       	push	r16
    5f16:	1f 93       	push	r17
    5f18:	cf 93       	push	r28
    5f1a:	df 93       	push	r29
    5f1c:	6b 01       	movw	r12, r22
    5f1e:	7c 01       	movw	r14, r24
    5f20:	29 01       	movw	r4, r18
    5f22:	3a 01       	movw	r6, r20
    5f24:	30 2e       	mov	r3, r16
	int8_t bestS = (6-((int8_t)ceilf((3.0*bearing)/M_PI)))%6;
    5f26:	20 e0       	ldi	r18, 0x00	; 0
    5f28:	30 e0       	ldi	r19, 0x00	; 0
    5f2a:	40 e4       	ldi	r20, 0x40	; 64
    5f2c:	50 e4       	ldi	r21, 0x40	; 64
    5f2e:	0e 94 c6 4c 	call	0x998c	; 0x998c <__mulsf3>
    5f32:	2b ed       	ldi	r18, 0xDB	; 219
    5f34:	3f e0       	ldi	r19, 0x0F	; 15
    5f36:	49 e4       	ldi	r20, 0x49	; 73
    5f38:	50 e4       	ldi	r21, 0x40	; 64
    5f3a:	0e 94 bd 49 	call	0x937a	; 0x937a <__divsf3>
    5f3e:	0e 94 9c 49 	call	0x9338	; 0x9338 <ceil>
    5f42:	0e 94 2f 4a 	call	0x945e	; 0x945e <__fixsfsi>
    5f46:	c6 e0       	ldi	r28, 0x06	; 6
    5f48:	d0 e0       	ldi	r29, 0x00	; 0
    5f4a:	ce 01       	movw	r24, r28
    5f4c:	86 1b       	sub	r24, r22
    5f4e:	91 09       	sbc	r25, r1
    5f50:	67 fd       	sbrc	r22, 7
    5f52:	93 95       	inc	r25
    5f54:	be 01       	movw	r22, r28
    5f56:	0e 94 66 52 	call	0xa4cc	; 0xa4cc <__divmodhi4>
	float alpha = pretty_angle(bearing - basis_angle[bestS]);				  //alpha using infinite approximation
    5f5a:	08 2f       	mov	r16, r24
    5f5c:	88 0f       	add	r24, r24
    5f5e:	11 0b       	sbc	r17, r17
    5f60:	f8 01       	movw	r30, r16
    5f62:	ee 0f       	add	r30, r30
    5f64:	ff 1f       	adc	r31, r31
    5f66:	ee 0f       	add	r30, r30
    5f68:	ff 1f       	adc	r31, r31
    5f6a:	e2 5c       	subi	r30, 0xC2	; 194
    5f6c:	ff 4d       	sbci	r31, 0xDF	; 223
    5f6e:	20 81       	ld	r18, Z
    5f70:	31 81       	ldd	r19, Z+1	; 0x01
    5f72:	42 81       	ldd	r20, Z+2	; 0x02
    5f74:	53 81       	ldd	r21, Z+3	; 0x03
    5f76:	c7 01       	movw	r24, r14
    5f78:	b6 01       	movw	r22, r12
    5f7a:	0e 94 bd 48 	call	0x917a	; 0x917a <__subsf3>
    5f7e:	0e 94 4a 2e 	call	0x5c94	; 0x5c94 <pretty_angle>
    5f82:	4b 01       	movw	r8, r22
    5f84:	5c 01       	movw	r10, r24
	int8_t bestE = (6-((int8_t)ceilf((3.0*(bearing-heading-M_PI))/M_PI)))%6;					
    5f86:	a3 01       	movw	r20, r6
    5f88:	92 01       	movw	r18, r4
    5f8a:	c7 01       	movw	r24, r14
    5f8c:	b6 01       	movw	r22, r12
    5f8e:	0e 94 bd 48 	call	0x917a	; 0x917a <__subsf3>
    5f92:	2b 01       	movw	r4, r22
    5f94:	3c 01       	movw	r6, r24
    5f96:	2b ed       	ldi	r18, 0xDB	; 219
    5f98:	3f e0       	ldi	r19, 0x0F	; 15
    5f9a:	49 e4       	ldi	r20, 0x49	; 73
    5f9c:	50 e4       	ldi	r21, 0x40	; 64
    5f9e:	0e 94 bd 48 	call	0x917a	; 0x917a <__subsf3>
    5fa2:	20 e0       	ldi	r18, 0x00	; 0
    5fa4:	30 e0       	ldi	r19, 0x00	; 0
    5fa6:	40 e4       	ldi	r20, 0x40	; 64
    5fa8:	50 e4       	ldi	r21, 0x40	; 64
    5faa:	0e 94 c6 4c 	call	0x998c	; 0x998c <__mulsf3>
    5fae:	2b ed       	ldi	r18, 0xDB	; 219
    5fb0:	3f e0       	ldi	r19, 0x0F	; 15
    5fb2:	49 e4       	ldi	r20, 0x49	; 73
    5fb4:	50 e4       	ldi	r21, 0x40	; 64
    5fb6:	0e 94 bd 49 	call	0x937a	; 0x937a <__divsf3>
    5fba:	0e 94 9c 49 	call	0x9338	; 0x9338 <ceil>
    5fbe:	0e 94 2f 4a 	call	0x945e	; 0x945e <__fixsfsi>
    5fc2:	ce 01       	movw	r24, r28
    5fc4:	86 1b       	sub	r24, r22
    5fc6:	91 09       	sbc	r25, r1
    5fc8:	67 fd       	sbrc	r22, 7
    5fca:	93 95       	inc	r25
    5fcc:	be 01       	movw	r22, r28
    5fce:	0e 94 66 52 	call	0xa4cc	; 0xa4cc <__divmodhi4>
	float  beta = pretty_angle(bearing - heading - basis_angle[bestE] - M_PI); //beta using infinite approximation	
    5fd2:	c8 2f       	mov	r28, r24
    5fd4:	88 0f       	add	r24, r24
    5fd6:	dd 0b       	sbc	r29, r29
    5fd8:	fe 01       	movw	r30, r28
    5fda:	ee 0f       	add	r30, r30
    5fdc:	ff 1f       	adc	r31, r31
    5fde:	ee 0f       	add	r30, r30
    5fe0:	ff 1f       	adc	r31, r31
    5fe2:	e2 5c       	subi	r30, 0xC2	; 194
    5fe4:	ff 4d       	sbci	r31, 0xDF	; 223
    5fe6:	20 81       	ld	r18, Z
    5fe8:	31 81       	ldd	r19, Z+1	; 0x01
    5fea:	42 81       	ldd	r20, Z+2	; 0x02
    5fec:	53 81       	ldd	r21, Z+3	; 0x03
    5fee:	c3 01       	movw	r24, r6
    5ff0:	b2 01       	movw	r22, r4
    5ff2:	0e 94 bd 48 	call	0x917a	; 0x917a <__subsf3>
    5ff6:	2b ed       	ldi	r18, 0xDB	; 219
    5ff8:	3f e0       	ldi	r19, 0x0F	; 15
    5ffa:	49 e4       	ldi	r20, 0x49	; 73
    5ffc:	50 e4       	ldi	r21, 0x40	; 64
    5ffe:	0e 94 bd 48 	call	0x917a	; 0x917a <__subsf3>
    6002:	0e 94 4a 2e 	call	0x5c94	; 0x5c94 <pretty_angle>
    6006:	76 2e       	mov	r7, r22
    6008:	67 2e       	mov	r6, r23
    600a:	58 2e       	mov	r5, r24
    600c:	49 2e       	mov	r4, r25
	
	//printf("(alpha: %f, sensor %u)\r\n", rad_to_deg(alpha), bestS); 	
	if((alpha > M_PI_2) || (alpha < -M_PI_2)){
    600e:	2b ed       	ldi	r18, 0xDB	; 219
    6010:	3f e0       	ldi	r19, 0x0F	; 15
    6012:	49 ec       	ldi	r20, 0xC9	; 201
    6014:	5f e3       	ldi	r21, 0x3F	; 63
    6016:	c5 01       	movw	r24, r10
    6018:	b4 01       	movw	r22, r8
    601a:	0e 94 12 4c 	call	0x9824	; 0x9824 <__gesf2>
    601e:	18 16       	cp	r1, r24
    6020:	54 f0       	brlt	.+20     	; 0x6036 <get_initial_range_guess+0x13c>
    6022:	2b ed       	ldi	r18, 0xDB	; 219
    6024:	3f e0       	ldi	r19, 0x0F	; 15
    6026:	49 ec       	ldi	r20, 0xC9	; 201
    6028:	5f eb       	ldi	r21, 0xBF	; 191
    602a:	c5 01       	movw	r24, r10
    602c:	b4 01       	movw	r22, r8
    602e:	0e 94 b3 49 	call	0x9366	; 0x9366 <__cmpsf2>
    6032:	88 23       	and	r24, r24
    6034:	cc f4       	brge	.+50     	; 0x6068 <get_initial_range_guess+0x16e>
		printf("ERROR: alpha out of range (alpha: %f, sensor %u)\r\n", rad_to_deg(alpha), bestS); 
    6036:	c5 01       	movw	r24, r10
    6038:	b4 01       	movw	r22, r8
    603a:	0e 94 85 2e 	call	0x5d0a	; 0x5d0a <rad_to_deg>
    603e:	1f 93       	push	r17
    6040:	0f 93       	push	r16
    6042:	9f 93       	push	r25
    6044:	8f 93       	push	r24
    6046:	7f 93       	push	r23
    6048:	6f 93       	push	r22
    604a:	86 ed       	ldi	r24, 0xD6	; 214
    604c:	91 e2       	ldi	r25, 0x21	; 33
    604e:	9f 93       	push	r25
    6050:	8f 93       	push	r24
    6052:	0e 94 e3 56 	call	0xadc6	; 0xadc6 <printf>
		return 0;
    6056:	8d b7       	in	r24, 0x3d	; 61
    6058:	9e b7       	in	r25, 0x3e	; 62
    605a:	08 96       	adiw	r24, 0x08	; 8
    605c:	8d bf       	out	0x3d, r24	; 61
    605e:	9e bf       	out	0x3e, r25	; 62
    6060:	60 e0       	ldi	r22, 0x00	; 0
    6062:	70 e0       	ldi	r23, 0x00	; 0
    6064:	cb 01       	movw	r24, r22
    6066:	db c0       	rjmp	.+438    	; 0x621e <get_initial_range_guess+0x324>
	}
	if((beta > M_PI_2)  || (beta < -M_PI_2)){
    6068:	2b ed       	ldi	r18, 0xDB	; 219
    606a:	3f e0       	ldi	r19, 0x0F	; 15
    606c:	49 ec       	ldi	r20, 0xC9	; 201
    606e:	5f e3       	ldi	r21, 0x3F	; 63
    6070:	67 2d       	mov	r22, r7
    6072:	76 2d       	mov	r23, r6
    6074:	85 2d       	mov	r24, r5
    6076:	94 2d       	mov	r25, r4
    6078:	0e 94 12 4c 	call	0x9824	; 0x9824 <__gesf2>
    607c:	18 16       	cp	r1, r24
    607e:	64 f0       	brlt	.+24     	; 0x6098 <get_initial_range_guess+0x19e>
    6080:	2b ed       	ldi	r18, 0xDB	; 219
    6082:	3f e0       	ldi	r19, 0x0F	; 15
    6084:	49 ec       	ldi	r20, 0xC9	; 201
    6086:	5f eb       	ldi	r21, 0xBF	; 191
    6088:	67 2d       	mov	r22, r7
    608a:	76 2d       	mov	r23, r6
    608c:	85 2d       	mov	r24, r5
    608e:	94 2d       	mov	r25, r4
    6090:	0e 94 b3 49 	call	0x9366	; 0x9366 <__cmpsf2>
    6094:	88 23       	and	r24, r24
    6096:	ac f4       	brge	.+42     	; 0x60c2 <get_initial_range_guess+0x1c8>
		printf("ERROR: beta out of range (beta: %f, emitter %u)\r\n",  beta, bestE); 
    6098:	df 93       	push	r29
    609a:	cf 93       	push	r28
    609c:	4f 92       	push	r4
    609e:	5f 92       	push	r5
    60a0:	6f 92       	push	r6
    60a2:	7f 92       	push	r7
    60a4:	89 e0       	ldi	r24, 0x09	; 9
    60a6:	92 e2       	ldi	r25, 0x22	; 34
    60a8:	9f 93       	push	r25
    60aa:	8f 93       	push	r24
    60ac:	0e 94 e3 56 	call	0xadc6	; 0xadc6 <printf>
		return 0;
    60b0:	8d b7       	in	r24, 0x3d	; 61
    60b2:	9e b7       	in	r25, 0x3e	; 62
    60b4:	08 96       	adiw	r24, 0x08	; 8
    60b6:	8d bf       	out	0x3d, r24	; 61
    60b8:	9e bf       	out	0x3e, r25	; 62
    60ba:	60 e0       	ldi	r22, 0x00	; 0
    60bc:	70 e0       	ldi	r23, 0x00	; 0
    60be:	cb 01       	movw	r24, r22
    60c0:	ae c0       	rjmp	.+348    	; 0x621e <get_initial_range_guess+0x324>
	}
	//printf("(beta: %f, emitter %u)\r\n",  rad_to_deg(beta), bestE); 	
	// expected contribution (using infinite distance approximation)
	float amplitude;
	float exp_con = sensor_model(alpha)*emitter_model(beta);
    60c2:	c5 01       	movw	r24, r10
    60c4:	b4 01       	movw	r22, r8
    60c6:	0e 94 94 2e 	call	0x5d28	; 0x5d28 <sensor_model>
    60ca:	4b 01       	movw	r8, r22
    60cc:	5c 01       	movw	r10, r24
    60ce:	67 2d       	mov	r22, r7
    60d0:	76 2d       	mov	r23, r6
    60d2:	85 2d       	mov	r24, r5
    60d4:	94 2d       	mov	r25, r4
    60d6:	0e 94 e4 2e 	call	0x5dc8	; 0x5dc8 <emitter_model>
    60da:	9b 01       	movw	r18, r22
    60dc:	ac 01       	movw	r20, r24
    60de:	c5 01       	movw	r24, r10
    60e0:	b4 01       	movw	r22, r8
    60e2:	0e 94 c6 4c 	call	0x998c	; 0x998c <__mulsf3>
    60e6:	b6 2e       	mov	r11, r22
    60e8:	a7 2e       	mov	r10, r23
    60ea:	98 2e       	mov	r9, r24
    60ec:	89 2e       	mov	r8, r25
	
	if(exp_con > 0)	amplitude = brightMeas[bestE][bestS]/exp_con;	
    60ee:	20 e0       	ldi	r18, 0x00	; 0
    60f0:	30 e0       	ldi	r19, 0x00	; 0
    60f2:	a9 01       	movw	r20, r18
    60f4:	0e 94 12 4c 	call	0x9824	; 0x9824 <__gesf2>
    60f8:	18 16       	cp	r1, r24
    60fa:	0c f0       	brlt	.+2      	; 0x60fe <get_initial_range_guess+0x204>
    60fc:	7d c0       	rjmp	.+250    	; 0x61f8 <get_initial_range_guess+0x2fe>
    60fe:	fe 01       	movw	r30, r28
    6100:	ee 0f       	add	r30, r30
    6102:	ff 1f       	adc	r31, r31
    6104:	ec 0f       	add	r30, r28
    6106:	fd 1f       	adc	r31, r29
    6108:	ee 0f       	add	r30, r30
    610a:	ff 1f       	adc	r31, r31
    610c:	e0 0f       	add	r30, r16
    610e:	f1 1f       	adc	r31, r17
    6110:	ee 0f       	add	r30, r30
    6112:	ff 1f       	adc	r31, r31
    6114:	e2 51       	subi	r30, 0x12	; 18
    6116:	f5 4d       	sbci	r31, 0xD5	; 213
    6118:	60 81       	ld	r22, Z
    611a:	71 81       	ldd	r23, Z+1	; 0x01
    611c:	07 2e       	mov	r0, r23
    611e:	00 0c       	add	r0, r0
    6120:	88 0b       	sbc	r24, r24
    6122:	99 0b       	sbc	r25, r25
    6124:	0e 94 67 4a 	call	0x94ce	; 0x94ce <__floatsisf>
    6128:	2b 2d       	mov	r18, r11
    612a:	3a 2d       	mov	r19, r10
    612c:	49 2d       	mov	r20, r9
    612e:	58 2d       	mov	r21, r8
    6130:	0e 94 bd 49 	call	0x937a	; 0x937a <__divsf3>
	else{
		printf("ERROR: exp_con (%f) is negative (or zero)!\r\n", exp_con); 
		return 0;
	}
	//printf("amp_for_inv: %f\t",amplitude);
	float rMagEst = inverse_amplitude_model(amplitude, power);
    6134:	43 2d       	mov	r20, r3
    6136:	0e 94 44 2f 	call	0x5e88	; 0x5e88 <inverse_amplitude_model>
    613a:	4b 01       	movw	r8, r22
    613c:	5c 01       	movw	r10, r24
	
	float RX = rMagEst*cos(bearing)+DROPLET_RADIUS*(bearingBasis[bestS][0]-headingBasis[bestE][0]);
    613e:	c7 01       	movw	r24, r14
    6140:	b6 01       	movw	r22, r12
    6142:	0e 94 b8 49 	call	0x9370	; 0x9370 <cos>
    6146:	2b 01       	movw	r4, r22
    6148:	3c 01       	movw	r6, r24
	float RY = rMagEst*sin(bearing)+DROPLET_RADIUS*(bearingBasis[bestS][1]-headingBasis[bestE][1]);
    614a:	c7 01       	movw	r24, r14
    614c:	b6 01       	movw	r22, r12
    614e:	0e 94 83 4d 	call	0x9b06	; 0x9b06 <sin>
    6152:	a5 01       	movw	r20, r10
    6154:	94 01       	movw	r18, r8
    6156:	0e 94 c6 4c 	call	0x998c	; 0x998c <__mulsf3>
    615a:	6b 01       	movw	r12, r22
    615c:	7c 01       	movw	r14, r24
    615e:	00 0f       	add	r16, r16
    6160:	11 1f       	adc	r17, r17
    6162:	00 0f       	add	r16, r16
    6164:	11 1f       	adc	r17, r17
    6166:	00 0f       	add	r16, r16
    6168:	11 1f       	adc	r17, r17
    616a:	04 55       	subi	r16, 0x54	; 84
    616c:	1d 4d       	sbci	r17, 0xDD	; 221
    616e:	cc 0f       	add	r28, r28
    6170:	dd 1f       	adc	r29, r29
    6172:	cc 0f       	add	r28, r28
    6174:	dd 1f       	adc	r29, r29
    6176:	cc 0f       	add	r28, r28
    6178:	dd 1f       	adc	r29, r29
    617a:	c4 58       	subi	r28, 0x84	; 132
    617c:	dd 4d       	sbci	r29, 0xDD	; 221
    617e:	2c 81       	ldd	r18, Y+4	; 0x04
    6180:	3d 81       	ldd	r19, Y+5	; 0x05
    6182:	4e 81       	ldd	r20, Y+6	; 0x06
    6184:	5f 81       	ldd	r21, Y+7	; 0x07
    6186:	f8 01       	movw	r30, r16
    6188:	64 81       	ldd	r22, Z+4	; 0x04
    618a:	75 81       	ldd	r23, Z+5	; 0x05
    618c:	86 81       	ldd	r24, Z+6	; 0x06
    618e:	97 81       	ldd	r25, Z+7	; 0x07
    6190:	0e 94 bd 48 	call	0x917a	; 0x917a <__subsf3>
    6194:	28 e9       	ldi	r18, 0x98	; 152
    6196:	3c e4       	ldi	r19, 0x4C	; 76
    6198:	45 e0       	ldi	r20, 0x05	; 5
    619a:	50 e4       	ldi	r21, 0x40	; 64
    619c:	0e 94 c6 4c 	call	0x998c	; 0x998c <__mulsf3>
    61a0:	9b 01       	movw	r18, r22
    61a2:	ac 01       	movw	r20, r24
    61a4:	c7 01       	movw	r24, r14
    61a6:	b6 01       	movw	r22, r12
    61a8:	0e 94 be 48 	call	0x917c	; 0x917c <__addsf3>
    61ac:	6b 01       	movw	r12, r22
    61ae:	7c 01       	movw	r14, r24
		return 0;
	}
	//printf("amp_for_inv: %f\t",amplitude);
	float rMagEst = inverse_amplitude_model(amplitude, power);
	
	float RX = rMagEst*cos(bearing)+DROPLET_RADIUS*(bearingBasis[bestS][0]-headingBasis[bestE][0]);
    61b0:	a5 01       	movw	r20, r10
    61b2:	94 01       	movw	r18, r8
    61b4:	c3 01       	movw	r24, r6
    61b6:	b2 01       	movw	r22, r4
    61b8:	0e 94 c6 4c 	call	0x998c	; 0x998c <__mulsf3>
    61bc:	4b 01       	movw	r8, r22
    61be:	5c 01       	movw	r10, r24
    61c0:	28 81       	ld	r18, Y
    61c2:	39 81       	ldd	r19, Y+1	; 0x01
    61c4:	4a 81       	ldd	r20, Y+2	; 0x02
    61c6:	5b 81       	ldd	r21, Y+3	; 0x03
    61c8:	f8 01       	movw	r30, r16
    61ca:	60 81       	ld	r22, Z
    61cc:	71 81       	ldd	r23, Z+1	; 0x01
    61ce:	82 81       	ldd	r24, Z+2	; 0x02
    61d0:	93 81       	ldd	r25, Z+3	; 0x03
    61d2:	0e 94 bd 48 	call	0x917a	; 0x917a <__subsf3>
    61d6:	28 e9       	ldi	r18, 0x98	; 152
    61d8:	3c e4       	ldi	r19, 0x4C	; 76
    61da:	45 e0       	ldi	r20, 0x05	; 5
    61dc:	50 e4       	ldi	r21, 0x40	; 64
    61de:	0e 94 c6 4c 	call	0x998c	; 0x998c <__mulsf3>
    61e2:	9b 01       	movw	r18, r22
    61e4:	ac 01       	movw	r20, r24
    61e6:	c5 01       	movw	r24, r10
    61e8:	b4 01       	movw	r22, r8
    61ea:	0e 94 be 48 	call	0x917c	; 0x917c <__addsf3>
	float RY = rMagEst*sin(bearing)+DROPLET_RADIUS*(bearingBasis[bestS][1]-headingBasis[bestE][1]);
	
	float rangeEst = hypotf(RX,RY);
    61ee:	a7 01       	movw	r20, r14
    61f0:	96 01       	movw	r18, r12
    61f2:	0e 94 25 4c 	call	0x984a	; 0x984a <hypot>
	
	return rangeEst;
    61f6:	13 c0       	rjmp	.+38     	; 0x621e <get_initial_range_guess+0x324>
	float amplitude;
	float exp_con = sensor_model(alpha)*emitter_model(beta);
	
	if(exp_con > 0)	amplitude = brightMeas[bestE][bestS]/exp_con;	
	else{
		printf("ERROR: exp_con (%f) is negative (or zero)!\r\n", exp_con); 
    61f8:	8f 92       	push	r8
    61fa:	9f 92       	push	r9
    61fc:	af 92       	push	r10
    61fe:	bf 92       	push	r11
    6200:	8b e3       	ldi	r24, 0x3B	; 59
    6202:	92 e2       	ldi	r25, 0x22	; 34
    6204:	9f 93       	push	r25
    6206:	8f 93       	push	r24
    6208:	0e 94 e3 56 	call	0xadc6	; 0xadc6 <printf>
		return 0;
    620c:	0f 90       	pop	r0
    620e:	0f 90       	pop	r0
    6210:	0f 90       	pop	r0
    6212:	0f 90       	pop	r0
    6214:	0f 90       	pop	r0
    6216:	0f 90       	pop	r0
    6218:	60 e0       	ldi	r22, 0x00	; 0
    621a:	70 e0       	ldi	r23, 0x00	; 0
    621c:	cb 01       	movw	r24, r22
	float RY = rMagEst*sin(bearing)+DROPLET_RADIUS*(bearingBasis[bestS][1]-headingBasis[bestE][1]);
	
	float rangeEst = hypotf(RX,RY);
	
	return rangeEst;
}
    621e:	df 91       	pop	r29
    6220:	cf 91       	pop	r28
    6222:	1f 91       	pop	r17
    6224:	0f 91       	pop	r16
    6226:	ff 90       	pop	r15
    6228:	ef 90       	pop	r14
    622a:	df 90       	pop	r13
    622c:	cf 90       	pop	r12
    622e:	bf 90       	pop	r11
    6230:	af 90       	pop	r10
    6232:	9f 90       	pop	r9
    6234:	8f 90       	pop	r8
    6236:	7f 90       	pop	r7
    6238:	6f 90       	pop	r6
    623a:	5f 90       	pop	r5
    623c:	4f 90       	pop	r4
    623e:	3f 90       	pop	r3
    6240:	08 95       	ret

00006242 <range_estimate>:

float range_estimate(float init_range, float bearing, float heading, uint8_t power){
    6242:	2f 92       	push	r2
    6244:	3f 92       	push	r3
    6246:	4f 92       	push	r4
    6248:	5f 92       	push	r5
    624a:	6f 92       	push	r6
    624c:	7f 92       	push	r7
    624e:	8f 92       	push	r8
    6250:	9f 92       	push	r9
    6252:	af 92       	push	r10
    6254:	bf 92       	push	r11
    6256:	cf 92       	push	r12
    6258:	df 92       	push	r13
    625a:	ef 92       	push	r14
    625c:	ff 92       	push	r15
    625e:	0f 93       	push	r16
    6260:	1f 93       	push	r17
    6262:	cf 93       	push	r28
    6264:	df 93       	push	r29
    6266:	cd b7       	in	r28, 0x3d	; 61
    6268:	de b7       	in	r29, 0x3e	; 62
    626a:	cd 50       	subi	r28, 0x0D	; 13
    626c:	d1 40       	sbci	r29, 0x01	; 1
    626e:	cd bf       	out	0x3d, r28	; 61
    6270:	de bf       	out	0x3e, r29	; 62
    6272:	cb 50       	subi	r28, 0x0B	; 11
    6274:	df 4f       	sbci	r29, 0xFF	; 255
    6276:	68 83       	st	Y, r22
    6278:	79 83       	std	Y+1, r23	; 0x01
    627a:	8a 83       	std	Y+2, r24	; 0x02
    627c:	9b 83       	std	Y+3, r25	; 0x03
    627e:	c5 5f       	subi	r28, 0xF5	; 245
    6280:	d0 40       	sbci	r29, 0x00	; 0
    6282:	c7 50       	subi	r28, 0x07	; 7
    6284:	df 4f       	sbci	r29, 0xFF	; 255
    6286:	28 83       	st	Y, r18
    6288:	39 83       	std	Y+1, r19	; 0x01
    628a:	4a 83       	std	Y+2, r20	; 0x02
    628c:	5b 83       	std	Y+3, r21	; 0x03
    628e:	c9 5f       	subi	r28, 0xF9	; 249
    6290:	d0 40       	sbci	r29, 0x00	; 0
    6292:	c3 51       	subi	r28, 0x13	; 19
    6294:	df 4f       	sbci	r29, 0xFF	; 255
    6296:	e8 82       	st	Y, r14
    6298:	f9 82       	std	Y+1, r15	; 0x01
    629a:	0a 83       	std	Y+2, r16	; 0x02
    629c:	1b 83       	std	Y+3, r17	; 0x03
    629e:	cd 5e       	subi	r28, 0xED	; 237
    62a0:	d0 40       	sbci	r29, 0x00	; 0
    62a2:	c3 5f       	subi	r28, 0xF3	; 243
    62a4:	de 4f       	sbci	r29, 0xFE	; 254
    62a6:	c8 82       	st	Y, r12
    62a8:	cd 50       	subi	r28, 0x0D	; 13
    62aa:	d1 40       	sbci	r29, 0x01	; 1
    62ac:	2e ee       	ldi	r18, 0xEE	; 238
    62ae:	3a e2       	ldi	r19, 0x2A	; 42
    62b0:	c7 5f       	subi	r28, 0xF7	; 247
    62b2:	de 4f       	sbci	r29, 0xFE	; 254
    62b4:	28 83       	st	Y, r18
    62b6:	39 83       	std	Y+1, r19	; 0x01
    62b8:	c9 50       	subi	r28, 0x09	; 9
    62ba:	d1 40       	sbci	r29, 0x01	; 1
    62bc:	ce 01       	movw	r24, r28
    62be:	01 96       	adiw	r24, 0x01	; 1
    62c0:	c5 5f       	subi	r28, 0xF5	; 245
    62c2:	de 4f       	sbci	r29, 0xFE	; 254
    62c4:	88 83       	st	Y, r24
    62c6:	99 83       	std	Y+1, r25	; 0x01
    62c8:	cb 50       	subi	r28, 0x0B	; 11
    62ca:	d1 40       	sbci	r29, 0x01	; 1
				sense_emit_contr = sensor_model(alpha)*emitter_model(beta);
				//printf("sense_emit_contr: %f\r\n",sense_emit_contr);
				if(sense_emit_contr>0){
					calcRIJmag = inverse_amplitude_model(brightMeas[e][s]/sense_emit_contr, power);
				}else{
					calcRIJmag = 0;
    62cc:	ee e3       	ldi	r30, 0x3E	; 62
    62ce:	f0 e2       	ldi	r31, 0x20	; 32
    62d0:	cf 5f       	subi	r28, 0xFF	; 255
    62d2:	de 4f       	sbci	r29, 0xFE	; 254
    62d4:	e8 83       	st	Y, r30
    62d6:	f9 83       	std	Y+1, r31	; 0x01
    62d8:	c1 50       	subi	r28, 0x01	; 1
    62da:	d1 40       	sbci	r29, 0x01	; 1
	float calcRIJmag, calcRx, calcRy;

	int16_t maxBright = -32768;
	uint8_t maxE=0;
	uint8_t maxS=0;
	for(uint8_t e = 0; e < 6; e++){
    62dc:	ca 5f       	subi	r28, 0xFA	; 250
    62de:	de 4f       	sbci	r29, 0xFE	; 254
    62e0:	18 82       	st	Y, r1
    62e2:	c6 50       	subi	r28, 0x06	; 6
    62e4:	d1 40       	sbci	r29, 0x01	; 1
	float alpha, beta, sense_emit_contr;
	float calcRIJmag, calcRx, calcRy;

	int16_t maxBright = -32768;
	uint8_t maxE=0;
	uint8_t maxS=0;
    62e6:	c8 5f       	subi	r28, 0xF8	; 248
    62e8:	de 4f       	sbci	r29, 0xFE	; 254
    62ea:	18 82       	st	Y, r1
    62ec:	c8 50       	subi	r28, 0x08	; 8
    62ee:	d1 40       	sbci	r29, 0x01	; 1
	float sensorRXx, sensorRXy, sensorTXx, sensorTXy;
	float alpha, beta, sense_emit_contr;
	float calcRIJmag, calcRx, calcRy;

	int16_t maxBright = -32768;
	uint8_t maxE=0;
    62f0:	c9 5f       	subi	r28, 0xF9	; 249
    62f2:	de 4f       	sbci	r29, 0xFE	; 254
    62f4:	18 82       	st	Y, r1
    62f6:	c7 50       	subi	r28, 0x07	; 7
    62f8:	d1 40       	sbci	r29, 0x01	; 1
	
	float sensorRXx, sensorRXy, sensorTXx, sensorTXy;
	float alpha, beta, sense_emit_contr;
	float calcRIJmag, calcRx, calcRy;

	int16_t maxBright = -32768;
    62fa:	20 e0       	ldi	r18, 0x00	; 0
    62fc:	30 e8       	ldi	r19, 0x80	; 128
    62fe:	cd 50       	subi	r28, 0x0D	; 13
    6300:	df 4f       	sbci	r29, 0xFF	; 255
    6302:	28 83       	st	Y, r18
    6304:	39 83       	std	Y+1, r19	; 0x01
    6306:	c3 5f       	subi	r28, 0xF3	; 243
    6308:	d0 40       	sbci	r29, 0x00	; 0
    630a:	d1 c2       	rjmp	.+1442   	; 0x68ae <range_estimate+0x66c>
	uint8_t maxE=0;
	uint8_t maxS=0;
	for(uint8_t e = 0; e < 6; e++){
		for(uint8_t s = 0; s < 6; s++){
			if(brightMeas[e][s]>maxBright){
    630c:	cf 50       	subi	r28, 0x0F	; 15
    630e:	df 4f       	sbci	r29, 0xFF	; 255
    6310:	e8 81       	ld	r30, Y
    6312:	f9 81       	ldd	r31, Y+1	; 0x01
    6314:	c1 5f       	subi	r28, 0xF1	; 241
    6316:	d0 40       	sbci	r29, 0x00	; 0
    6318:	01 91       	ld	r16, Z+
    631a:	11 91       	ld	r17, Z+
    631c:	cf 50       	subi	r28, 0x0F	; 15
    631e:	df 4f       	sbci	r29, 0xFF	; 255
    6320:	e8 83       	st	Y, r30
    6322:	f9 83       	std	Y+1, r31	; 0x01
    6324:	c1 5f       	subi	r28, 0xF1	; 241
    6326:	d0 40       	sbci	r29, 0x00	; 0
    6328:	cd 50       	subi	r28, 0x0D	; 13
    632a:	df 4f       	sbci	r29, 0xFF	; 255
    632c:	28 81       	ld	r18, Y
    632e:	39 81       	ldd	r19, Y+1	; 0x01
    6330:	c3 5f       	subi	r28, 0xF3	; 243
    6332:	d0 40       	sbci	r29, 0x00	; 0
    6334:	20 17       	cp	r18, r16
    6336:	31 07       	cpc	r19, r17
    6338:	d4 f4       	brge	.+52     	; 0x636e <range_estimate+0x12c>
    633a:	cf 51       	subi	r28, 0x1F	; 31
    633c:	df 4f       	sbci	r29, 0xFF	; 255
    633e:	38 81       	ld	r19, Y
    6340:	c1 5e       	subi	r28, 0xE1	; 225
    6342:	d0 40       	sbci	r29, 0x00	; 0
    6344:	c8 5f       	subi	r28, 0xF8	; 248
    6346:	de 4f       	sbci	r29, 0xFE	; 254
    6348:	38 83       	st	Y, r19
    634a:	c8 50       	subi	r28, 0x08	; 8
    634c:	d1 40       	sbci	r29, 0x01	; 1
    634e:	cb 5f       	subi	r28, 0xFB	; 251
    6350:	de 4f       	sbci	r29, 0xFE	; 254
    6352:	88 81       	ld	r24, Y
    6354:	c5 50       	subi	r28, 0x05	; 5
    6356:	d1 40       	sbci	r29, 0x01	; 1
    6358:	c9 5f       	subi	r28, 0xF9	; 249
    635a:	de 4f       	sbci	r29, 0xFE	; 254
    635c:	88 83       	st	Y, r24
    635e:	c7 50       	subi	r28, 0x07	; 7
    6360:	d1 40       	sbci	r29, 0x01	; 1
				maxBright = brightMeas[e][s];
    6362:	cd 50       	subi	r28, 0x0D	; 13
    6364:	df 4f       	sbci	r29, 0xFF	; 255
    6366:	08 83       	st	Y, r16
    6368:	19 83       	std	Y+1, r17	; 0x01
    636a:	c3 5f       	subi	r28, 0xF3	; 243
    636c:	d0 40       	sbci	r29, 0x00	; 0
				maxE = e;
				maxS = s;
			}
			
			if(brightMeas[e][s] > 0){												
    636e:	10 16       	cp	r1, r16
    6370:	11 06       	cpc	r1, r17
    6372:	0c f0       	brlt	.+2      	; 0x6376 <range_estimate+0x134>
    6374:	46 c2       	rjmp	.+1164   	; 0x6802 <range_estimate+0x5c0>
				sensorRXx = DROPLET_RADIUS*getCosBearingBasis(0,s);
    6376:	28 e9       	ldi	r18, 0x98	; 152
    6378:	3c e4       	ldi	r19, 0x4C	; 76
    637a:	45 e0       	ldi	r20, 0x05	; 5
    637c:	50 e4       	ldi	r21, 0x40	; 64
    637e:	f2 01       	movw	r30, r4
    6380:	60 81       	ld	r22, Z
    6382:	71 81       	ldd	r23, Z+1	; 0x01
    6384:	82 81       	ldd	r24, Z+2	; 0x02
    6386:	93 81       	ldd	r25, Z+3	; 0x03
    6388:	0e 94 c6 4c 	call	0x998c	; 0x998c <__mulsf3>
    638c:	cb 51       	subi	r28, 0x1B	; 27
    638e:	df 4f       	sbci	r29, 0xFF	; 255
    6390:	68 83       	st	Y, r22
    6392:	79 83       	std	Y+1, r23	; 0x01
    6394:	8a 83       	std	Y+2, r24	; 0x02
    6396:	9b 83       	std	Y+3, r25	; 0x03
    6398:	c5 5e       	subi	r28, 0xE5	; 229
    639a:	d0 40       	sbci	r29, 0x00	; 0
				sensorRXy = DROPLET_RADIUS*getSinBearingBasis(0,s);
    639c:	28 e9       	ldi	r18, 0x98	; 152
    639e:	3c e4       	ldi	r19, 0x4C	; 76
    63a0:	45 e0       	ldi	r20, 0x05	; 5
    63a2:	50 e4       	ldi	r21, 0x40	; 64
    63a4:	f2 01       	movw	r30, r4
    63a6:	64 81       	ldd	r22, Z+4	; 0x04
    63a8:	75 81       	ldd	r23, Z+5	; 0x05
    63aa:	86 81       	ldd	r24, Z+6	; 0x06
    63ac:	97 81       	ldd	r25, Z+7	; 0x07
    63ae:	0e 94 c6 4c 	call	0x998c	; 0x998c <__mulsf3>
    63b2:	c7 51       	subi	r28, 0x17	; 23
    63b4:	df 4f       	sbci	r29, 0xFF	; 255
    63b6:	68 83       	st	Y, r22
    63b8:	79 83       	std	Y+1, r23	; 0x01
    63ba:	8a 83       	std	Y+2, r24	; 0x02
    63bc:	9b 83       	std	Y+3, r25	; 0x03
    63be:	c9 5e       	subi	r28, 0xE9	; 233
    63c0:	d0 40       	sbci	r29, 0x00	; 0
				sensorTXx = DROPLET_RADIUS*cosf(basis_angle[e]+heading) + init_range*cosf(bearing);
    63c2:	cf 5f       	subi	r28, 0xFF	; 255
    63c4:	de 4f       	sbci	r29, 0xFE	; 254
    63c6:	e8 81       	ld	r30, Y
    63c8:	f9 81       	ldd	r31, Y+1	; 0x01
    63ca:	c1 50       	subi	r28, 0x01	; 1
    63cc:	d1 40       	sbci	r29, 0x01	; 1
    63ce:	80 80       	ld	r8, Z
    63d0:	91 80       	ldd	r9, Z+1	; 0x01
    63d2:	a2 80       	ldd	r10, Z+2	; 0x02
    63d4:	b3 80       	ldd	r11, Z+3	; 0x03
    63d6:	c3 51       	subi	r28, 0x13	; 19
    63d8:	df 4f       	sbci	r29, 0xFF	; 255
    63da:	28 81       	ld	r18, Y
    63dc:	39 81       	ldd	r19, Y+1	; 0x01
    63de:	4a 81       	ldd	r20, Y+2	; 0x02
    63e0:	5b 81       	ldd	r21, Y+3	; 0x03
    63e2:	cd 5e       	subi	r28, 0xED	; 237
    63e4:	d0 40       	sbci	r29, 0x00	; 0
    63e6:	c5 01       	movw	r24, r10
    63e8:	b4 01       	movw	r22, r8
    63ea:	0e 94 be 48 	call	0x917c	; 0x917c <__addsf3>
    63ee:	6b 01       	movw	r12, r22
    63f0:	7c 01       	movw	r14, r24
    63f2:	0e 94 b8 49 	call	0x9370	; 0x9370 <cos>
    63f6:	c7 52       	subi	r28, 0x27	; 39
    63f8:	df 4f       	sbci	r29, 0xFF	; 255
    63fa:	68 83       	st	Y, r22
    63fc:	79 83       	std	Y+1, r23	; 0x01
    63fe:	8a 83       	std	Y+2, r24	; 0x02
    6400:	9b 83       	std	Y+3, r25	; 0x03
    6402:	c9 5d       	subi	r28, 0xD9	; 217
    6404:	d0 40       	sbci	r29, 0x00	; 0
    6406:	c7 50       	subi	r28, 0x07	; 7
    6408:	df 4f       	sbci	r29, 0xFF	; 255
    640a:	68 81       	ld	r22, Y
    640c:	79 81       	ldd	r23, Y+1	; 0x01
    640e:	8a 81       	ldd	r24, Y+2	; 0x02
    6410:	9b 81       	ldd	r25, Y+3	; 0x03
    6412:	c9 5f       	subi	r28, 0xF9	; 249
    6414:	d0 40       	sbci	r29, 0x00	; 0
    6416:	0e 94 b8 49 	call	0x9370	; 0x9370 <cos>
    641a:	c3 52       	subi	r28, 0x23	; 35
    641c:	df 4f       	sbci	r29, 0xFF	; 255
    641e:	68 83       	st	Y, r22
    6420:	79 83       	std	Y+1, r23	; 0x01
    6422:	8a 83       	std	Y+2, r24	; 0x02
    6424:	9b 83       	std	Y+3, r25	; 0x03
    6426:	cd 5d       	subi	r28, 0xDD	; 221
    6428:	d0 40       	sbci	r29, 0x00	; 0
    642a:	28 e9       	ldi	r18, 0x98	; 152
    642c:	3c e4       	ldi	r19, 0x4C	; 76
    642e:	45 e0       	ldi	r20, 0x05	; 5
    6430:	50 e4       	ldi	r21, 0x40	; 64
    6432:	c7 52       	subi	r28, 0x27	; 39
    6434:	df 4f       	sbci	r29, 0xFF	; 255
    6436:	68 81       	ld	r22, Y
    6438:	79 81       	ldd	r23, Y+1	; 0x01
    643a:	8a 81       	ldd	r24, Y+2	; 0x02
    643c:	9b 81       	ldd	r25, Y+3	; 0x03
    643e:	c9 5d       	subi	r28, 0xD9	; 217
    6440:	d0 40       	sbci	r29, 0x00	; 0
    6442:	0e 94 c6 4c 	call	0x998c	; 0x998c <__mulsf3>
    6446:	c7 52       	subi	r28, 0x27	; 39
    6448:	df 4f       	sbci	r29, 0xFF	; 255
    644a:	68 83       	st	Y, r22
    644c:	79 83       	std	Y+1, r23	; 0x01
    644e:	8a 83       	std	Y+2, r24	; 0x02
    6450:	9b 83       	std	Y+3, r25	; 0x03
    6452:	c9 5d       	subi	r28, 0xD9	; 217
    6454:	d0 40       	sbci	r29, 0x00	; 0
    6456:	cb 50       	subi	r28, 0x0B	; 11
    6458:	df 4f       	sbci	r29, 0xFF	; 255
    645a:	28 81       	ld	r18, Y
    645c:	39 81       	ldd	r19, Y+1	; 0x01
    645e:	4a 81       	ldd	r20, Y+2	; 0x02
    6460:	5b 81       	ldd	r21, Y+3	; 0x03
    6462:	c5 5f       	subi	r28, 0xF5	; 245
    6464:	d0 40       	sbci	r29, 0x00	; 0
    6466:	c3 52       	subi	r28, 0x23	; 35
    6468:	df 4f       	sbci	r29, 0xFF	; 255
    646a:	68 81       	ld	r22, Y
    646c:	79 81       	ldd	r23, Y+1	; 0x01
    646e:	8a 81       	ldd	r24, Y+2	; 0x02
    6470:	9b 81       	ldd	r25, Y+3	; 0x03
    6472:	cd 5d       	subi	r28, 0xDD	; 221
    6474:	d0 40       	sbci	r29, 0x00	; 0
    6476:	0e 94 c6 4c 	call	0x998c	; 0x998c <__mulsf3>
    647a:	9b 01       	movw	r18, r22
    647c:	ac 01       	movw	r20, r24
    647e:	c7 52       	subi	r28, 0x27	; 39
    6480:	df 4f       	sbci	r29, 0xFF	; 255
    6482:	68 81       	ld	r22, Y
    6484:	79 81       	ldd	r23, Y+1	; 0x01
    6486:	8a 81       	ldd	r24, Y+2	; 0x02
    6488:	9b 81       	ldd	r25, Y+3	; 0x03
    648a:	c9 5d       	subi	r28, 0xD9	; 217
    648c:	d0 40       	sbci	r29, 0x00	; 0
    648e:	0e 94 be 48 	call	0x917c	; 0x917c <__addsf3>
    6492:	c7 52       	subi	r28, 0x27	; 39
    6494:	df 4f       	sbci	r29, 0xFF	; 255
    6496:	68 83       	st	Y, r22
    6498:	79 83       	std	Y+1, r23	; 0x01
    649a:	8a 83       	std	Y+2, r24	; 0x02
    649c:	9b 83       	std	Y+3, r25	; 0x03
    649e:	c9 5d       	subi	r28, 0xD9	; 217
    64a0:	d0 40       	sbci	r29, 0x00	; 0
				sensorTXy = DROPLET_RADIUS*sinf(basis_angle[e]+heading) + init_range*sinf(bearing);
    64a2:	c7 01       	movw	r24, r14
    64a4:	b6 01       	movw	r22, r12
    64a6:	0e 94 83 4d 	call	0x9b06	; 0x9b06 <sin>
    64aa:	6b 01       	movw	r12, r22
    64ac:	7c 01       	movw	r14, r24
    64ae:	c7 50       	subi	r28, 0x07	; 7
    64b0:	df 4f       	sbci	r29, 0xFF	; 255
    64b2:	68 81       	ld	r22, Y
    64b4:	79 81       	ldd	r23, Y+1	; 0x01
    64b6:	8a 81       	ldd	r24, Y+2	; 0x02
    64b8:	9b 81       	ldd	r25, Y+3	; 0x03
    64ba:	c9 5f       	subi	r28, 0xF9	; 249
    64bc:	d0 40       	sbci	r29, 0x00	; 0
    64be:	0e 94 83 4d 	call	0x9b06	; 0x9b06 <sin>
    64c2:	c3 52       	subi	r28, 0x23	; 35
    64c4:	df 4f       	sbci	r29, 0xFF	; 255
    64c6:	68 83       	st	Y, r22
    64c8:	79 83       	std	Y+1, r23	; 0x01
    64ca:	8a 83       	std	Y+2, r24	; 0x02
    64cc:	9b 83       	std	Y+3, r25	; 0x03
    64ce:	cd 5d       	subi	r28, 0xDD	; 221
    64d0:	d0 40       	sbci	r29, 0x00	; 0
    64d2:	28 e9       	ldi	r18, 0x98	; 152
    64d4:	3c e4       	ldi	r19, 0x4C	; 76
    64d6:	45 e0       	ldi	r20, 0x05	; 5
    64d8:	50 e4       	ldi	r21, 0x40	; 64
    64da:	c7 01       	movw	r24, r14
    64dc:	b6 01       	movw	r22, r12
    64de:	0e 94 c6 4c 	call	0x998c	; 0x998c <__mulsf3>
    64e2:	6b 01       	movw	r12, r22
    64e4:	7c 01       	movw	r14, r24
    64e6:	cb 50       	subi	r28, 0x0B	; 11
    64e8:	df 4f       	sbci	r29, 0xFF	; 255
    64ea:	28 81       	ld	r18, Y
    64ec:	39 81       	ldd	r19, Y+1	; 0x01
    64ee:	4a 81       	ldd	r20, Y+2	; 0x02
    64f0:	5b 81       	ldd	r21, Y+3	; 0x03
    64f2:	c5 5f       	subi	r28, 0xF5	; 245
    64f4:	d0 40       	sbci	r29, 0x00	; 0
    64f6:	c3 52       	subi	r28, 0x23	; 35
    64f8:	df 4f       	sbci	r29, 0xFF	; 255
    64fa:	68 81       	ld	r22, Y
    64fc:	79 81       	ldd	r23, Y+1	; 0x01
    64fe:	8a 81       	ldd	r24, Y+2	; 0x02
    6500:	9b 81       	ldd	r25, Y+3	; 0x03
    6502:	cd 5d       	subi	r28, 0xDD	; 221
    6504:	d0 40       	sbci	r29, 0x00	; 0
    6506:	0e 94 c6 4c 	call	0x998c	; 0x998c <__mulsf3>
    650a:	9b 01       	movw	r18, r22
    650c:	ac 01       	movw	r20, r24
    650e:	c7 01       	movw	r24, r14
    6510:	b6 01       	movw	r22, r12
    6512:	0e 94 be 48 	call	0x917c	; 0x917c <__addsf3>
    6516:	6b 01       	movw	r12, r22
    6518:	7c 01       	movw	r14, r24

				alpha = atan2f(sensorTXy-sensorRXy,sensorTXx-sensorRXx) - basis_angle[s];
    651a:	cb 51       	subi	r28, 0x1B	; 27
    651c:	df 4f       	sbci	r29, 0xFF	; 255
    651e:	28 81       	ld	r18, Y
    6520:	39 81       	ldd	r19, Y+1	; 0x01
    6522:	4a 81       	ldd	r20, Y+2	; 0x02
    6524:	5b 81       	ldd	r21, Y+3	; 0x03
    6526:	c5 5e       	subi	r28, 0xE5	; 229
    6528:	d0 40       	sbci	r29, 0x00	; 0
    652a:	c7 52       	subi	r28, 0x27	; 39
    652c:	df 4f       	sbci	r29, 0xFF	; 255
    652e:	68 81       	ld	r22, Y
    6530:	79 81       	ldd	r23, Y+1	; 0x01
    6532:	8a 81       	ldd	r24, Y+2	; 0x02
    6534:	9b 81       	ldd	r25, Y+3	; 0x03
    6536:	c9 5d       	subi	r28, 0xD9	; 217
    6538:	d0 40       	sbci	r29, 0x00	; 0
    653a:	0e 94 bd 48 	call	0x917a	; 0x917a <__subsf3>
    653e:	c3 52       	subi	r28, 0x23	; 35
    6540:	df 4f       	sbci	r29, 0xFF	; 255
    6542:	68 83       	st	Y, r22
    6544:	79 83       	std	Y+1, r23	; 0x01
    6546:	8a 83       	std	Y+2, r24	; 0x02
    6548:	9b 83       	std	Y+3, r25	; 0x03
    654a:	cd 5d       	subi	r28, 0xDD	; 221
    654c:	d0 40       	sbci	r29, 0x00	; 0
    654e:	c7 51       	subi	r28, 0x17	; 23
    6550:	df 4f       	sbci	r29, 0xFF	; 255
    6552:	28 81       	ld	r18, Y
    6554:	39 81       	ldd	r19, Y+1	; 0x01
    6556:	4a 81       	ldd	r20, Y+2	; 0x02
    6558:	5b 81       	ldd	r21, Y+3	; 0x03
    655a:	c9 5e       	subi	r28, 0xE9	; 233
    655c:	d0 40       	sbci	r29, 0x00	; 0
    655e:	c7 01       	movw	r24, r14
    6560:	b6 01       	movw	r22, r12
    6562:	0e 94 bd 48 	call	0x917a	; 0x917a <__subsf3>
    6566:	c3 52       	subi	r28, 0x23	; 35
    6568:	df 4f       	sbci	r29, 0xFF	; 255
    656a:	28 81       	ld	r18, Y
    656c:	39 81       	ldd	r19, Y+1	; 0x01
    656e:	4a 81       	ldd	r20, Y+2	; 0x02
    6570:	5b 81       	ldd	r21, Y+3	; 0x03
    6572:	cd 5d       	subi	r28, 0xDD	; 221
    6574:	d0 40       	sbci	r29, 0x00	; 0
    6576:	0e 94 3d 49 	call	0x927a	; 0x927a <atan2>
    657a:	f3 01       	movw	r30, r6
    657c:	20 81       	ld	r18, Z
    657e:	31 81       	ldd	r19, Z+1	; 0x01
    6580:	42 81       	ldd	r20, Z+2	; 0x02
    6582:	53 81       	ldd	r21, Z+3	; 0x03
    6584:	0e 94 bd 48 	call	0x917a	; 0x917a <__subsf3>
    6588:	c3 52       	subi	r28, 0x23	; 35
    658a:	df 4f       	sbci	r29, 0xFF	; 255
    658c:	68 83       	st	Y, r22
    658e:	79 83       	std	Y+1, r23	; 0x01
    6590:	8a 83       	std	Y+2, r24	; 0x02
    6592:	9b 83       	std	Y+3, r25	; 0x03
    6594:	cd 5d       	subi	r28, 0xDD	; 221
    6596:	d0 40       	sbci	r29, 0x00	; 0
				beta = atan2f(sensorRXy-sensorTXy,sensorRXx-sensorTXx) - basis_angle[e] - heading;
    6598:	c7 52       	subi	r28, 0x27	; 39
    659a:	df 4f       	sbci	r29, 0xFF	; 255
    659c:	28 81       	ld	r18, Y
    659e:	39 81       	ldd	r19, Y+1	; 0x01
    65a0:	4a 81       	ldd	r20, Y+2	; 0x02
    65a2:	5b 81       	ldd	r21, Y+3	; 0x03
    65a4:	c9 5d       	subi	r28, 0xD9	; 217
    65a6:	d0 40       	sbci	r29, 0x00	; 0
    65a8:	cb 51       	subi	r28, 0x1B	; 27
    65aa:	df 4f       	sbci	r29, 0xFF	; 255
    65ac:	68 81       	ld	r22, Y
    65ae:	79 81       	ldd	r23, Y+1	; 0x01
    65b0:	8a 81       	ldd	r24, Y+2	; 0x02
    65b2:	9b 81       	ldd	r25, Y+3	; 0x03
    65b4:	c5 5e       	subi	r28, 0xE5	; 229
    65b6:	d0 40       	sbci	r29, 0x00	; 0
    65b8:	0e 94 bd 48 	call	0x917a	; 0x917a <__subsf3>
    65bc:	c7 52       	subi	r28, 0x27	; 39
    65be:	df 4f       	sbci	r29, 0xFF	; 255
    65c0:	68 83       	st	Y, r22
    65c2:	79 83       	std	Y+1, r23	; 0x01
    65c4:	8a 83       	std	Y+2, r24	; 0x02
    65c6:	9b 83       	std	Y+3, r25	; 0x03
    65c8:	c9 5d       	subi	r28, 0xD9	; 217
    65ca:	d0 40       	sbci	r29, 0x00	; 0
    65cc:	a7 01       	movw	r20, r14
    65ce:	96 01       	movw	r18, r12
    65d0:	c7 51       	subi	r28, 0x17	; 23
    65d2:	df 4f       	sbci	r29, 0xFF	; 255
    65d4:	68 81       	ld	r22, Y
    65d6:	79 81       	ldd	r23, Y+1	; 0x01
    65d8:	8a 81       	ldd	r24, Y+2	; 0x02
    65da:	9b 81       	ldd	r25, Y+3	; 0x03
    65dc:	c9 5e       	subi	r28, 0xE9	; 233
    65de:	d0 40       	sbci	r29, 0x00	; 0
    65e0:	0e 94 bd 48 	call	0x917a	; 0x917a <__subsf3>
    65e4:	c7 52       	subi	r28, 0x27	; 39
    65e6:	df 4f       	sbci	r29, 0xFF	; 255
    65e8:	28 81       	ld	r18, Y
    65ea:	39 81       	ldd	r19, Y+1	; 0x01
    65ec:	4a 81       	ldd	r20, Y+2	; 0x02
    65ee:	5b 81       	ldd	r21, Y+3	; 0x03
    65f0:	c9 5d       	subi	r28, 0xD9	; 217
    65f2:	d0 40       	sbci	r29, 0x00	; 0
    65f4:	0e 94 3d 49 	call	0x927a	; 0x927a <atan2>
    65f8:	a5 01       	movw	r20, r10
    65fa:	94 01       	movw	r18, r8
    65fc:	0e 94 bd 48 	call	0x917a	; 0x917a <__subsf3>
    6600:	c3 51       	subi	r28, 0x13	; 19
    6602:	df 4f       	sbci	r29, 0xFF	; 255
    6604:	28 81       	ld	r18, Y
    6606:	39 81       	ldd	r19, Y+1	; 0x01
    6608:	4a 81       	ldd	r20, Y+2	; 0x02
    660a:	5b 81       	ldd	r21, Y+3	; 0x03
    660c:	cd 5e       	subi	r28, 0xED	; 237
    660e:	d0 40       	sbci	r29, 0x00	; 0
    6610:	0e 94 bd 48 	call	0x917a	; 0x917a <__subsf3>
    6614:	4b 01       	movw	r8, r22
    6616:	5c 01       	movw	r10, r24

				alpha = pretty_angle(alpha);
    6618:	c3 52       	subi	r28, 0x23	; 35
    661a:	df 4f       	sbci	r29, 0xFF	; 255
    661c:	68 81       	ld	r22, Y
    661e:	79 81       	ldd	r23, Y+1	; 0x01
    6620:	8a 81       	ldd	r24, Y+2	; 0x02
    6622:	9b 81       	ldd	r25, Y+3	; 0x03
    6624:	cd 5d       	subi	r28, 0xDD	; 221
    6626:	d0 40       	sbci	r29, 0x00	; 0
    6628:	0e 94 4a 2e 	call	0x5c94	; 0x5c94 <pretty_angle>
    662c:	6b 01       	movw	r12, r22
    662e:	7c 01       	movw	r14, r24
				beta = pretty_angle(beta);
    6630:	c5 01       	movw	r24, r10
    6632:	b4 01       	movw	r22, r8
    6634:	0e 94 4a 2e 	call	0x5c94	; 0x5c94 <pretty_angle>
    6638:	c7 52       	subi	r28, 0x27	; 39
    663a:	df 4f       	sbci	r29, 0xFF	; 255
    663c:	68 83       	st	Y, r22
    663e:	79 83       	std	Y+1, r23	; 0x01
    6640:	8a 83       	std	Y+2, r24	; 0x02
    6642:	9b 83       	std	Y+3, r25	; 0x03
    6644:	c9 5d       	subi	r28, 0xD9	; 217
    6646:	d0 40       	sbci	r29, 0x00	; 0
				
				sense_emit_contr = sensor_model(alpha)*emitter_model(beta);
    6648:	c7 01       	movw	r24, r14
    664a:	b6 01       	movw	r22, r12
    664c:	0e 94 94 2e 	call	0x5d28	; 0x5d28 <sensor_model>
    6650:	4b 01       	movw	r8, r22
    6652:	5c 01       	movw	r10, r24
    6654:	c7 52       	subi	r28, 0x27	; 39
    6656:	df 4f       	sbci	r29, 0xFF	; 255
    6658:	68 81       	ld	r22, Y
    665a:	79 81       	ldd	r23, Y+1	; 0x01
    665c:	8a 81       	ldd	r24, Y+2	; 0x02
    665e:	9b 81       	ldd	r25, Y+3	; 0x03
    6660:	c9 5d       	subi	r28, 0xD9	; 217
    6662:	d0 40       	sbci	r29, 0x00	; 0
    6664:	0e 94 e4 2e 	call	0x5dc8	; 0x5dc8 <emitter_model>
    6668:	9b 01       	movw	r18, r22
    666a:	ac 01       	movw	r20, r24
    666c:	c5 01       	movw	r24, r10
    666e:	b4 01       	movw	r22, r8
    6670:	0e 94 c6 4c 	call	0x998c	; 0x998c <__mulsf3>
    6674:	4b 01       	movw	r8, r22
    6676:	5c 01       	movw	r10, r24
				//printf("sense_emit_contr: %f\r\n",sense_emit_contr);
				if(sense_emit_contr>0){
    6678:	20 e0       	ldi	r18, 0x00	; 0
    667a:	30 e0       	ldi	r19, 0x00	; 0
    667c:	a9 01       	movw	r20, r18
    667e:	0e 94 12 4c 	call	0x9824	; 0x9824 <__gesf2>
    6682:	18 16       	cp	r1, r24
    6684:	d4 f4       	brge	.+52     	; 0x66ba <range_estimate+0x478>
					calcRIJmag = inverse_amplitude_model(brightMeas[e][s]/sense_emit_contr, power);
    6686:	b8 01       	movw	r22, r16
    6688:	11 0f       	add	r17, r17
    668a:	88 0b       	sbc	r24, r24
    668c:	99 0b       	sbc	r25, r25
    668e:	0e 94 67 4a 	call	0x94ce	; 0x94ce <__floatsisf>
    6692:	a5 01       	movw	r20, r10
    6694:	94 01       	movw	r18, r8
    6696:	0e 94 bd 49 	call	0x937a	; 0x937a <__divsf3>
    669a:	c3 5f       	subi	r28, 0xF3	; 243
    669c:	de 4f       	sbci	r29, 0xFE	; 254
    669e:	48 81       	ld	r20, Y
    66a0:	cd 50       	subi	r28, 0x0D	; 13
    66a2:	d1 40       	sbci	r29, 0x01	; 1
    66a4:	0e 94 44 2f 	call	0x5e88	; 0x5e88 <inverse_amplitude_model>
    66a8:	c7 52       	subi	r28, 0x27	; 39
    66aa:	df 4f       	sbci	r29, 0xFF	; 255
    66ac:	68 83       	st	Y, r22
    66ae:	79 83       	std	Y+1, r23	; 0x01
    66b0:	8a 83       	std	Y+2, r24	; 0x02
    66b2:	9b 83       	std	Y+3, r25	; 0x03
    66b4:	c9 5d       	subi	r28, 0xD9	; 217
    66b6:	d0 40       	sbci	r29, 0x00	; 0
    66b8:	08 c0       	rjmp	.+16     	; 0x66ca <range_estimate+0x488>
				}else{
					calcRIJmag = 0;
    66ba:	c7 52       	subi	r28, 0x27	; 39
    66bc:	df 4f       	sbci	r29, 0xFF	; 255
    66be:	18 82       	st	Y, r1
    66c0:	19 82       	std	Y+1, r1	; 0x01
    66c2:	1a 82       	std	Y+2, r1	; 0x02
    66c4:	1b 82       	std	Y+3, r1	; 0x03
    66c6:	c9 5d       	subi	r28, 0xD9	; 217
    66c8:	d0 40       	sbci	r29, 0x00	; 0
				}
				calcRx = calcRIJmag*cosf(alpha) + sensorRXx - DROPLET_RADIUS*cosf(basis_angle[e]+heading);
    66ca:	c7 01       	movw	r24, r14
    66cc:	b6 01       	movw	r22, r12
    66ce:	0e 94 b8 49 	call	0x9370	; 0x9370 <cos>
    66d2:	c3 52       	subi	r28, 0x23	; 35
    66d4:	df 4f       	sbci	r29, 0xFF	; 255
    66d6:	68 83       	st	Y, r22
    66d8:	79 83       	std	Y+1, r23	; 0x01
    66da:	8a 83       	std	Y+2, r24	; 0x02
    66dc:	9b 83       	std	Y+3, r25	; 0x03
    66de:	cd 5d       	subi	r28, 0xDD	; 221
    66e0:	d0 40       	sbci	r29, 0x00	; 0
    66e2:	cd 5f       	subi	r28, 0xFD	; 253
    66e4:	de 4f       	sbci	r29, 0xFE	; 254
    66e6:	e8 81       	ld	r30, Y
    66e8:	f9 81       	ldd	r31, Y+1	; 0x01
    66ea:	c3 50       	subi	r28, 0x03	; 3
    66ec:	d1 40       	sbci	r29, 0x01	; 1
    66ee:	20 81       	ld	r18, Z
    66f0:	31 81       	ldd	r19, Z+1	; 0x01
    66f2:	42 81       	ldd	r20, Z+2	; 0x02
    66f4:	53 81       	ldd	r21, Z+3	; 0x03
    66f6:	c3 51       	subi	r28, 0x13	; 19
    66f8:	df 4f       	sbci	r29, 0xFF	; 255
    66fa:	68 81       	ld	r22, Y
    66fc:	79 81       	ldd	r23, Y+1	; 0x01
    66fe:	8a 81       	ldd	r24, Y+2	; 0x02
    6700:	9b 81       	ldd	r25, Y+3	; 0x03
    6702:	cd 5e       	subi	r28, 0xED	; 237
    6704:	d0 40       	sbci	r29, 0x00	; 0
    6706:	0e 94 be 48 	call	0x917c	; 0x917c <__addsf3>
    670a:	4b 01       	movw	r8, r22
    670c:	5c 01       	movw	r10, r24
    670e:	0e 94 b8 49 	call	0x9370	; 0x9370 <cos>
    6712:	c3 50       	subi	r28, 0x03	; 3
    6714:	df 4f       	sbci	r29, 0xFF	; 255
    6716:	68 83       	st	Y, r22
    6718:	79 83       	std	Y+1, r23	; 0x01
    671a:	8a 83       	std	Y+2, r24	; 0x02
    671c:	9b 83       	std	Y+3, r25	; 0x03
    671e:	cd 5f       	subi	r28, 0xFD	; 253
    6720:	d0 40       	sbci	r29, 0x00	; 0
				calcRy = calcRIJmag*sinf(alpha) + sensorRXy - DROPLET_RADIUS*sinf(basis_angle[e]+heading);
    6722:	c7 01       	movw	r24, r14
    6724:	b6 01       	movw	r22, r12
    6726:	0e 94 83 4d 	call	0x9b06	; 0x9b06 <sin>
    672a:	6b 01       	movw	r12, r22
    672c:	7c 01       	movw	r14, r24
    672e:	c5 01       	movw	r24, r10
    6730:	b4 01       	movw	r22, r8
    6732:	0e 94 83 4d 	call	0x9b06	; 0x9b06 <sin>
    6736:	4b 01       	movw	r8, r22
    6738:	5c 01       	movw	r10, r24
    673a:	c7 52       	subi	r28, 0x27	; 39
    673c:	df 4f       	sbci	r29, 0xFF	; 255
    673e:	28 81       	ld	r18, Y
    6740:	39 81       	ldd	r19, Y+1	; 0x01
    6742:	4a 81       	ldd	r20, Y+2	; 0x02
    6744:	5b 81       	ldd	r21, Y+3	; 0x03
    6746:	c9 5d       	subi	r28, 0xD9	; 217
    6748:	d0 40       	sbci	r29, 0x00	; 0
    674a:	c7 01       	movw	r24, r14
    674c:	b6 01       	movw	r22, r12
    674e:	0e 94 c6 4c 	call	0x998c	; 0x998c <__mulsf3>
    6752:	c7 51       	subi	r28, 0x17	; 23
    6754:	df 4f       	sbci	r29, 0xFF	; 255
    6756:	28 81       	ld	r18, Y
    6758:	39 81       	ldd	r19, Y+1	; 0x01
    675a:	4a 81       	ldd	r20, Y+2	; 0x02
    675c:	5b 81       	ldd	r21, Y+3	; 0x03
    675e:	c9 5e       	subi	r28, 0xE9	; 233
    6760:	d0 40       	sbci	r29, 0x00	; 0
    6762:	0e 94 be 48 	call	0x917c	; 0x917c <__addsf3>
    6766:	6b 01       	movw	r12, r22
    6768:	7c 01       	movw	r14, r24
    676a:	28 e9       	ldi	r18, 0x98	; 152
    676c:	3c e4       	ldi	r19, 0x4C	; 76
    676e:	45 e0       	ldi	r20, 0x05	; 5
    6770:	50 e4       	ldi	r21, 0x40	; 64
    6772:	c5 01       	movw	r24, r10
    6774:	b4 01       	movw	r22, r8
    6776:	0e 94 c6 4c 	call	0x998c	; 0x998c <__mulsf3>
    677a:	9b 01       	movw	r18, r22
    677c:	ac 01       	movw	r20, r24
    677e:	c7 01       	movw	r24, r14
    6780:	b6 01       	movw	r22, r12
    6782:	0e 94 bd 48 	call	0x917a	; 0x917a <__subsf3>
    6786:	6b 01       	movw	r12, r22
    6788:	7c 01       	movw	r14, r24
				if(sense_emit_contr>0){
					calcRIJmag = inverse_amplitude_model(brightMeas[e][s]/sense_emit_contr, power);
				}else{
					calcRIJmag = 0;
				}
				calcRx = calcRIJmag*cosf(alpha) + sensorRXx - DROPLET_RADIUS*cosf(basis_angle[e]+heading);
    678a:	c7 52       	subi	r28, 0x27	; 39
    678c:	df 4f       	sbci	r29, 0xFF	; 255
    678e:	28 81       	ld	r18, Y
    6790:	39 81       	ldd	r19, Y+1	; 0x01
    6792:	4a 81       	ldd	r20, Y+2	; 0x02
    6794:	5b 81       	ldd	r21, Y+3	; 0x03
    6796:	c9 5d       	subi	r28, 0xD9	; 217
    6798:	d0 40       	sbci	r29, 0x00	; 0
    679a:	c3 52       	subi	r28, 0x23	; 35
    679c:	df 4f       	sbci	r29, 0xFF	; 255
    679e:	68 81       	ld	r22, Y
    67a0:	79 81       	ldd	r23, Y+1	; 0x01
    67a2:	8a 81       	ldd	r24, Y+2	; 0x02
    67a4:	9b 81       	ldd	r25, Y+3	; 0x03
    67a6:	cd 5d       	subi	r28, 0xDD	; 221
    67a8:	d0 40       	sbci	r29, 0x00	; 0
    67aa:	0e 94 c6 4c 	call	0x998c	; 0x998c <__mulsf3>
    67ae:	cb 51       	subi	r28, 0x1B	; 27
    67b0:	df 4f       	sbci	r29, 0xFF	; 255
    67b2:	28 81       	ld	r18, Y
    67b4:	39 81       	ldd	r19, Y+1	; 0x01
    67b6:	4a 81       	ldd	r20, Y+2	; 0x02
    67b8:	5b 81       	ldd	r21, Y+3	; 0x03
    67ba:	c5 5e       	subi	r28, 0xE5	; 229
    67bc:	d0 40       	sbci	r29, 0x00	; 0
    67be:	0e 94 be 48 	call	0x917c	; 0x917c <__addsf3>
    67c2:	4b 01       	movw	r8, r22
    67c4:	5c 01       	movw	r10, r24
    67c6:	28 e9       	ldi	r18, 0x98	; 152
    67c8:	3c e4       	ldi	r19, 0x4C	; 76
    67ca:	45 e0       	ldi	r20, 0x05	; 5
    67cc:	50 e4       	ldi	r21, 0x40	; 64
    67ce:	c3 50       	subi	r28, 0x03	; 3
    67d0:	df 4f       	sbci	r29, 0xFF	; 255
    67d2:	68 81       	ld	r22, Y
    67d4:	79 81       	ldd	r23, Y+1	; 0x01
    67d6:	8a 81       	ldd	r24, Y+2	; 0x02
    67d8:	9b 81       	ldd	r25, Y+3	; 0x03
    67da:	cd 5f       	subi	r28, 0xFD	; 253
    67dc:	d0 40       	sbci	r29, 0x00	; 0
    67de:	0e 94 c6 4c 	call	0x998c	; 0x998c <__mulsf3>
    67e2:	9b 01       	movw	r18, r22
    67e4:	ac 01       	movw	r20, r24
    67e6:	c5 01       	movw	r24, r10
    67e8:	b4 01       	movw	r22, r8
    67ea:	0e 94 bd 48 	call	0x917a	; 0x917a <__subsf3>
				calcRy = calcRIJmag*sinf(alpha) + sensorRXy - DROPLET_RADIUS*sinf(basis_angle[e]+heading);
				range_matrix[e][s] = hypotf(calcRx, calcRy);
    67ee:	a7 01       	movw	r20, r14
    67f0:	96 01       	movw	r18, r12
    67f2:	0e 94 25 4c 	call	0x984a	; 0x984a <hypot>
    67f6:	f1 01       	movw	r30, r2
    67f8:	60 83       	st	Z, r22
    67fa:	71 83       	std	Z+1, r23	; 0x01
    67fc:	82 83       	std	Z+2, r24	; 0x02
    67fe:	93 83       	std	Z+3, r25	; 0x03
				continue;
    6800:	05 c0       	rjmp	.+10     	; 0x680c <range_estimate+0x5ca>
			}
			range_matrix[e][s]=0;
    6802:	f1 01       	movw	r30, r2
    6804:	10 82       	st	Z, r1
    6806:	11 82       	std	Z+1, r1	; 0x01
    6808:	12 82       	std	Z+2, r1	; 0x02
    680a:	13 82       	std	Z+3, r1	; 0x03

	int16_t maxBright = -32768;
	uint8_t maxE=0;
	uint8_t maxS=0;
	for(uint8_t e = 0; e < 6; e++){
		for(uint8_t s = 0; s < 6; s++){
    680c:	cf 51       	subi	r28, 0x1F	; 31
    680e:	df 4f       	sbci	r29, 0xFF	; 255
    6810:	f8 81       	ld	r31, Y
    6812:	c1 5e       	subi	r28, 0xE1	; 225
    6814:	d0 40       	sbci	r29, 0x00	; 0
    6816:	ff 5f       	subi	r31, 0xFF	; 255
    6818:	cf 51       	subi	r28, 0x1F	; 31
    681a:	df 4f       	sbci	r29, 0xFF	; 255
    681c:	f8 83       	st	Y, r31
    681e:	c1 5e       	subi	r28, 0xE1	; 225
    6820:	d0 40       	sbci	r29, 0x00	; 0
    6822:	24 e0       	ldi	r18, 0x04	; 4
    6824:	22 0e       	add	r2, r18
    6826:	31 1c       	adc	r3, r1
    6828:	38 e0       	ldi	r19, 0x08	; 8
    682a:	43 0e       	add	r4, r19
    682c:	51 1c       	adc	r5, r1
    682e:	84 e0       	ldi	r24, 0x04	; 4
    6830:	68 0e       	add	r6, r24
    6832:	71 1c       	adc	r7, r1
    6834:	f6 30       	cpi	r31, 0x06	; 6
    6836:	09 f0       	breq	.+2      	; 0x683a <range_estimate+0x5f8>
    6838:	69 cd       	rjmp	.-1326   	; 0x630c <range_estimate+0xca>
	float calcRIJmag, calcRx, calcRy;

	int16_t maxBright = -32768;
	uint8_t maxE=0;
	uint8_t maxS=0;
	for(uint8_t e = 0; e < 6; e++){
    683a:	ca 5f       	subi	r28, 0xFA	; 250
    683c:	de 4f       	sbci	r29, 0xFE	; 254
    683e:	98 81       	ld	r25, Y
    6840:	c6 50       	subi	r28, 0x06	; 6
    6842:	d1 40       	sbci	r29, 0x01	; 1
    6844:	9f 5f       	subi	r25, 0xFF	; 255
    6846:	ca 5f       	subi	r28, 0xFA	; 250
    6848:	de 4f       	sbci	r29, 0xFE	; 254
    684a:	98 83       	st	Y, r25
    684c:	c6 50       	subi	r28, 0x06	; 6
    684e:	d1 40       	sbci	r29, 0x01	; 1
    6850:	cf 5f       	subi	r28, 0xFF	; 255
    6852:	de 4f       	sbci	r29, 0xFE	; 254
    6854:	e8 81       	ld	r30, Y
    6856:	f9 81       	ldd	r31, Y+1	; 0x01
    6858:	c1 50       	subi	r28, 0x01	; 1
    685a:	d1 40       	sbci	r29, 0x01	; 1
    685c:	34 96       	adiw	r30, 0x04	; 4
    685e:	cf 5f       	subi	r28, 0xFF	; 255
    6860:	de 4f       	sbci	r29, 0xFE	; 254
    6862:	e8 83       	st	Y, r30
    6864:	f9 83       	std	Y+1, r31	; 0x01
    6866:	c1 50       	subi	r28, 0x01	; 1
    6868:	d1 40       	sbci	r29, 0x01	; 1
    686a:	c7 5f       	subi	r28, 0xF7	; 247
    686c:	de 4f       	sbci	r29, 0xFE	; 254
    686e:	28 81       	ld	r18, Y
    6870:	39 81       	ldd	r19, Y+1	; 0x01
    6872:	c9 50       	subi	r28, 0x09	; 9
    6874:	d1 40       	sbci	r29, 0x01	; 1
    6876:	24 5f       	subi	r18, 0xF4	; 244
    6878:	3f 4f       	sbci	r19, 0xFF	; 255
    687a:	c7 5f       	subi	r28, 0xF7	; 247
    687c:	de 4f       	sbci	r29, 0xFE	; 254
    687e:	28 83       	st	Y, r18
    6880:	39 83       	std	Y+1, r19	; 0x01
    6882:	c9 50       	subi	r28, 0x09	; 9
    6884:	d1 40       	sbci	r29, 0x01	; 1
    6886:	c5 5f       	subi	r28, 0xF5	; 245
    6888:	de 4f       	sbci	r29, 0xFE	; 254
    688a:	88 81       	ld	r24, Y
    688c:	99 81       	ldd	r25, Y+1	; 0x01
    688e:	cb 50       	subi	r28, 0x0B	; 11
    6890:	d1 40       	sbci	r29, 0x01	; 1
    6892:	48 96       	adiw	r24, 0x18	; 24
    6894:	c5 5f       	subi	r28, 0xF5	; 245
    6896:	de 4f       	sbci	r29, 0xFE	; 254
    6898:	88 83       	st	Y, r24
    689a:	99 83       	std	Y+1, r25	; 0x01
    689c:	cb 50       	subi	r28, 0x0B	; 11
    689e:	d1 40       	sbci	r29, 0x01	; 1
    68a0:	ca 5f       	subi	r28, 0xFA	; 250
    68a2:	de 4f       	sbci	r29, 0xFE	; 254
    68a4:	98 81       	ld	r25, Y
    68a6:	c6 50       	subi	r28, 0x06	; 6
    68a8:	d1 40       	sbci	r29, 0x01	; 1
    68aa:	96 30       	cpi	r25, 0x06	; 6
    68ac:	d1 f1       	breq	.+116    	; 0x6922 <range_estimate+0x6e0>
    68ae:	0f 2e       	mov	r0, r31
    68b0:	fc ea       	ldi	r31, 0xAC	; 172
    68b2:	4f 2e       	mov	r4, r31
    68b4:	f2 e2       	ldi	r31, 0x22	; 34
    68b6:	5f 2e       	mov	r5, r31
    68b8:	f0 2d       	mov	r31, r0
	float rangeEst = hypotf(RX,RY);
	
	return rangeEst;
}

float range_estimate(float init_range, float bearing, float heading, uint8_t power){
    68ba:	0f 2e       	mov	r0, r31
    68bc:	fe e3       	ldi	r31, 0x3E	; 62
    68be:	6f 2e       	mov	r6, r31
    68c0:	f0 e2       	ldi	r31, 0x20	; 32
    68c2:	7f 2e       	mov	r7, r31
    68c4:	f0 2d       	mov	r31, r0
    68c6:	c5 5f       	subi	r28, 0xF5	; 245
    68c8:	de 4f       	sbci	r29, 0xFE	; 254
    68ca:	28 80       	ld	r2, Y
    68cc:	39 80       	ldd	r3, Y+1	; 0x01
    68ce:	cb 50       	subi	r28, 0x0B	; 11
    68d0:	d1 40       	sbci	r29, 0x01	; 1
    68d2:	c7 5f       	subi	r28, 0xF7	; 247
    68d4:	de 4f       	sbci	r29, 0xFE	; 254
    68d6:	e8 81       	ld	r30, Y
    68d8:	f9 81       	ldd	r31, Y+1	; 0x01
    68da:	c9 50       	subi	r28, 0x09	; 9
    68dc:	d1 40       	sbci	r29, 0x01	; 1
    68de:	cf 50       	subi	r28, 0x0F	; 15
    68e0:	df 4f       	sbci	r29, 0xFF	; 255
    68e2:	e8 83       	st	Y, r30
    68e4:	f9 83       	std	Y+1, r31	; 0x01
    68e6:	c1 5f       	subi	r28, 0xF1	; 241
    68e8:	d0 40       	sbci	r29, 0x00	; 0
    68ea:	cf 51       	subi	r28, 0x1F	; 31
    68ec:	df 4f       	sbci	r29, 0xFF	; 255
    68ee:	18 82       	st	Y, r1
    68f0:	c1 5e       	subi	r28, 0xE1	; 225
    68f2:	d0 40       	sbci	r29, 0x00	; 0
	int16_t maxBright = -32768;
	uint8_t maxE=0;
	uint8_t maxS=0;
	for(uint8_t e = 0; e < 6; e++){
		for(uint8_t s = 0; s < 6; s++){
			if(brightMeas[e][s]>maxBright){
    68f4:	ca 5f       	subi	r28, 0xFA	; 250
    68f6:	de 4f       	sbci	r29, 0xFE	; 254
    68f8:	f8 81       	ld	r31, Y
    68fa:	c6 50       	subi	r28, 0x06	; 6
    68fc:	d1 40       	sbci	r29, 0x01	; 1
    68fe:	cb 5f       	subi	r28, 0xFB	; 251
    6900:	de 4f       	sbci	r29, 0xFE	; 254
    6902:	f8 83       	st	Y, r31
    6904:	c5 50       	subi	r28, 0x05	; 5
    6906:	d1 40       	sbci	r29, 0x01	; 1
    6908:	cf 5f       	subi	r28, 0xFF	; 255
    690a:	de 4f       	sbci	r29, 0xFE	; 254
    690c:	28 81       	ld	r18, Y
    690e:	39 81       	ldd	r19, Y+1	; 0x01
    6910:	c1 50       	subi	r28, 0x01	; 1
    6912:	d1 40       	sbci	r29, 0x01	; 1
    6914:	cd 5f       	subi	r28, 0xFD	; 253
    6916:	de 4f       	sbci	r29, 0xFE	; 254
    6918:	28 83       	st	Y, r18
    691a:	39 83       	std	Y+1, r19	; 0x01
    691c:	c3 50       	subi	r28, 0x03	; 3
    691e:	d1 40       	sbci	r29, 0x01	; 1
    6920:	f5 cc       	rjmp	.-1558   	; 0x630c <range_estimate+0xca>
    6922:	c9 5f       	subi	r28, 0xF9	; 249
    6924:	de 4f       	sbci	r29, 0xFE	; 254
    6926:	38 81       	ld	r19, Y
    6928:	c7 50       	subi	r28, 0x07	; 7
    692a:	d1 40       	sbci	r29, 0x01	; 1
    692c:	83 2f       	mov	r24, r19
    692e:	90 e0       	ldi	r25, 0x00	; 0
    6930:	3c 01       	movw	r6, r24
    6932:	e5 e0       	ldi	r30, 0x05	; 5
    6934:	6e 0e       	add	r6, r30
    6936:	71 1c       	adc	r7, r1
	float calcRIJmag, calcRx, calcRy;

	int16_t maxBright = -32768;
	uint8_t maxE=0;
	uint8_t maxS=0;
	for(uint8_t e = 0; e < 6; e++){
    6938:	a1 2c       	mov	r10, r1
    693a:	b1 2c       	mov	r11, r1
    693c:	cf 51       	subi	r28, 0x1F	; 31
    693e:	df 4f       	sbci	r29, 0xFF	; 255
    6940:	18 82       	st	Y, r1
    6942:	19 82       	std	Y+1, r1	; 0x01
    6944:	1a 82       	std	Y+2, r1	; 0x02
    6946:	1b 82       	std	Y+3, r1	; 0x03
    6948:	c1 5e       	subi	r28, 0xE1	; 225
    694a:	d0 40       	sbci	r29, 0x00	; 0
	float rangeMatSubset[3][3];
	float brightMatSubset[3][3];
	float froebNormSquared=0;
	for(uint8_t e = 0; e < 3; e++){
		for(uint8_t s = 0; s < 3; s++){
			uint8_t otherE = ((maxE+(e+5))%6);
    694c:	0f 2e       	mov	r0, r31
    694e:	f6 e0       	ldi	r31, 0x06	; 6
    6950:	cf 2e       	mov	r12, r31
    6952:	d1 2c       	mov	r13, r1
    6954:	f0 2d       	mov	r31, r0
    6956:	c8 5f       	subi	r28, 0xF8	; 248
    6958:	de 4f       	sbci	r29, 0xFE	; 254
    695a:	f8 81       	ld	r31, Y
    695c:	c8 50       	subi	r28, 0x08	; 8
    695e:	d1 40       	sbci	r29, 0x01	; 1
    6960:	2f 2e       	mov	r2, r31
    6962:	31 2c       	mov	r3, r1
    6964:	91 01       	movw	r18, r2
    6966:	2b 5f       	subi	r18, 0xFB	; 251
    6968:	3f 4f       	sbci	r19, 0xFF	; 255
    696a:	cb 51       	subi	r28, 0x1B	; 27
    696c:	df 4f       	sbci	r29, 0xFF	; 255
    696e:	28 83       	st	Y, r18
    6970:	39 83       	std	Y+1, r19	; 0x01
    6972:	c5 5e       	subi	r28, 0xE5	; 229
    6974:	d0 40       	sbci	r29, 0x00	; 0
    6976:	38 e0       	ldi	r19, 0x08	; 8
    6978:	23 0e       	add	r2, r19
    697a:	31 1c       	adc	r3, r1
    697c:	73 01       	movw	r14, r6
    697e:	57 c0       	rjmp	.+174    	; 0x6a2e <range_estimate+0x7ec>
			uint8_t otherS = ((maxS+(s+5))%6);
    6980:	c8 01       	movw	r24, r16
    6982:	b6 01       	movw	r22, r12
    6984:	0e 94 66 52 	call	0xa4cc	; 0xa4cc <__divmodhi4>
			rangeMatSubset[e][s] = range_matrix[otherE][otherS];
    6988:	f2 01       	movw	r30, r4
    698a:	e8 0f       	add	r30, r24
    698c:	f1 1d       	adc	r31, r1
    698e:	cf 01       	movw	r24, r30
    6990:	ee 0f       	add	r30, r30
    6992:	ff 1f       	adc	r31, r31
    6994:	ee 0f       	add	r30, r30
    6996:	ff 1f       	adc	r31, r31
    6998:	21 e0       	ldi	r18, 0x01	; 1
    699a:	30 e0       	ldi	r19, 0x00	; 0
    699c:	2c 0f       	add	r18, r28
    699e:	3d 1f       	adc	r19, r29
    69a0:	e2 0f       	add	r30, r18
    69a2:	f3 1f       	adc	r31, r19
    69a4:	40 81       	ld	r20, Z
    69a6:	51 81       	ldd	r21, Z+1	; 0x01
    69a8:	62 81       	ldd	r22, Z+2	; 0x02
    69aa:	73 81       	ldd	r23, Z+3	; 0x03
    69ac:	f3 01       	movw	r30, r6
    69ae:	41 93       	st	Z+, r20
    69b0:	51 93       	st	Z+, r21
    69b2:	61 93       	st	Z+, r22
    69b4:	71 93       	st	Z+, r23
    69b6:	3f 01       	movw	r6, r30
			brightMatSubset[e][s] = (float)brightMeas[otherE][otherS];
    69b8:	88 0f       	add	r24, r24
    69ba:	99 1f       	adc	r25, r25
    69bc:	fc 01       	movw	r30, r24
    69be:	e2 51       	subi	r30, 0x12	; 18
    69c0:	f5 4d       	sbci	r31, 0xD5	; 213
    69c2:	60 81       	ld	r22, Z
    69c4:	71 81       	ldd	r23, Z+1	; 0x01
    69c6:	07 2e       	mov	r0, r23
    69c8:	00 0c       	add	r0, r0
    69ca:	88 0b       	sbc	r24, r24
    69cc:	99 0b       	sbc	r25, r25
    69ce:	0e 94 67 4a 	call	0x94ce	; 0x94ce <__floatsisf>
    69d2:	f4 01       	movw	r30, r8
    69d4:	61 93       	st	Z+, r22
    69d6:	71 93       	st	Z+, r23
    69d8:	81 93       	st	Z+, r24
    69da:	91 93       	st	Z+, r25
    69dc:	4f 01       	movw	r8, r30
			froebNormSquared+=powf(brightMatSubset[e][s],2);
    69de:	9b 01       	movw	r18, r22
    69e0:	ac 01       	movw	r20, r24
    69e2:	0e 94 c6 4c 	call	0x998c	; 0x998c <__mulsf3>
    69e6:	9b 01       	movw	r18, r22
    69e8:	ac 01       	movw	r20, r24
    69ea:	cf 51       	subi	r28, 0x1F	; 31
    69ec:	df 4f       	sbci	r29, 0xFF	; 255
    69ee:	68 81       	ld	r22, Y
    69f0:	79 81       	ldd	r23, Y+1	; 0x01
    69f2:	8a 81       	ldd	r24, Y+2	; 0x02
    69f4:	9b 81       	ldd	r25, Y+3	; 0x03
    69f6:	c1 5e       	subi	r28, 0xE1	; 225
    69f8:	d0 40       	sbci	r29, 0x00	; 0
    69fa:	0e 94 be 48 	call	0x917c	; 0x917c <__addsf3>
    69fe:	cf 51       	subi	r28, 0x1F	; 31
    6a00:	df 4f       	sbci	r29, 0xFF	; 255
    6a02:	68 83       	st	Y, r22
    6a04:	79 83       	std	Y+1, r23	; 0x01
    6a06:	8a 83       	std	Y+2, r24	; 0x02
    6a08:	9b 83       	std	Y+3, r25	; 0x03
    6a0a:	c1 5e       	subi	r28, 0xE1	; 225
    6a0c:	d0 40       	sbci	r29, 0x00	; 0
    6a0e:	0f 5f       	subi	r16, 0xFF	; 255
    6a10:	1f 4f       	sbci	r17, 0xFF	; 255
	
	float rangeMatSubset[3][3];
	float brightMatSubset[3][3];
	float froebNormSquared=0;
	for(uint8_t e = 0; e < 3; e++){
		for(uint8_t s = 0; s < 3; s++){
    6a12:	02 15       	cp	r16, r2
    6a14:	13 05       	cpc	r17, r3
    6a16:	09 f0       	breq	.+2      	; 0x6a1a <range_estimate+0x7d8>
    6a18:	b3 cf       	rjmp	.-154    	; 0x6980 <range_estimate+0x73e>
    6a1a:	ff ef       	ldi	r31, 0xFF	; 255
    6a1c:	ef 1a       	sub	r14, r31
    6a1e:	ff 0a       	sbc	r15, r31
    6a20:	2c e0       	ldi	r18, 0x0C	; 12
    6a22:	a2 0e       	add	r10, r18
    6a24:	b1 1c       	adc	r11, r1
	}
	
	float rangeMatSubset[3][3];
	float brightMatSubset[3][3];
	float froebNormSquared=0;
	for(uint8_t e = 0; e < 3; e++){
    6a26:	34 e2       	ldi	r19, 0x24	; 36
    6a28:	a3 16       	cp	r10, r19
    6a2a:	b1 04       	cpc	r11, r1
    6a2c:	31 f1       	breq	.+76     	; 0x6a7a <range_estimate+0x838>
		for(uint8_t s = 0; s < 3; s++){
			uint8_t otherE = ((maxE+(e+5))%6);
    6a2e:	c7 01       	movw	r24, r14
    6a30:	b6 01       	movw	r22, r12
    6a32:	0e 94 66 52 	call	0xa4cc	; 0xa4cc <__divmodhi4>
			uint8_t otherS = ((maxS+(s+5))%6);
			rangeMatSubset[e][s] = range_matrix[otherE][otherS];
    6a36:	99 27       	eor	r25, r25
    6a38:	cb 51       	subi	r28, 0x1B	; 27
    6a3a:	df 4f       	sbci	r29, 0xFF	; 255
    6a3c:	08 81       	ld	r16, Y
    6a3e:	19 81       	ldd	r17, Y+1	; 0x01
    6a40:	c5 5e       	subi	r28, 0xE5	; 229
    6a42:	d0 40       	sbci	r29, 0x00	; 0
    6a44:	0f 2e       	mov	r0, r31
    6a46:	f1 e9       	ldi	r31, 0x91	; 145
    6a48:	6f 2e       	mov	r6, r31
    6a4a:	71 2c       	mov	r7, r1
    6a4c:	f0 2d       	mov	r31, r0
    6a4e:	6c 0e       	add	r6, r28
    6a50:	7d 1e       	adc	r7, r29
    6a52:	6a 0c       	add	r6, r10
    6a54:	7b 1c       	adc	r7, r11
    6a56:	0f 2e       	mov	r0, r31
    6a58:	f5 eb       	ldi	r31, 0xB5	; 181
    6a5a:	8f 2e       	mov	r8, r31
    6a5c:	91 2c       	mov	r9, r1
    6a5e:	f0 2d       	mov	r31, r0
    6a60:	8c 0e       	add	r8, r28
    6a62:	9d 1e       	adc	r9, r29
    6a64:	8a 0c       	add	r8, r10
    6a66:	9b 1c       	adc	r9, r11
    6a68:	2c 01       	movw	r4, r24
    6a6a:	44 0c       	add	r4, r4
    6a6c:	55 1c       	adc	r5, r5
    6a6e:	84 0d       	add	r24, r4
    6a70:	95 1d       	adc	r25, r5
    6a72:	2c 01       	movw	r4, r24
    6a74:	44 0c       	add	r4, r4
    6a76:	55 1c       	adc	r5, r5
    6a78:	83 cf       	rjmp	.-250    	; 0x6980 <range_estimate+0x73e>
			brightMatSubset[e][s] = (float)brightMeas[otherE][otherS];
			froebNormSquared+=powf(brightMatSubset[e][s],2);
		}
	}
	float froebNorm = sqrtf(froebNormSquared);
    6a7a:	cf 51       	subi	r28, 0x1F	; 31
    6a7c:	df 4f       	sbci	r29, 0xFF	; 255
    6a7e:	68 81       	ld	r22, Y
    6a80:	79 81       	ldd	r23, Y+1	; 0x01
    6a82:	8a 81       	ldd	r24, Y+2	; 0x02
    6a84:	9b 81       	ldd	r25, Y+3	; 0x03
    6a86:	c1 5e       	subi	r28, 0xE1	; 225
    6a88:	d0 40       	sbci	r29, 0x00	; 0
    6a8a:	0e 94 91 4d 	call	0x9b22	; 0x9b22 <sqrt>
    6a8e:	cb 51       	subi	r28, 0x1B	; 27
    6a90:	df 4f       	sbci	r29, 0xFF	; 255
    6a92:	68 83       	st	Y, r22
    6a94:	79 83       	std	Y+1, r23	; 0x01
    6a96:	8a 83       	std	Y+2, r24	; 0x02
    6a98:	9b 83       	std	Y+3, r25	; 0x03
    6a9a:	c5 5e       	subi	r28, 0xE5	; 229
    6a9c:	d0 40       	sbci	r29, 0x00	; 0
    6a9e:	1e 01       	movw	r2, r28
    6aa0:	81 e9       	ldi	r24, 0x91	; 145
    6aa2:	28 0e       	add	r2, r24
    6aa4:	31 1c       	adc	r3, r1
    6aa6:	5e 01       	movw	r10, r28
    6aa8:	95 eb       	ldi	r25, 0xB5	; 181
    6aaa:	a9 0e       	add	r10, r25
    6aac:	b1 1c       	adc	r11, r1
    6aae:	81 01       	movw	r16, r2
    6ab0:	0c 5d       	subi	r16, 0xDC	; 220
    6ab2:	1f 4f       	sbci	r17, 0xFF	; 255
	float range = 0;
    6ab4:	cf 51       	subi	r28, 0x1F	; 31
    6ab6:	df 4f       	sbci	r29, 0xFF	; 255
    6ab8:	18 82       	st	Y, r1
    6aba:	19 82       	std	Y+1, r1	; 0x01
    6abc:	1a 82       	std	Y+2, r1	; 0x02
    6abe:	1b 82       	std	Y+3, r1	; 0x03
    6ac0:	c1 5e       	subi	r28, 0xE1	; 225
    6ac2:	d0 40       	sbci	r29, 0x00	; 0
    6ac4:	25 01       	movw	r4, r10
    6ac6:	58 01       	movw	r10, r16
    6ac8:	40 c0       	rjmp	.+128    	; 0x6b4a <range_estimate+0x908>
	for(uint8_t e = 0; e < 3; e++){
		for(uint8_t s = 0; s < 3; s++){
			range+= rangeMatSubset[e][s]*powf(brightMatSubset[e][s]/froebNorm,2);
    6aca:	f8 01       	movw	r30, r16
    6acc:	c1 90       	ld	r12, Z+
    6ace:	d1 90       	ld	r13, Z+
    6ad0:	e1 90       	ld	r14, Z+
    6ad2:	f1 90       	ld	r15, Z+
    6ad4:	8f 01       	movw	r16, r30
    6ad6:	f3 01       	movw	r30, r6
    6ad8:	61 91       	ld	r22, Z+
    6ada:	71 91       	ld	r23, Z+
    6adc:	81 91       	ld	r24, Z+
    6ade:	91 91       	ld	r25, Z+
    6ae0:	3f 01       	movw	r6, r30
    6ae2:	cb 51       	subi	r28, 0x1B	; 27
    6ae4:	df 4f       	sbci	r29, 0xFF	; 255
    6ae6:	28 81       	ld	r18, Y
    6ae8:	39 81       	ldd	r19, Y+1	; 0x01
    6aea:	4a 81       	ldd	r20, Y+2	; 0x02
    6aec:	5b 81       	ldd	r21, Y+3	; 0x03
    6aee:	c5 5e       	subi	r28, 0xE5	; 229
    6af0:	d0 40       	sbci	r29, 0x00	; 0
    6af2:	0e 94 bd 49 	call	0x937a	; 0x937a <__divsf3>
    6af6:	9b 01       	movw	r18, r22
    6af8:	ac 01       	movw	r20, r24
    6afa:	0e 94 c6 4c 	call	0x998c	; 0x998c <__mulsf3>
    6afe:	9b 01       	movw	r18, r22
    6b00:	ac 01       	movw	r20, r24
    6b02:	c7 01       	movw	r24, r14
    6b04:	b6 01       	movw	r22, r12
    6b06:	0e 94 c6 4c 	call	0x998c	; 0x998c <__mulsf3>
    6b0a:	9b 01       	movw	r18, r22
    6b0c:	ac 01       	movw	r20, r24
    6b0e:	cf 51       	subi	r28, 0x1F	; 31
    6b10:	df 4f       	sbci	r29, 0xFF	; 255
    6b12:	68 81       	ld	r22, Y
    6b14:	79 81       	ldd	r23, Y+1	; 0x01
    6b16:	8a 81       	ldd	r24, Y+2	; 0x02
    6b18:	9b 81       	ldd	r25, Y+3	; 0x03
    6b1a:	c1 5e       	subi	r28, 0xE1	; 225
    6b1c:	d0 40       	sbci	r29, 0x00	; 0
    6b1e:	0e 94 be 48 	call	0x917c	; 0x917c <__addsf3>
    6b22:	cf 51       	subi	r28, 0x1F	; 31
    6b24:	df 4f       	sbci	r29, 0xFF	; 255
    6b26:	68 83       	st	Y, r22
    6b28:	79 83       	std	Y+1, r23	; 0x01
    6b2a:	8a 83       	std	Y+2, r24	; 0x02
    6b2c:	9b 83       	std	Y+3, r25	; 0x03
    6b2e:	c1 5e       	subi	r28, 0xE1	; 225
    6b30:	d0 40       	sbci	r29, 0x00	; 0
    6b32:	9a 94       	dec	r9
		}
	}
	float froebNorm = sqrtf(froebNormSquared);
	float range = 0;
	for(uint8_t e = 0; e < 3; e++){
		for(uint8_t s = 0; s < 3; s++){
    6b34:	91 10       	cpse	r9, r1
    6b36:	c9 cf       	rjmp	.-110    	; 0x6aca <range_estimate+0x888>
    6b38:	fc e0       	ldi	r31, 0x0C	; 12
    6b3a:	2f 0e       	add	r2, r31
    6b3c:	31 1c       	adc	r3, r1
    6b3e:	2c e0       	ldi	r18, 0x0C	; 12
    6b40:	42 0e       	add	r4, r18
    6b42:	51 1c       	adc	r5, r1
			froebNormSquared+=powf(brightMatSubset[e][s],2);
		}
	}
	float froebNorm = sqrtf(froebNormSquared);
	float range = 0;
	for(uint8_t e = 0; e < 3; e++){
    6b44:	2a 14       	cp	r2, r10
    6b46:	3b 04       	cpc	r3, r11
    6b48:	39 f0       	breq	.+14     	; 0x6b58 <range_estimate+0x916>
	float calcRIJmag, calcRx, calcRy;

	int16_t maxBright = -32768;
	uint8_t maxE=0;
	uint8_t maxS=0;
	for(uint8_t e = 0; e < 6; e++){
    6b4a:	32 01       	movw	r6, r4
    6b4c:	81 01       	movw	r16, r2
    6b4e:	0f 2e       	mov	r0, r31
    6b50:	f3 e0       	ldi	r31, 0x03	; 3
    6b52:	9f 2e       	mov	r9, r31
    6b54:	f0 2d       	mov	r31, r0
    6b56:	b9 cf       	rjmp	.-142    	; 0x6aca <range_estimate+0x888>
	}
	//printf("R: %f\r\n", range);	
	//print_range_matrix(range_matrix);
	//printf("\n");
	return range;
}
    6b58:	cf 51       	subi	r28, 0x1F	; 31
    6b5a:	df 4f       	sbci	r29, 0xFF	; 255
    6b5c:	68 81       	ld	r22, Y
    6b5e:	79 81       	ldd	r23, Y+1	; 0x01
    6b60:	8a 81       	ldd	r24, Y+2	; 0x02
    6b62:	9b 81       	ldd	r25, Y+3	; 0x03
    6b64:	c1 5e       	subi	r28, 0xE1	; 225
    6b66:	d0 40       	sbci	r29, 0x00	; 0
    6b68:	c3 5f       	subi	r28, 0xF3	; 243
    6b6a:	de 4f       	sbci	r29, 0xFE	; 254
    6b6c:	cd bf       	out	0x3d, r28	; 61
    6b6e:	de bf       	out	0x3e, r29	; 62
    6b70:	df 91       	pop	r29
    6b72:	cf 91       	pop	r28
    6b74:	1f 91       	pop	r17
    6b76:	0f 91       	pop	r16
    6b78:	ff 90       	pop	r15
    6b7a:	ef 90       	pop	r14
    6b7c:	df 90       	pop	r13
    6b7e:	cf 90       	pop	r12
    6b80:	bf 90       	pop	r11
    6b82:	af 90       	pop	r10
    6b84:	9f 90       	pop	r9
    6b86:	8f 90       	pop	r8
    6b88:	7f 90       	pop	r7
    6b8a:	6f 90       	pop	r6
    6b8c:	5f 90       	pop	r5
    6b8e:	4f 90       	pop	r4
    6b90:	3f 90       	pop	r3
    6b92:	2f 90       	pop	r2
    6b94:	08 95       	ret

00006b96 <use_rnb_data>:
		////uint8_t power = 25; //TODO: get this from the message.
		//schedule_task(5, use_rnb_data, NULL);
	//}
//}

void use_rnb_data(){
    6b96:	4f 92       	push	r4
    6b98:	5f 92       	push	r5
    6b9a:	6f 92       	push	r6
    6b9c:	7f 92       	push	r7
    6b9e:	8f 92       	push	r8
    6ba0:	9f 92       	push	r9
    6ba2:	af 92       	push	r10
    6ba4:	bf 92       	push	r11
    6ba6:	cf 92       	push	r12
    6ba8:	df 92       	push	r13
    6baa:	ef 92       	push	r14
    6bac:	ff 92       	push	r15
    6bae:	0f 93       	push	r16
    6bb0:	1f 93       	push	r17
    6bb2:	cf 93       	push	r28
    6bb4:	df 93       	push	r29
    6bb6:	cd b7       	in	r28, 0x3d	; 61
    6bb8:	de b7       	in	r29, 0x3e	; 62
    6bba:	64 97       	sbiw	r28, 0x14	; 20
    6bbc:	cd bf       	out	0x3d, r28	; 61
    6bbe:	de bf       	out	0x3e, r29	; 62
	//uint32_t start = get_time();
	uint8_t power = 255;
	int16_t matrixSum = processBrightMeas();
    6bc0:	0e 94 2b 2c 	call	0x5856	; 0x5856 <processBrightMeas>
    6bc4:	3c 01       	movw	r6, r24
	float bearing, heading;
	float error;
	
	calculate_bearing_and_heading(&bearing, &heading);
    6bc6:	be 01       	movw	r22, r28
    6bc8:	6b 5f       	subi	r22, 0xFB	; 251
    6bca:	7f 4f       	sbci	r23, 0xFF	; 255
    6bcc:	ce 01       	movw	r24, r28
    6bce:	01 96       	adiw	r24, 0x01	; 1
    6bd0:	0e 94 31 2b 	call	0x5662	; 0x5662 <calculate_bearing_and_heading>
	float initial_range = get_initial_range_guess(bearing, heading, power);
    6bd4:	2d 81       	ldd	r18, Y+5	; 0x05
    6bd6:	3e 81       	ldd	r19, Y+6	; 0x06
    6bd8:	4f 81       	ldd	r20, Y+7	; 0x07
    6bda:	58 85       	ldd	r21, Y+8	; 0x08
    6bdc:	69 81       	ldd	r22, Y+1	; 0x01
    6bde:	7a 81       	ldd	r23, Y+2	; 0x02
    6be0:	8b 81       	ldd	r24, Y+3	; 0x03
    6be2:	9c 81       	ldd	r25, Y+4	; 0x04
    6be4:	0f ef       	ldi	r16, 0xFF	; 255
    6be6:	0e 94 7d 2f 	call	0x5efa	; 0x5efa <get_initial_range_guess>
    6bea:	4b 01       	movw	r8, r22
    6bec:	5c 01       	movw	r10, r24
	if(initial_range!=0&&!isnanf(initial_range)){	
    6bee:	20 e0       	ldi	r18, 0x00	; 0
    6bf0:	30 e0       	ldi	r19, 0x00	; 0
    6bf2:	a9 01       	movw	r20, r18
    6bf4:	0e 94 b3 49 	call	0x9366	; 0x9366 <__cmpsf2>
    6bf8:	88 23       	and	r24, r24
    6bfa:	09 f4       	brne	.+2      	; 0x6bfe <use_rnb_data+0x68>
    6bfc:	e5 c0       	rjmp	.+458    	; 0x6dc8 <use_rnb_data+0x232>
    6bfe:	a5 01       	movw	r20, r10
    6c00:	94 01       	movw	r18, r8
    6c02:	c5 01       	movw	r24, r10
    6c04:	b4 01       	movw	r22, r8
    6c06:	0e 94 d5 4d 	call	0x9baa	; 0x9baa <__unordsf2>
    6c0a:	81 11       	cpse	r24, r1
    6c0c:	dd c0       	rjmp	.+442    	; 0x6dc8 <use_rnb_data+0x232>
		float range = range_estimate(initial_range, bearing, heading, power);
    6c0e:	ed 80       	ldd	r14, Y+5	; 0x05
    6c10:	fe 80       	ldd	r15, Y+6	; 0x06
    6c12:	0f 81       	ldd	r16, Y+7	; 0x07
    6c14:	18 85       	ldd	r17, Y+8	; 0x08
    6c16:	29 81       	ldd	r18, Y+1	; 0x01
    6c18:	3a 81       	ldd	r19, Y+2	; 0x02
    6c1a:	4b 81       	ldd	r20, Y+3	; 0x03
    6c1c:	5c 81       	ldd	r21, Y+4	; 0x04
    6c1e:	cc 24       	eor	r12, r12
    6c20:	ca 94       	dec	r12
    6c22:	c5 01       	movw	r24, r10
    6c24:	b4 01       	movw	r22, r8
    6c26:	0e 94 21 31 	call	0x6242	; 0x6242 <range_estimate>
    6c2a:	69 87       	std	Y+9, r22	; 0x09
    6c2c:	7a 87       	std	Y+10, r23	; 0x0a
    6c2e:	8b 87       	std	Y+11, r24	; 0x0b
    6c30:	9c 87       	std	Y+12, r25	; 0x0c
		if(!isnanf(range)){
    6c32:	9b 01       	movw	r18, r22
    6c34:	ac 01       	movw	r20, r24
    6c36:	0e 94 d5 4d 	call	0x9baa	; 0x9baa <__unordsf2>
    6c3a:	81 11       	cpse	r24, r1
    6c3c:	c5 c0       	rjmp	.+394    	; 0x6dc8 <use_rnb_data+0x232>
			if(range<2*DROPLET_RADIUS) range=5.0;
    6c3e:	28 e9       	ldi	r18, 0x98	; 152
    6c40:	3c e4       	ldi	r19, 0x4C	; 76
    6c42:	45 e8       	ldi	r20, 0x85	; 133
    6c44:	50 e4       	ldi	r21, 0x40	; 64
    6c46:	69 85       	ldd	r22, Y+9	; 0x09
    6c48:	7a 85       	ldd	r23, Y+10	; 0x0a
    6c4a:	8b 85       	ldd	r24, Y+11	; 0x0b
    6c4c:	9c 85       	ldd	r25, Y+12	; 0x0c
    6c4e:	0e 94 b3 49 	call	0x9366	; 0x9366 <__cmpsf2>
    6c52:	88 23       	and	r24, r24
    6c54:	44 f4       	brge	.+16     	; 0x6c66 <use_rnb_data+0xd0>
    6c56:	80 e0       	ldi	r24, 0x00	; 0
    6c58:	90 e0       	ldi	r25, 0x00	; 0
    6c5a:	a0 ea       	ldi	r26, 0xA0	; 160
    6c5c:	b0 e4       	ldi	r27, 0x40	; 64
    6c5e:	89 87       	std	Y+9, r24	; 0x09
    6c60:	9a 87       	std	Y+10, r25	; 0x0a
    6c62:	ab 87       	std	Y+11, r26	; 0x0b
    6c64:	bc 87       	std	Y+12, r27	; 0x0c
			float fdR, fdB, fdH;
			float conf = sqrtf(matrixSum);
    6c66:	63 01       	movw	r12, r6
    6c68:	77 0c       	add	r7, r7
    6c6a:	ee 08       	sbc	r14, r14
    6c6c:	ff 08       	sbc	r15, r15
    6c6e:	c7 01       	movw	r24, r14
    6c70:	b6 01       	movw	r22, r12
    6c72:	0e 94 67 4a 	call	0x94ce	; 0x94ce <__floatsisf>
    6c76:	0e 94 91 4d 	call	0x9b22	; 0x9b22 <sqrt>
    6c7a:	69 8b       	std	Y+17, r22	; 0x11
    6c7c:	7a 8b       	std	Y+18, r23	; 0x12
    6c7e:	8b 8b       	std	Y+19, r24	; 0x13
    6c80:	9c 8b       	std	Y+20, r25	; 0x14
			
			fdB = bearing;
    6c82:	89 80       	ldd	r8, Y+1	; 0x01
    6c84:	9a 80       	ldd	r9, Y+2	; 0x02
    6c86:	ab 80       	ldd	r10, Y+3	; 0x03
    6c88:	bc 80       	ldd	r11, Y+4	; 0x04
			fdH = heading;
    6c8a:	4d 80       	ldd	r4, Y+5	; 0x05
    6c8c:	5e 80       	ldd	r5, Y+6	; 0x06
    6c8e:	6f 80       	ldd	r6, Y+7	; 0x07
    6c90:	78 84       	ldd	r7, Y+8	; 0x08
			fdR = range;

			rStep.f = 10*FD_INIT_STEP;
    6c92:	80 e0       	ldi	r24, 0x00	; 0
    6c94:	90 e0       	ldi	r25, 0x00	; 0
    6c96:	a0 e0       	ldi	r26, 0x00	; 0
    6c98:	bf e3       	ldi	r27, 0x3F	; 63
    6c9a:	80 93 95 24 	sts	0x2495, r24	; 0x802495 <rStep>
    6c9e:	90 93 96 24 	sts	0x2496, r25	; 0x802496 <rStep+0x1>
    6ca2:	a0 93 97 24 	sts	0x2497, r26	; 0x802497 <rStep+0x2>
    6ca6:	b0 93 98 24 	sts	0x2498, r27	; 0x802498 <rStep+0x3>
			bStep.f = FD_INIT_STEP;
    6caa:	8d ec       	ldi	r24, 0xCD	; 205
    6cac:	9c ec       	ldi	r25, 0xCC	; 204
    6cae:	ac e4       	ldi	r26, 0x4C	; 76
    6cb0:	bd e3       	ldi	r27, 0x3D	; 61
    6cb2:	80 93 69 2a 	sts	0x2A69, r24	; 0x802a69 <bStep>
    6cb6:	90 93 6a 2a 	sts	0x2A6A, r25	; 0x802a6a <bStep+0x1>
    6cba:	a0 93 6b 2a 	sts	0x2A6B, r26	; 0x802a6b <bStep+0x2>
    6cbe:	b0 93 6c 2a 	sts	0x2A6C, r27	; 0x802a6c <bStep+0x3>
			hStep.f = FD_INIT_STEP;
    6cc2:	80 93 aa 2b 	sts	0x2BAA, r24	; 0x802baa <hStep>
    6cc6:	90 93 ab 2b 	sts	0x2BAB, r25	; 0x802bab <hStep+0x1>
    6cca:	a0 93 ac 2b 	sts	0x2BAC, r26	; 0x802bac <hStep+0x2>
    6cce:	b0 93 ad 2b 	sts	0x2BAD, r27	; 0x802bad <hStep+0x3>
			prevSgnEdR=0;
    6cd2:	10 92 60 2a 	sts	0x2A60, r1	; 0x802a60 <prevSgnEdR>
    6cd6:	10 92 61 2a 	sts	0x2A61, r1	; 0x802a61 <prevSgnEdR+0x1>
    6cda:	10 92 62 2a 	sts	0x2A62, r1	; 0x802a62 <prevSgnEdR+0x2>
    6cde:	10 92 63 2a 	sts	0x2A63, r1	; 0x802a63 <prevSgnEdR+0x3>
			prevSgnEdB=0;
    6ce2:	10 92 dd 24 	sts	0x24DD, r1	; 0x8024dd <prevSgnEdB>
    6ce6:	10 92 de 24 	sts	0x24DE, r1	; 0x8024de <prevSgnEdB+0x1>
    6cea:	10 92 df 24 	sts	0x24DF, r1	; 0x8024df <prevSgnEdB+0x2>
    6cee:	10 92 e0 24 	sts	0x24E0, r1	; 0x8024e0 <prevSgnEdB+0x3>
			prevSgnEdH=0;
    6cf2:	10 92 e1 24 	sts	0x24E1, r1	; 0x8024e1 <prevSgnEdH>
    6cf6:	10 92 e2 24 	sts	0x24E2, r1	; 0x8024e2 <prevSgnEdH+0x1>
    6cfa:	10 92 e3 24 	sts	0x24E3, r1	; 0x8024e3 <prevSgnEdH+0x2>
    6cfe:	10 92 e4 24 	sts	0x24E4, r1	; 0x8024e4 <prevSgnEdH+0x3>
				//if(earlyAbort) break;
			//}
			range = fdR;
			bearing = fdB;
			heading = fdH;
			error = calculate_innovation(range, bearing, heading);
    6d02:	83 01       	movw	r16, r6
    6d04:	72 01       	movw	r14, r4
    6d06:	a5 01       	movw	r20, r10
    6d08:	94 01       	movw	r18, r8
    6d0a:	69 85       	ldd	r22, Y+9	; 0x09
    6d0c:	7a 85       	ldd	r23, Y+10	; 0x0a
    6d0e:	8b 85       	ldd	r24, Y+11	; 0x0b
    6d10:	9c 85       	ldd	r25, Y+12	; 0x0c
    6d12:	0e 94 78 29 	call	0x52f0	; 0x52f0 <calculate_innovation>
    6d16:	6d 87       	std	Y+13, r22	; 0x0d
    6d18:	7e 87       	std	Y+14, r23	; 0x0e
    6d1a:	8f 87       	std	Y+15, r24	; 0x0f
    6d1c:	98 8b       	std	Y+16, r25	; 0x10
			//printf("\t After: % 5.1f, % 6.1f, % 6.1f, %6.2f [%hu]\r\n", fdR, rad_to_deg(fdB), rad_to_deg(fdH), error>3.0 ? (conf/(10.0*error*error)) : (conf/(error*error)), i);			
			//printf("\tTook %lu ms.\r\n", get_time()-start);
			conf = conf/(error*error);
    6d1e:	9b 01       	movw	r18, r22
    6d20:	ac 01       	movw	r20, r24
    6d22:	0e 94 c6 4c 	call	0x998c	; 0x998c <__mulsf3>
    6d26:	9b 01       	movw	r18, r22
    6d28:	ac 01       	movw	r20, r24
    6d2a:	69 89       	ldd	r22, Y+17	; 0x11
    6d2c:	7a 89       	ldd	r23, Y+18	; 0x12
    6d2e:	8b 89       	ldd	r24, Y+19	; 0x13
    6d30:	9c 89       	ldd	r25, Y+20	; 0x14
    6d32:	0e 94 bd 49 	call	0x937a	; 0x937a <__divsf3>
    6d36:	6b 01       	movw	r12, r22
    6d38:	7c 01       	movw	r14, r24
			if(error>3.0){
    6d3a:	20 e0       	ldi	r18, 0x00	; 0
    6d3c:	30 e0       	ldi	r19, 0x00	; 0
    6d3e:	40 e4       	ldi	r20, 0x40	; 64
    6d40:	50 e4       	ldi	r21, 0x40	; 64
    6d42:	6d 85       	ldd	r22, Y+13	; 0x0d
    6d44:	7e 85       	ldd	r23, Y+14	; 0x0e
    6d46:	8f 85       	ldd	r24, Y+15	; 0x0f
    6d48:	98 89       	ldd	r25, Y+16	; 0x10
    6d4a:	0e 94 12 4c 	call	0x9824	; 0x9824 <__gesf2>
    6d4e:	18 16       	cp	r1, r24
    6d50:	54 f4       	brge	.+20     	; 0x6d66 <use_rnb_data+0x1d0>
				conf = conf/10.0; //Nerf the confidence hard if the calculated error was too high.
    6d52:	20 e0       	ldi	r18, 0x00	; 0
    6d54:	30 e0       	ldi	r19, 0x00	; 0
    6d56:	40 e2       	ldi	r20, 0x20	; 32
    6d58:	51 e4       	ldi	r21, 0x41	; 65
    6d5a:	c7 01       	movw	r24, r14
    6d5c:	b6 01       	movw	r22, r12
    6d5e:	0e 94 bd 49 	call	0x937a	; 0x937a <__divsf3>
    6d62:	6b 01       	movw	r12, r22
    6d64:	7c 01       	movw	r14, r24
			}
			if(isnan(conf)){
    6d66:	a7 01       	movw	r20, r14
    6d68:	96 01       	movw	r18, r12
    6d6a:	c7 01       	movw	r24, r14
    6d6c:	b6 01       	movw	r22, r12
    6d6e:	0e 94 d5 4d 	call	0x9baa	; 0x9baa <__unordsf2>
    6d72:	88 23       	and	r24, r24
    6d74:	51 f0       	breq	.+20     	; 0x6d8a <use_rnb_data+0x1f4>
				conf = 0.01;
    6d76:	0f 2e       	mov	r0, r31
    6d78:	fa e0       	ldi	r31, 0x0A	; 10
    6d7a:	cf 2e       	mov	r12, r31
    6d7c:	f7 ed       	ldi	r31, 0xD7	; 215
    6d7e:	df 2e       	mov	r13, r31
    6d80:	f3 e2       	ldi	r31, 0x23	; 35
    6d82:	ef 2e       	mov	r14, r31
    6d84:	fc e3       	ldi	r31, 0x3C	; 60
    6d86:	ff 2e       	mov	r15, r31
    6d88:	f0 2d       	mov	r31, r0
			}
	
			last_good_rnb.id_number = rnbCmdID;
    6d8a:	80 91 5c 2f 	lds	r24, 0x2F5C	; 0x802f5c <rnbCmdID>
    6d8e:	90 91 5d 2f 	lds	r25, 0x2F5D	; 0x802f5d <rnbCmdID+0x1>
    6d92:	e0 ed       	ldi	r30, 0xD0	; 208
    6d94:	fa e2       	ldi	r31, 0x2A	; 42
    6d96:	80 8b       	std	Z+16, r24	; 0x10
    6d98:	91 8b       	std	Z+17, r25	; 0x11
			last_good_rnb.range		= range;
    6d9a:	89 85       	ldd	r24, Y+9	; 0x09
    6d9c:	9a 85       	ldd	r25, Y+10	; 0x0a
    6d9e:	ab 85       	ldd	r26, Y+11	; 0x0b
    6da0:	bc 85       	ldd	r27, Y+12	; 0x0c
    6da2:	80 83       	st	Z, r24
    6da4:	91 83       	std	Z+1, r25	; 0x01
    6da6:	a2 83       	std	Z+2, r26	; 0x02
    6da8:	b3 83       	std	Z+3, r27	; 0x03
			last_good_rnb.bearing	= bearing;
    6daa:	84 82       	std	Z+4, r8	; 0x04
    6dac:	95 82       	std	Z+5, r9	; 0x05
    6dae:	a6 82       	std	Z+6, r10	; 0x06
    6db0:	b7 82       	std	Z+7, r11	; 0x07
			last_good_rnb.heading	 = heading;
    6db2:	40 86       	std	Z+8, r4	; 0x08
    6db4:	51 86       	std	Z+9, r5	; 0x09
    6db6:	62 86       	std	Z+10, r6	; 0x0a
    6db8:	73 86       	std	Z+11, r7	; 0x0b
			last_good_rnb.conf		 = conf;
    6dba:	c4 86       	std	Z+12, r12	; 0x0c
    6dbc:	d5 86       	std	Z+13, r13	; 0x0d
    6dbe:	e6 86       	std	Z+14, r14	; 0x0e
    6dc0:	f7 86       	std	Z+15, r15	; 0x0f
			rnb_updated=1;
    6dc2:	81 e0       	ldi	r24, 0x01	; 1
    6dc4:	80 93 37 2b 	sts	0x2B37, r24	; 0x802b37 <rnb_updated>
		}
	}
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    6dc8:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    6dca:	f8 94       	cli
		rnbProcessingFlag=0;
    6dcc:	10 92 36 2b 	sts	0x2B36, r1	; 0x802b36 <rnbProcessingFlag>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    6dd0:	8f bf       	out	0x3f, r24	; 63
	}
}
    6dd2:	64 96       	adiw	r28, 0x14	; 20
    6dd4:	cd bf       	out	0x3d, r28	; 61
    6dd6:	de bf       	out	0x3e, r29	; 62
    6dd8:	df 91       	pop	r29
    6dda:	cf 91       	pop	r28
    6ddc:	1f 91       	pop	r17
    6dde:	0f 91       	pop	r16
    6de0:	ff 90       	pop	r15
    6de2:	ef 90       	pop	r14
    6de4:	df 90       	pop	r13
    6de6:	cf 90       	pop	r12
    6de8:	bf 90       	pop	r11
    6dea:	af 90       	pop	r10
    6dec:	9f 90       	pop	r9
    6dee:	8f 90       	pop	r8
    6df0:	7f 90       	pop	r7
    6df2:	6f 90       	pop	r6
    6df4:	5f 90       	pop	r5
    6df6:	4f 90       	pop	r4
    6df8:	08 95       	ret

00006dfa <rgb_led_init>:
#include "rgb_led.h"

void rgb_led_init()
{
	// LED Pins as output
	PORTE.DIRSET = LED_R_PIN_bm | LED_G_PIN_bm;
    6dfa:	80 e3       	ldi	r24, 0x30	; 48
    6dfc:	80 93 81 06 	sts	0x0681, r24	; 0x800681 <__TEXT_REGION_LENGTH__+0x700681>
	PORTD.DIRSET = LED_B_PIN_bm;
    6e00:	80 e1       	ldi	r24, 0x10	; 16
    6e02:	80 93 61 06 	sts	0x0661, r24	; 0x800661 <__TEXT_REGION_LENGTH__+0x700661>
	
	//-------RED&GREEN--------
	TCE1.PER = 255;							
    6e06:	e0 e4       	ldi	r30, 0x40	; 64
    6e08:	fa e0       	ldi	r31, 0x0A	; 10
    6e0a:	2f ef       	ldi	r18, 0xFF	; 255
    6e0c:	30 e0       	ldi	r19, 0x00	; 0
    6e0e:	26 a3       	std	Z+38, r18	; 0x26
    6e10:	37 a3       	std	Z+39, r19	; 0x27
	TCE1.CCA = 0;							
    6e12:	10 a6       	std	Z+40, r1	; 0x28
    6e14:	11 a6       	std	Z+41, r1	; 0x29
	TCE1.CCB = 0;							
    6e16:	12 a6       	std	Z+42, r1	; 0x2a
    6e18:	13 a6       	std	Z+43, r1	; 0x2b
	TCE1.CTRLA = TC_CLKSEL_DIV64_gc;		
    6e1a:	85 e0       	ldi	r24, 0x05	; 5
    6e1c:	80 83       	st	Z, r24
	TCE1.CTRLB = TC_WGMODE_SS_gc | TC1_CCBEN_bm | TC1_CCAEN_bm;
    6e1e:	93 e3       	ldi	r25, 0x33	; 51
    6e20:	91 83       	std	Z+1, r25	; 0x01
	
	//---------BLUE-----------
	
	TCD1.PER = 255;
    6e22:	e0 e4       	ldi	r30, 0x40	; 64
    6e24:	f9 e0       	ldi	r31, 0x09	; 9
    6e26:	26 a3       	std	Z+38, r18	; 0x26
    6e28:	37 a3       	std	Z+39, r19	; 0x27
	TCD1.CCA = 0;
    6e2a:	10 a6       	std	Z+40, r1	; 0x28
    6e2c:	11 a6       	std	Z+41, r1	; 0x29
	TCD1.CTRLA = TC_CLKSEL_DIV64_gc;
    6e2e:	80 83       	st	Z, r24
	TCD1.CTRLB = TC_WGMODE_SS_gc | TC1_CCAEN_bm;	
    6e30:	83 e1       	ldi	r24, 0x13	; 19
    6e32:	81 83       	std	Z+1, r24	; 0x01
    6e34:	08 95       	ret

00006e36 <led_off>:
}

void led_off()
{ 
	TCE1.CCABUF = 0;
    6e36:	e0 e4       	ldi	r30, 0x40	; 64
    6e38:	fa e0       	ldi	r31, 0x0A	; 10
    6e3a:	10 ae       	std	Z+56, r1	; 0x38
    6e3c:	11 ae       	std	Z+57, r1	; 0x39
	TCE1.CCBBUF = 0;
    6e3e:	12 ae       	std	Z+58, r1	; 0x3a
    6e40:	13 ae       	std	Z+59, r1	; 0x3b
	TCD1.CCABUF = 0;	
    6e42:	10 92 78 09 	sts	0x0978, r1	; 0x800978 <__TEXT_REGION_LENGTH__+0x700978>
    6e46:	10 92 79 09 	sts	0x0979, r1	; 0x800979 <__TEXT_REGION_LENGTH__+0x700979>
    6e4a:	08 95       	ret

00006e4c <set_rgb>:

void rgb_led_init(); // Set RGB LED pins as output & initialize timers for PWM

// Get and set intensity for red LED
inline uint8_t get_red_led() { return TCE1.CCBBUF; }
inline void set_red_led(uint8_t saturation) { TCE1.CCBBUF = saturation; }
    6e4c:	90 e0       	ldi	r25, 0x00	; 0
    6e4e:	e0 e4       	ldi	r30, 0x40	; 64
    6e50:	fa e0       	ldi	r31, 0x0A	; 10
    6e52:	82 af       	std	Z+58, r24	; 0x3a
    6e54:	93 af       	std	Z+59, r25	; 0x3b

// Get and set intensity for green LED
inline uint8_t get_green_led() { return TCE1.CCABUF; }
inline void set_green_led(uint8_t saturation) { TCE1.CCABUF = saturation; }
    6e56:	70 e0       	ldi	r23, 0x00	; 0
    6e58:	60 af       	std	Z+56, r22	; 0x38
    6e5a:	71 af       	std	Z+57, r23	; 0x39
	
// Get and set intensity for blue LED
inline uint8_t get_blue_led() { return TCD1.CCABUF; }
inline void set_blue_led(uint8_t saturation) { TCD1.CCABUF = saturation;	}
    6e5c:	50 e0       	ldi	r21, 0x00	; 0
    6e5e:	40 93 78 09 	sts	0x0978, r20	; 0x800978 <__TEXT_REGION_LENGTH__+0x700978>
    6e62:	50 93 79 09 	sts	0x0979, r21	; 0x800979 <__TEXT_REGION_LENGTH__+0x700979>
    6e66:	08 95       	ret

00006e68 <hsv_to_rgb>:
	set_rgb(r,g,b);
}

//Adapted from cs.rit.edu/~ncs/color/t_convert.html
void hsv_to_rgb(uint16_t hue, uint8_t saturation, uint8_t val, uint8_t* red, uint8_t* green, uint8_t* blue)
{
    6e68:	2f 92       	push	r2
    6e6a:	3f 92       	push	r3
    6e6c:	4f 92       	push	r4
    6e6e:	5f 92       	push	r5
    6e70:	6f 92       	push	r6
    6e72:	7f 92       	push	r7
    6e74:	8f 92       	push	r8
    6e76:	9f 92       	push	r9
    6e78:	af 92       	push	r10
    6e7a:	bf 92       	push	r11
    6e7c:	cf 92       	push	r12
    6e7e:	df 92       	push	r13
    6e80:	ef 92       	push	r14
    6e82:	ff 92       	push	r15
    6e84:	0f 93       	push	r16
    6e86:	1f 93       	push	r17
    6e88:	cf 93       	push	r28
    6e8a:	df 93       	push	r29
    6e8c:	cd b7       	in	r28, 0x3d	; 61
    6e8e:	de b7       	in	r29, 0x3e	; 62
    6e90:	2b 97       	sbiw	r28, 0x0b	; 11
    6e92:	cd bf       	out	0x3d, r28	; 61
    6e94:	de bf       	out	0x3e, r29	; 62
    6e96:	6c 01       	movw	r12, r24
    6e98:	b4 2e       	mov	r11, r20
    6e9a:	2d 83       	std	Y+5, r18	; 0x05
    6e9c:	3e 83       	std	Y+6, r19	; 0x06
	float h = (hue%360)*1.0;
	float s = saturation/255.0;
    6e9e:	70 e0       	ldi	r23, 0x00	; 0
    6ea0:	80 e0       	ldi	r24, 0x00	; 0
    6ea2:	90 e0       	ldi	r25, 0x00	; 0
    6ea4:	0e 94 67 4a 	call	0x94ce	; 0x94ce <__floatsisf>
    6ea8:	20 e0       	ldi	r18, 0x00	; 0
    6eaa:	30 e0       	ldi	r19, 0x00	; 0
    6eac:	4f e7       	ldi	r20, 0x7F	; 127
    6eae:	53 e4       	ldi	r21, 0x43	; 67
    6eb0:	0e 94 bd 49 	call	0x937a	; 0x937a <__divsf3>
    6eb4:	69 83       	std	Y+1, r22	; 0x01
    6eb6:	7a 83       	std	Y+2, r23	; 0x02
    6eb8:	8b 83       	std	Y+3, r24	; 0x03
    6eba:	9c 83       	std	Y+4, r25	; 0x04
	float v = val/255.0;
	float f, p, q, t;
	float r=0, g=0, b=0;
	
	if (abs(s)<0.00001){
    6ebc:	0e 94 2f 4a 	call	0x945e	; 0x945e <__fixsfsi>
    6ec0:	9b 01       	movw	r18, r22
    6ec2:	77 23       	and	r23, r23
    6ec4:	24 f4       	brge	.+8      	; 0x6ece <hsv_to_rgb+0x66>
    6ec6:	22 27       	eor	r18, r18
    6ec8:	33 27       	eor	r19, r19
    6eca:	26 1b       	sub	r18, r22
    6ecc:	37 0b       	sbc	r19, r23
    6ece:	b9 01       	movw	r22, r18
    6ed0:	33 0f       	add	r19, r19
    6ed2:	88 0b       	sbc	r24, r24
    6ed4:	99 0b       	sbc	r25, r25
    6ed6:	0e 94 67 4a 	call	0x94ce	; 0x94ce <__floatsisf>
    6eda:	2c ea       	ldi	r18, 0xAC	; 172
    6edc:	35 ec       	ldi	r19, 0xC5	; 197
    6ede:	47 e2       	ldi	r20, 0x27	; 39
    6ee0:	57 e3       	ldi	r21, 0x37	; 55
    6ee2:	0e 94 b3 49 	call	0x9366	; 0x9366 <__cmpsf2>
    6ee6:	88 23       	and	r24, r24
    6ee8:	44 f4       	brge	.+16     	; 0x6efa <hsv_to_rgb+0x92>
		*red = *green = *blue = val;
    6eea:	f7 01       	movw	r30, r14
    6eec:	b0 82       	st	Z, r11
    6eee:	f8 01       	movw	r30, r16
    6ef0:	b0 82       	st	Z, r11
    6ef2:	ed 81       	ldd	r30, Y+5	; 0x05
    6ef4:	fe 81       	ldd	r31, Y+6	; 0x06
    6ef6:	b0 82       	st	Z, r11
		return;
    6ef8:	28 c1       	rjmp	.+592    	; 0x714a <hsv_to_rgb+0x2e2>
//Adapted from cs.rit.edu/~ncs/color/t_convert.html
void hsv_to_rgb(uint16_t hue, uint8_t saturation, uint8_t val, uint8_t* red, uint8_t* green, uint8_t* blue)
{
	float h = (hue%360)*1.0;
	float s = saturation/255.0;
	float v = val/255.0;
    6efa:	6b 2d       	mov	r22, r11
    6efc:	70 e0       	ldi	r23, 0x00	; 0
    6efe:	80 e0       	ldi	r24, 0x00	; 0
    6f00:	90 e0       	ldi	r25, 0x00	; 0
    6f02:	0e 94 67 4a 	call	0x94ce	; 0x94ce <__floatsisf>
    6f06:	20 e0       	ldi	r18, 0x00	; 0
    6f08:	30 e0       	ldi	r19, 0x00	; 0
    6f0a:	4f e7       	ldi	r20, 0x7F	; 127
    6f0c:	53 e4       	ldi	r21, 0x43	; 67
    6f0e:	0e 94 bd 49 	call	0x937a	; 0x937a <__divsf3>
    6f12:	66 2e       	mov	r6, r22
    6f14:	57 2e       	mov	r5, r23
    6f16:	48 2e       	mov	r4, r24
    6f18:	39 2e       	mov	r3, r25
}

//Adapted from cs.rit.edu/~ncs/color/t_convert.html
void hsv_to_rgb(uint16_t hue, uint8_t saturation, uint8_t val, uint8_t* red, uint8_t* green, uint8_t* blue)
{
	float h = (hue%360)*1.0;
    6f1a:	96 01       	movw	r18, r12
    6f1c:	a3 e8       	ldi	r26, 0x83	; 131
    6f1e:	bd e2       	ldi	r27, 0x2D	; 45
    6f20:	0e 94 ac 52 	call	0xa558	; 0xa558 <__umulhisi3>
    6f24:	00 24       	eor	r0, r0
    6f26:	88 0f       	add	r24, r24
    6f28:	99 1f       	adc	r25, r25
    6f2a:	00 1c       	adc	r0, r0
    6f2c:	88 0f       	add	r24, r24
    6f2e:	99 1f       	adc	r25, r25
    6f30:	00 1c       	adc	r0, r0
    6f32:	89 2f       	mov	r24, r25
    6f34:	90 2d       	mov	r25, r0
    6f36:	48 e6       	ldi	r20, 0x68	; 104
    6f38:	51 e0       	ldi	r21, 0x01	; 1
    6f3a:	84 9f       	mul	r24, r20
    6f3c:	90 01       	movw	r18, r0
    6f3e:	85 9f       	mul	r24, r21
    6f40:	30 0d       	add	r19, r0
    6f42:	94 9f       	mul	r25, r20
    6f44:	30 0d       	add	r19, r0
    6f46:	11 24       	eor	r1, r1
    6f48:	c2 1a       	sub	r12, r18
    6f4a:	d3 0a       	sbc	r13, r19
    6f4c:	b6 01       	movw	r22, r12
    6f4e:	80 e0       	ldi	r24, 0x00	; 0
    6f50:	90 e0       	ldi	r25, 0x00	; 0
    6f52:	0e 94 65 4a 	call	0x94ca	; 0x94ca <__floatunsisf>
	if (abs(s)<0.00001){
		*red = *green = *blue = val;
		return;
	}
	
	h = h / 60.0;
    6f56:	20 e0       	ldi	r18, 0x00	; 0
    6f58:	30 e0       	ldi	r19, 0x00	; 0
    6f5a:	40 e7       	ldi	r20, 0x70	; 112
    6f5c:	52 e4       	ldi	r21, 0x42	; 66
    6f5e:	0e 94 bd 49 	call	0x937a	; 0x937a <__divsf3>
    6f62:	4b 01       	movw	r8, r22
    6f64:	5c 01       	movw	r10, r24
	uint8_t i = (uint8_t)h;
    6f66:	0e 94 36 4a 	call	0x946c	; 0x946c <__fixunssfsi>
    6f6a:	76 2e       	mov	r7, r22
	f = h - i;
    6f6c:	70 e0       	ldi	r23, 0x00	; 0
    6f6e:	80 e0       	ldi	r24, 0x00	; 0
    6f70:	90 e0       	ldi	r25, 0x00	; 0
    6f72:	0e 94 67 4a 	call	0x94ce	; 0x94ce <__floatsisf>
    6f76:	9b 01       	movw	r18, r22
    6f78:	ac 01       	movw	r20, r24
    6f7a:	c5 01       	movw	r24, r10
    6f7c:	b4 01       	movw	r22, r8
    6f7e:	0e 94 bd 48 	call	0x917a	; 0x917a <__subsf3>
    6f82:	6f 83       	std	Y+7, r22	; 0x07
    6f84:	78 87       	std	Y+8, r23	; 0x08
    6f86:	89 87       	std	Y+9, r24	; 0x09
    6f88:	9a 87       	std	Y+10, r25	; 0x0a
	
	p = v*(1-s);
    6f8a:	29 81       	ldd	r18, Y+1	; 0x01
    6f8c:	3a 81       	ldd	r19, Y+2	; 0x02
    6f8e:	4b 81       	ldd	r20, Y+3	; 0x03
    6f90:	5c 81       	ldd	r21, Y+4	; 0x04
    6f92:	60 e0       	ldi	r22, 0x00	; 0
    6f94:	70 e0       	ldi	r23, 0x00	; 0
    6f96:	80 e8       	ldi	r24, 0x80	; 128
    6f98:	9f e3       	ldi	r25, 0x3F	; 63
    6f9a:	0e 94 bd 48 	call	0x917a	; 0x917a <__subsf3>
    6f9e:	26 2d       	mov	r18, r6
    6fa0:	35 2d       	mov	r19, r5
    6fa2:	44 2d       	mov	r20, r4
    6fa4:	53 2d       	mov	r21, r3
    6fa6:	0e 94 c6 4c 	call	0x998c	; 0x998c <__mulsf3>
    6faa:	26 2e       	mov	r2, r22
    6fac:	97 2e       	mov	r9, r23
    6fae:	a8 2e       	mov	r10, r24
    6fb0:	b9 2e       	mov	r11, r25
	q = v*(1-s*f);
    6fb2:	2f 81       	ldd	r18, Y+7	; 0x07
    6fb4:	38 85       	ldd	r19, Y+8	; 0x08
    6fb6:	49 85       	ldd	r20, Y+9	; 0x09
    6fb8:	5a 85       	ldd	r21, Y+10	; 0x0a
    6fba:	69 81       	ldd	r22, Y+1	; 0x01
    6fbc:	7a 81       	ldd	r23, Y+2	; 0x02
    6fbe:	8b 81       	ldd	r24, Y+3	; 0x03
    6fc0:	9c 81       	ldd	r25, Y+4	; 0x04
    6fc2:	0e 94 c6 4c 	call	0x998c	; 0x998c <__mulsf3>
    6fc6:	9b 01       	movw	r18, r22
    6fc8:	ac 01       	movw	r20, r24
    6fca:	60 e0       	ldi	r22, 0x00	; 0
    6fcc:	70 e0       	ldi	r23, 0x00	; 0
    6fce:	80 e8       	ldi	r24, 0x80	; 128
    6fd0:	9f e3       	ldi	r25, 0x3F	; 63
    6fd2:	0e 94 bd 48 	call	0x917a	; 0x917a <__subsf3>
    6fd6:	26 2d       	mov	r18, r6
    6fd8:	35 2d       	mov	r19, r5
    6fda:	44 2d       	mov	r20, r4
    6fdc:	53 2d       	mov	r21, r3
    6fde:	0e 94 c6 4c 	call	0x998c	; 0x998c <__mulsf3>
    6fe2:	c6 2e       	mov	r12, r22
    6fe4:	d7 2e       	mov	r13, r23
    6fe6:	8b 87       	std	Y+11, r24	; 0x0b
    6fe8:	89 2e       	mov	r8, r25
	t = v*(1-s*(1-f));
    6fea:	2f 81       	ldd	r18, Y+7	; 0x07
    6fec:	38 85       	ldd	r19, Y+8	; 0x08
    6fee:	49 85       	ldd	r20, Y+9	; 0x09
    6ff0:	5a 85       	ldd	r21, Y+10	; 0x0a
    6ff2:	60 e0       	ldi	r22, 0x00	; 0
    6ff4:	70 e0       	ldi	r23, 0x00	; 0
    6ff6:	80 e8       	ldi	r24, 0x80	; 128
    6ff8:	9f e3       	ldi	r25, 0x3F	; 63
    6ffa:	0e 94 bd 48 	call	0x917a	; 0x917a <__subsf3>
    6ffe:	29 81       	ldd	r18, Y+1	; 0x01
    7000:	3a 81       	ldd	r19, Y+2	; 0x02
    7002:	4b 81       	ldd	r20, Y+3	; 0x03
    7004:	5c 81       	ldd	r21, Y+4	; 0x04
    7006:	0e 94 c6 4c 	call	0x998c	; 0x998c <__mulsf3>
    700a:	9b 01       	movw	r18, r22
    700c:	ac 01       	movw	r20, r24
    700e:	60 e0       	ldi	r22, 0x00	; 0
    7010:	70 e0       	ldi	r23, 0x00	; 0
    7012:	80 e8       	ldi	r24, 0x80	; 128
    7014:	9f e3       	ldi	r25, 0x3F	; 63
    7016:	0e 94 bd 48 	call	0x917a	; 0x917a <__subsf3>
    701a:	26 2d       	mov	r18, r6
    701c:	35 2d       	mov	r19, r5
    701e:	44 2d       	mov	r20, r4
    7020:	53 2d       	mov	r21, r3
    7022:	0e 94 c6 4c 	call	0x998c	; 0x998c <__mulsf3>
	
	switch(i)
    7026:	f2 e0       	ldi	r31, 0x02	; 2
    7028:	7f 16       	cp	r7, r31
    702a:	69 f1       	breq	.+90     	; 0x7086 <hsv_to_rgb+0x21e>
    702c:	f7 15       	cp	r31, r7
    702e:	30 f0       	brcs	.+12     	; 0x703c <hsv_to_rgb+0x1d4>
    7030:	77 20       	and	r7, r7
    7032:	79 f0       	breq	.+30     	; 0x7052 <hsv_to_rgb+0x1ea>
    7034:	21 e0       	ldi	r18, 0x01	; 1
    7036:	72 16       	cp	r7, r18
    7038:	a9 f0       	breq	.+42     	; 0x7064 <hsv_to_rgb+0x1fc>
    703a:	50 c0       	rjmp	.+160    	; 0x70dc <hsv_to_rgb+0x274>
    703c:	e4 e0       	ldi	r30, 0x04	; 4
    703e:	7e 16       	cp	r7, r30
    7040:	09 f4       	brne	.+2      	; 0x7044 <hsv_to_rgb+0x1dc>
    7042:	43 c0       	rjmp	.+134    	; 0x70ca <hsv_to_rgb+0x262>
    7044:	7e 16       	cp	r7, r30
    7046:	80 f1       	brcs	.+96     	; 0x70a8 <hsv_to_rgb+0x240>
    7048:	f5 e0       	ldi	r31, 0x05	; 5
    704a:	7f 16       	cp	r7, r31
    704c:	09 f4       	brne	.+2      	; 0x7050 <hsv_to_rgb+0x1e8>
    704e:	52 c0       	rjmp	.+164    	; 0x70f4 <hsv_to_rgb+0x28c>
    7050:	45 c0       	rjmp	.+138    	; 0x70dc <hsv_to_rgb+0x274>
	{
		case 0:
			r = v;
			g = t;
			b = p;
    7052:	c2 2c       	mov	r12, r2
    7054:	d9 2c       	mov	r13, r9
    7056:	ab 86       	std	Y+11, r10	; 0x0b
    7058:	8b 2c       	mov	r8, r11
	
	switch(i)
	{
		case 0:
			r = v;
			g = t;
    705a:	26 2e       	mov	r2, r22
    705c:	97 2e       	mov	r9, r23
    705e:	a8 2e       	mov	r10, r24
    7060:	b9 2e       	mov	r11, r25
    7062:	48 c0       	rjmp	.+144    	; 0x70f4 <hsv_to_rgb+0x28c>
			break;
		case 1:
			r = q;
			g = v;
			b = p;
			break;
    7064:	36 2d       	mov	r19, r6
    7066:	25 2d       	mov	r18, r5
    7068:	94 2d       	mov	r25, r4
    706a:	83 2d       	mov	r24, r3
			r = v;
			g = t;
			b = p;
			break;
		case 1:
			r = q;
    706c:	6c 2c       	mov	r6, r12
    706e:	5d 2c       	mov	r5, r13
    7070:	4b 84       	ldd	r4, Y+11	; 0x0b
    7072:	38 2c       	mov	r3, r8
			g = v;
			b = p;
    7074:	c2 2c       	mov	r12, r2
    7076:	d9 2c       	mov	r13, r9
    7078:	ab 86       	std	Y+11, r10	; 0x0b
    707a:	8b 2c       	mov	r8, r11
			g = t;
			b = p;
			break;
		case 1:
			r = q;
			g = v;
    707c:	23 2e       	mov	r2, r19
    707e:	92 2e       	mov	r9, r18
    7080:	a9 2e       	mov	r10, r25
    7082:	b8 2e       	mov	r11, r24
			b = p;
			break;
    7084:	37 c0       	rjmp	.+110    	; 0x70f4 <hsv_to_rgb+0x28c>
		case 2:
			r = p;
			g = v;
			b = t;
    7086:	c6 2e       	mov	r12, r22
    7088:	d7 2e       	mov	r13, r23
    708a:	8b 87       	std	Y+11, r24	; 0x0b
    708c:	89 2e       	mov	r8, r25
			break;
    708e:	36 2d       	mov	r19, r6
    7090:	25 2d       	mov	r18, r5
    7092:	94 2d       	mov	r25, r4
    7094:	83 2d       	mov	r24, r3
			r = q;
			g = v;
			b = p;
			break;
		case 2:
			r = p;
    7096:	62 2c       	mov	r6, r2
    7098:	59 2c       	mov	r5, r9
    709a:	4a 2c       	mov	r4, r10
    709c:	3b 2c       	mov	r3, r11
			g = v;
    709e:	23 2e       	mov	r2, r19
    70a0:	92 2e       	mov	r9, r18
    70a2:	a9 2e       	mov	r10, r25
    70a4:	b8 2e       	mov	r11, r24
			b = t;
			break;
    70a6:	26 c0       	rjmp	.+76     	; 0x70f4 <hsv_to_rgb+0x28c>
		case 3:
			r = p;
			g = q;
			b = v;
			break;
    70a8:	36 2d       	mov	r19, r6
    70aa:	25 2d       	mov	r18, r5
    70ac:	94 2d       	mov	r25, r4
    70ae:	83 2d       	mov	r24, r3
			r = p;
			g = v;
			b = t;
			break;
		case 3:
			r = p;
    70b0:	62 2c       	mov	r6, r2
    70b2:	59 2c       	mov	r5, r9
    70b4:	4a 2c       	mov	r4, r10
    70b6:	3b 2c       	mov	r3, r11
			g = q;
    70b8:	2c 2c       	mov	r2, r12
    70ba:	9d 2c       	mov	r9, r13
    70bc:	ab 84       	ldd	r10, Y+11	; 0x0b
    70be:	b8 2c       	mov	r11, r8
			b = v;
    70c0:	c3 2e       	mov	r12, r19
    70c2:	d2 2e       	mov	r13, r18
    70c4:	9b 87       	std	Y+11, r25	; 0x0b
    70c6:	88 2e       	mov	r8, r24
			break;
    70c8:	15 c0       	rjmp	.+42     	; 0x70f4 <hsv_to_rgb+0x28c>
		case 4:
			r = t;
			g = p;
			b = v;
    70ca:	c6 2c       	mov	r12, r6
    70cc:	d5 2c       	mov	r13, r5
    70ce:	4b 86       	std	Y+11, r4	; 0x0b
    70d0:	83 2c       	mov	r8, r3
			r = p;
			g = q;
			b = v;
			break;
		case 4:
			r = t;
    70d2:	66 2e       	mov	r6, r22
    70d4:	57 2e       	mov	r5, r23
    70d6:	48 2e       	mov	r4, r24
    70d8:	39 2e       	mov	r3, r25
			g = p;
			b = v;
			break;
    70da:	0c c0       	rjmp	.+24     	; 0x70f4 <hsv_to_rgb+0x28c>
{
	float h = (hue%360)*1.0;
	float s = saturation/255.0;
	float v = val/255.0;
	float f, p, q, t;
	float r=0, g=0, b=0;
    70dc:	c1 2c       	mov	r12, r1
    70de:	d1 2c       	mov	r13, r1
    70e0:	1b 86       	std	Y+11, r1	; 0x0b
    70e2:	81 2c       	mov	r8, r1
    70e4:	21 2c       	mov	r2, r1
    70e6:	91 2c       	mov	r9, r1
    70e8:	a1 2c       	mov	r10, r1
    70ea:	b1 2c       	mov	r11, r1
    70ec:	61 2c       	mov	r6, r1
    70ee:	51 2c       	mov	r5, r1
    70f0:	41 2c       	mov	r4, r1
    70f2:	31 2c       	mov	r3, r1
			break;
		default:
			//printf("SHOULD NEVER SEE THIS. i: %hhu",i);
			break;
	}
	*red = (uint8_t)(r*255);
    70f4:	20 e0       	ldi	r18, 0x00	; 0
    70f6:	30 e0       	ldi	r19, 0x00	; 0
    70f8:	4f e7       	ldi	r20, 0x7F	; 127
    70fa:	53 e4       	ldi	r21, 0x43	; 67
    70fc:	66 2d       	mov	r22, r6
    70fe:	75 2d       	mov	r23, r5
    7100:	84 2d       	mov	r24, r4
    7102:	93 2d       	mov	r25, r3
    7104:	0e 94 c6 4c 	call	0x998c	; 0x998c <__mulsf3>
    7108:	0e 94 36 4a 	call	0x946c	; 0x946c <__fixunssfsi>
    710c:	ed 81       	ldd	r30, Y+5	; 0x05
    710e:	fe 81       	ldd	r31, Y+6	; 0x06
    7110:	60 83       	st	Z, r22
	*blue = (uint8_t)(b*255);
    7112:	20 e0       	ldi	r18, 0x00	; 0
    7114:	30 e0       	ldi	r19, 0x00	; 0
    7116:	4f e7       	ldi	r20, 0x7F	; 127
    7118:	53 e4       	ldi	r21, 0x43	; 67
    711a:	6c 2d       	mov	r22, r12
    711c:	7d 2d       	mov	r23, r13
    711e:	8b 85       	ldd	r24, Y+11	; 0x0b
    7120:	98 2d       	mov	r25, r8
    7122:	0e 94 c6 4c 	call	0x998c	; 0x998c <__mulsf3>
    7126:	0e 94 36 4a 	call	0x946c	; 0x946c <__fixunssfsi>
    712a:	f7 01       	movw	r30, r14
    712c:	60 83       	st	Z, r22
	*green = (uint8_t)(g*255);
    712e:	20 e0       	ldi	r18, 0x00	; 0
    7130:	30 e0       	ldi	r19, 0x00	; 0
    7132:	4f e7       	ldi	r20, 0x7F	; 127
    7134:	53 e4       	ldi	r21, 0x43	; 67
    7136:	62 2d       	mov	r22, r2
    7138:	79 2d       	mov	r23, r9
    713a:	8a 2d       	mov	r24, r10
    713c:	9b 2d       	mov	r25, r11
    713e:	0e 94 c6 4c 	call	0x998c	; 0x998c <__mulsf3>
    7142:	0e 94 36 4a 	call	0x946c	; 0x946c <__fixunssfsi>
    7146:	f8 01       	movw	r30, r16
    7148:	60 83       	st	Z, r22
    714a:	2b 96       	adiw	r28, 0x0b	; 11
    714c:	cd bf       	out	0x3d, r28	; 61
    714e:	de bf       	out	0x3e, r29	; 62
    7150:	df 91       	pop	r29
    7152:	cf 91       	pop	r28
    7154:	1f 91       	pop	r17
    7156:	0f 91       	pop	r16
    7158:	ff 90       	pop	r15
    715a:	ef 90       	pop	r14
    715c:	df 90       	pop	r13
    715e:	cf 90       	pop	r12
    7160:	bf 90       	pop	r11
    7162:	af 90       	pop	r10
    7164:	9f 90       	pop	r9
    7166:	8f 90       	pop	r8
    7168:	7f 90       	pop	r7
    716a:	6f 90       	pop	r6
    716c:	5f 90       	pop	r5
    716e:	4f 90       	pop	r4
    7170:	3f 90       	pop	r3
    7172:	2f 90       	pop	r2
    7174:	08 95       	ret

00007176 <set_hsv>:
Hue should be between 0 and 360 (though it gets modulo'd with 360, so should be okay)
Saturation and value can be between 0 and 255, where 255 is brightest/most saturated,
and 0 is dimmest/least saturated.
*/
void set_hsv(uint16_t h, uint8_t s, uint8_t v)
{
    7176:	ef 92       	push	r14
    7178:	ff 92       	push	r15
    717a:	0f 93       	push	r16
    717c:	1f 93       	push	r17
    717e:	cf 93       	push	r28
    7180:	df 93       	push	r29
    7182:	00 d0       	rcall	.+0      	; 0x7184 <set_hsv+0xe>
    7184:	cd b7       	in	r28, 0x3d	; 61
    7186:	de b7       	in	r29, 0x3e	; 62
	uint8_t r,g,b;
	hsv_to_rgb(h,s,v,&r,&g,&b);
    7188:	9e 01       	movw	r18, r28
    718a:	2d 5f       	subi	r18, 0xFD	; 253
    718c:	3f 4f       	sbci	r19, 0xFF	; 255
    718e:	79 01       	movw	r14, r18
    7190:	8e 01       	movw	r16, r28
    7192:	0e 5f       	subi	r16, 0xFE	; 254
    7194:	1f 4f       	sbci	r17, 0xFF	; 255
    7196:	22 50       	subi	r18, 0x02	; 2
    7198:	31 09       	sbc	r19, r1
    719a:	0e 94 34 37 	call	0x6e68	; 0x6e68 <hsv_to_rgb>
	set_rgb(r,g,b);
    719e:	8b 81       	ldd	r24, Y+3	; 0x03
    71a0:	2a 81       	ldd	r18, Y+2	; 0x02

void rgb_led_init(); // Set RGB LED pins as output & initialize timers for PWM

// Get and set intensity for red LED
inline uint8_t get_red_led() { return TCE1.CCBBUF; }
inline void set_red_led(uint8_t saturation) { TCE1.CCBBUF = saturation; }
    71a2:	49 81       	ldd	r20, Y+1	; 0x01
    71a4:	50 e0       	ldi	r21, 0x00	; 0
    71a6:	e0 e4       	ldi	r30, 0x40	; 64
    71a8:	fa e0       	ldi	r31, 0x0A	; 10
    71aa:	42 af       	std	Z+58, r20	; 0x3a
    71ac:	53 af       	std	Z+59, r21	; 0x3b

// Get and set intensity for green LED
inline uint8_t get_green_led() { return TCE1.CCABUF; }
inline void set_green_led(uint8_t saturation) { TCE1.CCABUF = saturation; }
    71ae:	30 e0       	ldi	r19, 0x00	; 0
    71b0:	20 af       	std	Z+56, r18	; 0x38
    71b2:	31 af       	std	Z+57, r19	; 0x39
	
// Get and set intensity for blue LED
inline uint8_t get_blue_led() { return TCD1.CCABUF; }
inline void set_blue_led(uint8_t saturation) { TCD1.CCABUF = saturation;	}
    71b4:	90 e0       	ldi	r25, 0x00	; 0
    71b6:	80 93 78 09 	sts	0x0978, r24	; 0x800978 <__TEXT_REGION_LENGTH__+0x700978>
    71ba:	90 93 79 09 	sts	0x0979, r25	; 0x800979 <__TEXT_REGION_LENGTH__+0x700979>
}
    71be:	23 96       	adiw	r28, 0x03	; 3
    71c0:	cd bf       	out	0x3d, r28	; 61
    71c2:	de bf       	out	0x3e, r29	; 62
    71c4:	df 91       	pop	r29
    71c6:	cf 91       	pop	r28
    71c8:	1f 91       	pop	r17
    71ca:	0f 91       	pop	r16
    71cc:	ff 90       	pop	r15
    71ce:	ef 90       	pop	r14
    71d0:	08 95       	ret

000071d2 <get_red_sensor>:
		}
		//printf("\r\n");
	#else
		printf_P(PSTR("ERROR: Audio droplets don't use color_settings.\r\n"));
	#endif		
}
    71d2:	cf 93       	push	r28
    71d4:	df 93       	push	r29
    71d6:	cd b7       	in	r28, 0x3d	; 61
    71d8:	de b7       	in	r29, 0x3e	; 62
    71da:	2a 97       	sbiw	r28, 0x0a	; 10
    71dc:	cd bf       	out	0x3d, r28	; 61
    71de:	de bf       	out	0x3e, r29	; 62
    71e0:	de 01       	movw	r26, r28
    71e2:	11 96       	adiw	r26, 0x01	; 1
    71e4:	ae 01       	movw	r20, r28
    71e6:	45 5f       	subi	r20, 0xF5	; 245
    71e8:	5f 4f       	sbci	r21, 0xFF	; 255
    71ea:	e0 e0       	ldi	r30, 0x00	; 0
    71ec:	f2 e0       	ldi	r31, 0x02	; 2
    71ee:	31 e0       	ldi	r19, 0x01	; 1
    71f0:	80 a1       	ldd	r24, Z+32	; 0x20
    71f2:	80 68       	ori	r24, 0x80	; 128
    71f4:	80 a3       	std	Z+32, r24	; 0x20
    71f6:	83 a1       	ldd	r24, Z+35	; 0x23
    71f8:	88 23       	and	r24, r24
    71fa:	e9 f3       	breq	.-6      	; 0x71f6 <get_red_sensor+0x24>
    71fc:	25 a1       	ldd	r18, Z+37	; 0x25
    71fe:	84 a1       	ldd	r24, Z+36	; 0x24
    7200:	90 e0       	ldi	r25, 0x00	; 0
    7202:	92 2b       	or	r25, r18
    7204:	95 95       	asr	r25
    7206:	87 95       	ror	r24
    7208:	95 95       	asr	r25
    720a:	87 95       	ror	r24
    720c:	95 95       	asr	r25
    720e:	87 95       	ror	r24
    7210:	95 95       	asr	r25
    7212:	87 95       	ror	r24
    7214:	8d 93       	st	X+, r24
    7216:	9d 93       	st	X+, r25
    7218:	33 a3       	std	Z+35, r19	; 0x23
    721a:	a4 17       	cp	r26, r20
    721c:	b5 07       	cpc	r27, r21
    721e:	41 f7       	brne	.-48     	; 0x71f0 <get_red_sensor+0x1e>
    7220:	63 e0       	ldi	r22, 0x03	; 3
    7222:	ce 01       	movw	r24, r28
    7224:	05 96       	adiw	r24, 0x05	; 5
    7226:	0e 94 56 1f 	call	0x3eac	; 0x3eac <meas_find_median>
    722a:	2a 96       	adiw	r28, 0x0a	; 10
    722c:	cd bf       	out	0x3d, r28	; 61
    722e:	de bf       	out	0x3e, r29	; 62
    7230:	df 91       	pop	r29
    7232:	cf 91       	pop	r28
    7234:	08 95       	ret

00007236 <get_green_sensor>:
    7236:	cf 93       	push	r28
    7238:	df 93       	push	r29
    723a:	cd b7       	in	r28, 0x3d	; 61
    723c:	de b7       	in	r29, 0x3e	; 62
    723e:	2a 97       	sbiw	r28, 0x0a	; 10
    7240:	cd bf       	out	0x3d, r28	; 61
    7242:	de bf       	out	0x3e, r29	; 62
    7244:	de 01       	movw	r26, r28
    7246:	11 96       	adiw	r26, 0x01	; 1
    7248:	ae 01       	movw	r20, r28
    724a:	45 5f       	subi	r20, 0xF5	; 245
    724c:	5f 4f       	sbci	r21, 0xFF	; 255
    724e:	e0 e0       	ldi	r30, 0x00	; 0
    7250:	f2 e0       	ldi	r31, 0x02	; 2
    7252:	31 e0       	ldi	r19, 0x01	; 1
    7254:	80 a5       	ldd	r24, Z+40	; 0x28
    7256:	80 68       	ori	r24, 0x80	; 128
    7258:	80 a7       	std	Z+40, r24	; 0x28
    725a:	83 a5       	ldd	r24, Z+43	; 0x2b
    725c:	88 23       	and	r24, r24
    725e:	e9 f3       	breq	.-6      	; 0x725a <get_green_sensor+0x24>
    7260:	25 a5       	ldd	r18, Z+45	; 0x2d
    7262:	84 a5       	ldd	r24, Z+44	; 0x2c
    7264:	90 e0       	ldi	r25, 0x00	; 0
    7266:	92 2b       	or	r25, r18
    7268:	95 95       	asr	r25
    726a:	87 95       	ror	r24
    726c:	95 95       	asr	r25
    726e:	87 95       	ror	r24
    7270:	95 95       	asr	r25
    7272:	87 95       	ror	r24
    7274:	95 95       	asr	r25
    7276:	87 95       	ror	r24
    7278:	8d 93       	st	X+, r24
    727a:	9d 93       	st	X+, r25
    727c:	33 a7       	std	Z+43, r19	; 0x2b
    727e:	a4 17       	cp	r26, r20
    7280:	b5 07       	cpc	r27, r21
    7282:	41 f7       	brne	.-48     	; 0x7254 <get_green_sensor+0x1e>
    7284:	63 e0       	ldi	r22, 0x03	; 3
    7286:	ce 01       	movw	r24, r28
    7288:	05 96       	adiw	r24, 0x05	; 5
    728a:	0e 94 56 1f 	call	0x3eac	; 0x3eac <meas_find_median>
    728e:	2a 96       	adiw	r28, 0x0a	; 10
    7290:	cd bf       	out	0x3d, r28	; 61
    7292:	de bf       	out	0x3e, r29	; 62
    7294:	df 91       	pop	r29
    7296:	cf 91       	pop	r28
    7298:	08 95       	ret

0000729a <get_blue_sensor>:
    729a:	cf 93       	push	r28
    729c:	df 93       	push	r29
    729e:	cd b7       	in	r28, 0x3d	; 61
    72a0:	de b7       	in	r29, 0x3e	; 62
    72a2:	2a 97       	sbiw	r28, 0x0a	; 10
    72a4:	cd bf       	out	0x3d, r28	; 61
    72a6:	de bf       	out	0x3e, r29	; 62
    72a8:	de 01       	movw	r26, r28
    72aa:	11 96       	adiw	r26, 0x01	; 1
    72ac:	ae 01       	movw	r20, r28
    72ae:	45 5f       	subi	r20, 0xF5	; 245
    72b0:	5f 4f       	sbci	r21, 0xFF	; 255
    72b2:	e0 e0       	ldi	r30, 0x00	; 0
    72b4:	f2 e0       	ldi	r31, 0x02	; 2
    72b6:	31 e0       	ldi	r19, 0x01	; 1
    72b8:	80 a9       	ldd	r24, Z+48	; 0x30
    72ba:	80 68       	ori	r24, 0x80	; 128
    72bc:	80 ab       	std	Z+48, r24	; 0x30
    72be:	83 a9       	ldd	r24, Z+51	; 0x33
    72c0:	88 23       	and	r24, r24
    72c2:	e9 f3       	breq	.-6      	; 0x72be <get_blue_sensor+0x24>
    72c4:	25 a9       	ldd	r18, Z+53	; 0x35
    72c6:	84 a9       	ldd	r24, Z+52	; 0x34
    72c8:	90 e0       	ldi	r25, 0x00	; 0
    72ca:	92 2b       	or	r25, r18
    72cc:	95 95       	asr	r25
    72ce:	87 95       	ror	r24
    72d0:	95 95       	asr	r25
    72d2:	87 95       	ror	r24
    72d4:	95 95       	asr	r25
    72d6:	87 95       	ror	r24
    72d8:	95 95       	asr	r25
    72da:	87 95       	ror	r24
    72dc:	8d 93       	st	X+, r24
    72de:	9d 93       	st	X+, r25
    72e0:	33 ab       	std	Z+51, r19	; 0x33
    72e2:	a4 17       	cp	r26, r20
    72e4:	b5 07       	cpc	r27, r21
    72e6:	41 f7       	brne	.-48     	; 0x72b8 <get_blue_sensor+0x1e>
    72e8:	63 e0       	ldi	r22, 0x03	; 3
    72ea:	ce 01       	movw	r24, r28
    72ec:	05 96       	adiw	r24, 0x05	; 5
    72ee:	0e 94 56 1f 	call	0x3eac	; 0x3eac <meas_find_median>
    72f2:	2a 96       	adiw	r28, 0x0a	; 10
    72f4:	cd bf       	out	0x3d, r28	; 61
    72f6:	de bf       	out	0x3e, r29	; 62
    72f8:	df 91       	pop	r29
    72fa:	cf 91       	pop	r28
    72fc:	08 95       	ret

000072fe <rgb_sensor_init>:
    72fe:	cf 93       	push	r28
    7300:	80 ee       	ldi	r24, 0xE0	; 224
    7302:	80 93 02 06 	sts	0x0602, r24	; 0x800602 <__TEXT_REGION_LENGTH__+0x700602>
    7306:	e0 e0       	ldi	r30, 0x00	; 0
    7308:	f2 e0       	ldi	r31, 0x02	; 2
    730a:	80 e2       	ldi	r24, 0x20	; 32
    730c:	82 83       	std	Z+2, r24	; 0x02
    730e:	86 e1       	ldi	r24, 0x16	; 22
    7310:	81 83       	std	Z+1, r24	; 0x01
    7312:	86 e0       	ldi	r24, 0x06	; 6
    7314:	84 83       	std	Z+4, r24	; 0x04
    7316:	83 e0       	ldi	r24, 0x03	; 3
    7318:	80 a3       	std	Z+32, r24	; 0x20
    731a:	80 a7       	std	Z+40, r24	; 0x28
    731c:	87 e0       	ldi	r24, 0x07	; 7
    731e:	80 ab       	std	Z+48, r24	; 0x30
    7320:	8c e2       	ldi	r24, 0x2C	; 44
    7322:	81 a3       	std	Z+33, r24	; 0x21
    7324:	84 e3       	ldi	r24, 0x34	; 52
    7326:	81 a7       	std	Z+41, r24	; 0x29
    7328:	8c e3       	ldi	r24, 0x3C	; 60
    732a:	81 ab       	std	Z+49, r24	; 0x31
    732c:	80 b5       	in	r24, 0x20	; 32
    732e:	84 87       	std	Z+12, r24	; 0x0c
    7330:	81 b5       	in	r24, 0x21	; 33
    7332:	85 87       	std	Z+13, r24	; 0x0d
    7334:	81 e0       	ldi	r24, 0x01	; 1
    7336:	80 83       	st	Z, r24
    7338:	8f e8       	ldi	r24, 0x8F	; 143
    733a:	91 e0       	ldi	r25, 0x01	; 1
    733c:	01 97       	sbiw	r24, 0x01	; 1
    733e:	f1 f7       	brne	.-4      	; 0x733c <rgb_sensor_init+0x3e>
    7340:	00 c0       	rjmp	.+0      	; 0x7342 <rgb_sensor_init+0x44>
    7342:	00 00       	nop
    7344:	0e 94 e9 38 	call	0x71d2	; 0x71d2 <get_red_sensor>
    7348:	0e 94 4d 39 	call	0x729a	; 0x729a <get_blue_sensor>
    734c:	0e 94 1b 39 	call	0x7236	; 0x7236 <get_green_sensor>
    7350:	8a e0       	ldi	r24, 0x0A	; 10
    7352:	90 e0       	ldi	r25, 0x00	; 0
    7354:	0e 94 33 3a 	call	0x7466	; 0x7466 <delay_ms>
    7358:	c0 e0       	ldi	r28, 0x00	; 0
    735a:	0e 94 e9 38 	call	0x71d2	; 0x71d2 <get_red_sensor>
    735e:	0e 94 1b 39 	call	0x7236	; 0x7236 <get_green_sensor>
    7362:	0e 94 4d 39 	call	0x729a	; 0x729a <get_blue_sensor>
    7366:	8a e0       	ldi	r24, 0x0A	; 10
    7368:	90 e0       	ldi	r25, 0x00	; 0
    736a:	0e 94 33 3a 	call	0x7466	; 0x7466 <delay_ms>
    736e:	cf 5f       	subi	r28, 0xFF	; 255
    7370:	c3 30       	cpi	r28, 0x03	; 3
    7372:	99 f7       	brne	.-26     	; 0x735a <rgb_sensor_init+0x5c>
    7374:	10 92 a8 2b 	sts	0x2BA8, r1	; 0x802ba8 <r_baseline>
    7378:	10 92 a9 2b 	sts	0x2BA9, r1	; 0x802ba9 <r_baseline+0x1>
    737c:	10 92 73 2a 	sts	0x2A73, r1	; 0x802a73 <g_baseline>
    7380:	10 92 74 2a 	sts	0x2A74, r1	; 0x802a74 <g_baseline+0x1>
    7384:	10 92 5c 2a 	sts	0x2A5C, r1	; 0x802a5c <b_baseline>
    7388:	10 92 5d 2a 	sts	0x2A5D, r1	; 0x802a5d <b_baseline+0x1>
    738c:	cf 91       	pop	r28
    738e:	08 95       	ret

00007390 <get_rgb>:

void get_rgb(int16_t *r, int16_t *g, int16_t *b)
{
    7390:	af 92       	push	r10
    7392:	bf 92       	push	r11
    7394:	cf 92       	push	r12
    7396:	df 92       	push	r13
    7398:	ef 92       	push	r14
    739a:	ff 92       	push	r15
    739c:	0f 93       	push	r16
    739e:	1f 93       	push	r17
    73a0:	cf 93       	push	r28
    73a2:	df 93       	push	r29
    73a4:	6c 01       	movw	r12, r24
    73a6:	7b 01       	movw	r14, r22
    73a8:	8a 01       	movw	r16, r20
		}
		else printf_P(PSTR("Read failed.\r\n"));
	#else
		int16_t rTemp,gTemp,bTemp;
	
		rTemp = get_red_sensor();
    73aa:	0e 94 e9 38 	call	0x71d2	; 0x71d2 <get_red_sensor>
    73ae:	5c 01       	movw	r10, r24
		gTemp = get_green_sensor();
    73b0:	0e 94 1b 39 	call	0x7236	; 0x7236 <get_green_sensor>
    73b4:	ec 01       	movw	r28, r24
		bTemp = get_blue_sensor();		
    73b6:	0e 94 4d 39 	call	0x729a	; 0x729a <get_blue_sensor>
		rTemp = rTemp - r_baseline;
    73ba:	20 91 a8 2b 	lds	r18, 0x2BA8	; 0x802ba8 <r_baseline>
    73be:	30 91 a9 2b 	lds	r19, 0x2BA9	; 0x802ba9 <r_baseline+0x1>
    73c2:	a2 1a       	sub	r10, r18
    73c4:	b3 0a       	sbc	r11, r19
		gTemp = gTemp - g_baseline;
    73c6:	20 91 73 2a 	lds	r18, 0x2A73	; 0x802a73 <g_baseline>
    73ca:	30 91 74 2a 	lds	r19, 0x2A74	; 0x802a74 <g_baseline+0x1>
    73ce:	c2 1b       	sub	r28, r18
    73d0:	d3 0b       	sbc	r29, r19
		bTemp = bTemp - b_baseline;
    73d2:	20 91 5c 2a 	lds	r18, 0x2A5C	; 0x802a5c <b_baseline>
    73d6:	30 91 5d 2a 	lds	r19, 0x2A5D	; 0x802a5d <b_baseline+0x1>
    73da:	82 1b       	sub	r24, r18
    73dc:	93 0b       	sbc	r25, r19
		//if(rTemp<0)	rTemp=0;
		//if(gTemp<0)	gTemp=0;
		//if(bTemp<0)	bTemp=0;
		if(r!=NULL) *r = rTemp;
    73de:	c1 14       	cp	r12, r1
    73e0:	d1 04       	cpc	r13, r1
    73e2:	19 f0       	breq	.+6      	; 0x73ea <get_rgb+0x5a>
    73e4:	f6 01       	movw	r30, r12
    73e6:	a0 82       	st	Z, r10
    73e8:	b1 82       	std	Z+1, r11	; 0x01
		if(g!=NULL) *g = gTemp;
    73ea:	e1 14       	cp	r14, r1
    73ec:	f1 04       	cpc	r15, r1
    73ee:	19 f0       	breq	.+6      	; 0x73f6 <get_rgb+0x66>
    73f0:	f7 01       	movw	r30, r14
    73f2:	c0 83       	st	Z, r28
    73f4:	d1 83       	std	Z+1, r29	; 0x01
		if(b!=NULL) *b = bTemp;
    73f6:	01 15       	cp	r16, r1
    73f8:	11 05       	cpc	r17, r1
    73fa:	19 f0       	breq	.+6      	; 0x7402 <get_rgb+0x72>
    73fc:	f8 01       	movw	r30, r16
    73fe:	80 83       	st	Z, r24
    7400:	91 83       	std	Z+1, r25	; 0x01
	#endif
    7402:	df 91       	pop	r29
    7404:	cf 91       	pop	r28
    7406:	1f 91       	pop	r17
    7408:	0f 91       	pop	r16
    740a:	ff 90       	pop	r15
    740c:	ef 90       	pop	r14
    740e:	df 90       	pop	r13
    7410:	cf 90       	pop	r12
    7412:	bf 90       	pop	r11
    7414:	af 90       	pop	r10
    7416:	08 95       	ret

00007418 <Config32MHzClock>:
}

void Config32MHzClock(void)
{
	// Set system clock to 32 MHz
	CCP = CCP_IOREG_gc;
    7418:	88 ed       	ldi	r24, 0xD8	; 216
    741a:	84 bf       	out	0x34, r24	; 52
	OSC.CTRL = OSC_RC32MEN_bm;
    741c:	82 e0       	ldi	r24, 0x02	; 2
    741e:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <__TEXT_REGION_LENGTH__+0x700050>
	while(!(OSC.STATUS & OSC_RC32MRDY_bm));
    7422:	e0 e5       	ldi	r30, 0x50	; 80
    7424:	f0 e0       	ldi	r31, 0x00	; 0
    7426:	81 81       	ldd	r24, Z+1	; 0x01
    7428:	81 ff       	sbrs	r24, 1
    742a:	fd cf       	rjmp	.-6      	; 0x7426 <Config32MHzClock+0xe>
	CCP = CCP_IOREG_gc;
    742c:	88 ed       	ldi	r24, 0xD8	; 216
    742e:	84 bf       	out	0x34, r24	; 52
	CLK.CTRL = 0x01;
    7430:	e0 e4       	ldi	r30, 0x40	; 64
    7432:	f0 e0       	ldi	r31, 0x00	; 0
    7434:	81 e0       	ldi	r24, 0x01	; 1
    7436:	80 83       	st	Z, r24
	//OSC.RC32KCAL = PRODSIGNATURES_RCOSC32K;
	// Set up real-time clock
	CLK.RTCCTRL = CLK_RTCSRC_RCOSC_gc | CLK_RTCEN_bm;	// per Dustin: RTCSRC is a 1 kHz oscillator, needs to be verified
    7438:	85 e0       	ldi	r24, 0x05	; 5
    743a:	83 83       	std	Z+3, r24	; 0x03
	//RTC.INTCTRL = RTC_OVFINTLVL_LO_gc;
	while (RTC.STATUS & RTC_SYNCBUSY_bm);	// wait for SYNCBUSY to clear
    743c:	e0 e0       	ldi	r30, 0x00	; 0
    743e:	f4 e0       	ldi	r31, 0x04	; 4
    7440:	81 81       	ldd	r24, Z+1	; 0x01
    7442:	80 fd       	sbrc	r24, 0
    7444:	fd cf       	rjmp	.-6      	; 0x7440 <Config32MHzClock+0x28>
	
	RTC.PER = 0xFFFF;		//	0xFFFF == 0b1111111111111111 = (2^16)-1
    7446:	e0 e0       	ldi	r30, 0x00	; 0
    7448:	f4 e0       	ldi	r31, 0x04	; 4
    744a:	8f ef       	ldi	r24, 0xFF	; 255
    744c:	9f ef       	ldi	r25, 0xFF	; 255
    744e:	82 87       	std	Z+10, r24	; 0x0a
    7450:	93 87       	std	Z+11, r25	; 0x0b
	// (2^16)-1 milliseconds is 65.535 seconds

	RTC.CTRL = RTC_PRESCALER_DIV1_gc;
    7452:	81 e0       	ldi	r24, 0x01	; 1
    7454:	80 83       	st	Z, r24

	// reset RTC to 0, important for after a reboot:
	while(RTC.STATUS & RTC_SYNCBUSY_bm);	// wait for SYNCBUSY to clear
    7456:	81 81       	ldd	r24, Z+1	; 0x01
    7458:	80 fd       	sbrc	r24, 0
    745a:	fd cf       	rjmp	.-6      	; 0x7456 <Config32MHzClock+0x3e>
	RTC.CNT = 0;
    745c:	10 92 08 04 	sts	0x0408, r1	; 0x800408 <__TEXT_REGION_LENGTH__+0x700408>
    7460:	10 92 09 04 	sts	0x0409, r1	; 0x800409 <__TEXT_REGION_LENGTH__+0x700409>
    7464:	08 95       	ret

00007466 <delay_ms>:
}

// Delay ms milliseconds
// (the built-in _delay_ms only takes constant arguments, not variables)
void delay_ms(uint16_t ms)
{
    7466:	cf 92       	push	r12
    7468:	df 92       	push	r13
    746a:	ef 92       	push	r14
    746c:	ff 92       	push	r15
    746e:	7c 01       	movw	r14, r24
	uint32_t cur_time, end_time;
	cli(); cur_time = get_time(); sei();
    7470:	f8 94       	cli
    7472:	0e 94 20 08 	call	0x1040	; 0x1040 <get_time>
    7476:	78 94       	sei
	end_time = cur_time + ms;
    7478:	9b 01       	movw	r18, r22
    747a:	ac 01       	movw	r20, r24
    747c:	2e 0d       	add	r18, r14
    747e:	3f 1d       	adc	r19, r15
    7480:	41 1d       	adc	r20, r1
    7482:	51 1d       	adc	r21, r1
    7484:	69 01       	movw	r12, r18
    7486:	7a 01       	movw	r14, r20
	while (1)
	{
		cli();
    7488:	f8 94       	cli
		if (get_time() >= end_time)
    748a:	0e 94 20 08 	call	0x1040	; 0x1040 <get_time>
    748e:	6c 15       	cp	r22, r12
    7490:	7d 05       	cpc	r23, r13
    7492:	8e 05       	cpc	r24, r14
    7494:	9f 05       	cpc	r25, r15
    7496:	10 f0       	brcs	.+4      	; 0x749c <delay_ms+0x36>
		{
			sei();
    7498:	78 94       	sei
    749a:	06 c0       	rjmp	.+12     	; 0x74a8 <delay_ms+0x42>
			return;
		}
		sei();
    749c:	78 94       	sei
    749e:	3a e6       	ldi	r19, 0x6A	; 106
    74a0:	3a 95       	dec	r19
    74a2:	f1 f7       	brne	.-4      	; 0x74a0 <delay_ms+0x3a>
    74a4:	00 c0       	rjmp	.+0      	; 0x74a6 <delay_ms+0x40>
    74a6:	f0 cf       	rjmp	.-32     	; 0x7488 <delay_ms+0x22>
		delay_us(10);
	}
}
    74a8:	ff 90       	pop	r15
    74aa:	ef 90       	pop	r14
    74ac:	df 90       	pop	r13
    74ae:	cf 90       	pop	r12
    74b0:	08 95       	ret

000074b2 <scheduler_free>:
	return (volatile Task_t*)0xFFFF;

}

static void scheduler_free(volatile Task_t* tgt)
{
    74b2:	cf 93       	push	r28
    74b4:	df 93       	push	r29
    74b6:	ec 01       	movw	r28, r24
	if((tgt<task_storage_arr)||(tgt>(&(task_storage_arr[MAX_NUM_SCHEDULED_TASKS]))))
    74b8:	84 e2       	ldi	r24, 0x24	; 36
    74ba:	c2 30       	cpi	r28, 0x02	; 2
    74bc:	d8 07       	cpc	r29, r24
    74be:	28 f0       	brcs	.+10     	; 0x74ca <scheduler_free+0x18>
    74c0:	84 e2       	ldi	r24, 0x24	; 36
    74c2:	ce 38       	cpi	r28, 0x8E	; 142
    74c4:	d8 07       	cpc	r29, r24
    74c6:	b1 f0       	breq	.+44     	; 0x74f4 <scheduler_free+0x42>
    74c8:	a8 f0       	brcs	.+42     	; 0x74f4 <scheduler_free+0x42>
	{
		printf_P(PSTR("ERROR: In scheduler_free, tgt (%X) was outside valid Task* range.\r\n"),tgt);
    74ca:	df 93       	push	r29
    74cc:	cf 93       	push	r28
    74ce:	84 ed       	ldi	r24, 0xD4	; 212
    74d0:	9a e0       	ldi	r25, 0x0A	; 10
    74d2:	9f 93       	push	r25
    74d4:	8f 93       	push	r24
    74d6:	0e 94 f7 56 	call	0xadee	; 0xadee <printf_P>
		set_rgb(0,0,255);
    74da:	4f ef       	ldi	r20, 0xFF	; 255
    74dc:	60 e0       	ldi	r22, 0x00	; 0
    74de:	80 e0       	ldi	r24, 0x00	; 0
    74e0:	0e 94 26 37 	call	0x6e4c	; 0x6e4c <set_rgb>
		delay_ms(60000);
    74e4:	80 e6       	ldi	r24, 0x60	; 96
    74e6:	9a ee       	ldi	r25, 0xEA	; 234
    74e8:	0e 94 33 3a 	call	0x7466	; 0x7466 <delay_ms>
    74ec:	0f 90       	pop	r0
    74ee:	0f 90       	pop	r0
    74f0:	0f 90       	pop	r0
    74f2:	0f 90       	pop	r0
	}
	tgt->arg = 0;
    74f4:	1a 86       	std	Y+10, r1	; 0x0a
    74f6:	1b 86       	std	Y+11, r1	; 0x0b
	tgt->period = 0;
    74f8:	1c 82       	std	Y+4, r1	; 0x04
    74fa:	1d 82       	std	Y+5, r1	; 0x05
    74fc:	1e 82       	std	Y+6, r1	; 0x06
    74fe:	1f 82       	std	Y+7, r1	; 0x07
	(tgt->func).noarg_function = NULL;
    7500:	18 86       	std	Y+8, r1	; 0x08
    7502:	19 86       	std	Y+9, r1	; 0x09
	tgt->scheduled_time = 0;
    7504:	18 82       	st	Y, r1
    7506:	19 82       	std	Y+1, r1	; 0x01
    7508:	1a 82       	std	Y+2, r1	; 0x02
    750a:	1b 82       	std	Y+3, r1	; 0x03
	tgt->next = NULL;
    750c:	1c 86       	std	Y+12, r1	; 0x0c
    750e:	1d 86       	std	Y+13, r1	; 0x0d
}
    7510:	df 91       	pop	r29
    7512:	cf 91       	pop	r28
    7514:	08 95       	ret

00007516 <scheduler_init>:

void scheduler_init()
{
    7516:	0f 93       	push	r16
    7518:	1f 93       	push	r17
    751a:	cf 93       	push	r28
    751c:	df 93       	push	r29
	task_list = NULL;
    751e:	10 92 64 2f 	sts	0x2F64, r1	; 0x802f64 <task_list>
    7522:	10 92 65 2f 	sts	0x2F65, r1	; 0x802f65 <task_list+0x1>
	num_tasks = 0;
    7526:	10 92 6d 2a 	sts	0x2A6D, r1	; 0x802a6d <num_tasks>
	task_executing = 0;
    752a:	10 92 25 2d 	sts	0x2D25, r1	; 0x802d25 <task_executing>
    752e:	c2 e0       	ldi	r28, 0x02	; 2
    7530:	d4 e2       	ldi	r29, 0x24	; 36
    7532:	0e e8       	ldi	r16, 0x8E	; 142
    7534:	14 e2       	ldi	r17, 0x24	; 36
	for(uint8_t i=0; i<MAX_NUM_SCHEDULED_TASKS; i++) scheduler_free(&task_storage_arr[i]);
    7536:	ce 01       	movw	r24, r28
    7538:	0e 94 59 3a 	call	0x74b2	; 0x74b2 <scheduler_free>
    753c:	2e 96       	adiw	r28, 0x0e	; 14
    753e:	c0 17       	cp	r28, r16
    7540:	d1 07       	cpc	r29, r17
    7542:	c9 f7       	brne	.-14     	; 0x7536 <scheduler_init+0x20>
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)  // Disable interrupts during initialization
    7544:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    7546:	f8 94       	cli
	{
		// Set up real-time clock
		rtc_epoch = 0;
    7548:	10 92 92 24 	sts	0x2492, r1	; 0x802492 <rtc_epoch>
    754c:	10 92 93 24 	sts	0x2493, r1	; 0x802493 <rtc_epoch+0x1>
		CLK.RTCCTRL = CLK_RTCSRC_RCOSC_gc | CLK_RTCEN_bm;
    7550:	85 e0       	ldi	r24, 0x05	; 5
    7552:	80 93 43 00 	sts	0x0043, r24	; 0x800043 <__TEXT_REGION_LENGTH__+0x700043>
		RTC.INTCTRL = RTC_OVFINTLVL_HI_gc;		// High level overflow interrupt to increment the epoch counter
    7556:	83 e0       	ldi	r24, 0x03	; 3
    7558:	80 93 02 04 	sts	0x0402, r24	; 0x800402 <__TEXT_REGION_LENGTH__+0x700402>
		while (RTC.STATUS & RTC_SYNCBUSY_bm);
    755c:	e0 e0       	ldi	r30, 0x00	; 0
    755e:	f4 e0       	ldi	r31, 0x04	; 4
    7560:	81 81       	ldd	r24, Z+1	; 0x01
    7562:	80 fd       	sbrc	r24, 0
    7564:	fd cf       	rjmp	.-6      	; 0x7560 <scheduler_init+0x4a>
		RTC.PER = 0xFFFF;
    7566:	8f ef       	ldi	r24, 0xFF	; 255
    7568:	9f ef       	ldi	r25, 0xFF	; 255
    756a:	80 93 0a 04 	sts	0x040A, r24	; 0x80040a <__TEXT_REGION_LENGTH__+0x70040a>
    756e:	90 93 0b 04 	sts	0x040B, r25	; 0x80040b <__TEXT_REGION_LENGTH__+0x70040b>
		while (RTC.STATUS & RTC_SYNCBUSY_bm);
    7572:	e0 e0       	ldi	r30, 0x00	; 0
    7574:	f4 e0       	ldi	r31, 0x04	; 4
    7576:	81 81       	ldd	r24, Z+1	; 0x01
    7578:	80 fd       	sbrc	r24, 0
    757a:	fd cf       	rjmp	.-6      	; 0x7576 <scheduler_init+0x60>
		RTC.CTRL = RTC_PRESCALER_DIV1_gc;
    757c:	81 e0       	ldi	r24, 0x01	; 1
    757e:	80 93 00 04 	sts	0x0400, r24	; 0x800400 <__TEXT_REGION_LENGTH__+0x700400>
		while (RTC.STATUS & RTC_SYNCBUSY_bm);
    7582:	e0 e0       	ldi	r30, 0x00	; 0
    7584:	f4 e0       	ldi	r31, 0x04	; 4
    7586:	81 81       	ldd	r24, Z+1	; 0x01
    7588:	80 fd       	sbrc	r24, 0
    758a:	fd cf       	rjmp	.-6      	; 0x7586 <scheduler_init+0x70>
		RTC.CNT = 0;
    758c:	10 92 08 04 	sts	0x0408, r1	; 0x800408 <__TEXT_REGION_LENGTH__+0x700408>
    7590:	10 92 09 04 	sts	0x0409, r1	; 0x800409 <__TEXT_REGION_LENGTH__+0x700409>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    7594:	2f bf       	out	0x3f, r18	; 63
	}
}
    7596:	df 91       	pop	r29
    7598:	cf 91       	pop	r28
    759a:	1f 91       	pop	r17
    759c:	0f 91       	pop	r16
    759e:	08 95       	ret

000075a0 <remove_task>:
	}
}

// Remove a task from the task queue
void remove_task(volatile Task_t* task)
{
    75a0:	cf 93       	push	r28
	if((task<task_storage_arr)||(task>(&(task_storage_arr[MAX_NUM_SCHEDULED_TASKS-1]))))
    75a2:	24 e2       	ldi	r18, 0x24	; 36
    75a4:	82 30       	cpi	r24, 0x02	; 2
    75a6:	92 07       	cpc	r25, r18
    75a8:	28 f0       	brcs	.+10     	; 0x75b4 <remove_task+0x14>
    75aa:	a4 e2       	ldi	r26, 0x24	; 36
    75ac:	80 38       	cpi	r24, 0x80	; 128
    75ae:	9a 07       	cpc	r25, r26
    75b0:	31 f0       	breq	.+12     	; 0x75be <remove_task+0x1e>
    75b2:	28 f0       	brcs	.+10     	; 0x75be <remove_task+0x1e>
	{
		printf("ERROR: Asked to remove_task for task pointer outside the bounds of task_storage_arr.\r\n");
    75b4:	8c ed       	ldi	r24, 0xDC	; 220
    75b6:	92 e2       	ldi	r25, 0x22	; 34
    75b8:	0e 94 25 57 	call	0xae4a	; 0xae4a <puts>
		return;
    75bc:	3e c0       	rjmp	.+124    	; 0x763a <remove_task+0x9a>
	}	
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    75be:	cf b7       	in	r28, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    75c0:	f8 94       	cli
	{
		if(task_list==task)
    75c2:	e0 91 64 2f 	lds	r30, 0x2F64	; 0x802f64 <task_list>
    75c6:	f0 91 65 2f 	lds	r31, 0x2F65	; 0x802f65 <task_list+0x1>
    75ca:	e8 17       	cp	r30, r24
    75cc:	f9 07       	cpc	r31, r25
    75ce:	51 f0       	breq	.+20     	; 0x75e4 <remove_task+0x44>
			num_tasks--;
		}
		else 
		{
			volatile Task_t* tmp_task = task_list;
			while (tmp_task->next != NULL && tmp_task->next != task) tmp_task = tmp_task->next;
    75d0:	24 85       	ldd	r18, Z+12	; 0x0c
    75d2:	35 85       	ldd	r19, Z+13	; 0x0d
    75d4:	23 2b       	or	r18, r19
    75d6:	f1 f0       	breq	.+60     	; 0x7614 <remove_task+0x74>
    75d8:	24 85       	ldd	r18, Z+12	; 0x0c
    75da:	35 85       	ldd	r19, Z+13	; 0x0d
    75dc:	28 17       	cp	r18, r24
    75de:	39 07       	cpc	r19, r25
    75e0:	69 f4       	brne	.+26     	; 0x75fc <remove_task+0x5c>
    75e2:	18 c0       	rjmp	.+48     	; 0x7614 <remove_task+0x74>
	}	
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
	{
		if(task_list==task)
		{
			task_list=task->next;
    75e4:	24 85       	ldd	r18, Z+12	; 0x0c
    75e6:	35 85       	ldd	r19, Z+13	; 0x0d
    75e8:	20 93 64 2f 	sts	0x2F64, r18	; 0x802f64 <task_list>
    75ec:	30 93 65 2f 	sts	0x2F65, r19	; 0x802f65 <task_list+0x1>
			num_tasks--;
    75f0:	20 91 6d 2a 	lds	r18, 0x2A6D	; 0x802a6d <num_tasks>
    75f4:	21 50       	subi	r18, 0x01	; 1
    75f6:	20 93 6d 2a 	sts	0x2A6D, r18	; 0x802a6d <num_tasks>
    75fa:	1c c0       	rjmp	.+56     	; 0x7634 <remove_task+0x94>
		}
		else 
		{
			volatile Task_t* tmp_task = task_list;
			while (tmp_task->next != NULL && tmp_task->next != task) tmp_task = tmp_task->next;
    75fc:	04 84       	ldd	r0, Z+12	; 0x0c
    75fe:	f5 85       	ldd	r31, Z+13	; 0x0d
    7600:	e0 2d       	mov	r30, r0
    7602:	24 85       	ldd	r18, Z+12	; 0x0c
    7604:	35 85       	ldd	r19, Z+13	; 0x0d
    7606:	23 2b       	or	r18, r19
    7608:	29 f0       	breq	.+10     	; 0x7614 <remove_task+0x74>
    760a:	24 85       	ldd	r18, Z+12	; 0x0c
    760c:	35 85       	ldd	r19, Z+13	; 0x0d
    760e:	28 17       	cp	r18, r24
    7610:	39 07       	cpc	r19, r25
    7612:	a1 f7       	brne	.-24     	; 0x75fc <remove_task+0x5c>
			if (tmp_task->next != NULL)
    7614:	24 85       	ldd	r18, Z+12	; 0x0c
    7616:	35 85       	ldd	r19, Z+13	; 0x0d
    7618:	23 2b       	or	r18, r19
    761a:	61 f0       	breq	.+24     	; 0x7634 <remove_task+0x94>
			{
				tmp_task->next = task->next;
    761c:	dc 01       	movw	r26, r24
    761e:	1c 96       	adiw	r26, 0x0c	; 12
    7620:	2d 91       	ld	r18, X+
    7622:	3c 91       	ld	r19, X
    7624:	1d 97       	sbiw	r26, 0x0d	; 13
    7626:	24 87       	std	Z+12, r18	; 0x0c
    7628:	35 87       	std	Z+13, r19	; 0x0d
				num_tasks--;
    762a:	20 91 6d 2a 	lds	r18, 0x2A6D	; 0x802a6d <num_tasks>
    762e:	21 50       	subi	r18, 0x01	; 1
    7630:	20 93 6d 2a 	sts	0x2A6D, r18	; 0x802a6d <num_tasks>
			}
		}
		scheduler_free(task);		
    7634:	0e 94 59 3a 	call	0x74b2	; 0x74b2 <scheduler_free>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    7638:	cf bf       	out	0x3f, r28	; 63
	}
}
    763a:	cf 91       	pop	r28
    763c:	08 95       	ret

0000763e <print_task_queue>:

void print_task_queue()
{
    763e:	bf 92       	push	r11
    7640:	cf 92       	push	r12
    7642:	df 92       	push	r13
    7644:	ef 92       	push	r14
    7646:	ff 92       	push	r15
    7648:	0f 93       	push	r16
    764a:	1f 93       	push	r17
    764c:	cf 93       	push	r28
    764e:	df 93       	push	r29
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)  // Disable interrupts during printing
    7650:	bf b6       	in	r11, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    7652:	f8 94       	cli
	{
		volatile Task_t* cur_task = task_list;
    7654:	c0 91 64 2f 	lds	r28, 0x2F64	; 0x802f64 <task_list>
    7658:	d0 91 65 2f 	lds	r29, 0x2F65	; 0x802f65 <task_list+0x1>
		
		printf_P(PSTR("Task Queue (%hhu tasks, %hhu executing):\r\n"), num_tasks, task_executing);
    765c:	90 91 25 2d 	lds	r25, 0x2D25	; 0x802d25 <task_executing>
    7660:	80 91 6d 2a 	lds	r24, 0x2A6D	; 0x802a6d <num_tasks>
    7664:	1f 92       	push	r1
    7666:	9f 93       	push	r25
    7668:	1f 92       	push	r1
    766a:	8f 93       	push	r24
    766c:	8b ef       	ldi	r24, 0xFB	; 251
    766e:	98 e0       	ldi	r25, 0x08	; 8
    7670:	9f 93       	push	r25
    7672:	8f 93       	push	r24
    7674:	0e 94 f7 56 	call	0xadee	; 0xadee <printf_P>
		
		// Iterate through the list of tasks, printing name, function, and scheduled time of each
		while (cur_task != NULL)
    7678:	0f 90       	pop	r0
    767a:	0f 90       	pop	r0
    767c:	0f 90       	pop	r0
    767e:	0f 90       	pop	r0
    7680:	0f 90       	pop	r0
    7682:	0f 90       	pop	r0
    7684:	20 97       	sbiw	r28, 0x00	; 0
    7686:	a1 f1       	breq	.+104    	; 0x76f0 <print_task_queue+0xb2>
		{
			printf_P(PSTR("\tTask %p (%p) scheduled at %lu with period %lu, %lu current\r\n"), cur_task, (cur_task->func).noarg_function, cur_task->scheduled_time, cur_task->period, get_time());
    7688:	0d eb       	ldi	r16, 0xBD	; 189
    768a:	18 e0       	ldi	r17, 0x08	; 8
    768c:	0e 94 20 08 	call	0x1040	; 0x1040 <get_time>
    7690:	e6 2f       	mov	r30, r22
    7692:	f7 2f       	mov	r31, r23
    7694:	cc 80       	ldd	r12, Y+4	; 0x04
    7696:	dd 80       	ldd	r13, Y+5	; 0x05
    7698:	ee 80       	ldd	r14, Y+6	; 0x06
    769a:	ff 80       	ldd	r15, Y+7	; 0x07
    769c:	48 81       	ld	r20, Y
    769e:	59 81       	ldd	r21, Y+1	; 0x01
    76a0:	6a 81       	ldd	r22, Y+2	; 0x02
    76a2:	7b 81       	ldd	r23, Y+3	; 0x03
    76a4:	28 85       	ldd	r18, Y+8	; 0x08
    76a6:	39 85       	ldd	r19, Y+9	; 0x09
    76a8:	9f 93       	push	r25
    76aa:	8f 93       	push	r24
    76ac:	ff 93       	push	r31
    76ae:	ef 93       	push	r30
    76b0:	ff 92       	push	r15
    76b2:	ef 92       	push	r14
    76b4:	df 92       	push	r13
    76b6:	cf 92       	push	r12
    76b8:	7f 93       	push	r23
    76ba:	6f 93       	push	r22
    76bc:	5f 93       	push	r21
    76be:	4f 93       	push	r20
    76c0:	3f 93       	push	r19
    76c2:	2f 93       	push	r18
    76c4:	df 93       	push	r29
    76c6:	cf 93       	push	r28
    76c8:	1f 93       	push	r17
    76ca:	0f 93       	push	r16
    76cc:	0e 94 f7 56 	call	0xadee	; 0xadee <printf_P>
			if(cur_task==cur_task->next) break;
    76d0:	8c 85       	ldd	r24, Y+12	; 0x0c
    76d2:	9d 85       	ldd	r25, Y+13	; 0x0d
    76d4:	2d b7       	in	r18, 0x3d	; 61
    76d6:	3e b7       	in	r19, 0x3e	; 62
    76d8:	2e 5e       	subi	r18, 0xEE	; 238
    76da:	3f 4f       	sbci	r19, 0xFF	; 255
    76dc:	2d bf       	out	0x3d, r18	; 61
    76de:	3e bf       	out	0x3e, r19	; 62
    76e0:	8c 17       	cp	r24, r28
    76e2:	9d 07       	cpc	r25, r29
    76e4:	29 f0       	breq	.+10     	; 0x76f0 <print_task_queue+0xb2>
			cur_task = cur_task->next;
    76e6:	0c 84       	ldd	r0, Y+12	; 0x0c
    76e8:	dd 85       	ldd	r29, Y+13	; 0x0d
    76ea:	c0 2d       	mov	r28, r0
		volatile Task_t* cur_task = task_list;
		
		printf_P(PSTR("Task Queue (%hhu tasks, %hhu executing):\r\n"), num_tasks, task_executing);
		
		// Iterate through the list of tasks, printing name, function, and scheduled time of each
		while (cur_task != NULL)
    76ec:	20 97       	sbiw	r28, 0x00	; 0
    76ee:	71 f6       	brne	.-100    	; 0x768c <print_task_queue+0x4e>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    76f0:	bf be       	out	0x3f, r11	; 63
			printf_P(PSTR("\tTask %p (%p) scheduled at %lu with period %lu, %lu current\r\n"), cur_task, (cur_task->func).noarg_function, cur_task->scheduled_time, cur_task->period, get_time());
			if(cur_task==cur_task->next) break;
			cur_task = cur_task->next;
		}
	}
}
    76f2:	df 91       	pop	r29
    76f4:	cf 91       	pop	r28
    76f6:	1f 91       	pop	r17
    76f8:	0f 91       	pop	r16
    76fa:	ff 90       	pop	r15
    76fc:	ef 90       	pop	r14
    76fe:	df 90       	pop	r13
    7700:	cf 90       	pop	r12
    7702:	bf 90       	pop	r11
    7704:	08 95       	ret

00007706 <add_task_to_list>:
	new_task->period=period;
	return new_task;
}

void add_task_to_list(volatile Task_t* task)
{
    7706:	af 92       	push	r10
    7708:	bf 92       	push	r11
    770a:	cf 92       	push	r12
    770c:	df 92       	push	r13
    770e:	ef 92       	push	r14
    7710:	ff 92       	push	r15
    7712:	1f 93       	push	r17
    7714:	cf 93       	push	r28
    7716:	df 93       	push	r29
    7718:	5c 01       	movw	r10, r24
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    771a:	1f b7       	in	r17, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    771c:	f8 94       	cli
	{
		// Find the new task's proper spot in the list of tasks
		// task_list is a linked list sorted by scheduled_time, smallest first
		task->next = task_list;
    771e:	e0 91 64 2f 	lds	r30, 0x2F64	; 0x802f64 <task_list>
    7722:	f0 91 65 2f 	lds	r31, 0x2F65	; 0x802f65 <task_list+0x1>
    7726:	dc 01       	movw	r26, r24
    7728:	1c 96       	adiw	r26, 0x0c	; 12
    772a:	ed 93       	st	X+, r30
    772c:	fc 93       	st	X, r31
    772e:	1d 97       	sbiw	r26, 0x0d	; 13
		
		// If the new task is the next to be executed, put it at the front of the list
		if (task_list == NULL || task->scheduled_time <= task_list->scheduled_time)
    7730:	30 97       	sbiw	r30, 0x00	; 0
    7732:	59 f1       	breq	.+86     	; 0x778a <add_task_to_list+0x84>
    7734:	4d 91       	ld	r20, X+
    7736:	5d 91       	ld	r21, X+
    7738:	6d 91       	ld	r22, X+
    773a:	7c 91       	ld	r23, X
    773c:	80 81       	ld	r24, Z
    773e:	91 81       	ldd	r25, Z+1	; 0x01
    7740:	a2 81       	ldd	r26, Z+2	; 0x02
    7742:	b3 81       	ldd	r27, Z+3	; 0x03
    7744:	84 17       	cp	r24, r20
    7746:	95 07       	cpc	r25, r21
    7748:	a6 07       	cpc	r26, r22
    774a:	b7 07       	cpc	r27, r23
    774c:	f0 f4       	brcc	.+60     	; 0x778a <add_task_to_list+0x84>
			//uint8_t g = get_green_led();
			//uint8_t r = get_red_led();
			//uint8_t b = get_blue_led();
			//set_rgb(255, 50, 0);
			volatile Task_t* tmp_task_ptr = task_list;
			while (tmp_task_ptr->next != NULL && task->scheduled_time > (tmp_task_ptr->next)->scheduled_time)
    774e:	84 85       	ldd	r24, Z+12	; 0x0c
    7750:	95 85       	ldd	r25, Z+13	; 0x0d
    7752:	89 2b       	or	r24, r25
    7754:	09 f4       	brne	.+2      	; 0x7758 <add_task_to_list+0x52>
    7756:	ae c0       	rjmp	.+348    	; 0x78b4 <add_task_to_list+0x1ae>
    7758:	e5 01       	movw	r28, r10
    775a:	48 81       	ld	r20, Y
    775c:	59 81       	ldd	r21, Y+1	; 0x01
    775e:	6a 81       	ldd	r22, Y+2	; 0x02
    7760:	7b 81       	ldd	r23, Y+3	; 0x03
    7762:	a4 85       	ldd	r26, Z+12	; 0x0c
    7764:	b5 85       	ldd	r27, Z+13	; 0x0d
    7766:	8d 91       	ld	r24, X+
    7768:	9d 91       	ld	r25, X+
    776a:	0d 90       	ld	r0, X+
    776c:	bc 91       	ld	r27, X
    776e:	a0 2d       	mov	r26, r0
    7770:	84 17       	cp	r24, r20
    7772:	95 07       	cpc	r25, r21
    7774:	a6 07       	cpc	r26, r22
    7776:	b7 07       	cpc	r27, r23
    7778:	08 f0       	brcs	.+2      	; 0x777c <add_task_to_list+0x76>
    777a:	9c c0       	rjmp	.+312    	; 0x78b4 <add_task_to_list+0x1ae>
			{
				if(tmp_task_ptr->next==tmp_task_ptr){
    777c:	84 85       	ldd	r24, Z+12	; 0x0c
    777e:	95 85       	ldd	r25, Z+13	; 0x0d
    7780:	e8 17       	cp	r30, r24
    7782:	f9 07       	cpc	r31, r25
    7784:	09 f0       	breq	.+2      	; 0x7788 <add_task_to_list+0x82>
    7786:	7d c0       	rjmp	.+250    	; 0x7882 <add_task_to_list+0x17c>
    7788:	43 c0       	rjmp	.+134    	; 0x7810 <add_task_to_list+0x10a>
		task->next = task_list;
		
		// If the new task is the next to be executed, put it at the front of the list
		if (task_list == NULL || task->scheduled_time <= task_list->scheduled_time)
		{
			task_list = task;
    778a:	a0 92 64 2f 	sts	0x2F64, r10	; 0x802f64 <task_list>
    778e:	b0 92 65 2f 	sts	0x2F65, r11	; 0x802f65 <task_list+0x1>
			// If scheduled_time is in the current epoch, set the RTC compare interrupt
			if(task_executing==0)
    7792:	80 91 25 2d 	lds	r24, 0x2D25	; 0x802d25 <task_executing>
    7796:	81 11       	cpse	r24, r1
    7798:	96 c0       	rjmp	.+300    	; 0x78c6 <add_task_to_list+0x1c0>
			{			
				if (task->scheduled_time <= ((((uint32_t)rtc_epoch) << 16) | (uint32_t)RTC.PER))
    779a:	f5 01       	movw	r30, r10
    779c:	c0 80       	ld	r12, Z
    779e:	d1 80       	ldd	r13, Z+1	; 0x01
    77a0:	e2 80       	ldd	r14, Z+2	; 0x02
    77a2:	f3 80       	ldd	r15, Z+3	; 0x03
    77a4:	80 91 92 24 	lds	r24, 0x2492	; 0x802492 <rtc_epoch>
    77a8:	90 91 93 24 	lds	r25, 0x2493	; 0x802493 <rtc_epoch+0x1>
    77ac:	40 91 0a 04 	lds	r20, 0x040A	; 0x80040a <__TEXT_REGION_LENGTH__+0x70040a>
    77b0:	50 91 0b 04 	lds	r21, 0x040B	; 0x80040b <__TEXT_REGION_LENGTH__+0x70040b>
    77b4:	a0 e0       	ldi	r26, 0x00	; 0
    77b6:	b0 e0       	ldi	r27, 0x00	; 0
    77b8:	dc 01       	movw	r26, r24
    77ba:	99 27       	eor	r25, r25
    77bc:	88 27       	eor	r24, r24
    77be:	60 e0       	ldi	r22, 0x00	; 0
    77c0:	70 e0       	ldi	r23, 0x00	; 0
    77c2:	84 2b       	or	r24, r20
    77c4:	95 2b       	or	r25, r21
    77c6:	a6 2b       	or	r26, r22
    77c8:	b7 2b       	or	r27, r23
    77ca:	8c 15       	cp	r24, r12
    77cc:	9d 05       	cpc	r25, r13
    77ce:	ae 05       	cpc	r26, r14
    77d0:	bf 05       	cpc	r27, r15
    77d2:	98 f0       	brcs	.+38     	; 0x77fa <add_task_to_list+0xf4>
				{
					while (RTC.STATUS & RTC_SYNCBUSY_bm);
    77d4:	e0 e0       	ldi	r30, 0x00	; 0
    77d6:	f4 e0       	ldi	r31, 0x04	; 4
    77d8:	81 81       	ldd	r24, Z+1	; 0x01
    77da:	80 fd       	sbrc	r24, 0
    77dc:	fd cf       	rjmp	.-6      	; 0x77d8 <add_task_to_list+0xd2>
					RTC.COMP = ((uint16_t)(task_list->scheduled_time))|0x8;
    77de:	e5 01       	movw	r28, r10
    77e0:	88 81       	ld	r24, Y
    77e2:	99 81       	ldd	r25, Y+1	; 0x01
    77e4:	aa 81       	ldd	r26, Y+2	; 0x02
    77e6:	bb 81       	ldd	r27, Y+3	; 0x03
    77e8:	88 60       	ori	r24, 0x08	; 8
    77ea:	e0 e0       	ldi	r30, 0x00	; 0
    77ec:	f4 e0       	ldi	r31, 0x04	; 4
    77ee:	84 87       	std	Z+12, r24	; 0x0c
    77f0:	95 87       	std	Z+13, r25	; 0x0d
					RTC.INTCTRL |= RTC_COMP_INT_LEVEL;
    77f2:	82 81       	ldd	r24, Z+2	; 0x02
    77f4:	84 60       	ori	r24, 0x04	; 4
    77f6:	82 83       	std	Z+2, r24	; 0x02
    77f8:	66 c0       	rjmp	.+204    	; 0x78c6 <add_task_to_list+0x1c0>
				}
				else
				{
					RTC.INTCTRL &= ~RTC_COMP_INT_LEVEL;					
    77fa:	e0 e0       	ldi	r30, 0x00	; 0
    77fc:	f4 e0       	ldi	r31, 0x04	; 4
    77fe:	82 81       	ldd	r24, Z+2	; 0x02
    7800:	8b 7f       	andi	r24, 0xFB	; 251
    7802:	82 83       	std	Z+2, r24	; 0x02
    7804:	60 c0       	rjmp	.+192    	; 0x78c6 <add_task_to_list+0x1c0>
			//uint8_t b = get_blue_led();
			//set_rgb(255, 50, 0);
			volatile Task_t* tmp_task_ptr = task_list;
			while (tmp_task_ptr->next != NULL && task->scheduled_time > (tmp_task_ptr->next)->scheduled_time)
			{
				if(tmp_task_ptr->next==tmp_task_ptr){
    7806:	84 85       	ldd	r24, Z+12	; 0x0c
    7808:	95 85       	ldd	r25, Z+13	; 0x0d
    780a:	8e 17       	cp	r24, r30
    780c:	9f 07       	cpc	r25, r31
    780e:	c9 f5       	brne	.+114    	; 0x7882 <add_task_to_list+0x17c>
					//set_rgb(255, 50, 0);
					printf_P(PSTR("ERROR! Task list has self-reference.\r\n"));
    7810:	87 e6       	ldi	r24, 0x67	; 103
    7812:	99 e0       	ldi	r25, 0x09	; 9
    7814:	9f 93       	push	r25
    7816:	8f 93       	push	r24
    7818:	0e 94 f7 56 	call	0xadee	; 0xadee <printf_P>
					printf_P(PSTR("New Task %p (%p) scheduled at %lu with period %lu, %lu current\r\n"), task, (task->func).noarg_function, task->scheduled_time, task->period, get_time());
    781c:	0e 94 20 08 	call	0x1040	; 0x1040 <get_time>
    7820:	e6 2f       	mov	r30, r22
    7822:	f7 2f       	mov	r31, r23
    7824:	d5 01       	movw	r26, r10
    7826:	14 96       	adiw	r26, 0x04	; 4
    7828:	cd 90       	ld	r12, X+
    782a:	dd 90       	ld	r13, X+
    782c:	ed 90       	ld	r14, X+
    782e:	fc 90       	ld	r15, X
    7830:	17 97       	sbiw	r26, 0x07	; 7
    7832:	4d 91       	ld	r20, X+
    7834:	5d 91       	ld	r21, X+
    7836:	6d 91       	ld	r22, X+
    7838:	7c 91       	ld	r23, X
    783a:	13 97       	sbiw	r26, 0x03	; 3
    783c:	18 96       	adiw	r26, 0x08	; 8
    783e:	2d 91       	ld	r18, X+
    7840:	3c 91       	ld	r19, X
    7842:	19 97       	sbiw	r26, 0x09	; 9
    7844:	9f 93       	push	r25
    7846:	8f 93       	push	r24
    7848:	ff 93       	push	r31
    784a:	ef 93       	push	r30
    784c:	ff 92       	push	r15
    784e:	ef 92       	push	r14
    7850:	df 92       	push	r13
    7852:	cf 92       	push	r12
    7854:	7f 93       	push	r23
    7856:	6f 93       	push	r22
    7858:	5f 93       	push	r21
    785a:	4f 93       	push	r20
    785c:	3f 93       	push	r19
    785e:	2f 93       	push	r18
    7860:	bf 92       	push	r11
    7862:	af 92       	push	r10
    7864:	86 e2       	ldi	r24, 0x26	; 38
    7866:	99 e0       	ldi	r25, 0x09	; 9
    7868:	9f 93       	push	r25
    786a:	8f 93       	push	r24
    786c:	0e 94 f7 56 	call	0xadee	; 0xadee <printf_P>
					print_task_queue();
    7870:	0e 94 1f 3b 	call	0x763e	; 0x763e <print_task_queue>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    7874:	1f bf       	out	0x3f, r17	; 63
    __asm__ volatile ("" ::: "memory");
    7876:	cd b7       	in	r28, 0x3d	; 61
    7878:	de b7       	in	r29, 0x3e	; 62
    787a:	64 96       	adiw	r28, 0x14	; 20
    787c:	cd bf       	out	0x3d, r28	; 61
    787e:	de bf       	out	0x3e, r29	; 62
    7880:	28 c0       	rjmp	.+80     	; 0x78d2 <add_task_to_list+0x1cc>
					return;				
				}
				tmp_task_ptr = tmp_task_ptr->next;
    7882:	04 84       	ldd	r0, Z+12	; 0x0c
    7884:	f5 85       	ldd	r31, Z+13	; 0x0d
    7886:	e0 2d       	mov	r30, r0
			//uint8_t g = get_green_led();
			//uint8_t r = get_red_led();
			//uint8_t b = get_blue_led();
			//set_rgb(255, 50, 0);
			volatile Task_t* tmp_task_ptr = task_list;
			while (tmp_task_ptr->next != NULL && task->scheduled_time > (tmp_task_ptr->next)->scheduled_time)
    7888:	24 85       	ldd	r18, Z+12	; 0x0c
    788a:	35 85       	ldd	r19, Z+13	; 0x0d
    788c:	23 2b       	or	r18, r19
    788e:	91 f0       	breq	.+36     	; 0x78b4 <add_task_to_list+0x1ae>
    7890:	e5 01       	movw	r28, r10
    7892:	88 81       	ld	r24, Y
    7894:	99 81       	ldd	r25, Y+1	; 0x01
    7896:	aa 81       	ldd	r26, Y+2	; 0x02
    7898:	bb 81       	ldd	r27, Y+3	; 0x03
    789a:	24 85       	ldd	r18, Z+12	; 0x0c
    789c:	35 85       	ldd	r19, Z+13	; 0x0d
    789e:	e9 01       	movw	r28, r18
    78a0:	48 81       	ld	r20, Y
    78a2:	59 81       	ldd	r21, Y+1	; 0x01
    78a4:	6a 81       	ldd	r22, Y+2	; 0x02
    78a6:	7b 81       	ldd	r23, Y+3	; 0x03
    78a8:	48 17       	cp	r20, r24
    78aa:	59 07       	cpc	r21, r25
    78ac:	6a 07       	cpc	r22, r26
    78ae:	7b 07       	cpc	r23, r27
    78b0:	08 f4       	brcc	.+2      	; 0x78b4 <add_task_to_list+0x1ae>
    78b2:	a9 cf       	rjmp	.-174    	; 0x7806 <add_task_to_list+0x100>
					return;				
				}
				tmp_task_ptr = tmp_task_ptr->next;
			}
			//set_rgb(r, g, b);
			task->next = tmp_task_ptr->next;
    78b4:	84 85       	ldd	r24, Z+12	; 0x0c
    78b6:	95 85       	ldd	r25, Z+13	; 0x0d
    78b8:	d5 01       	movw	r26, r10
    78ba:	1c 96       	adiw	r26, 0x0c	; 12
    78bc:	8d 93       	st	X+, r24
    78be:	9c 93       	st	X, r25
    78c0:	1d 97       	sbiw	r26, 0x0d	; 13
			tmp_task_ptr->next = task;
    78c2:	a4 86       	std	Z+12, r10	; 0x0c
    78c4:	b5 86       	std	Z+13, r11	; 0x0d
			//while (RTC.STATUS & RTC_SYNCBUSY_bm);
			//RTC.COMP = RTC.CNT+5;
			//RTC.INTCTRL |= RTC_COMP_INT_LEVEL;
		//}

		num_tasks++;
    78c6:	80 91 6d 2a 	lds	r24, 0x2A6D	; 0x802a6d <num_tasks>
    78ca:	8f 5f       	subi	r24, 0xFF	; 255
    78cc:	80 93 6d 2a 	sts	0x2A6D, r24	; 0x802a6d <num_tasks>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    78d0:	1f bf       	out	0x3f, r17	; 63
		
		//task_list_checkup();
	}
}
    78d2:	df 91       	pop	r29
    78d4:	cf 91       	pop	r28
    78d6:	1f 91       	pop	r17
    78d8:	ff 90       	pop	r15
    78da:	ef 90       	pop	r14
    78dc:	df 90       	pop	r13
    78de:	cf 90       	pop	r12
    78e0:	bf 90       	pop	r11
    78e2:	af 90       	pop	r10
    78e4:	08 95       	ret

000078e6 <task_list_cleanup>:
	}
}

//This function checks for errors or inconsistencies in the task list, and attempts to correct them.
void task_list_cleanup()
{
    78e6:	8f 92       	push	r8
    78e8:	9f 92       	push	r9
    78ea:	af 92       	push	r10
    78ec:	bf 92       	push	r11
    78ee:	cf 92       	push	r12
    78f0:	df 92       	push	r13
    78f2:	ef 92       	push	r14
    78f4:	ff 92       	push	r15
    78f6:	0f 93       	push	r16
    78f8:	1f 93       	push	r17
    78fa:	cf 93       	push	r28
    78fc:	df 93       	push	r29
    78fe:	cd b7       	in	r28, 0x3d	; 61
    7900:	de b7       	in	r29, 0x3e	; 62
    7902:	64 97       	sbiw	r28, 0x14	; 20
    7904:	cd bf       	out	0x3d, r28	; 61
    7906:	de bf       	out	0x3e, r29	; 62
	printf_P(PSTR("\tAttempting to restore task_list (by dropping all non-periodic tasks.\r\n\tIf you only see this message rarely, don't worry too much.\r\n"));
    7908:	8f e4       	ldi	r24, 0x4F	; 79
    790a:	9a e0       	ldi	r25, 0x0A	; 10
    790c:	9f 93       	push	r25
    790e:	8f 93       	push	r24
    7910:	0e 94 f7 56 	call	0xadee	; 0xadee <printf_P>

	volatile Task_t* cur_task = task_list;
    7914:	e0 90 64 2f 	lds	r14, 0x2F64	; 0x802f64 <task_list>
    7918:	f0 90 65 2f 	lds	r15, 0x2F65	; 0x802f65 <task_list+0x1>
	volatile Task_t* task_ptr_arr[MAX_NUM_SCHEDULED_TASKS];
	uint8_t num_periodic_tasks = 0;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    791c:	0f b7       	in	r16, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    791e:	f8 94       	cli
	{
		RTC.INTCTRL &= ~RTC_COMP_INT_LEVEL;		
    7920:	e0 e0       	ldi	r30, 0x00	; 0
    7922:	f4 e0       	ldi	r31, 0x04	; 4
    7924:	82 81       	ldd	r24, Z+2	; 0x02
    7926:	8b 7f       	andi	r24, 0xFB	; 251
    7928:	82 83       	std	Z+2, r24	; 0x02
		while (cur_task != NULL)
    792a:	0f 90       	pop	r0
    792c:	0f 90       	pop	r0
    792e:	e1 14       	cp	r14, r1
    7930:	f1 04       	cpc	r15, r1
    7932:	09 f4       	brne	.+2      	; 0x7936 <task_list_cleanup+0x50>
    7934:	6d c0       	rjmp	.+218    	; 0x7a10 <task_list_cleanup+0x12a>
    7936:	10 e0       	ldi	r17, 0x00	; 0
		{
			if(cur_task->period==0)
    7938:	f7 01       	movw	r30, r14
    793a:	84 81       	ldd	r24, Z+4	; 0x04
    793c:	95 81       	ldd	r25, Z+5	; 0x05
    793e:	a6 81       	ldd	r26, Z+6	; 0x06
    7940:	b7 81       	ldd	r27, Z+7	; 0x07
    7942:	89 2b       	or	r24, r25
    7944:	8a 2b       	or	r24, r26
    7946:	8b 2b       	or	r24, r27
    7948:	19 f4       	brne	.+6      	; 0x7950 <task_list_cleanup+0x6a>
			{
				cur_task = cur_task->next;
    794a:	e4 84       	ldd	r14, Z+12	; 0x0c
    794c:	f5 84       	ldd	r15, Z+13	; 0x0d
    794e:	2a c0       	rjmp	.+84     	; 0x79a4 <task_list_cleanup+0xbe>
			}
			else
			{
				cur_task->scheduled_time=get_time()+cur_task->period+50;
    7950:	0e 94 20 08 	call	0x1040	; 0x1040 <get_time>
    7954:	f7 01       	movw	r30, r14
    7956:	84 80       	ldd	r8, Z+4	; 0x04
    7958:	95 80       	ldd	r9, Z+5	; 0x05
    795a:	a6 80       	ldd	r10, Z+6	; 0x06
    795c:	b7 80       	ldd	r11, Z+7	; 0x07
    795e:	f2 e3       	ldi	r31, 0x32	; 50
    7960:	8f 0e       	add	r8, r31
    7962:	91 1c       	adc	r9, r1
    7964:	a1 1c       	adc	r10, r1
    7966:	b1 1c       	adc	r11, r1
    7968:	dc 01       	movw	r26, r24
    796a:	cb 01       	movw	r24, r22
    796c:	88 0d       	add	r24, r8
    796e:	99 1d       	adc	r25, r9
    7970:	aa 1d       	adc	r26, r10
    7972:	bb 1d       	adc	r27, r11
    7974:	f7 01       	movw	r30, r14
    7976:	80 83       	st	Z, r24
    7978:	91 83       	std	Z+1, r25	; 0x01
    797a:	a2 83       	std	Z+2, r26	; 0x02
    797c:	b3 83       	std	Z+3, r27	; 0x03
				task_ptr_arr[num_periodic_tasks] = cur_task;
    797e:	e1 2f       	mov	r30, r17
    7980:	f0 e0       	ldi	r31, 0x00	; 0
    7982:	ee 0f       	add	r30, r30
    7984:	ff 1f       	adc	r31, r31
    7986:	81 e0       	ldi	r24, 0x01	; 1
    7988:	90 e0       	ldi	r25, 0x00	; 0
    798a:	8c 0f       	add	r24, r28
    798c:	9d 1f       	adc	r25, r29
    798e:	e8 0f       	add	r30, r24
    7990:	f9 1f       	adc	r31, r25
    7992:	e0 82       	st	Z, r14
    7994:	f1 82       	std	Z+1, r15	; 0x01
				cur_task = cur_task->next;
    7996:	f7 01       	movw	r30, r14
    7998:	84 85       	ldd	r24, Z+12	; 0x0c
    799a:	95 85       	ldd	r25, Z+13	; 0x0d
				task_ptr_arr[num_periodic_tasks]->next=NULL;
    799c:	14 86       	std	Z+12, r1	; 0x0c
    799e:	15 86       	std	Z+13, r1	; 0x0d
				num_periodic_tasks++;					
    79a0:	1f 5f       	subi	r17, 0xFF	; 255
			}
			else
			{
				cur_task->scheduled_time=get_time()+cur_task->period+50;
				task_ptr_arr[num_periodic_tasks] = cur_task;
				cur_task = cur_task->next;
    79a2:	7c 01       	movw	r14, r24
	volatile Task_t* task_ptr_arr[MAX_NUM_SCHEDULED_TASKS];
	uint8_t num_periodic_tasks = 0;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
	{
		RTC.INTCTRL &= ~RTC_COMP_INT_LEVEL;		
		while (cur_task != NULL)
    79a4:	e1 14       	cp	r14, r1
    79a6:	f1 04       	cpc	r15, r1
    79a8:	39 f6       	brne	.-114    	; 0x7938 <task_list_cleanup+0x52>
    79aa:	33 c0       	rjmp	.+102    	; 0x7a12 <task_list_cleanup+0x12c>
		uint8_t task_is_periodic = 0;
		for(uint8_t i=0;i<MAX_NUM_SCHEDULED_TASKS;i++)
		{
			for(uint8_t j=0;j<num_periodic_tasks;j++)
			{
				if(&(task_storage_arr[i])==task_ptr_arr[j])
    79ac:	21 91       	ld	r18, Z+
    79ae:	31 91       	ld	r19, Z+
    79b0:	24 17       	cp	r18, r20
    79b2:	35 07       	cpc	r19, r21
    79b4:	21 f0       	breq	.+8      	; 0x79be <task_list_cleanup+0xd8>
			}
		}
		uint8_t task_is_periodic = 0;
		for(uint8_t i=0;i<MAX_NUM_SCHEDULED_TASKS;i++)
		{
			for(uint8_t j=0;j<num_periodic_tasks;j++)
    79b6:	9f 5f       	subi	r25, 0xFF	; 255
    79b8:	91 13       	cpse	r25, r17
    79ba:	f8 cf       	rjmp	.-16     	; 0x79ac <task_list_cleanup+0xc6>
    79bc:	37 c0       	rjmp	.+110    	; 0x7a2c <task_list_cleanup+0x146>
    79be:	fe e0       	ldi	r31, 0x0E	; 14
    79c0:	ef 0e       	add	r14, r31
    79c2:	f1 1c       	adc	r15, r1
				task_ptr_arr[num_periodic_tasks]->next=NULL;
				num_periodic_tasks++;					
			}
		}
		uint8_t task_is_periodic = 0;
		for(uint8_t i=0;i<MAX_NUM_SCHEDULED_TASKS;i++)
    79c4:	ec 14       	cp	r14, r12
    79c6:	fd 04       	cpc	r15, r13
    79c8:	61 f0       	breq	.+24     	; 0x79e2 <task_list_cleanup+0xfc>
		{
			for(uint8_t j=0;j<num_periodic_tasks;j++)
    79ca:	11 23       	and	r17, r17
    79cc:	79 f1       	breq	.+94     	; 0x7a2c <task_list_cleanup+0x146>
			{
				if(&(task_storage_arr[i])==task_ptr_arr[j])
    79ce:	a7 01       	movw	r20, r14
    79d0:	89 81       	ldd	r24, Y+1	; 0x01
    79d2:	9a 81       	ldd	r25, Y+2	; 0x02
    79d4:	e8 16       	cp	r14, r24
    79d6:	f9 06       	cpc	r15, r25
    79d8:	91 f3       	breq	.-28     	; 0x79be <task_list_cleanup+0xd8>
    79da:	fe 01       	movw	r30, r28
    79dc:	33 96       	adiw	r30, 0x03	; 3
    79de:	90 e0       	ldi	r25, 0x00	; 0
    79e0:	ea cf       	rjmp	.-44     	; 0x79b6 <task_list_cleanup+0xd0>
				//printf_P(PSTR("\tClearing memory of task %X.\r\n"), &(task_storage_arr[i]));
				remove_task(&(task_storage_arr[i]));
			}
			task_is_periodic = 0;
		}
		num_tasks = 0;
    79e2:	10 92 6d 2a 	sts	0x2A6D, r1	; 0x802a6d <num_tasks>
		task_list=NULL; //Now, the task list has been cleared out, but only non-periodic tasks have had their memory purged.
    79e6:	10 92 64 2f 	sts	0x2F64, r1	; 0x802f64 <task_list>
    79ea:	10 92 65 2f 	sts	0x2F65, r1	; 0x802f65 <task_list+0x1>
		for(uint8_t i=0;i<num_periodic_tasks;i++)
    79ee:	11 23       	and	r17, r17
    79f0:	69 f0       	breq	.+26     	; 0x7a0c <task_list_cleanup+0x126>
    79f2:	ce 01       	movw	r24, r28
    79f4:	01 96       	adiw	r24, 0x01	; 1
    79f6:	6c 01       	movw	r12, r24
    79f8:	f1 2c       	mov	r15, r1
		{
			add_task_to_list(task_ptr_arr[i]);
    79fa:	f6 01       	movw	r30, r12
    79fc:	81 91       	ld	r24, Z+
    79fe:	91 91       	ld	r25, Z+
    7a00:	6f 01       	movw	r12, r30
    7a02:	0e 94 83 3b 	call	0x7706	; 0x7706 <add_task_to_list>
			}
			task_is_periodic = 0;
		}
		num_tasks = 0;
		task_list=NULL; //Now, the task list has been cleared out, but only non-periodic tasks have had their memory purged.
		for(uint8_t i=0;i<num_periodic_tasks;i++)
    7a06:	f3 94       	inc	r15
    7a08:	f1 12       	cpse	r15, r17
    7a0a:	f7 cf       	rjmp	.-18     	; 0x79fa <task_list_cleanup+0x114>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    7a0c:	0f bf       	out	0x3f, r16	; 63
    __asm__ volatile ("" ::: "memory");
    7a0e:	12 c0       	rjmp	.+36     	; 0x7a34 <task_list_cleanup+0x14e>
	volatile Task_t* task_ptr_arr[MAX_NUM_SCHEDULED_TASKS];
	uint8_t num_periodic_tasks = 0;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
	{
		RTC.INTCTRL &= ~RTC_COMP_INT_LEVEL;		
		while (cur_task != NULL)
    7a10:	10 e0       	ldi	r17, 0x00	; 0
    7a12:	0f 2e       	mov	r0, r31
    7a14:	f2 e0       	ldi	r31, 0x02	; 2
    7a16:	ef 2e       	mov	r14, r31
    7a18:	f4 e2       	ldi	r31, 0x24	; 36
    7a1a:	ff 2e       	mov	r15, r31
    7a1c:	f0 2d       	mov	r31, r0
    7a1e:	0f 2e       	mov	r0, r31
    7a20:	fe e8       	ldi	r31, 0x8E	; 142
    7a22:	cf 2e       	mov	r12, r31
    7a24:	f4 e2       	ldi	r31, 0x24	; 36
    7a26:	df 2e       	mov	r13, r31
    7a28:	f0 2d       	mov	r31, r0
    7a2a:	cf cf       	rjmp	.-98     	; 0x79ca <task_list_cleanup+0xe4>
				}
			}	
			if(!task_is_periodic)
			{
				//printf_P(PSTR("\tClearing memory of task %X.\r\n"), &(task_storage_arr[i]));
				remove_task(&(task_storage_arr[i]));
    7a2c:	c7 01       	movw	r24, r14
    7a2e:	0e 94 d0 3a 	call	0x75a0	; 0x75a0 <remove_task>
    7a32:	c5 cf       	rjmp	.-118    	; 0x79be <task_list_cleanup+0xd8>
		for(uint8_t i=0;i<num_periodic_tasks;i++)
		{
			add_task_to_list(task_ptr_arr[i]);
		}
	}
}
    7a34:	64 96       	adiw	r28, 0x14	; 20
    7a36:	cd bf       	out	0x3d, r28	; 61
    7a38:	de bf       	out	0x3e, r29	; 62
    7a3a:	df 91       	pop	r29
    7a3c:	cf 91       	pop	r28
    7a3e:	1f 91       	pop	r17
    7a40:	0f 91       	pop	r16
    7a42:	ff 90       	pop	r15
    7a44:	ef 90       	pop	r14
    7a46:	df 90       	pop	r13
    7a48:	cf 90       	pop	r12
    7a4a:	bf 90       	pop	r11
    7a4c:	af 90       	pop	r10
    7a4e:	9f 90       	pop	r9
    7a50:	8f 90       	pop	r8
    7a52:	08 95       	ret

00007a54 <schedule_task>:
// Adds a new task to the task queue
// time is number of milliseconds until function is executed
// function is a function pointer to execute
// arg is the argument to supply to function
volatile Task_t* schedule_task(uint32_t time, void (*function)(), void* arg)
{	
    7a54:	5f 92       	push	r5
    7a56:	6f 92       	push	r6
    7a58:	7f 92       	push	r7
    7a5a:	8f 92       	push	r8
    7a5c:	9f 92       	push	r9
    7a5e:	af 92       	push	r10
    7a60:	bf 92       	push	r11
    7a62:	cf 92       	push	r12
    7a64:	df 92       	push	r13
    7a66:	ef 92       	push	r14
    7a68:	ff 92       	push	r15
    7a6a:	0f 93       	push	r16
    7a6c:	1f 93       	push	r17
    7a6e:	cf 93       	push	r28
    7a70:	df 93       	push	r29
	volatile Task_t* new_task;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    7a72:	5f b6       	in	r5, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    7a74:	f8 94       	cli
#include "scheduler.h"

static volatile Task_t* scheduler_malloc()
{
	if(num_tasks>=MAX_NUM_SCHEDULED_TASKS) return NULL;
    7a76:	e0 91 6d 2a 	lds	r30, 0x2A6D	; 0x802a6d <num_tasks>
    7a7a:	ea 30       	cpi	r30, 0x0A	; 10
    7a7c:	b8 f5       	brcc	.+110    	; 0x7aec <schedule_task+0x98>
    7a7e:	89 01       	movw	r16, r18
    7a80:	3a 01       	movw	r6, r20
    7a82:	6b 01       	movw	r12, r22
    7a84:	7c 01       	movw	r14, r24

	for(uint8_t tmp=0 ; tmp<MAX_NUM_SCHEDULED_TASKS ; tmp++)
	{
		//This code assumes that all tasks will have non-null function pointers.
		if((task_storage_arr[tmp].func.noarg_function) == NULL)
    7a86:	80 91 0a 24 	lds	r24, 0x240A	; 0x80240a <task_storage_arr+0x8>
    7a8a:	90 91 0b 24 	lds	r25, 0x240B	; 0x80240b <task_storage_arr+0x9>
    7a8e:	89 2b       	or	r24, r25
    7a90:	b1 f0       	breq	.+44     	; 0x7abe <schedule_task+0x6a>
    7a92:	81 e0       	ldi	r24, 0x01	; 1
    7a94:	90 e0       	ldi	r25, 0x00	; 0
    7a96:	9c 01       	movw	r18, r24
    7a98:	ac 01       	movw	r20, r24
    7a9a:	44 0f       	add	r20, r20
    7a9c:	55 1f       	adc	r21, r21
    7a9e:	fa 01       	movw	r30, r20
    7aa0:	ee 0f       	add	r30, r30
    7aa2:	ff 1f       	adc	r31, r31
    7aa4:	ee 0f       	add	r30, r30
    7aa6:	ff 1f       	adc	r31, r31
    7aa8:	ee 0f       	add	r30, r30
    7aaa:	ff 1f       	adc	r31, r31
    7aac:	e4 1b       	sub	r30, r20
    7aae:	f5 0b       	sbc	r31, r21
    7ab0:	ee 5f       	subi	r30, 0xFE	; 254
    7ab2:	fb 4d       	sbci	r31, 0xDB	; 219
    7ab4:	40 85       	ldd	r20, Z+8	; 0x08
    7ab6:	51 85       	ldd	r21, Z+9	; 0x09
    7ab8:	45 2b       	or	r20, r21
    7aba:	99 f4       	brne	.+38     	; 0x7ae2 <schedule_task+0x8e>
    7abc:	02 c0       	rjmp	.+4      	; 0x7ac2 <schedule_task+0x6e>
    7abe:	20 e0       	ldi	r18, 0x00	; 0
    7ac0:	30 e0       	ldi	r19, 0x00	; 0
		{
			return &(task_storage_arr[tmp]);
    7ac2:	22 0f       	add	r18, r18
    7ac4:	33 1f       	adc	r19, r19
    7ac6:	e9 01       	movw	r28, r18
    7ac8:	cc 0f       	add	r28, r28
    7aca:	dd 1f       	adc	r29, r29
    7acc:	cc 0f       	add	r28, r28
    7ace:	dd 1f       	adc	r29, r29
    7ad0:	cc 0f       	add	r28, r28
    7ad2:	dd 1f       	adc	r29, r29
    7ad4:	c2 1b       	sub	r28, r18
    7ad6:	d3 0b       	sbc	r29, r19
    7ad8:	ce 5f       	subi	r28, 0xFE	; 254
    7ada:	db 4d       	sbci	r29, 0xDB	; 219
{	
	volatile Task_t* new_task;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
	{
		new_task = scheduler_malloc();
		if (new_task == NULL) return NULL;
    7adc:	20 97       	sbiw	r28, 0x00	; 0
    7ade:	51 f4       	brne	.+20     	; 0x7af4 <schedule_task+0xa0>
    7ae0:	05 c0       	rjmp	.+10     	; 0x7aec <schedule_task+0x98>
    7ae2:	01 96       	adiw	r24, 0x01	; 1

static volatile Task_t* scheduler_malloc()
{
	if(num_tasks>=MAX_NUM_SCHEDULED_TASKS) return NULL;

	for(uint8_t tmp=0 ; tmp<MAX_NUM_SCHEDULED_TASKS ; tmp++)
    7ae4:	8a 30       	cpi	r24, 0x0A	; 10
    7ae6:	91 05       	cpc	r25, r1
    7ae8:	b1 f6       	brne	.-84     	; 0x7a96 <schedule_task+0x42>
    7aea:	08 c0       	rjmp	.+16     	; 0x7afc <schedule_task+0xa8>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    7aec:	5f be       	out	0x3f, r5	; 63
{	
	volatile Task_t* new_task;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
	{
		new_task = scheduler_malloc();
		if (new_task == NULL) return NULL;
    7aee:	80 e0       	ldi	r24, 0x00	; 0
    7af0:	90 e0       	ldi	r25, 0x00	; 0
    7af2:	51 c0       	rjmp	.+162    	; 0x7b96 <schedule_task+0x142>
		else if(new_task == ((volatile Task_t*)0xFFFF)) 
    7af4:	cf 3f       	cpi	r28, 0xFF	; 255
    7af6:	8f ef       	ldi	r24, 0xFF	; 255
    7af8:	d8 07       	cpc	r29, r24
    7afa:	69 f4       	brne	.+26     	; 0x7b16 <schedule_task+0xc2>
		{
			printf_P(PSTR("ERROR: No empty spot found in scheduler_malloc, but num_tasks wasn't greater than or equal max_tasks.\r\n"));
    7afc:	87 ee       	ldi	r24, 0xE7	; 231
    7afe:	99 e0       	ldi	r25, 0x09	; 9
    7b00:	9f 93       	push	r25
    7b02:	8f 93       	push	r24
    7b04:	0e 94 f7 56 	call	0xadee	; 0xadee <printf_P>
			task_list_cleanup();
    7b08:	0e 94 73 3c 	call	0x78e6	; 0x78e6 <task_list_cleanup>
    7b0c:	0f 90       	pop	r0
    7b0e:	0f 90       	pop	r0
    7b10:	cf ef       	ldi	r28, 0xFF	; 255
    7b12:	df ef       	ldi	r29, 0xFF	; 255
    7b14:	11 c0       	rjmp	.+34     	; 0x7b38 <schedule_task+0xe4>
		}
		else if((new_task<task_storage_arr)||(new_task>(&(task_storage_arr[MAX_NUM_SCHEDULED_TASKS-1]))))
    7b16:	84 e2       	ldi	r24, 0x24	; 36
    7b18:	c2 30       	cpi	r28, 0x02	; 2
    7b1a:	d8 07       	cpc	r29, r24
    7b1c:	28 f0       	brcs	.+10     	; 0x7b28 <schedule_task+0xd4>
    7b1e:	84 e2       	ldi	r24, 0x24	; 36
    7b20:	c0 38       	cpi	r28, 0x80	; 128
    7b22:	d8 07       	cpc	r29, r24
    7b24:	49 f0       	breq	.+18     	; 0x7b38 <schedule_task+0xe4>
    7b26:	40 f0       	brcs	.+16     	; 0x7b38 <schedule_task+0xe4>
		{
			printf_P(PSTR("ERROR: scheduler_malloc returned a new_task pointer outside of the task storage array.\r\n"));
    7b28:	8e e8       	ldi	r24, 0x8E	; 142
    7b2a:	99 e0       	ldi	r25, 0x09	; 9
    7b2c:	9f 93       	push	r25
    7b2e:	8f 93       	push	r24
    7b30:	0e 94 f7 56 	call	0xadee	; 0xadee <printf_P>
    7b34:	0f 90       	pop	r0
    7b36:	0f 90       	pop	r0
		}

		time+=MIN_TASK_TIME_IN_FUTURE*(time<MIN_TASK_TIME_IN_FUTURE);	
    7b38:	84 e1       	ldi	r24, 0x14	; 20
    7b3a:	c8 16       	cp	r12, r24
    7b3c:	d1 04       	cpc	r13, r1
    7b3e:	e1 04       	cpc	r14, r1
    7b40:	f1 04       	cpc	r15, r1
    7b42:	20 f0       	brcs	.+8      	; 0x7b4c <schedule_task+0xf8>
    7b44:	81 2c       	mov	r8, r1
    7b46:	91 2c       	mov	r9, r1
    7b48:	54 01       	movw	r10, r8
    7b4a:	07 c0       	rjmp	.+14     	; 0x7b5a <schedule_task+0x106>
    7b4c:	0f 2e       	mov	r0, r31
    7b4e:	f4 e1       	ldi	r31, 0x14	; 20
    7b50:	8f 2e       	mov	r8, r31
    7b52:	91 2c       	mov	r9, r1
    7b54:	a1 2c       	mov	r10, r1
    7b56:	b1 2c       	mov	r11, r1
    7b58:	f0 2d       	mov	r31, r0
		new_task->scheduled_time = time + get_time();
    7b5a:	0e 94 20 08 	call	0x1040	; 0x1040 <get_time>
    7b5e:	86 0e       	add	r8, r22
    7b60:	97 1e       	adc	r9, r23
    7b62:	a8 1e       	adc	r10, r24
    7b64:	b9 1e       	adc	r11, r25
    7b66:	c8 0c       	add	r12, r8
    7b68:	d9 1c       	adc	r13, r9
    7b6a:	ea 1c       	adc	r14, r10
    7b6c:	fb 1c       	adc	r15, r11
    7b6e:	c8 82       	st	Y, r12
    7b70:	d9 82       	std	Y+1, r13	; 0x01
    7b72:	ea 82       	std	Y+2, r14	; 0x02
    7b74:	fb 82       	std	Y+3, r15	; 0x03
		new_task->arg = arg;
    7b76:	0a 87       	std	Y+10, r16	; 0x0a
    7b78:	1b 87       	std	Y+11, r17	; 0x0b
		new_task->func.noarg_function = function;
    7b7a:	68 86       	std	Y+8, r6	; 0x08
    7b7c:	79 86       	std	Y+9, r7	; 0x09
		new_task->period = 0;
    7b7e:	1c 82       	std	Y+4, r1	; 0x04
    7b80:	1d 82       	std	Y+5, r1	; 0x05
    7b82:	1e 82       	std	Y+6, r1	; 0x06
    7b84:	1f 82       	std	Y+7, r1	; 0x07
		new_task->next = NULL; 		
    7b86:	1c 86       	std	Y+12, r1	; 0x0c
    7b88:	1d 86       	std	Y+13, r1	; 0x0d
    7b8a:	5f be       	out	0x3f, r5	; 63
	}
	add_task_to_list(new_task);
    7b8c:	ce 01       	movw	r24, r28
    7b8e:	0e 94 83 3b 	call	0x7706	; 0x7706 <add_task_to_list>
	//printf("Task (%X->%X) scheduled for %lu\t[%hhu]\r\n", new_task, (new_task->func).noarg_function, new_task->scheduled_time, num_tasks);

	return new_task;
    7b92:	8c 2f       	mov	r24, r28
    7b94:	9d 2f       	mov	r25, r29
}
    7b96:	df 91       	pop	r29
    7b98:	cf 91       	pop	r28
    7b9a:	1f 91       	pop	r17
    7b9c:	0f 91       	pop	r16
    7b9e:	ff 90       	pop	r15
    7ba0:	ef 90       	pop	r14
    7ba2:	df 90       	pop	r13
    7ba4:	cf 90       	pop	r12
    7ba6:	bf 90       	pop	r11
    7ba8:	af 90       	pop	r10
    7baa:	9f 90       	pop	r9
    7bac:	8f 90       	pop	r8
    7bae:	7f 90       	pop	r7
    7bb0:	6f 90       	pop	r6
    7bb2:	5f 90       	pop	r5
    7bb4:	08 95       	ret

00007bb6 <schedule_periodic_task>:

volatile Task_t* schedule_periodic_task(uint32_t period, void (*function)(), void* arg)
{
    7bb6:	cf 92       	push	r12
    7bb8:	df 92       	push	r13
    7bba:	ef 92       	push	r14
    7bbc:	ff 92       	push	r15
	period+=MIN_TASK_TIME_IN_FUTURE*(period<MIN_TASK_TIME_IN_FUTURE);	
    7bbe:	64 31       	cpi	r22, 0x14	; 20
    7bc0:	71 05       	cpc	r23, r1
    7bc2:	81 05       	cpc	r24, r1
    7bc4:	91 05       	cpc	r25, r1
    7bc6:	20 f0       	brcs	.+8      	; 0x7bd0 <schedule_periodic_task+0x1a>
    7bc8:	c1 2c       	mov	r12, r1
    7bca:	d1 2c       	mov	r13, r1
    7bcc:	76 01       	movw	r14, r12
    7bce:	07 c0       	rjmp	.+14     	; 0x7bde <schedule_periodic_task+0x28>
    7bd0:	0f 2e       	mov	r0, r31
    7bd2:	f4 e1       	ldi	r31, 0x14	; 20
    7bd4:	cf 2e       	mov	r12, r31
    7bd6:	d1 2c       	mov	r13, r1
    7bd8:	e1 2c       	mov	r14, r1
    7bda:	f1 2c       	mov	r15, r1
    7bdc:	f0 2d       	mov	r31, r0
    7bde:	c6 0e       	add	r12, r22
    7be0:	d7 1e       	adc	r13, r23
    7be2:	e8 1e       	adc	r14, r24
    7be4:	f9 1e       	adc	r15, r25
	volatile Task_t* new_task = schedule_task(period, function, arg);
    7be6:	c7 01       	movw	r24, r14
    7be8:	b6 01       	movw	r22, r12
    7bea:	0e 94 2a 3d 	call	0x7a54	; 0x7a54 <schedule_task>
	new_task->period=period;
    7bee:	fc 01       	movw	r30, r24
    7bf0:	c4 82       	std	Z+4, r12	; 0x04
    7bf2:	d5 82       	std	Z+5, r13	; 0x05
    7bf4:	e6 82       	std	Z+6, r14	; 0x06
    7bf6:	f7 82       	std	Z+7, r15	; 0x07
	return new_task;
}
    7bf8:	ff 90       	pop	r15
    7bfa:	ef 90       	pop	r14
    7bfc:	df 90       	pop	r13
    7bfe:	cf 90       	pop	r12
    7c00:	08 95       	ret

00007c02 <run_tasks>:
}

// TO BE CALLED FROM INTERRUPT HANDLER ONLY
// DO NOT CALL
int8_t run_tasks()
{
    7c02:	2f 92       	push	r2
    7c04:	3f 92       	push	r3
    7c06:	4f 92       	push	r4
    7c08:	5f 92       	push	r5
    7c0a:	6f 92       	push	r6
    7c0c:	7f 92       	push	r7
    7c0e:	8f 92       	push	r8
    7c10:	9f 92       	push	r9
    7c12:	af 92       	push	r10
    7c14:	bf 92       	push	r11
    7c16:	cf 92       	push	r12
    7c18:	df 92       	push	r13
    7c1a:	ef 92       	push	r14
    7c1c:	ff 92       	push	r15
    7c1e:	0f 93       	push	r16
    7c20:	1f 93       	push	r17
    7c22:	cf 93       	push	r28
    7c24:	df 93       	push	r29
	volatile Task_t* cur_task;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) // Disable interrupts
    7c26:	6f b6       	in	r6, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    7c28:	f8 94       	cli
    7c2a:	0f 2e       	mov	r0, r31
    7c2c:	f2 e0       	ldi	r31, 0x02	; 2
    7c2e:	8f 2e       	mov	r8, r31
    7c30:	f4 e2       	ldi	r31, 0x24	; 36
    7c32:	9f 2e       	mov	r9, r31
    7c34:	f0 2d       	mov	r31, r0
				{
					num_slots_used++;
					volatile Task_t* next_ptr = task_storage_arr[i].next;
					if((next_ptr!=0)&&((next_ptr<task_storage_arr)||(next_ptr>(&(task_storage_arr[MAX_NUM_SCHEDULED_TASKS-1])))))
					{
						printf_P(PSTR("Pre-call, task has next_ptr pointing outside of array.\r\n"));
    7c36:	0f 2e       	mov	r0, r31
    7c38:	f4 e8       	ldi	r31, 0x84	; 132
    7c3a:	cf 2e       	mov	r12, r31
    7c3c:	f8 e0       	ldi	r31, 0x08	; 8
    7c3e:	df 2e       	mov	r13, r31
    7c40:	f0 2d       	mov	r31, r0
						printf("\t%X\r\n",((uint16_t)(&(task_storage_arr[i]))));
    7c42:	0f 2e       	mov	r0, r31
    7c44:	f2 e3       	ldi	r31, 0x32	; 50
    7c46:	ef 2e       	mov	r14, r31
    7c48:	f3 e2       	ldi	r31, 0x23	; 35
    7c4a:	ff 2e       	mov	r15, r31
    7c4c:	f0 2d       	mov	r31, r0
				{
					num_slots_used++;
					volatile Task_t* next_ptr = task_storage_arr[i].next;
					if((next_ptr!=0)&&((next_ptr<task_storage_arr)||(next_ptr>(&(task_storage_arr[MAX_NUM_SCHEDULED_TASKS-1])))))
					{
						printf_P(PSTR("Post-call, task %X has next_ptr pointing outside of array.\r\n"),task_storage_arr[i]);
    7c4e:	0f 2e       	mov	r0, r31
    7c50:	fe e0       	ldi	r31, 0x0E	; 14
    7c52:	7f 2e       	mov	r7, r31
    7c54:	f0 2d       	mov	r31, r0
    7c56:	0f 2e       	mov	r0, r31
    7c58:	fc e0       	ldi	r31, 0x0C	; 12
    7c5a:	af 2e       	mov	r10, r31
    7c5c:	f8 e0       	ldi	r31, 0x08	; 8
    7c5e:	bf 2e       	mov	r11, r31
    7c60:	f0 2d       	mov	r31, r0
    7c62:	07 c1       	rjmp	.+526    	; 0x7e72 <run_tasks+0x270>
		while (task_list != NULL && task_list->scheduled_time <= get_time() + 2)
		{
			uint8_t num_slots_used = 0;
			for(uint8_t i=0;i<MAX_NUM_SCHEDULED_TASKS;i++)
			{
				if(((uint16_t)(task_storage_arr[i].func.noarg_function))!=0)
    7c64:	ce 01       	movw	r24, r28
    7c66:	88 0f       	add	r24, r24
    7c68:	99 1f       	adc	r25, r25
    7c6a:	fc 01       	movw	r30, r24
    7c6c:	ee 0f       	add	r30, r30
    7c6e:	ff 1f       	adc	r31, r31
    7c70:	ee 0f       	add	r30, r30
    7c72:	ff 1f       	adc	r31, r31
    7c74:	ee 0f       	add	r30, r30
    7c76:	ff 1f       	adc	r31, r31
    7c78:	e8 1b       	sub	r30, r24
    7c7a:	f9 0b       	sbc	r31, r25
    7c7c:	ee 5f       	subi	r30, 0xFE	; 254
    7c7e:	fb 4d       	sbci	r31, 0xDB	; 219
    7c80:	80 85       	ldd	r24, Z+8	; 0x08
    7c82:	91 85       	ldd	r25, Z+9	; 0x09
    7c84:	89 2b       	or	r24, r25
    7c86:	79 f1       	breq	.+94     	; 0x7ce6 <run_tasks+0xe4>
				{
					num_slots_used++;
    7c88:	53 94       	inc	r5
					volatile Task_t* next_ptr = task_storage_arr[i].next;
    7c8a:	ce 01       	movw	r24, r28
    7c8c:	88 0f       	add	r24, r24
    7c8e:	99 1f       	adc	r25, r25
    7c90:	fc 01       	movw	r30, r24
    7c92:	ee 0f       	add	r30, r30
    7c94:	ff 1f       	adc	r31, r31
    7c96:	ee 0f       	add	r30, r30
    7c98:	ff 1f       	adc	r31, r31
    7c9a:	ee 0f       	add	r30, r30
    7c9c:	ff 1f       	adc	r31, r31
    7c9e:	e8 1b       	sub	r30, r24
    7ca0:	f9 0b       	sbc	r31, r25
    7ca2:	ee 5f       	subi	r30, 0xFE	; 254
    7ca4:	fb 4d       	sbci	r31, 0xDB	; 219
    7ca6:	84 85       	ldd	r24, Z+12	; 0x0c
    7ca8:	95 85       	ldd	r25, Z+13	; 0x0d
					if((next_ptr!=0)&&((next_ptr<task_storage_arr)||(next_ptr>(&(task_storage_arr[MAX_NUM_SCHEDULED_TASKS-1])))))
    7caa:	00 97       	sbiw	r24, 0x00	; 0
    7cac:	e1 f0       	breq	.+56     	; 0x7ce6 <run_tasks+0xe4>
    7cae:	24 e2       	ldi	r18, 0x24	; 36
    7cb0:	82 30       	cpi	r24, 0x02	; 2
    7cb2:	92 07       	cpc	r25, r18
    7cb4:	20 f0       	brcs	.+8      	; 0x7cbe <run_tasks+0xbc>
    7cb6:	80 58       	subi	r24, 0x80	; 128
    7cb8:	94 42       	sbci	r25, 0x24	; 36
    7cba:	a9 f0       	breq	.+42     	; 0x7ce6 <run_tasks+0xe4>
    7cbc:	a0 f0       	brcs	.+40     	; 0x7ce6 <run_tasks+0xe4>
					{
						printf_P(PSTR("Pre-call, task has next_ptr pointing outside of array.\r\n"));
    7cbe:	df 92       	push	r13
    7cc0:	cf 92       	push	r12
    7cc2:	0e 94 f7 56 	call	0xadee	; 0xadee <printf_P>
						printf("\t%X\r\n",((uint16_t)(&(task_storage_arr[i]))));
    7cc6:	1f 93       	push	r17
    7cc8:	0f 93       	push	r16
    7cca:	ff 92       	push	r15
    7ccc:	ef 92       	push	r14
    7cce:	0e 94 e3 56 	call	0xadc6	; 0xadc6 <printf>
						delay_ms(10);
    7cd2:	8a e0       	ldi	r24, 0x0A	; 10
    7cd4:	90 e0       	ldi	r25, 0x00	; 0
    7cd6:	0e 94 33 3a 	call	0x7466	; 0x7466 <delay_ms>
    7cda:	0f 90       	pop	r0
    7cdc:	0f 90       	pop	r0
    7cde:	0f 90       	pop	r0
    7ce0:	0f 90       	pop	r0
    7ce2:	0f 90       	pop	r0
    7ce4:	0f 90       	pop	r0
    7ce6:	21 96       	adiw	r28, 0x01	; 1
    7ce8:	02 5f       	subi	r16, 0xF2	; 242
    7cea:	1f 4f       	sbci	r17, 0xFF	; 255
		// Run all tasks that are scheduled to execute in the next 2ms
		// (The RTC compare register takes 2 RTC clock cycles to update)
		while (task_list != NULL && task_list->scheduled_time <= get_time() + 2)
		{
			uint8_t num_slots_used = 0;
			for(uint8_t i=0;i<MAX_NUM_SCHEDULED_TASKS;i++)
    7cec:	ca 30       	cpi	r28, 0x0A	; 10
    7cee:	d1 05       	cpc	r29, r1
    7cf0:	09 f0       	breq	.+2      	; 0x7cf4 <run_tasks+0xf2>
    7cf2:	b8 cf       	rjmp	.-144    	; 0x7c64 <run_tasks+0x62>
						delay_ms(10);
					}
				}
			}
			//printf_P(PSTR("\tCalling %X. Tasks: %2hu. Slots Used: %2hu.\r\n"),cur_task->func.noarg_function, num_tasks, num_slots_used);
			if(num_slots_used!=num_tasks)
    7cf4:	80 91 6d 2a 	lds	r24, 0x2A6D	; 0x802a6d <num_tasks>
    7cf8:	58 16       	cp	r5, r24
    7cfa:	49 f0       	breq	.+18     	; 0x7d0e <run_tasks+0x10c>
			{
				printf_P(PSTR("ERROR: Pre-call, task storage consistency check failure.\r\n"));
    7cfc:	89 e4       	ldi	r24, 0x49	; 73
    7cfe:	98 e0       	ldi	r25, 0x08	; 8
    7d00:	9f 93       	push	r25
    7d02:	8f 93       	push	r24
    7d04:	0e 94 f7 56 	call	0xadee	; 0xadee <printf_P>
				return -1;
    7d08:	0f 90       	pop	r0
    7d0a:	0f 90       	pop	r0
    7d0c:	08 c1       	rjmp	.+528    	; 0x7f1e <run_tasks+0x31c>
			}			
			cur_task = task_list;
    7d0e:	c0 91 64 2f 	lds	r28, 0x2F64	; 0x802f64 <task_list>
    7d12:	d0 91 65 2f 	lds	r29, 0x2F65	; 0x802f65 <task_list+0x1>
			task_list = cur_task->next;
    7d16:	8c 85       	ldd	r24, Y+12	; 0x0c
    7d18:	9d 85       	ldd	r25, Y+13	; 0x0d
    7d1a:	80 93 64 2f 	sts	0x2F64, r24	; 0x802f64 <task_list>
    7d1e:	90 93 65 2f 	sts	0x2F65, r25	; 0x802f65 <task_list+0x1>

			if(cur_task->arg==NULL)
    7d22:	8a 85       	ldd	r24, Y+10	; 0x0a
    7d24:	9b 85       	ldd	r25, Y+11	; 0x0b
    7d26:	89 2b       	or	r24, r25
    7d28:	39 f4       	brne	.+14     	; 0x7d38 <run_tasks+0x136>
			{
				NONATOMIC_BLOCK(NONATOMIC_RESTORESTATE) // Enable interrupts during tasks
    7d2a:	1f b7       	in	r17, 0x3f	; 63

#if !defined(__DOXYGEN__)
/* Internal helper functions. */
static __inline__ uint8_t __iSeiRetVal(void)
{
    sei();
    7d2c:	78 94       	sei
				{
					(cur_task->func).noarg_function(); // run the task
    7d2e:	e8 85       	ldd	r30, Y+8	; 0x08
    7d30:	f9 85       	ldd	r31, Y+9	; 0x09
    7d32:	19 95       	eicall
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    7d34:	1f bf       	out	0x3f, r17	; 63
    __asm__ volatile ("" ::: "memory");
    7d36:	08 c0       	rjmp	.+16     	; 0x7d48 <run_tasks+0x146>
				}
			}
			else
			{
				NONATOMIC_BLOCK(NONATOMIC_RESTORESTATE) // Enable interrupts during tasks
    7d38:	1f b7       	in	r17, 0x3f	; 63

#if !defined(__DOXYGEN__)
/* Internal helper functions. */
static __inline__ uint8_t __iSeiRetVal(void)
{
    sei();
    7d3a:	78 94       	sei
				{
					(cur_task->func).arg_function(cur_task->arg); // run the task
    7d3c:	e8 85       	ldd	r30, Y+8	; 0x08
    7d3e:	f9 85       	ldd	r31, Y+9	; 0x09
    7d40:	8a 85       	ldd	r24, Y+10	; 0x0a
    7d42:	9b 85       	ldd	r25, Y+11	; 0x0b
    7d44:	19 95       	eicall
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    7d46:	1f bf       	out	0x3f, r17	; 63
				}
			}
			
			if(cur_task->period>0)
    7d48:	8c 81       	ldd	r24, Y+4	; 0x04
    7d4a:	9d 81       	ldd	r25, Y+5	; 0x05
    7d4c:	ae 81       	ldd	r26, Y+6	; 0x06
    7d4e:	bf 81       	ldd	r27, Y+7	; 0x07
    7d50:	89 2b       	or	r24, r25
    7d52:	8a 2b       	or	r24, r26
    7d54:	8b 2b       	or	r24, r27
    7d56:	d9 f0       	breq	.+54     	; 0x7d8e <run_tasks+0x18c>
			{
				cur_task->scheduled_time+=cur_task->period;
    7d58:	8c 81       	ldd	r24, Y+4	; 0x04
    7d5a:	9d 81       	ldd	r25, Y+5	; 0x05
    7d5c:	ae 81       	ldd	r26, Y+6	; 0x06
    7d5e:	bf 81       	ldd	r27, Y+7	; 0x07
    7d60:	48 81       	ld	r20, Y
    7d62:	59 81       	ldd	r21, Y+1	; 0x01
    7d64:	6a 81       	ldd	r22, Y+2	; 0x02
    7d66:	7b 81       	ldd	r23, Y+3	; 0x03
    7d68:	84 0f       	add	r24, r20
    7d6a:	95 1f       	adc	r25, r21
    7d6c:	a6 1f       	adc	r26, r22
    7d6e:	b7 1f       	adc	r27, r23
    7d70:	88 83       	st	Y, r24
    7d72:	99 83       	std	Y+1, r25	; 0x01
    7d74:	aa 83       	std	Y+2, r26	; 0x02
    7d76:	bb 83       	std	Y+3, r27	; 0x03
				cur_task->next=NULL;
    7d78:	1c 86       	std	Y+12, r1	; 0x0c
    7d7a:	1d 86       	std	Y+13, r1	; 0x0d
				num_tasks--;
    7d7c:	80 91 6d 2a 	lds	r24, 0x2A6D	; 0x802a6d <num_tasks>
    7d80:	81 50       	subi	r24, 0x01	; 1
    7d82:	80 93 6d 2a 	sts	0x2A6D, r24	; 0x802a6d <num_tasks>
				add_task_to_list(cur_task);
    7d86:	ce 01       	movw	r24, r28
    7d88:	0e 94 83 3b 	call	0x7706	; 0x7706 <add_task_to_list>
    7d8c:	cb c0       	rjmp	.+406    	; 0x7f24 <run_tasks+0x322>
			}
			else
			{		
				scheduler_free(cur_task);
    7d8e:	ce 01       	movw	r24, r28
    7d90:	0e 94 59 3a 	call	0x74b2	; 0x74b2 <scheduler_free>
				cur_task = NULL;
				num_tasks--;
    7d94:	80 91 6d 2a 	lds	r24, 0x2A6D	; 0x802a6d <num_tasks>
    7d98:	81 50       	subi	r24, 0x01	; 1
    7d9a:	80 93 6d 2a 	sts	0x2A6D, r24	; 0x802a6d <num_tasks>
    7d9e:	c2 c0       	rjmp	.+388    	; 0x7f24 <run_tasks+0x322>
			}
			
			num_slots_used = 0;
			for(uint8_t i=0;i<MAX_NUM_SCHEDULED_TASKS;i++)
			{
				if(((uint16_t)(task_storage_arr[i].func.noarg_function))!=0)
    7da0:	ce 01       	movw	r24, r28
    7da2:	9e 01       	movw	r18, r28
    7da4:	22 0f       	add	r18, r18
    7da6:	33 1f       	adc	r19, r19
    7da8:	f9 01       	movw	r30, r18
    7daa:	ee 0f       	add	r30, r30
    7dac:	ff 1f       	adc	r31, r31
    7dae:	ee 0f       	add	r30, r30
    7db0:	ff 1f       	adc	r31, r31
    7db2:	ee 0f       	add	r30, r30
    7db4:	ff 1f       	adc	r31, r31
    7db6:	e2 1b       	sub	r30, r18
    7db8:	f3 0b       	sbc	r31, r19
    7dba:	ee 5f       	subi	r30, 0xFE	; 254
    7dbc:	fb 4d       	sbci	r31, 0xDB	; 219
    7dbe:	20 85       	ldd	r18, Z+8	; 0x08
    7dc0:	31 85       	ldd	r19, Z+9	; 0x09
    7dc2:	23 2b       	or	r18, r19
    7dc4:	09 f4       	brne	.+2      	; 0x7dc8 <run_tasks+0x1c6>
    7dc6:	43 c0       	rjmp	.+134    	; 0x7e4e <run_tasks+0x24c>
				{
					num_slots_used++;
    7dc8:	1f 5f       	subi	r17, 0xFF	; 255
					volatile Task_t* next_ptr = task_storage_arr[i].next;
    7dca:	9e 01       	movw	r18, r28
    7dcc:	22 0f       	add	r18, r18
    7dce:	33 1f       	adc	r19, r19
    7dd0:	f9 01       	movw	r30, r18
    7dd2:	ee 0f       	add	r30, r30
    7dd4:	ff 1f       	adc	r31, r31
    7dd6:	ee 0f       	add	r30, r30
    7dd8:	ff 1f       	adc	r31, r31
    7dda:	ee 0f       	add	r30, r30
    7ddc:	ff 1f       	adc	r31, r31
    7dde:	e2 1b       	sub	r30, r18
    7de0:	f3 0b       	sbc	r31, r19
    7de2:	ee 5f       	subi	r30, 0xFE	; 254
    7de4:	fb 4d       	sbci	r31, 0xDB	; 219
    7de6:	24 85       	ldd	r18, Z+12	; 0x0c
    7de8:	35 85       	ldd	r19, Z+13	; 0x0d
					if((next_ptr!=0)&&((next_ptr<task_storage_arr)||(next_ptr>(&(task_storage_arr[MAX_NUM_SCHEDULED_TASKS-1])))))
    7dea:	21 15       	cp	r18, r1
    7dec:	31 05       	cpc	r19, r1
    7dee:	79 f1       	breq	.+94     	; 0x7e4e <run_tasks+0x24c>
    7df0:	44 e2       	ldi	r20, 0x24	; 36
    7df2:	22 30       	cpi	r18, 0x02	; 2
    7df4:	34 07       	cpc	r19, r20
    7df6:	20 f0       	brcs	.+8      	; 0x7e00 <run_tasks+0x1fe>
    7df8:	20 58       	subi	r18, 0x80	; 128
    7dfa:	34 42       	sbci	r19, 0x24	; 36
    7dfc:	41 f1       	breq	.+80     	; 0x7e4e <run_tasks+0x24c>
    7dfe:	38 f1       	brcs	.+78     	; 0x7e4e <run_tasks+0x24c>
					{
						printf_P(PSTR("Post-call, task %X has next_ptr pointing outside of array.\r\n"),task_storage_arr[i]);
    7e00:	88 0f       	add	r24, r24
    7e02:	99 1f       	adc	r25, r25
    7e04:	fc 01       	movw	r30, r24
    7e06:	ee 0f       	add	r30, r30
    7e08:	ff 1f       	adc	r31, r31
    7e0a:	ee 0f       	add	r30, r30
    7e0c:	ff 1f       	adc	r31, r31
    7e0e:	ee 0f       	add	r30, r30
    7e10:	ff 1f       	adc	r31, r31
    7e12:	e8 1b       	sub	r30, r24
    7e14:	f9 0b       	sbc	r31, r25
    7e16:	ee 5f       	subi	r30, 0xFE	; 254
    7e18:	fb 4d       	sbci	r31, 0xDB	; 219
    7e1a:	8d b7       	in	r24, 0x3d	; 61
    7e1c:	9e b7       	in	r25, 0x3e	; 62
    7e1e:	0e 97       	sbiw	r24, 0x0e	; 14
    7e20:	8d bf       	out	0x3d, r24	; 61
    7e22:	9e bf       	out	0x3e, r25	; 62
    7e24:	ad b7       	in	r26, 0x3d	; 61
    7e26:	be b7       	in	r27, 0x3e	; 62
    7e28:	11 96       	adiw	r26, 0x01	; 1
    7e2a:	87 2d       	mov	r24, r7
    7e2c:	01 90       	ld	r0, Z+
    7e2e:	0d 92       	st	X+, r0
    7e30:	8a 95       	dec	r24
    7e32:	e1 f7       	brne	.-8      	; 0x7e2c <run_tasks+0x22a>
    7e34:	bf 92       	push	r11
    7e36:	af 92       	push	r10
    7e38:	0e 94 f7 56 	call	0xadee	; 0xadee <printf_P>
						delay_ms(10);
    7e3c:	8a e0       	ldi	r24, 0x0A	; 10
    7e3e:	90 e0       	ldi	r25, 0x00	; 0
    7e40:	0e 94 33 3a 	call	0x7466	; 0x7466 <delay_ms>
    7e44:	8d b7       	in	r24, 0x3d	; 61
    7e46:	9e b7       	in	r25, 0x3e	; 62
    7e48:	40 96       	adiw	r24, 0x10	; 16
    7e4a:	8d bf       	out	0x3d, r24	; 61
    7e4c:	9e bf       	out	0x3e, r25	; 62
    7e4e:	21 96       	adiw	r28, 0x01	; 1
				cur_task = NULL;
				num_tasks--;
			}
			
			num_slots_used = 0;
			for(uint8_t i=0;i<MAX_NUM_SCHEDULED_TASKS;i++)
    7e50:	ca 30       	cpi	r28, 0x0A	; 10
    7e52:	d1 05       	cpc	r29, r1
    7e54:	09 f0       	breq	.+2      	; 0x7e58 <run_tasks+0x256>
    7e56:	a4 cf       	rjmp	.-184    	; 0x7da0 <run_tasks+0x19e>
						delay_ms(10);
					}
				}
			}
			//printf_P(PSTR("\tReturned %X. Tasks: %2hu. Slots Used: %2hu.\r\n"),cur_task->func.noarg_function, num_tasks, num_slots_used);
			if(num_slots_used!=num_tasks)
    7e58:	80 91 6d 2a 	lds	r24, 0x2A6D	; 0x802a6d <num_tasks>
    7e5c:	81 17       	cp	r24, r17
    7e5e:	49 f0       	breq	.+18     	; 0x7e72 <run_tasks+0x270>
			{
				printf_P(PSTR("ERROR: Post-return, task storage consistency check failure.\r\n"));
    7e60:	8e ec       	ldi	r24, 0xCE	; 206
    7e62:	97 e0       	ldi	r25, 0x07	; 7
    7e64:	9f 93       	push	r25
    7e66:	8f 93       	push	r24
    7e68:	0e 94 f7 56 	call	0xadee	; 0xadee <printf_P>
				return -1;
    7e6c:	0f 90       	pop	r0
    7e6e:	0f 90       	pop	r0
    7e70:	56 c0       	rjmp	.+172    	; 0x7f1e <run_tasks+0x31c>
	volatile Task_t* cur_task;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) // Disable interrupts
	{
		// Run all tasks that are scheduled to execute in the next 2ms
		// (The RTC compare register takes 2 RTC clock cycles to update)
		while (task_list != NULL && task_list->scheduled_time <= get_time() + 2)
    7e72:	e0 91 64 2f 	lds	r30, 0x2F64	; 0x802f64 <task_list>
    7e76:	f0 91 65 2f 	lds	r31, 0x2F65	; 0x802f65 <task_list+0x1>
    7e7a:	30 97       	sbiw	r30, 0x00	; 0
    7e7c:	09 f4       	brne	.+2      	; 0x7e80 <run_tasks+0x27e>
    7e7e:	49 c0       	rjmp	.+146    	; 0x7f12 <run_tasks+0x310>
    7e80:	20 80       	ld	r2, Z
    7e82:	31 80       	ldd	r3, Z+1	; 0x01
    7e84:	42 80       	ldd	r4, Z+2	; 0x02
    7e86:	53 80       	ldd	r5, Z+3	; 0x03
    7e88:	0e 94 20 08 	call	0x1040	; 0x1040 <get_time>
    7e8c:	dc 01       	movw	r26, r24
    7e8e:	cb 01       	movw	r24, r22
    7e90:	02 96       	adiw	r24, 0x02	; 2
    7e92:	a1 1d       	adc	r26, r1
    7e94:	b1 1d       	adc	r27, r1
    7e96:	82 15       	cp	r24, r2
    7e98:	93 05       	cpc	r25, r3
    7e9a:	a4 05       	cpc	r26, r4
    7e9c:	b5 05       	cpc	r27, r5
    7e9e:	28 f0       	brcs	.+10     	; 0x7eaa <run_tasks+0x2a8>
    7ea0:	84 01       	movw	r16, r8
    7ea2:	c0 e0       	ldi	r28, 0x00	; 0
    7ea4:	d0 e0       	ldi	r29, 0x00	; 0
    7ea6:	51 2c       	mov	r5, r1
    7ea8:	dd ce       	rjmp	.-582    	; 0x7c64 <run_tasks+0x62>
				printf_P(PSTR("ERROR: Post-return, task storage consistency check failure.\r\n"));
				return -1;
			}			
		}
		// If the next task to be executed is in the current epoch, set the RTC compare register and interrupt		
		if (task_list != NULL && task_list->scheduled_time <= ((((uint32_t)rtc_epoch) << 16) | (uint32_t)RTC.PER))
    7eaa:	c0 91 64 2f 	lds	r28, 0x2F64	; 0x802f64 <task_list>
    7eae:	d0 91 65 2f 	lds	r29, 0x2F65	; 0x802f65 <task_list+0x1>
    7eb2:	20 97       	sbiw	r28, 0x00	; 0
    7eb4:	71 f1       	breq	.+92     	; 0x7f12 <run_tasks+0x310>
    7eb6:	08 81       	ld	r16, Y
    7eb8:	19 81       	ldd	r17, Y+1	; 0x01
    7eba:	2a 81       	ldd	r18, Y+2	; 0x02
    7ebc:	3b 81       	ldd	r19, Y+3	; 0x03
    7ebe:	80 91 92 24 	lds	r24, 0x2492	; 0x802492 <rtc_epoch>
    7ec2:	90 91 93 24 	lds	r25, 0x2493	; 0x802493 <rtc_epoch+0x1>
    7ec6:	40 91 0a 04 	lds	r20, 0x040A	; 0x80040a <__TEXT_REGION_LENGTH__+0x70040a>
    7eca:	50 91 0b 04 	lds	r21, 0x040B	; 0x80040b <__TEXT_REGION_LENGTH__+0x70040b>
    7ece:	a0 e0       	ldi	r26, 0x00	; 0
    7ed0:	b0 e0       	ldi	r27, 0x00	; 0
    7ed2:	dc 01       	movw	r26, r24
    7ed4:	99 27       	eor	r25, r25
    7ed6:	88 27       	eor	r24, r24
    7ed8:	60 e0       	ldi	r22, 0x00	; 0
    7eda:	70 e0       	ldi	r23, 0x00	; 0
    7edc:	84 2b       	or	r24, r20
    7ede:	95 2b       	or	r25, r21
    7ee0:	a6 2b       	or	r26, r22
    7ee2:	b7 2b       	or	r27, r23
    7ee4:	80 17       	cp	r24, r16
    7ee6:	91 07       	cpc	r25, r17
    7ee8:	a2 07       	cpc	r26, r18
    7eea:	b3 07       	cpc	r27, r19
    7eec:	90 f0       	brcs	.+36     	; 0x7f12 <run_tasks+0x310>
		{	
			while (RTC.STATUS & RTC_SYNCBUSY_bm);
    7eee:	e0 e0       	ldi	r30, 0x00	; 0
    7ef0:	f4 e0       	ldi	r31, 0x04	; 4
    7ef2:	81 81       	ldd	r24, Z+1	; 0x01
    7ef4:	80 fd       	sbrc	r24, 0
    7ef6:	fd cf       	rjmp	.-6      	; 0x7ef2 <run_tasks+0x2f0>
			RTC.COMP = ((uint16_t)(task_list->scheduled_time))|0x8;
    7ef8:	88 81       	ld	r24, Y
    7efa:	99 81       	ldd	r25, Y+1	; 0x01
    7efc:	aa 81       	ldd	r26, Y+2	; 0x02
    7efe:	bb 81       	ldd	r27, Y+3	; 0x03
    7f00:	88 60       	ori	r24, 0x08	; 8
    7f02:	e0 e0       	ldi	r30, 0x00	; 0
    7f04:	f4 e0       	ldi	r31, 0x04	; 4
    7f06:	84 87       	std	Z+12, r24	; 0x0c
    7f08:	95 87       	std	Z+13, r25	; 0x0d
			RTC.INTCTRL |= RTC_COMP_INT_LEVEL;
    7f0a:	82 81       	ldd	r24, Z+2	; 0x02
    7f0c:	84 60       	ori	r24, 0x04	; 4
    7f0e:	82 83       	std	Z+2, r24	; 0x02
    7f10:	0d c0       	rjmp	.+26     	; 0x7f2c <run_tasks+0x32a>
		}
		else
		{
			RTC.INTCTRL &= ~RTC_COMP_INT_LEVEL;
    7f12:	e0 e0       	ldi	r30, 0x00	; 0
    7f14:	f4 e0       	ldi	r31, 0x04	; 4
    7f16:	82 81       	ldd	r24, Z+2	; 0x02
    7f18:	8b 7f       	andi	r24, 0xFB	; 251
    7f1a:	82 83       	std	Z+2, r24	; 0x02
    7f1c:	07 c0       	rjmp	.+14     	; 0x7f2c <run_tasks+0x32a>
    7f1e:	6f be       	out	0x3f, r6	; 63
    __asm__ volatile ("" ::: "memory");
    7f20:	8f ef       	ldi	r24, 0xFF	; 255
    7f22:	06 c0       	rjmp	.+12     	; 0x7f30 <run_tasks+0x32e>
	volatile Task_t* cur_task;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) // Disable interrupts
	{
		// Run all tasks that are scheduled to execute in the next 2ms
		// (The RTC compare register takes 2 RTC clock cycles to update)
		while (task_list != NULL && task_list->scheduled_time <= get_time() + 2)
    7f24:	c0 e0       	ldi	r28, 0x00	; 0
    7f26:	d0 e0       	ldi	r29, 0x00	; 0
    7f28:	10 e0       	ldi	r17, 0x00	; 0
    7f2a:	3a cf       	rjmp	.-396    	; 0x7da0 <run_tasks+0x19e>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    7f2c:	6f be       	out	0x3f, r6	; 63
		else
		{
			RTC.INTCTRL &= ~RTC_COMP_INT_LEVEL;
		}
	}
	return 0;
    7f2e:	80 e0       	ldi	r24, 0x00	; 0
}
    7f30:	df 91       	pop	r29
    7f32:	cf 91       	pop	r28
    7f34:	1f 91       	pop	r17
    7f36:	0f 91       	pop	r16
    7f38:	ff 90       	pop	r15
    7f3a:	ef 90       	pop	r14
    7f3c:	df 90       	pop	r13
    7f3e:	cf 90       	pop	r12
    7f40:	bf 90       	pop	r11
    7f42:	af 90       	pop	r10
    7f44:	9f 90       	pop	r9
    7f46:	8f 90       	pop	r8
    7f48:	7f 90       	pop	r7
    7f4a:	6f 90       	pop	r6
    7f4c:	5f 90       	pop	r5
    7f4e:	4f 90       	pop	r4
    7f50:	3f 90       	pop	r3
    7f52:	2f 90       	pop	r2
    7f54:	08 95       	ret

00007f56 <__vector_11>:
		//print_task_queue();
	//}
//}

ISR(RTC_COMP_vect)
{
    7f56:	1f 92       	push	r1
    7f58:	0f 92       	push	r0
    7f5a:	0f b6       	in	r0, 0x3f	; 63
    7f5c:	0f 92       	push	r0
    7f5e:	11 24       	eor	r1, r1
    7f60:	0b b6       	in	r0, 0x3b	; 59
    7f62:	0f 92       	push	r0
    7f64:	2f 93       	push	r18
    7f66:	3f 93       	push	r19
    7f68:	4f 93       	push	r20
    7f6a:	5f 93       	push	r21
    7f6c:	6f 93       	push	r22
    7f6e:	7f 93       	push	r23
    7f70:	8f 93       	push	r24
    7f72:	9f 93       	push	r25
    7f74:	af 93       	push	r26
    7f76:	bf 93       	push	r27
    7f78:	ef 93       	push	r30
    7f7a:	ff 93       	push	r31
	SAVE_CONTEXT();	
    7f7c:	0f 92       	push	r0
    7f7e:	0f b6       	in	r0, 0x3f	; 63
    7f80:	f8 94       	cli
    7f82:	0f 92       	push	r0
    7f84:	1f 92       	push	r1
    7f86:	11 24       	eor	r1, r1
    7f88:	2f 92       	push	r2
    7f8a:	3f 92       	push	r3
    7f8c:	4f 92       	push	r4
    7f8e:	5f 92       	push	r5
    7f90:	6f 92       	push	r6
    7f92:	7f 92       	push	r7
    7f94:	8f 92       	push	r8
    7f96:	9f 92       	push	r9
    7f98:	af 92       	push	r10
    7f9a:	bf 92       	push	r11
    7f9c:	cf 92       	push	r12
    7f9e:	df 92       	push	r13
    7fa0:	ef 92       	push	r14
    7fa2:	ff 92       	push	r15
    7fa4:	0f 93       	push	r16
    7fa6:	1f 93       	push	r17
    7fa8:	2f 93       	push	r18
    7faa:	3f 93       	push	r19
    7fac:	4f 93       	push	r20
    7fae:	5f 93       	push	r21
    7fb0:	6f 93       	push	r22
    7fb2:	7f 93       	push	r23
    7fb4:	8f 93       	push	r24
    7fb6:	9f 93       	push	r25
    7fb8:	af 93       	push	r26
    7fba:	bf 93       	push	r27
    7fbc:	cf 93       	push	r28
    7fbe:	df 93       	push	r29
    7fc0:	ef 93       	push	r30
    7fc2:	ff 93       	push	r31
	task_executing=1;
    7fc4:	81 e0       	ldi	r24, 0x01	; 1
    7fc6:	80 93 25 2d 	sts	0x2D25, r24	; 0x802d25 <task_executing>
	/*int8_t result =*/ run_tasks();
    7fca:	0e 94 01 3e 	call	0x7c02	; 0x7c02 <run_tasks>
	task_executing=0;
    7fce:	10 92 25 2d 	sts	0x2D25, r1	; 0x802d25 <task_executing>
	//if(result<0)
		//task_list_cleanup();		
	RESTORE_CONTEXT();	
    7fd2:	ff 91       	pop	r31
    7fd4:	ef 91       	pop	r30
    7fd6:	df 91       	pop	r29
    7fd8:	cf 91       	pop	r28
    7fda:	bf 91       	pop	r27
    7fdc:	af 91       	pop	r26
    7fde:	9f 91       	pop	r25
    7fe0:	8f 91       	pop	r24
    7fe2:	7f 91       	pop	r23
    7fe4:	6f 91       	pop	r22
    7fe6:	5f 91       	pop	r21
    7fe8:	4f 91       	pop	r20
    7fea:	3f 91       	pop	r19
    7fec:	2f 91       	pop	r18
    7fee:	1f 91       	pop	r17
    7ff0:	0f 91       	pop	r16
    7ff2:	ff 90       	pop	r15
    7ff4:	ef 90       	pop	r14
    7ff6:	df 90       	pop	r13
    7ff8:	cf 90       	pop	r12
    7ffa:	bf 90       	pop	r11
    7ffc:	af 90       	pop	r10
    7ffe:	9f 90       	pop	r9
    8000:	8f 90       	pop	r8
    8002:	7f 90       	pop	r7
    8004:	6f 90       	pop	r6
    8006:	5f 90       	pop	r5
    8008:	4f 90       	pop	r4
    800a:	3f 90       	pop	r3
    800c:	2f 90       	pop	r2
    800e:	1f 90       	pop	r1
    8010:	0f 90       	pop	r0
    8012:	0f be       	out	0x3f, r0	; 63
    8014:	0f 90       	pop	r0
}
    8016:	ff 91       	pop	r31
    8018:	ef 91       	pop	r30
    801a:	bf 91       	pop	r27
    801c:	af 91       	pop	r26
    801e:	9f 91       	pop	r25
    8020:	8f 91       	pop	r24
    8022:	7f 91       	pop	r23
    8024:	6f 91       	pop	r22
    8026:	5f 91       	pop	r21
    8028:	4f 91       	pop	r20
    802a:	3f 91       	pop	r19
    802c:	2f 91       	pop	r18
    802e:	0f 90       	pop	r0
    8030:	0b be       	out	0x3b, r0	; 59
    8032:	0f 90       	pop	r0
    8034:	0f be       	out	0x3f, r0	; 63
    8036:	0f 90       	pop	r0
    8038:	1f 90       	pop	r1
    803a:	18 95       	reti

0000803c <__vector_10>:

// Increment rtc_epoch on RTC overflow
// Must be atomic so no reads of get_time() occur between RTC overflow and updating of epoch
ISR( RTC_OVF_vect )
{
    803c:	1f 92       	push	r1
    803e:	0f 92       	push	r0
    8040:	0f b6       	in	r0, 0x3f	; 63
    8042:	0f 92       	push	r0
    8044:	11 24       	eor	r1, r1
    8046:	0b b6       	in	r0, 0x3b	; 59
    8048:	0f 92       	push	r0
    804a:	cf 92       	push	r12
    804c:	df 92       	push	r13
    804e:	ef 92       	push	r14
    8050:	ff 92       	push	r15
    8052:	0f 93       	push	r16
    8054:	1f 93       	push	r17
    8056:	2f 93       	push	r18
    8058:	3f 93       	push	r19
    805a:	4f 93       	push	r20
    805c:	5f 93       	push	r21
    805e:	6f 93       	push	r22
    8060:	7f 93       	push	r23
    8062:	8f 93       	push	r24
    8064:	9f 93       	push	r25
    8066:	af 93       	push	r26
    8068:	bf 93       	push	r27
    806a:	cf 93       	push	r28
    806c:	ef 93       	push	r30
    806e:	ff 93       	push	r31
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) // Disable interrupts
    8070:	cf b7       	in	r28, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    8072:	f8 94       	cli
	{
		rtc_epoch++;
    8074:	80 91 92 24 	lds	r24, 0x2492	; 0x802492 <rtc_epoch>
    8078:	90 91 93 24 	lds	r25, 0x2493	; 0x802493 <rtc_epoch+0x1>
    807c:	01 96       	adiw	r24, 0x01	; 1
    807e:	80 93 92 24 	sts	0x2492, r24	; 0x802492 <rtc_epoch>
    8082:	90 93 93 24 	sts	0x2493, r25	; 0x802493 <rtc_epoch+0x1>
		// If the next task to run is in the current epoch, update the RTC compare value and interrupt
		if (task_list != NULL && task_list->scheduled_time < ((((uint32_t)rtc_epoch) << 16) | (uint32_t)RTC.PER))
    8086:	e0 91 64 2f 	lds	r30, 0x2F64	; 0x802f64 <task_list>
    808a:	f0 91 65 2f 	lds	r31, 0x2F65	; 0x802f65 <task_list+0x1>
    808e:	30 97       	sbiw	r30, 0x00	; 0
    8090:	09 f4       	brne	.+2      	; 0x8094 <__vector_10+0x58>
    8092:	41 c0       	rjmp	.+130    	; 0x8116 <__vector_10+0xda>
    8094:	00 81       	ld	r16, Z
    8096:	11 81       	ldd	r17, Z+1	; 0x01
    8098:	22 81       	ldd	r18, Z+2	; 0x02
    809a:	33 81       	ldd	r19, Z+3	; 0x03
    809c:	80 91 92 24 	lds	r24, 0x2492	; 0x802492 <rtc_epoch>
    80a0:	90 91 93 24 	lds	r25, 0x2493	; 0x802493 <rtc_epoch+0x1>
    80a4:	40 91 0a 04 	lds	r20, 0x040A	; 0x80040a <__TEXT_REGION_LENGTH__+0x70040a>
    80a8:	50 91 0b 04 	lds	r21, 0x040B	; 0x80040b <__TEXT_REGION_LENGTH__+0x70040b>
    80ac:	a0 e0       	ldi	r26, 0x00	; 0
    80ae:	b0 e0       	ldi	r27, 0x00	; 0
    80b0:	dc 01       	movw	r26, r24
    80b2:	99 27       	eor	r25, r25
    80b4:	88 27       	eor	r24, r24
    80b6:	60 e0       	ldi	r22, 0x00	; 0
    80b8:	70 e0       	ldi	r23, 0x00	; 0
    80ba:	84 2b       	or	r24, r20
    80bc:	95 2b       	or	r25, r21
    80be:	a6 2b       	or	r26, r22
    80c0:	b7 2b       	or	r27, r23
    80c2:	08 17       	cp	r16, r24
    80c4:	19 07       	cpc	r17, r25
    80c6:	2a 07       	cpc	r18, r26
    80c8:	3b 07       	cpc	r19, r27
    80ca:	28 f5       	brcc	.+74     	; 0x8116 <__vector_10+0xda>
		{
			if(!task_executing)
    80cc:	80 91 25 2d 	lds	r24, 0x2D25	; 0x802d25 <task_executing>
    80d0:	81 11       	cpse	r24, r1
    80d2:	44 c0       	rjmp	.+136    	; 0x815c <__vector_10+0x120>
			{
				if(task_list->scheduled_time < get_time())
    80d4:	c0 80       	ld	r12, Z
    80d6:	d1 80       	ldd	r13, Z+1	; 0x01
    80d8:	e2 80       	ldd	r14, Z+2	; 0x02
    80da:	f3 80       	ldd	r15, Z+3	; 0x03
    80dc:	0e 94 20 08 	call	0x1040	; 0x1040 <get_time>
    80e0:	c6 16       	cp	r12, r22
    80e2:	d7 06       	cpc	r13, r23
    80e4:	e8 06       	cpc	r14, r24
    80e6:	f9 06       	cpc	r15, r25
    80e8:	c8 f1       	brcs	.+114    	; 0x815c <__vector_10+0x120>
					//printf("In overflow, tasks need to have been executed!\r\n");
					//print_task_queue();
				}
				else				
				{		
					while (RTC.STATUS & RTC_SYNCBUSY_bm);
    80ea:	e0 e0       	ldi	r30, 0x00	; 0
    80ec:	f4 e0       	ldi	r31, 0x04	; 4
    80ee:	81 81       	ldd	r24, Z+1	; 0x01
    80f0:	80 fd       	sbrc	r24, 0
    80f2:	fd cf       	rjmp	.-6      	; 0x80ee <__vector_10+0xb2>
					RTC.COMP = ((uint16_t)(task_list->scheduled_time))|0x8;
    80f4:	e0 91 64 2f 	lds	r30, 0x2F64	; 0x802f64 <task_list>
    80f8:	f0 91 65 2f 	lds	r31, 0x2F65	; 0x802f65 <task_list+0x1>
    80fc:	80 81       	ld	r24, Z
    80fe:	91 81       	ldd	r25, Z+1	; 0x01
    8100:	a2 81       	ldd	r26, Z+2	; 0x02
    8102:	b3 81       	ldd	r27, Z+3	; 0x03
    8104:	88 60       	ori	r24, 0x08	; 8
    8106:	e0 e0       	ldi	r30, 0x00	; 0
    8108:	f4 e0       	ldi	r31, 0x04	; 4
    810a:	84 87       	std	Z+12, r24	; 0x0c
    810c:	95 87       	std	Z+13, r25	; 0x0d
					RTC.INTCTRL |= RTC_COMP_INT_LEVEL;
    810e:	82 81       	ldd	r24, Z+2	; 0x02
    8110:	84 60       	ori	r24, 0x04	; 4
    8112:	82 83       	std	Z+2, r24	; 0x02
    8114:	23 c0       	rjmp	.+70     	; 0x815c <__vector_10+0x120>
				//asm("jmp rtc_compare_isr"); // must include scheduler_asm.S in the project
			//}
		}
		else
		{
			printf("Next task not in current epoch. Task executing: %hu. Next task scheduled time: %lu. Time: %lu.\r\n", task_executing, task_list->scheduled_time, get_time());
    8116:	0e 94 20 08 	call	0x1040	; 0x1040 <get_time>
    811a:	36 2f       	mov	r19, r22
    811c:	e7 2f       	mov	r30, r23
    811e:	a0 91 64 2f 	lds	r26, 0x2F64	; 0x802f64 <task_list>
    8122:	b0 91 65 2f 	lds	r27, 0x2F65	; 0x802f65 <task_list+0x1>
    8126:	4d 91       	ld	r20, X+
    8128:	5d 91       	ld	r21, X+
    812a:	6d 91       	ld	r22, X+
    812c:	7c 91       	ld	r23, X
    812e:	20 91 25 2d 	lds	r18, 0x2D25	; 0x802d25 <task_executing>
    8132:	9f 93       	push	r25
    8134:	8f 93       	push	r24
    8136:	ef 93       	push	r30
    8138:	3f 93       	push	r19
    813a:	7f 93       	push	r23
    813c:	6f 93       	push	r22
    813e:	5f 93       	push	r21
    8140:	4f 93       	push	r20
    8142:	1f 92       	push	r1
    8144:	2f 93       	push	r18
    8146:	88 e3       	ldi	r24, 0x38	; 56
    8148:	93 e2       	ldi	r25, 0x23	; 35
    814a:	9f 93       	push	r25
    814c:	8f 93       	push	r24
    814e:	0e 94 e3 56 	call	0xadc6	; 0xadc6 <printf>
    8152:	8d b7       	in	r24, 0x3d	; 61
    8154:	9e b7       	in	r25, 0x3e	; 62
    8156:	0c 96       	adiw	r24, 0x0c	; 12
    8158:	8d bf       	out	0x3d, r24	; 61
    815a:	9e bf       	out	0x3e, r25	; 62
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    815c:	cf bf       	out	0x3f, r28	; 63
		}
	}
    815e:	ff 91       	pop	r31
    8160:	ef 91       	pop	r30
    8162:	cf 91       	pop	r28
    8164:	bf 91       	pop	r27
    8166:	af 91       	pop	r26
    8168:	9f 91       	pop	r25
    816a:	8f 91       	pop	r24
    816c:	7f 91       	pop	r23
    816e:	6f 91       	pop	r22
    8170:	5f 91       	pop	r21
    8172:	4f 91       	pop	r20
    8174:	3f 91       	pop	r19
    8176:	2f 91       	pop	r18
    8178:	1f 91       	pop	r17
    817a:	0f 91       	pop	r16
    817c:	ff 90       	pop	r15
    817e:	ef 90       	pop	r14
    8180:	df 90       	pop	r13
    8182:	cf 90       	pop	r12
    8184:	0f 90       	pop	r0
    8186:	0b be       	out	0x3b, r0	; 59
    8188:	0f 90       	pop	r0
    818a:	0f be       	out	0x3f, r0	; 63
    818c:	0f 90       	pop	r0
    818e:	1f 90       	pop	r1
    8190:	18 95       	reti

00008192 <handle_reprog_test>:
	if(user_handle_command){
		return user_handle_command(command_word, command_args);
	}else{
		return 1;	
	}
}
    8192:	cf 93       	push	r28
    8194:	df 93       	push	r29
    8196:	cd b7       	in	r28, 0x3d	; 61
    8198:	de b7       	in	r29, 0x3e	; 62
    819a:	d2 50       	subi	r29, 0x02	; 2
    819c:	cd bf       	out	0x3d, r28	; 61
    819e:	de bf       	out	0x3e, r29	; 62
    81a0:	8f e4       	ldi	r24, 0x4F	; 79
    81a2:	89 83       	std	Y+1, r24	; 0x01
    81a4:	8f ee       	ldi	r24, 0xEF	; 239
    81a6:	8a 83       	std	Y+2, r24	; 0x02
    81a8:	9f e6       	ldi	r25, 0x6F	; 111
    81aa:	9b 83       	std	Y+3, r25	; 0x03
    81ac:	8c 83       	std	Y+4, r24	; 0x04
    81ae:	9f e8       	ldi	r25, 0x8F	; 143
    81b0:	9d 83       	std	Y+5, r25	; 0x05
    81b2:	8e 83       	std	Y+6, r24	; 0x06
    81b4:	8e e0       	ldi	r24, 0x0E	; 14
    81b6:	8f 83       	std	Y+7, r24	; 0x07
    81b8:	84 e9       	ldi	r24, 0x94	; 148
    81ba:	88 87       	std	Y+8, r24	; 0x08
    81bc:	83 e1       	ldi	r24, 0x13	; 19
    81be:	89 87       	std	Y+9, r24	; 0x09
    81c0:	87 e3       	ldi	r24, 0x37	; 55
    81c2:	8a 87       	std	Y+10, r24	; 0x0a
    81c4:	98 e0       	ldi	r25, 0x08	; 8
    81c6:	9b 87       	std	Y+11, r25	; 0x0b
    81c8:	85 e9       	ldi	r24, 0x95	; 149
    81ca:	8c 87       	std	Y+12, r24	; 0x0c
    81cc:	9d 87       	std	Y+13, r25	; 0x0d
    81ce:	8e 87       	std	Y+14, r24	; 0x0e
    81d0:	9f 87       	std	Y+15, r25	; 0x0f
    81d2:	88 8b       	std	Y+16, r24	; 0x10
    81d4:	fe 01       	movw	r30, r28
    81d6:	71 96       	adiw	r30, 0x11	; 17
    81d8:	9e 01       	movw	r18, r28
    81da:	2f 5f       	subi	r18, 0xFF	; 255
    81dc:	3d 4f       	sbci	r19, 0xFD	; 253
    81de:	8f ef       	ldi	r24, 0xFF	; 255
    81e0:	81 93       	st	Z+, r24
    81e2:	e2 17       	cp	r30, r18
    81e4:	f3 07       	cpc	r31, r19
    81e6:	e1 f7       	brne	.-8      	; 0x81e0 <handle_reprog_test+0x4e>
    81e8:	4c e5       	ldi	r20, 0x5C	; 92
    81ea:	50 e0       	ldi	r21, 0x00	; 0
    81ec:	60 e0       	ldi	r22, 0x00	; 0
    81ee:	70 e0       	ldi	r23, 0x00	; 0
    81f0:	ce 01       	movw	r24, r28
    81f2:	01 96       	adiw	r24, 0x01	; 1
    81f4:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <writeRead>
    81f8:	0e 94 a7 0b 	call	0x174e	; 0x174e <droplet_reboot>
    81fc:	de 5f       	subi	r29, 0xFE	; 254
    81fe:	cd bf       	out	0x3d, r28	; 61
    8200:	de bf       	out	0x3e, r29	; 62
    8202:	df 91       	pop	r29
    8204:	cf 91       	pop	r28
    8206:	08 95       	ret

00008208 <send_id>:
    8208:	0f 93       	push	r16
    820a:	1f 93       	push	r17
    820c:	cf 93       	push	r28
    820e:	df 93       	push	r29
    8210:	cd b7       	in	r28, 0x3d	; 61
    8212:	de b7       	in	r29, 0x3e	; 62
    8214:	25 97       	sbiw	r28, 0x05	; 5
    8216:	cd bf       	out	0x3d, r28	; 61
    8218:	de bf       	out	0x3e, r29	; 62
    821a:	80 91 fb 23 	lds	r24, 0x23FB	; 0x8023fb <droplet_ID+0x1>
    821e:	8f 93       	push	r24
    8220:	80 91 fa 23 	lds	r24, 0x23FA	; 0x8023fa <droplet_ID>
    8224:	8f 93       	push	r24
    8226:	89 e9       	ldi	r24, 0x99	; 153
    8228:	93 e2       	ldi	r25, 0x23	; 35
    822a:	9f 93       	push	r25
    822c:	8f 93       	push	r24
    822e:	8e 01       	movw	r16, r28
    8230:	0f 5f       	subi	r16, 0xFF	; 255
    8232:	1f 4f       	sbci	r17, 0xFF	; 255
    8234:	1f 93       	push	r17
    8236:	0f 93       	push	r16
    8238:	0e 94 55 57 	call	0xaeaa	; 0xaeaa <sprintf>
    823c:	44 e0       	ldi	r20, 0x04	; 4
    823e:	b8 01       	movw	r22, r16
    8240:	8f e3       	ldi	r24, 0x3F	; 63
    8242:	0e 94 80 19 	call	0x3300	; 0x3300 <ir_send>
    8246:	0f 90       	pop	r0
    8248:	0f 90       	pop	r0
    824a:	0f 90       	pop	r0
    824c:	0f 90       	pop	r0
    824e:	0f 90       	pop	r0
    8250:	0f 90       	pop	r0
    8252:	25 96       	adiw	r28, 0x05	; 5
    8254:	cd bf       	out	0x3d, r28	; 61
    8256:	de bf       	out	0x3e, r29	; 62
    8258:	df 91       	pop	r29
    825a:	cf 91       	pop	r28
    825c:	1f 91       	pop	r17
    825e:	0f 91       	pop	r16
    8260:	08 95       	ret

00008262 <calculate_page_number>:
    8262:	89 2f       	mov	r24, r25
    8264:	86 95       	lsr	r24
    8266:	08 95       	ret

00008268 <handle_check_collisions>:

void handle_check_collisions(){
    8268:	ef 92       	push	r14
    826a:	ff 92       	push	r15
    826c:	0f 93       	push	r16
    826e:	1f 93       	push	r17
    8270:	cf 93       	push	r28
    8272:	df 93       	push	r29
	uint8_t dirs = check_collisions();
    8274:	0e 94 1f 21 	call	0x423e	; 0x423e <check_collisions>
    8278:	c0 e0       	ldi	r28, 0x00	; 0
    827a:	d0 e0       	ldi	r29, 0x00	; 0
	uint8_t found=0;
    827c:	90 e0       	ldi	r25, 0x00	; 0
	for(uint8_t i=0;i<6;i++){
		if(dirs&(1<<i)){
    827e:	08 2f       	mov	r16, r24
    8280:	10 e0       	ldi	r17, 0x00	; 0
			found=1;
			printf("%hhu",i);
    8282:	0f 2e       	mov	r0, r31
    8284:	fe e9       	ldi	r31, 0x9E	; 158
    8286:	ef 2e       	mov	r14, r31
    8288:	f3 e2       	ldi	r31, 0x23	; 35
    828a:	ff 2e       	mov	r15, r31
    828c:	f0 2d       	mov	r31, r0

void handle_check_collisions(){
	uint8_t dirs = check_collisions();
	uint8_t found=0;
	for(uint8_t i=0;i<6;i++){
		if(dirs&(1<<i)){
    828e:	98 01       	movw	r18, r16
    8290:	0c 2e       	mov	r0, r28
    8292:	02 c0       	rjmp	.+4      	; 0x8298 <handle_check_collisions+0x30>
    8294:	35 95       	asr	r19
    8296:	27 95       	ror	r18
    8298:	0a 94       	dec	r0
    829a:	e2 f7       	brpl	.-8      	; 0x8294 <handle_check_collisions+0x2c>
    829c:	20 ff       	sbrs	r18, 0
    829e:	0b c0       	rjmp	.+22     	; 0x82b6 <handle_check_collisions+0x4e>
			found=1;
			printf("%hhu",i);
    82a0:	df 93       	push	r29
    82a2:	cf 93       	push	r28
    82a4:	ff 92       	push	r15
    82a6:	ef 92       	push	r14
    82a8:	0e 94 e3 56 	call	0xadc6	; 0xadc6 <printf>
    82ac:	0f 90       	pop	r0
    82ae:	0f 90       	pop	r0
    82b0:	0f 90       	pop	r0
    82b2:	0f 90       	pop	r0
void handle_check_collisions(){
	uint8_t dirs = check_collisions();
	uint8_t found=0;
	for(uint8_t i=0;i<6;i++){
		if(dirs&(1<<i)){
			found=1;
    82b4:	91 e0       	ldi	r25, 0x01	; 1
    82b6:	21 96       	adiw	r28, 0x01	; 1
}

void handle_check_collisions(){
	uint8_t dirs = check_collisions();
	uint8_t found=0;
	for(uint8_t i=0;i<6;i++){
    82b8:	c6 30       	cpi	r28, 0x06	; 6
    82ba:	d1 05       	cpc	r29, r1
    82bc:	41 f7       	brne	.-48     	; 0x828e <handle_check_collisions+0x26>
		if(dirs&(1<<i)){
			found=1;
			printf("%hhu",i);
		}
	}
	if(!found) printf("None");
    82be:	91 11       	cpse	r25, r1
    82c0:	08 c0       	rjmp	.+16     	; 0x82d2 <handle_check_collisions+0x6a>
    82c2:	83 ea       	ldi	r24, 0xA3	; 163
    82c4:	93 e2       	ldi	r25, 0x23	; 35
    82c6:	9f 93       	push	r25
    82c8:	8f 93       	push	r24
    82ca:	0e 94 e3 56 	call	0xadc6	; 0xadc6 <printf>
    82ce:	0f 90       	pop	r0
    82d0:	0f 90       	pop	r0
	printf("\r\n");
    82d2:	80 ed       	ldi	r24, 0xD0	; 208
    82d4:	90 e2       	ldi	r25, 0x20	; 32
    82d6:	0e 94 25 57 	call	0xae4a	; 0xae4a <puts>
}
    82da:	df 91       	pop	r29
    82dc:	cf 91       	pop	r28
    82de:	1f 91       	pop	r17
    82e0:	0f 91       	pop	r16
    82e2:	ff 90       	pop	r15
    82e4:	ef 90       	pop	r14
    82e6:	08 95       	ret

000082e8 <handle_move_steps>:

void handle_move_steps(char* command_args){
    82e8:	ff 92       	push	r15
    82ea:	0f 93       	push	r16
    82ec:	1f 93       	push	r17
    82ee:	cf 93       	push	r28
    82f0:	df 93       	push	r29
    82f2:	1f 92       	push	r1
    82f4:	1f 92       	push	r1
    82f6:	cd b7       	in	r28, 0x3d	; 61
    82f8:	de b7       	in	r29, 0x3e	; 62
	const char delim[2] = " ";
    82fa:	20 e2       	ldi	r18, 0x20	; 32
    82fc:	30 e0       	ldi	r19, 0x00	; 0
    82fe:	29 83       	std	Y+1, r18	; 0x01
    8300:	3a 83       	std	Y+2, r19	; 0x02
	
	char* token = strtok(command_args,delim);
    8302:	be 01       	movw	r22, r28
    8304:	6f 5f       	subi	r22, 0xFF	; 255
    8306:	7f 4f       	sbci	r23, 0xFF	; 255
    8308:	0e 94 36 56 	call	0xac6c	; 0xac6c <strtok>
	uint8_t direction = token[0]-'0';
    830c:	fc 01       	movw	r30, r24
    830e:	f0 80       	ld	r15, Z

	token = strtok(NULL,delim);
    8310:	be 01       	movw	r22, r28
    8312:	6f 5f       	subi	r22, 0xFF	; 255
    8314:	7f 4f       	sbci	r23, 0xFF	; 255
    8316:	80 e0       	ldi	r24, 0x00	; 0
    8318:	90 e0       	ldi	r25, 0x00	; 0
    831a:	0e 94 36 56 	call	0xac6c	; 0xac6c <strtok>
	uint16_t num_steps = (uint16_t)atoi(token);
    831e:	0e 94 23 55 	call	0xaa46	; 0xaa46 <atoi>
    8322:	8c 01       	movw	r16, r24
	if (num_steps > 0){	
    8324:	00 97       	sbiw	r24, 0x00	; 0
    8326:	b1 f0       	breq	.+44     	; 0x8354 <handle_move_steps+0x6c>

void handle_move_steps(char* command_args){
	const char delim[2] = " ";
	
	char* token = strtok(command_args,delim);
	uint8_t direction = token[0]-'0';
    8328:	f0 ed       	ldi	r31, 0xD0	; 208
    832a:	ff 0e       	add	r15, r31

	token = strtok(NULL,delim);
	uint16_t num_steps = (uint16_t)atoi(token);
	if (num_steps > 0){	
		printf_P(PSTR("walk direction %u, num_steps %u\r\n"), direction, num_steps);	
    832c:	1f 93       	push	r17
    832e:	8f 93       	push	r24
    8330:	1f 92       	push	r1
    8332:	ff 92       	push	r15
    8334:	8a eb       	ldi	r24, 0xBA	; 186
    8336:	9e e0       	ldi	r25, 0x0E	; 14
    8338:	9f 93       	push	r25
    833a:	8f 93       	push	r24
    833c:	0e 94 f7 56 	call	0xadee	; 0xadee <printf_P>
		move_steps(direction, num_steps);
    8340:	b8 01       	movw	r22, r16
    8342:	8f 2d       	mov	r24, r15
    8344:	0e 94 d0 21 	call	0x43a0	; 0x43a0 <move_steps>
    8348:	0f 90       	pop	r0
    834a:	0f 90       	pop	r0
    834c:	0f 90       	pop	r0
    834e:	0f 90       	pop	r0
    8350:	0f 90       	pop	r0
    8352:	0f 90       	pop	r0
	}	
}	
    8354:	0f 90       	pop	r0
    8356:	0f 90       	pop	r0
    8358:	df 91       	pop	r29
    835a:	cf 91       	pop	r28
    835c:	1f 91       	pop	r17
    835e:	0f 91       	pop	r16
    8360:	ff 90       	pop	r15
    8362:	08 95       	ret

00008364 <handle_walk>:

void handle_walk(char* command_args){	
    8364:	1f 93       	push	r17
    8366:	cf 93       	push	r28
    8368:	df 93       	push	r29
    836a:	1f 92       	push	r1
    836c:	1f 92       	push	r1
    836e:	cd b7       	in	r28, 0x3d	; 61
    8370:	de b7       	in	r29, 0x3e	; 62
	const char delim[2] = " ";
    8372:	20 e2       	ldi	r18, 0x20	; 32
    8374:	30 e0       	ldi	r19, 0x00	; 0
    8376:	29 83       	std	Y+1, r18	; 0x01
    8378:	3a 83       	std	Y+2, r19	; 0x02
	
	char* token = strtok(command_args,delim);
    837a:	be 01       	movw	r22, r28
    837c:	6f 5f       	subi	r22, 0xFF	; 255
    837e:	7f 4f       	sbci	r23, 0xFF	; 255
    8380:	0e 94 36 56 	call	0xac6c	; 0xac6c <strtok>
	uint8_t direction = token[0]-'0';
    8384:	fc 01       	movw	r30, r24
    8386:	10 81       	ld	r17, Z
    8388:	10 53       	subi	r17, 0x30	; 48
	
	token = strtok(NULL,delim);
    838a:	be 01       	movw	r22, r28
    838c:	6f 5f       	subi	r22, 0xFF	; 255
    838e:	7f 4f       	sbci	r23, 0xFF	; 255
    8390:	80 e0       	ldi	r24, 0x00	; 0
    8392:	90 e0       	ldi	r25, 0x00	; 0
    8394:	0e 94 36 56 	call	0xac6c	; 0xac6c <strtok>
	uint16_t distance_mm = (uint16_t)atoi(token);
    8398:	0e 94 23 55 	call	0xaa46	; 0xaa46 <atoi>
	
	walk(direction, distance_mm);
    839c:	bc 01       	movw	r22, r24
    839e:	81 2f       	mov	r24, r17
    83a0:	0e 94 55 23 	call	0x46aa	; 0x46aa <walk>
}
    83a4:	0f 90       	pop	r0
    83a6:	0f 90       	pop	r0
    83a8:	df 91       	pop	r29
    83aa:	cf 91       	pop	r28
    83ac:	1f 91       	pop	r17
    83ae:	08 95       	ret

000083b0 <handle_get_rgb>:

void handle_get_rgb(){
    83b0:	cf 93       	push	r28
    83b2:	df 93       	push	r29
    83b4:	00 d0       	rcall	.+0      	; 0x83b6 <handle_get_rgb+0x6>
    83b6:	00 d0       	rcall	.+0      	; 0x83b8 <handle_get_rgb+0x8>
    83b8:	cd b7       	in	r28, 0x3d	; 61
    83ba:	de b7       	in	r29, 0x3e	; 62
	int16_t r, g, b;
	get_rgb(&r, &g, &b);
    83bc:	ae 01       	movw	r20, r28
    83be:	4b 5f       	subi	r20, 0xFB	; 251
    83c0:	5f 4f       	sbci	r21, 0xFF	; 255
    83c2:	be 01       	movw	r22, r28
    83c4:	6d 5f       	subi	r22, 0xFD	; 253
    83c6:	7f 4f       	sbci	r23, 0xFF	; 255
    83c8:	ce 01       	movw	r24, r28
    83ca:	01 96       	adiw	r24, 0x01	; 1
    83cc:	0e 94 c8 39 	call	0x7390	; 0x7390 <get_rgb>
	printf_P(PSTR("r: %hu, g: %hu, b: %hu\r\n"), r, g, b);
    83d0:	8e 81       	ldd	r24, Y+6	; 0x06
    83d2:	8f 93       	push	r24
    83d4:	8d 81       	ldd	r24, Y+5	; 0x05
    83d6:	8f 93       	push	r24
    83d8:	8c 81       	ldd	r24, Y+4	; 0x04
    83da:	8f 93       	push	r24
    83dc:	8b 81       	ldd	r24, Y+3	; 0x03
    83de:	8f 93       	push	r24
    83e0:	8a 81       	ldd	r24, Y+2	; 0x02
    83e2:	8f 93       	push	r24
    83e4:	89 81       	ldd	r24, Y+1	; 0x01
    83e6:	8f 93       	push	r24
    83e8:	81 ea       	ldi	r24, 0xA1	; 161
    83ea:	9e e0       	ldi	r25, 0x0E	; 14
    83ec:	9f 93       	push	r25
    83ee:	8f 93       	push	r24
    83f0:	0e 94 f7 56 	call	0xadee	; 0xadee <printf_P>
    83f4:	cd bf       	out	0x3d, r28	; 61
    83f6:	de bf       	out	0x3e, r29	; 62
}
    83f8:	26 96       	adiw	r28, 0x06	; 6
    83fa:	cd bf       	out	0x3d, r28	; 61
    83fc:	de bf       	out	0x3e, r29	; 62
    83fe:	df 91       	pop	r29
    8400:	cf 91       	pop	r28
    8402:	08 95       	ret

00008404 <handle_set_ir>:

void handle_set_ir(char* command_args){
    8404:	cf 93       	push	r28
    8406:	df 93       	push	r29
    8408:	1f 92       	push	r1
    840a:	1f 92       	push	r1
    840c:	cd b7       	in	r28, 0x3d	; 61
    840e:	de b7       	in	r29, 0x3e	; 62
	const char delim[2] = " ";
    8410:	20 e2       	ldi	r18, 0x20	; 32
    8412:	30 e0       	ldi	r19, 0x00	; 0
    8414:	29 83       	std	Y+1, r18	; 0x01
    8416:	3a 83       	std	Y+2, r19	; 0x02
	
	char* token = strtok(command_args,delim);
    8418:	be 01       	movw	r22, r28
    841a:	6f 5f       	subi	r22, 0xFF	; 255
    841c:	7f 4f       	sbci	r23, 0xFF	; 255
    841e:	0e 94 36 56 	call	0xac6c	; 0xac6c <strtok>
	uint16_t ir_val = (uint16_t)atoi(token);
    8422:	0e 94 23 55 	call	0xaa46	; 0xaa46 <atoi>
	
	schedule_task(10, set_all_ir_powers, (void*)ir_val);
    8426:	9c 01       	movw	r18, r24
    8428:	49 e9       	ldi	r20, 0x99	; 153
    842a:	5d e1       	ldi	r21, 0x1D	; 29
    842c:	6a e0       	ldi	r22, 0x0A	; 10
    842e:	70 e0       	ldi	r23, 0x00	; 0
    8430:	80 e0       	ldi	r24, 0x00	; 0
    8432:	90 e0       	ldi	r25, 0x00	; 0
    8434:	0e 94 2a 3d 	call	0x7a54	; 0x7a54 <schedule_task>
}
    8438:	0f 90       	pop	r0
    843a:	0f 90       	pop	r0
    843c:	df 91       	pop	r29
    843e:	cf 91       	pop	r28
    8440:	08 95       	ret

00008442 <handle_stop_walk>:

void handle_stop_walk(){
	stop_move(0);
    8442:	80 e0       	ldi	r24, 0x00	; 0
    8444:	90 e0       	ldi	r25, 0x00	; 0
    8446:	0e 94 b1 21 	call	0x4362	; 0x4362 <stop_move>
    844a:	08 95       	ret

0000844c <handle_set_motors>:
}

void handle_set_motors(char* command_args){	
    844c:	af 92       	push	r10
    844e:	bf 92       	push	r11
    8450:	cf 92       	push	r12
    8452:	df 92       	push	r13
    8454:	ef 92       	push	r14
    8456:	ff 92       	push	r15
    8458:	0f 93       	push	r16
    845a:	1f 93       	push	r17
    845c:	cf 93       	push	r28
    845e:	df 93       	push	r29
    8460:	1f 92       	push	r1
    8462:	1f 92       	push	r1
    8464:	cd b7       	in	r28, 0x3d	; 61
    8466:	de b7       	in	r29, 0x3e	; 62
    8468:	8c 01       	movw	r16, r24
#define LED_B_PIN_bm			PIN4_bm

void rgb_led_init(); // Set RGB LED pins as output & initialize timers for PWM

// Get and set intensity for red LED
inline uint8_t get_red_led() { return TCE1.CCBBUF; }
    846a:	e0 e4       	ldi	r30, 0x40	; 64
    846c:	fa e0       	ldi	r31, 0x0A	; 10
    846e:	e2 ac       	ldd	r14, Z+58	; 0x3a
    8470:	f3 ac       	ldd	r15, Z+59	; 0x3b
inline void set_red_led(uint8_t saturation) { TCE1.CCBBUF = saturation; }

// Get and set intensity for green LED
inline uint8_t get_green_led() { return TCE1.CCABUF; }
    8472:	c0 ac       	ldd	r12, Z+56	; 0x38
    8474:	d1 ac       	ldd	r13, Z+57	; 0x39
inline void set_green_led(uint8_t saturation) { TCE1.CCABUF = saturation; }
	
// Get and set intensity for blue LED
inline uint8_t get_blue_led() { return TCD1.CCABUF; }
    8476:	a0 90 78 09 	lds	r10, 0x0978	; 0x800978 <__TEXT_REGION_LENGTH__+0x700978>
    847a:	b0 90 79 09 	lds	r11, 0x0979	; 0x800979 <__TEXT_REGION_LENGTH__+0x700979>
	uint8_t r = get_red_led(), g = get_green_led(), b = get_blue_led();
	set_rgb(0,0,255);
    847e:	4f ef       	ldi	r20, 0xFF	; 255
    8480:	60 e0       	ldi	r22, 0x00	; 0
    8482:	80 e0       	ldi	r24, 0x00	; 0
    8484:	0e 94 26 37 	call	0x6e4c	; 0x6e4c <set_rgb>
	const char delim[2] = " ";
    8488:	80 e2       	ldi	r24, 0x20	; 32
    848a:	90 e0       	ldi	r25, 0x00	; 0
    848c:	89 83       	std	Y+1, r24	; 0x01
    848e:	9a 83       	std	Y+2, r25	; 0x02
	
	char* token = strtok(command_args,delim);
    8490:	be 01       	movw	r22, r28
    8492:	6f 5f       	subi	r22, 0xFF	; 255
    8494:	7f 4f       	sbci	r23, 0xFF	; 255
    8496:	c8 01       	movw	r24, r16
    8498:	0e 94 36 56 	call	0xac6c	; 0xac6c <strtok>
	if(token==NULL){ printf_P(PSTR("strtok returned NULL on direction.\r\n")); return;}
    849c:	00 97       	sbiw	r24, 0x00	; 0
    849e:	49 f4       	brne	.+18     	; 0x84b2 <handle_set_motors+0x66>
    84a0:	8c e7       	ldi	r24, 0x7C	; 124
    84a2:	9e e0       	ldi	r25, 0x0E	; 14
    84a4:	9f 93       	push	r25
    84a6:	8f 93       	push	r24
    84a8:	0e 94 f7 56 	call	0xadee	; 0xadee <printf_P>
    84ac:	0f 90       	pop	r0
    84ae:	0f 90       	pop	r0
    84b0:	8a c0       	rjmp	.+276    	; 0x85c6 <handle_set_motors+0x17a>
	uint8_t direction = atoi(token);
    84b2:	0e 94 23 55 	call	0xaa46	; 0xaa46 <atoi>
    84b6:	8c 01       	movw	r16, r24
	if(direction> 7){ printf_P(PSTR("Bad direction. Got: %hhu.\r\n"), direction); return;}
    84b8:	88 30       	cpi	r24, 0x08	; 8
    84ba:	70 f0       	brcs	.+28     	; 0x84d8 <handle_set_motors+0x8c>
    84bc:	11 27       	eor	r17, r17
    84be:	1f 93       	push	r17
    84c0:	0f 93       	push	r16
    84c2:	80 e6       	ldi	r24, 0x60	; 96
    84c4:	9e e0       	ldi	r25, 0x0E	; 14
    84c6:	9f 93       	push	r25
    84c8:	8f 93       	push	r24
    84ca:	0e 94 f7 56 	call	0xadee	; 0xadee <printf_P>
    84ce:	0f 90       	pop	r0
    84d0:	0f 90       	pop	r0
    84d2:	0f 90       	pop	r0
    84d4:	0f 90       	pop	r0
    84d6:	77 c0       	rjmp	.+238    	; 0x85c6 <handle_set_motors+0x17a>

	token = strtok(NULL,delim);
    84d8:	be 01       	movw	r22, r28
    84da:	6f 5f       	subi	r22, 0xFF	; 255
    84dc:	7f 4f       	sbci	r23, 0xFF	; 255
    84de:	80 e0       	ldi	r24, 0x00	; 0
    84e0:	90 e0       	ldi	r25, 0x00	; 0
    84e2:	0e 94 36 56 	call	0xac6c	; 0xac6c <strtok>
	if(token==NULL){ printf_P(PSTR("strtok returned NULL on first val.\r\n")); return;}	
    84e6:	00 97       	sbiw	r24, 0x00	; 0
    84e8:	49 f4       	brne	.+18     	; 0x84fc <handle_set_motors+0xb0>
    84ea:	8b e3       	ldi	r24, 0x3B	; 59
    84ec:	9e e0       	ldi	r25, 0x0E	; 14
    84ee:	9f 93       	push	r25
    84f0:	8f 93       	push	r24
    84f2:	0e 94 f7 56 	call	0xadee	; 0xadee <printf_P>
    84f6:	0f 90       	pop	r0
    84f8:	0f 90       	pop	r0
    84fa:	65 c0       	rjmp	.+202    	; 0x85c6 <handle_set_motors+0x17a>
	motor_adjusts[direction][0] = atoi(token);
    84fc:	11 27       	eor	r17, r17
    84fe:	0e 94 23 55 	call	0xaa46	; 0xaa46 <atoi>
    8502:	f8 01       	movw	r30, r16
    8504:	ee 0f       	add	r30, r30
    8506:	ff 1f       	adc	r31, r31
    8508:	e0 0f       	add	r30, r16
    850a:	f1 1f       	adc	r31, r17
    850c:	ee 0f       	add	r30, r30
    850e:	ff 1f       	adc	r31, r31
    8510:	e9 5d       	subi	r30, 0xD9	; 217
    8512:	f2 4d       	sbci	r31, 0xD2	; 210
    8514:	80 83       	st	Z, r24
    8516:	91 83       	std	Z+1, r25	; 0x01
	
	token = strtok(NULL,delim);
    8518:	be 01       	movw	r22, r28
    851a:	6f 5f       	subi	r22, 0xFF	; 255
    851c:	7f 4f       	sbci	r23, 0xFF	; 255
    851e:	80 e0       	ldi	r24, 0x00	; 0
    8520:	90 e0       	ldi	r25, 0x00	; 0
    8522:	0e 94 36 56 	call	0xac6c	; 0xac6c <strtok>
	if(token==NULL){ printf_P(PSTR("strtok returned NULL on second val.\r\n")); return;}
    8526:	00 97       	sbiw	r24, 0x00	; 0
    8528:	49 f4       	brne	.+18     	; 0x853c <handle_set_motors+0xf0>
    852a:	85 e1       	ldi	r24, 0x15	; 21
    852c:	9e e0       	ldi	r25, 0x0E	; 14
    852e:	9f 93       	push	r25
    8530:	8f 93       	push	r24
    8532:	0e 94 f7 56 	call	0xadee	; 0xadee <printf_P>
    8536:	0f 90       	pop	r0
    8538:	0f 90       	pop	r0
    853a:	45 c0       	rjmp	.+138    	; 0x85c6 <handle_set_motors+0x17a>
	motor_adjusts[direction][1] = atoi(token);
    853c:	0e 94 23 55 	call	0xaa46	; 0xaa46 <atoi>
    8540:	f8 01       	movw	r30, r16
    8542:	ee 0f       	add	r30, r30
    8544:	ff 1f       	adc	r31, r31
    8546:	e0 0f       	add	r30, r16
    8548:	f1 1f       	adc	r31, r17
    854a:	ee 0f       	add	r30, r30
    854c:	ff 1f       	adc	r31, r31
    854e:	e9 5d       	subi	r30, 0xD9	; 217
    8550:	f2 4d       	sbci	r31, 0xD2	; 210
    8552:	82 83       	std	Z+2, r24	; 0x02
    8554:	93 83       	std	Z+3, r25	; 0x03
	
	token = strtok(NULL,delim);
    8556:	be 01       	movw	r22, r28
    8558:	6f 5f       	subi	r22, 0xFF	; 255
    855a:	7f 4f       	sbci	r23, 0xFF	; 255
    855c:	80 e0       	ldi	r24, 0x00	; 0
    855e:	90 e0       	ldi	r25, 0x00	; 0
    8560:	0e 94 36 56 	call	0xac6c	; 0xac6c <strtok>
	if(token==NULL){ printf_P(PSTR("strtok returned NULL on third val.\r\n")); return;}
    8564:	00 97       	sbiw	r24, 0x00	; 0
    8566:	49 f4       	brne	.+18     	; 0x857a <handle_set_motors+0x12e>
    8568:	80 ef       	ldi	r24, 0xF0	; 240
    856a:	9d e0       	ldi	r25, 0x0D	; 13
    856c:	9f 93       	push	r25
    856e:	8f 93       	push	r24
    8570:	0e 94 f7 56 	call	0xadee	; 0xadee <printf_P>
    8574:	0f 90       	pop	r0
    8576:	0f 90       	pop	r0
    8578:	26 c0       	rjmp	.+76     	; 0x85c6 <handle_set_motors+0x17a>
	motor_adjusts[direction][2] = atoi(token);	
    857a:	0e 94 23 55 	call	0xaa46	; 0xaa46 <atoi>
    857e:	f8 01       	movw	r30, r16
    8580:	ee 0f       	add	r30, r30
    8582:	ff 1f       	adc	r31, r31
    8584:	e0 0f       	add	r30, r16
    8586:	f1 1f       	adc	r31, r17
    8588:	ee 0f       	add	r30, r30
    858a:	ff 1f       	adc	r31, r31
    858c:	e9 5d       	subi	r30, 0xD9	; 217
    858e:	f2 4d       	sbci	r31, 0xD2	; 210
    8590:	84 83       	std	Z+4, r24	; 0x04
    8592:	95 83       	std	Z+5, r25	; 0x05

	printf_P(PSTR("Got set_motors command. direction: %hhu, vals: (%d, %d, %d)\r\n"), direction, motor_adjusts[direction][0], motor_adjusts[direction][1], motor_adjusts[direction][2]);
    8594:	9f 93       	push	r25
    8596:	8f 93       	push	r24
    8598:	83 81       	ldd	r24, Z+3	; 0x03
    859a:	8f 93       	push	r24
    859c:	82 81       	ldd	r24, Z+2	; 0x02
    859e:	8f 93       	push	r24
    85a0:	81 81       	ldd	r24, Z+1	; 0x01
    85a2:	8f 93       	push	r24
    85a4:	80 81       	ld	r24, Z
    85a6:	8f 93       	push	r24
    85a8:	1f 93       	push	r17
    85aa:	0f 93       	push	r16
    85ac:	82 eb       	ldi	r24, 0xB2	; 178
    85ae:	9d e0       	ldi	r25, 0x0D	; 13
    85b0:	9f 93       	push	r25
    85b2:	8f 93       	push	r24
    85b4:	0e 94 f7 56 	call	0xadee	; 0xadee <printf_P>
	set_rgb(r,g,b);
    85b8:	4a 2d       	mov	r20, r10
    85ba:	6c 2d       	mov	r22, r12
    85bc:	8e 2d       	mov	r24, r14
    85be:	0e 94 26 37 	call	0x6e4c	; 0x6e4c <set_rgb>
    85c2:	cd bf       	out	0x3d, r28	; 61
    85c4:	de bf       	out	0x3e, r29	; 62
}
    85c6:	0f 90       	pop	r0
    85c8:	0f 90       	pop	r0
    85ca:	df 91       	pop	r29
    85cc:	cf 91       	pop	r28
    85ce:	1f 91       	pop	r17
    85d0:	0f 91       	pop	r16
    85d2:	ff 90       	pop	r15
    85d4:	ef 90       	pop	r14
    85d6:	df 90       	pop	r13
    85d8:	cf 90       	pop	r12
    85da:	bf 90       	pop	r11
    85dc:	af 90       	pop	r10
    85de:	08 95       	ret

000085e0 <handle_adjust_motors>:

void handle_adjust_motors(char* command_args){
    85e0:	8f 92       	push	r8
    85e2:	9f 92       	push	r9
    85e4:	af 92       	push	r10
    85e6:	bf 92       	push	r11
    85e8:	cf 92       	push	r12
    85ea:	df 92       	push	r13
    85ec:	ef 92       	push	r14
    85ee:	ff 92       	push	r15
    85f0:	0f 93       	push	r16
    85f2:	1f 93       	push	r17
    85f4:	cf 93       	push	r28
    85f6:	df 93       	push	r29
    85f8:	1f 92       	push	r1
    85fa:	1f 92       	push	r1
    85fc:	cd b7       	in	r28, 0x3d	; 61
    85fe:	de b7       	in	r29, 0x3e	; 62
    8600:	8c 01       	movw	r16, r24
#define LED_B_PIN_bm			PIN4_bm

void rgb_led_init(); // Set RGB LED pins as output & initialize timers for PWM

// Get and set intensity for red LED
inline uint8_t get_red_led() { return TCE1.CCBBUF; }
    8602:	e0 e4       	ldi	r30, 0x40	; 64
    8604:	fa e0       	ldi	r31, 0x0A	; 10
    8606:	e2 ac       	ldd	r14, Z+58	; 0x3a
    8608:	f3 ac       	ldd	r15, Z+59	; 0x3b
inline void set_red_led(uint8_t saturation) { TCE1.CCBBUF = saturation; }

// Get and set intensity for green LED
inline uint8_t get_green_led() { return TCE1.CCABUF; }
    860a:	c0 ac       	ldd	r12, Z+56	; 0x38
    860c:	d1 ac       	ldd	r13, Z+57	; 0x39
inline void set_green_led(uint8_t saturation) { TCE1.CCABUF = saturation; }
	
// Get and set intensity for blue LED
inline uint8_t get_blue_led() { return TCD1.CCABUF; }
    860e:	a0 90 78 09 	lds	r10, 0x0978	; 0x800978 <__TEXT_REGION_LENGTH__+0x700978>
    8612:	b0 90 79 09 	lds	r11, 0x0979	; 0x800979 <__TEXT_REGION_LENGTH__+0x700979>
	uint8_t r = get_red_led(), g = get_green_led(), b = get_blue_led();
	set_rgb(0,0,255);
    8616:	4f ef       	ldi	r20, 0xFF	; 255
    8618:	60 e0       	ldi	r22, 0x00	; 0
    861a:	80 e0       	ldi	r24, 0x00	; 0
    861c:	0e 94 26 37 	call	0x6e4c	; 0x6e4c <set_rgb>
	const char delim[2] = " ";
    8620:	80 e2       	ldi	r24, 0x20	; 32
    8622:	90 e0       	ldi	r25, 0x00	; 0
    8624:	89 83       	std	Y+1, r24	; 0x01
    8626:	9a 83       	std	Y+2, r25	; 0x02
	
	char* token = strtok(command_args,delim);
    8628:	be 01       	movw	r22, r28
    862a:	6f 5f       	subi	r22, 0xFF	; 255
    862c:	7f 4f       	sbci	r23, 0xFF	; 255
    862e:	c8 01       	movw	r24, r16
    8630:	0e 94 36 56 	call	0xac6c	; 0xac6c <strtok>
	if(token==NULL){ printf_P(PSTR("strtok returned NULL on direction.\r\n")); return;}
    8634:	00 97       	sbiw	r24, 0x00	; 0
    8636:	49 f4       	brne	.+18     	; 0x864a <handle_adjust_motors+0x6a>
    8638:	8d e8       	ldi	r24, 0x8D	; 141
    863a:	9d e0       	ldi	r25, 0x0D	; 13
    863c:	9f 93       	push	r25
    863e:	8f 93       	push	r24
    8640:	0e 94 f7 56 	call	0xadee	; 0xadee <printf_P>
    8644:	0f 90       	pop	r0
    8646:	0f 90       	pop	r0
    8648:	f2 c0       	rjmp	.+484    	; 0x882e <handle_adjust_motors+0x24e>
	uint8_t direction = atoi(token);
    864a:	0e 94 23 55 	call	0xaa46	; 0xaa46 <atoi>
    864e:	8c 01       	movw	r16, r24
	if(direction> 7){ printf_P(PSTR("Bad direction. Got: %hhu.\r\n"), direction); return;}
    8650:	88 30       	cpi	r24, 0x08	; 8
    8652:	70 f0       	brcs	.+28     	; 0x8670 <handle_adjust_motors+0x90>
    8654:	11 27       	eor	r17, r17
    8656:	1f 93       	push	r17
    8658:	0f 93       	push	r16
    865a:	81 e7       	ldi	r24, 0x71	; 113
    865c:	9d e0       	ldi	r25, 0x0D	; 13
    865e:	9f 93       	push	r25
    8660:	8f 93       	push	r24
    8662:	0e 94 f7 56 	call	0xadee	; 0xadee <printf_P>
    8666:	0f 90       	pop	r0
    8668:	0f 90       	pop	r0
    866a:	0f 90       	pop	r0
    866c:	0f 90       	pop	r0
    866e:	df c0       	rjmp	.+446    	; 0x882e <handle_adjust_motors+0x24e>

	token = strtok(NULL,delim);
    8670:	be 01       	movw	r22, r28
    8672:	6f 5f       	subi	r22, 0xFF	; 255
    8674:	7f 4f       	sbci	r23, 0xFF	; 255
    8676:	80 e0       	ldi	r24, 0x00	; 0
    8678:	90 e0       	ldi	r25, 0x00	; 0
    867a:	0e 94 36 56 	call	0xac6c	; 0xac6c <strtok>
	if(token==NULL){ printf_P(PSTR("strtok returned NULL on first val.\r\n")); return;}
    867e:	00 97       	sbiw	r24, 0x00	; 0
    8680:	49 f4       	brne	.+18     	; 0x8694 <handle_adjust_motors+0xb4>
    8682:	8c e4       	ldi	r24, 0x4C	; 76
    8684:	9d e0       	ldi	r25, 0x0D	; 13
    8686:	9f 93       	push	r25
    8688:	8f 93       	push	r24
    868a:	0e 94 f7 56 	call	0xadee	; 0xadee <printf_P>
    868e:	0f 90       	pop	r0
    8690:	0f 90       	pop	r0
    8692:	cd c0       	rjmp	.+410    	; 0x882e <handle_adjust_motors+0x24e>
	if(motor_adjusts[direction][0]>=0)
    8694:	11 27       	eor	r17, r17
    8696:	f8 01       	movw	r30, r16
    8698:	ee 0f       	add	r30, r30
    869a:	ff 1f       	adc	r31, r31
    869c:	e0 0f       	add	r30, r16
    869e:	f1 1f       	adc	r31, r17
    86a0:	ee 0f       	add	r30, r30
    86a2:	ff 1f       	adc	r31, r31
    86a4:	e9 5d       	subi	r30, 0xD9	; 217
    86a6:	f2 4d       	sbci	r31, 0xD2	; 210
    86a8:	80 80       	ld	r8, Z
    86aa:	91 80       	ldd	r9, Z+1	; 0x01
    86ac:	99 20       	and	r9, r9
    86ae:	84 f0       	brlt	.+32     	; 0x86d0 <handle_adjust_motors+0xf0>
		motor_adjusts[direction][0]+= atoi(token);
    86b0:	0e 94 23 55 	call	0xaa46	; 0xaa46 <atoi>
    86b4:	f8 01       	movw	r30, r16
    86b6:	ee 0f       	add	r30, r30
    86b8:	ff 1f       	adc	r31, r31
    86ba:	e0 0f       	add	r30, r16
    86bc:	f1 1f       	adc	r31, r17
    86be:	ee 0f       	add	r30, r30
    86c0:	ff 1f       	adc	r31, r31
    86c2:	e9 5d       	subi	r30, 0xD9	; 217
    86c4:	f2 4d       	sbci	r31, 0xD2	; 210
    86c6:	88 0d       	add	r24, r8
    86c8:	99 1d       	adc	r25, r9
    86ca:	80 83       	st	Z, r24
    86cc:	91 83       	std	Z+1, r25	; 0x01
    86ce:	0f c0       	rjmp	.+30     	; 0x86ee <handle_adjust_motors+0x10e>
	else
		motor_adjusts[direction][0]-= atoi(token);
    86d0:	0e 94 23 55 	call	0xaa46	; 0xaa46 <atoi>
    86d4:	f8 01       	movw	r30, r16
    86d6:	ee 0f       	add	r30, r30
    86d8:	ff 1f       	adc	r31, r31
    86da:	e0 0f       	add	r30, r16
    86dc:	f1 1f       	adc	r31, r17
    86de:	ee 0f       	add	r30, r30
    86e0:	ff 1f       	adc	r31, r31
    86e2:	e9 5d       	subi	r30, 0xD9	; 217
    86e4:	f2 4d       	sbci	r31, 0xD2	; 210
    86e6:	88 1a       	sub	r8, r24
    86e8:	99 0a       	sbc	r9, r25
    86ea:	80 82       	st	Z, r8
    86ec:	91 82       	std	Z+1, r9	; 0x01
	
	token = strtok(NULL,delim);
    86ee:	be 01       	movw	r22, r28
    86f0:	6f 5f       	subi	r22, 0xFF	; 255
    86f2:	7f 4f       	sbci	r23, 0xFF	; 255
    86f4:	80 e0       	ldi	r24, 0x00	; 0
    86f6:	90 e0       	ldi	r25, 0x00	; 0
    86f8:	0e 94 36 56 	call	0xac6c	; 0xac6c <strtok>
	if(token==NULL){ printf_P(PSTR("strtok returned NULL on second val.\r\n")); return;}
    86fc:	00 97       	sbiw	r24, 0x00	; 0
    86fe:	49 f4       	brne	.+18     	; 0x8712 <handle_adjust_motors+0x132>
    8700:	86 e2       	ldi	r24, 0x26	; 38
    8702:	9d e0       	ldi	r25, 0x0D	; 13
    8704:	9f 93       	push	r25
    8706:	8f 93       	push	r24
    8708:	0e 94 f7 56 	call	0xadee	; 0xadee <printf_P>
    870c:	0f 90       	pop	r0
    870e:	0f 90       	pop	r0
    8710:	8e c0       	rjmp	.+284    	; 0x882e <handle_adjust_motors+0x24e>
	if(motor_adjusts[direction][1]>=0)
    8712:	f8 01       	movw	r30, r16
    8714:	ee 0f       	add	r30, r30
    8716:	ff 1f       	adc	r31, r31
    8718:	e0 0f       	add	r30, r16
    871a:	f1 1f       	adc	r31, r17
    871c:	ee 0f       	add	r30, r30
    871e:	ff 1f       	adc	r31, r31
    8720:	e9 5d       	subi	r30, 0xD9	; 217
    8722:	f2 4d       	sbci	r31, 0xD2	; 210
    8724:	82 80       	ldd	r8, Z+2	; 0x02
    8726:	93 80       	ldd	r9, Z+3	; 0x03
    8728:	99 20       	and	r9, r9
    872a:	84 f0       	brlt	.+32     	; 0x874c <handle_adjust_motors+0x16c>
	motor_adjusts[direction][1]+= atoi(token);
    872c:	0e 94 23 55 	call	0xaa46	; 0xaa46 <atoi>
    8730:	f8 01       	movw	r30, r16
    8732:	ee 0f       	add	r30, r30
    8734:	ff 1f       	adc	r31, r31
    8736:	e0 0f       	add	r30, r16
    8738:	f1 1f       	adc	r31, r17
    873a:	ee 0f       	add	r30, r30
    873c:	ff 1f       	adc	r31, r31
    873e:	e9 5d       	subi	r30, 0xD9	; 217
    8740:	f2 4d       	sbci	r31, 0xD2	; 210
    8742:	88 0d       	add	r24, r8
    8744:	99 1d       	adc	r25, r9
    8746:	82 83       	std	Z+2, r24	; 0x02
    8748:	93 83       	std	Z+3, r25	; 0x03
    874a:	0f c0       	rjmp	.+30     	; 0x876a <handle_adjust_motors+0x18a>
	else
	motor_adjusts[direction][1]-= atoi(token);
    874c:	0e 94 23 55 	call	0xaa46	; 0xaa46 <atoi>
    8750:	f8 01       	movw	r30, r16
    8752:	ee 0f       	add	r30, r30
    8754:	ff 1f       	adc	r31, r31
    8756:	e0 0f       	add	r30, r16
    8758:	f1 1f       	adc	r31, r17
    875a:	ee 0f       	add	r30, r30
    875c:	ff 1f       	adc	r31, r31
    875e:	e9 5d       	subi	r30, 0xD9	; 217
    8760:	f2 4d       	sbci	r31, 0xD2	; 210
    8762:	88 1a       	sub	r8, r24
    8764:	99 0a       	sbc	r9, r25
    8766:	82 82       	std	Z+2, r8	; 0x02
    8768:	93 82       	std	Z+3, r9	; 0x03
	
	token = strtok(NULL,delim);
    876a:	be 01       	movw	r22, r28
    876c:	6f 5f       	subi	r22, 0xFF	; 255
    876e:	7f 4f       	sbci	r23, 0xFF	; 255
    8770:	80 e0       	ldi	r24, 0x00	; 0
    8772:	90 e0       	ldi	r25, 0x00	; 0
    8774:	0e 94 36 56 	call	0xac6c	; 0xac6c <strtok>
	if(token==NULL){ printf_P(PSTR("strtok returned NULL on third val.\r\n")); return;}
    8778:	00 97       	sbiw	r24, 0x00	; 0
    877a:	49 f4       	brne	.+18     	; 0x878e <handle_adjust_motors+0x1ae>
    877c:	81 e0       	ldi	r24, 0x01	; 1
    877e:	9d e0       	ldi	r25, 0x0D	; 13
    8780:	9f 93       	push	r25
    8782:	8f 93       	push	r24
    8784:	0e 94 f7 56 	call	0xadee	; 0xadee <printf_P>
    8788:	0f 90       	pop	r0
    878a:	0f 90       	pop	r0
    878c:	50 c0       	rjmp	.+160    	; 0x882e <handle_adjust_motors+0x24e>
	if(motor_adjusts[direction][2]>=0)
    878e:	f8 01       	movw	r30, r16
    8790:	ee 0f       	add	r30, r30
    8792:	ff 1f       	adc	r31, r31
    8794:	e0 0f       	add	r30, r16
    8796:	f1 1f       	adc	r31, r17
    8798:	ee 0f       	add	r30, r30
    879a:	ff 1f       	adc	r31, r31
    879c:	e9 5d       	subi	r30, 0xD9	; 217
    879e:	f2 4d       	sbci	r31, 0xD2	; 210
    87a0:	84 80       	ldd	r8, Z+4	; 0x04
    87a2:	95 80       	ldd	r9, Z+5	; 0x05
    87a4:	99 20       	and	r9, r9
    87a6:	84 f0       	brlt	.+32     	; 0x87c8 <handle_adjust_motors+0x1e8>
	motor_adjusts[direction][2]+= atoi(token);
    87a8:	0e 94 23 55 	call	0xaa46	; 0xaa46 <atoi>
    87ac:	f8 01       	movw	r30, r16
    87ae:	ee 0f       	add	r30, r30
    87b0:	ff 1f       	adc	r31, r31
    87b2:	e0 0f       	add	r30, r16
    87b4:	f1 1f       	adc	r31, r17
    87b6:	ee 0f       	add	r30, r30
    87b8:	ff 1f       	adc	r31, r31
    87ba:	e9 5d       	subi	r30, 0xD9	; 217
    87bc:	f2 4d       	sbci	r31, 0xD2	; 210
    87be:	88 0d       	add	r24, r8
    87c0:	99 1d       	adc	r25, r9
    87c2:	84 83       	std	Z+4, r24	; 0x04
    87c4:	95 83       	std	Z+5, r25	; 0x05
    87c6:	0f c0       	rjmp	.+30     	; 0x87e6 <handle_adjust_motors+0x206>
	else
	motor_adjusts[direction][2]-= atoi(token);
    87c8:	0e 94 23 55 	call	0xaa46	; 0xaa46 <atoi>
    87cc:	f8 01       	movw	r30, r16
    87ce:	ee 0f       	add	r30, r30
    87d0:	ff 1f       	adc	r31, r31
    87d2:	e0 0f       	add	r30, r16
    87d4:	f1 1f       	adc	r31, r17
    87d6:	ee 0f       	add	r30, r30
    87d8:	ff 1f       	adc	r31, r31
    87da:	e9 5d       	subi	r30, 0xD9	; 217
    87dc:	f2 4d       	sbci	r31, 0xD2	; 210
    87de:	88 1a       	sub	r8, r24
    87e0:	99 0a       	sbc	r9, r25
    87e2:	84 82       	std	Z+4, r8	; 0x04
    87e4:	95 82       	std	Z+5, r9	; 0x05

	printf_P(PSTR("Got adjust_motors command. direction: %hhu, New Settings: (%d, %d, %d)\r\n"), direction, motor_adjusts[direction][0], motor_adjusts[direction][1], motor_adjusts[direction][2]);
    87e6:	f8 01       	movw	r30, r16
    87e8:	ee 0f       	add	r30, r30
    87ea:	ff 1f       	adc	r31, r31
    87ec:	e0 0f       	add	r30, r16
    87ee:	f1 1f       	adc	r31, r17
    87f0:	ee 0f       	add	r30, r30
    87f2:	ff 1f       	adc	r31, r31
    87f4:	e9 5d       	subi	r30, 0xD9	; 217
    87f6:	f2 4d       	sbci	r31, 0xD2	; 210
    87f8:	85 81       	ldd	r24, Z+5	; 0x05
    87fa:	8f 93       	push	r24
    87fc:	84 81       	ldd	r24, Z+4	; 0x04
    87fe:	8f 93       	push	r24
    8800:	83 81       	ldd	r24, Z+3	; 0x03
    8802:	8f 93       	push	r24
    8804:	82 81       	ldd	r24, Z+2	; 0x02
    8806:	8f 93       	push	r24
    8808:	81 81       	ldd	r24, Z+1	; 0x01
    880a:	8f 93       	push	r24
    880c:	80 81       	ld	r24, Z
    880e:	8f 93       	push	r24
    8810:	1f 93       	push	r17
    8812:	0f 93       	push	r16
    8814:	88 eb       	ldi	r24, 0xB8	; 184
    8816:	9c e0       	ldi	r25, 0x0C	; 12
    8818:	9f 93       	push	r25
    881a:	8f 93       	push	r24
    881c:	0e 94 f7 56 	call	0xadee	; 0xadee <printf_P>
	set_rgb(r,g,b);
    8820:	4a 2d       	mov	r20, r10
    8822:	6c 2d       	mov	r22, r12
    8824:	8e 2d       	mov	r24, r14
    8826:	0e 94 26 37 	call	0x6e4c	; 0x6e4c <set_rgb>
    882a:	cd bf       	out	0x3d, r28	; 61
    882c:	de bf       	out	0x3e, r29	; 62
}
    882e:	0f 90       	pop	r0
    8830:	0f 90       	pop	r0
    8832:	df 91       	pop	r29
    8834:	cf 91       	pop	r28
    8836:	1f 91       	pop	r17
    8838:	0f 91       	pop	r16
    883a:	ff 90       	pop	r15
    883c:	ef 90       	pop	r14
    883e:	df 90       	pop	r13
    8840:	cf 90       	pop	r12
    8842:	bf 90       	pop	r11
    8844:	af 90       	pop	r10
    8846:	9f 90       	pop	r9
    8848:	8f 90       	pop	r8
    884a:	08 95       	ret

0000884c <handle_set_mm_per_kilostep>:

void handle_set_mm_per_kilostep(char* command_args){
    884c:	1f 93       	push	r17
    884e:	cf 93       	push	r28
    8850:	df 93       	push	r29
    8852:	1f 92       	push	r1
    8854:	1f 92       	push	r1
    8856:	cd b7       	in	r28, 0x3d	; 61
    8858:	de b7       	in	r29, 0x3e	; 62
	const char delim[2] = " ";
    885a:	20 e2       	ldi	r18, 0x20	; 32
    885c:	30 e0       	ldi	r19, 0x00	; 0
    885e:	29 83       	std	Y+1, r18	; 0x01
    8860:	3a 83       	std	Y+2, r19	; 0x02
	
	char* token = strtok(command_args,delim);
    8862:	be 01       	movw	r22, r28
    8864:	6f 5f       	subi	r22, 0xFF	; 255
    8866:	7f 4f       	sbci	r23, 0xFF	; 255
    8868:	0e 94 36 56 	call	0xac6c	; 0xac6c <strtok>
	uint8_t direction = token[0]-'0';
    886c:	fc 01       	movw	r30, r24
    886e:	10 81       	ld	r17, Z
    8870:	10 53       	subi	r17, 0x30	; 48
	
	token = strtok(NULL,delim);
    8872:	be 01       	movw	r22, r28
    8874:	6f 5f       	subi	r22, 0xFF	; 255
    8876:	7f 4f       	sbci	r23, 0xFF	; 255
    8878:	80 e0       	ldi	r24, 0x00	; 0
    887a:	90 e0       	ldi	r25, 0x00	; 0
    887c:	0e 94 36 56 	call	0xac6c	; 0xac6c <strtok>
	uint16_t mm_per_kilostep = atoi(token);
    8880:	0e 94 23 55 	call	0xaa46	; 0xaa46 <atoi>

	set_mm_per_kilostep(direction, mm_per_kilostep);
    8884:	bc 01       	movw	r22, r24
    8886:	81 2f       	mov	r24, r17
    8888:	0e 94 c3 23 	call	0x4786	; 0x4786 <set_mm_per_kilostep>
	
}
    888c:	0f 90       	pop	r0
    888e:	0f 90       	pop	r0
    8890:	df 91       	pop	r29
    8892:	cf 91       	pop	r28
    8894:	1f 91       	pop	r17
    8896:	08 95       	ret

00008898 <handle_rnb_broadcast>:

/* This tells the droplet that it should tell other droplets nearby their rnb to it.
 * In other words, this tells nearby droplets to listen, and then performs an ir_range_blast.
 */
void handle_rnb_broadcast(){
	schedule_task(5,broadcast_rnb_data,NULL);
    8898:	20 e0       	ldi	r18, 0x00	; 0
    889a:	30 e0       	ldi	r19, 0x00	; 0
    889c:	43 e0       	ldi	r20, 0x03	; 3
    889e:	5e e2       	ldi	r21, 0x2E	; 46
    88a0:	65 e0       	ldi	r22, 0x05	; 5
    88a2:	70 e0       	ldi	r23, 0x00	; 0
    88a4:	80 e0       	ldi	r24, 0x00	; 0
    88a6:	90 e0       	ldi	r25, 0x00	; 0
    88a8:	0e 94 2a 3d 	call	0x7a54	; 0x7a54 <schedule_task>
    88ac:	08 95       	ret

000088ae <handle_set_led>:
}

void handle_set_led(char* command_args){
    88ae:	8f 92       	push	r8
    88b0:	9f 92       	push	r9
    88b2:	af 92       	push	r10
    88b4:	bf 92       	push	r11
    88b6:	cf 92       	push	r12
    88b8:	df 92       	push	r13
    88ba:	ef 92       	push	r14
    88bc:	ff 92       	push	r15
    88be:	0f 93       	push	r16
    88c0:	1f 93       	push	r17
    88c2:	cf 93       	push	r28
    88c4:	df 93       	push	r29
    88c6:	1f 92       	push	r1
    88c8:	1f 92       	push	r1
    88ca:	cd b7       	in	r28, 0x3d	; 61
    88cc:	de b7       	in	r29, 0x3e	; 62
    88ce:	98 2e       	mov	r9, r24
    88d0:	89 2e       	mov	r8, r25
	const char delim[2] = " ";
    88d2:	80 e2       	ldi	r24, 0x20	; 32
    88d4:	90 e0       	ldi	r25, 0x00	; 0
    88d6:	89 83       	std	Y+1, r24	; 0x01
    88d8:	9a 83       	std	Y+2, r25	; 0x02
	char* token;

	uint8_t successful_read = 0;
	
	char* colors = strtok(command_args,delim);
    88da:	be 01       	movw	r22, r28
    88dc:	6f 5f       	subi	r22, 0xFF	; 255
    88de:	7f 4f       	sbci	r23, 0xFF	; 255
    88e0:	89 2d       	mov	r24, r9
    88e2:	98 2d       	mov	r25, r8
    88e4:	0e 94 36 56 	call	0xac6c	; 0xac6c <strtok>
    88e8:	6c 01       	movw	r12, r24
	
	int length = strlen(colors);
    88ea:	fc 01       	movw	r30, r24
    88ec:	01 90       	ld	r0, Z+
    88ee:	00 20       	and	r0, r0
    88f0:	e9 f7       	brne	.-6      	; 0x88ec <handle_set_led+0x3e>
    88f2:	31 97       	sbiw	r30, 0x01	; 1
    88f4:	7f 01       	movw	r14, r30
    88f6:	e8 1a       	sub	r14, r24
    88f8:	f9 0a       	sbc	r15, r25

	if(strcmp(colors,"hsv")==0){
    88fa:	68 ea       	ldi	r22, 0xA8	; 168
    88fc:	73 e2       	ldi	r23, 0x23	; 35
    88fe:	0e 94 43 56 	call	0xac86	; 0xac86 <strcmp>
    8902:	89 2b       	or	r24, r25
    8904:	21 f0       	breq	.+8      	; 0x890e <handle_set_led+0x60>
		token = strtok(NULL,delim);	
		vVal = atoi(token);
		set_hsv(hVal,sVal,vVal);
		successful_read=1;
	}else{
		for(int i=0 ; i < length ; i++){
    8906:	1e 14       	cp	r1, r14
    8908:	1f 04       	cpc	r1, r15
    890a:	24 f1       	brlt	.+72     	; 0x8954 <handle_set_led+0xa6>
    890c:	5b c0       	rjmp	.+182    	; 0x89c4 <handle_set_led+0x116>
	int length = strlen(colors);

	if(strcmp(colors,"hsv")==0){
		uint16_t hVal;
		uint8_t sVal, vVal;
		token = strtok(NULL,delim);
    890e:	be 01       	movw	r22, r28
    8910:	6f 5f       	subi	r22, 0xFF	; 255
    8912:	7f 4f       	sbci	r23, 0xFF	; 255
    8914:	80 e0       	ldi	r24, 0x00	; 0
    8916:	90 e0       	ldi	r25, 0x00	; 0
    8918:	0e 94 36 56 	call	0xac6c	; 0xac6c <strtok>
		hVal = atoi(token);
    891c:	0e 94 23 55 	call	0xaa46	; 0xaa46 <atoi>
    8920:	8c 01       	movw	r16, r24
		token = strtok(NULL,delim);
    8922:	be 01       	movw	r22, r28
    8924:	6f 5f       	subi	r22, 0xFF	; 255
    8926:	7f 4f       	sbci	r23, 0xFF	; 255
    8928:	80 e0       	ldi	r24, 0x00	; 0
    892a:	90 e0       	ldi	r25, 0x00	; 0
    892c:	0e 94 36 56 	call	0xac6c	; 0xac6c <strtok>
		sVal = atoi(token);
    8930:	0e 94 23 55 	call	0xaa46	; 0xaa46 <atoi>
    8934:	f8 2e       	mov	r15, r24
		token = strtok(NULL,delim);	
    8936:	be 01       	movw	r22, r28
    8938:	6f 5f       	subi	r22, 0xFF	; 255
    893a:	7f 4f       	sbci	r23, 0xFF	; 255
    893c:	80 e0       	ldi	r24, 0x00	; 0
    893e:	90 e0       	ldi	r25, 0x00	; 0
    8940:	0e 94 36 56 	call	0xac6c	; 0xac6c <strtok>
		vVal = atoi(token);
    8944:	0e 94 23 55 	call	0xaa46	; 0xaa46 <atoi>
		set_hsv(hVal,sVal,vVal);
    8948:	48 2f       	mov	r20, r24
    894a:	6f 2d       	mov	r22, r15
    894c:	c8 01       	movw	r24, r16
    894e:	0e 94 bb 38 	call	0x7176	; 0x7176 <set_hsv>
    8952:	54 c0       	rjmp	.+168    	; 0x89fc <handle_set_led+0x14e>
    8954:	86 01       	movw	r16, r12
    8956:	ec 0c       	add	r14, r12
    8958:	fd 1c       	adc	r15, r13
inline void set_blue_led(uint8_t saturation) { TCD1.CCABUF = saturation;	}
    895a:	0f 2e       	mov	r0, r31
    895c:	f0 e4       	ldi	r31, 0x40	; 64
    895e:	cf 2e       	mov	r12, r31
    8960:	f9 e0       	ldi	r31, 0x09	; 9
    8962:	df 2e       	mov	r13, r31
    8964:	f0 2d       	mov	r31, r0
inline uint8_t get_red_led() { return TCE1.CCBBUF; }
inline void set_red_led(uint8_t saturation) { TCE1.CCBBUF = saturation; }

// Get and set intensity for green LED
inline uint8_t get_green_led() { return TCE1.CCABUF; }
inline void set_green_led(uint8_t saturation) { TCE1.CCABUF = saturation; }
    8966:	0f 2e       	mov	r0, r31
    8968:	f0 e4       	ldi	r31, 0x40	; 64
    896a:	af 2e       	mov	r10, r31
    896c:	fa e0       	ldi	r31, 0x0A	; 10
    896e:	bf 2e       	mov	r11, r31
    8970:	f0 2d       	mov	r31, r0
		successful_read=1;
	}else{
		for(int i=0 ; i < length ; i++){
			token = strtok(NULL,delim);
    8972:	be 01       	movw	r22, r28
    8974:	6f 5f       	subi	r22, 0xFF	; 255
    8976:	7f 4f       	sbci	r23, 0xFF	; 255
    8978:	80 e0       	ldi	r24, 0x00	; 0
    897a:	90 e0       	ldi	r25, 0x00	; 0
    897c:	0e 94 36 56 	call	0xac6c	; 0xac6c <strtok>
			if(colors[i]=='r'){
    8980:	f8 01       	movw	r30, r16
    8982:	21 91       	ld	r18, Z+
    8984:	8f 01       	movw	r16, r30
    8986:	22 37       	cpi	r18, 0x72	; 114
    8988:	39 f4       	brne	.+14     	; 0x8998 <handle_set_led+0xea>
				set_red_led(atoi(token));
    898a:	0e 94 23 55 	call	0xaa46	; 0xaa46 <atoi>
    898e:	99 27       	eor	r25, r25

void rgb_led_init(); // Set RGB LED pins as output & initialize timers for PWM

// Get and set intensity for red LED
inline uint8_t get_red_led() { return TCE1.CCBBUF; }
inline void set_red_led(uint8_t saturation) { TCE1.CCBBUF = saturation; }
    8990:	f5 01       	movw	r30, r10
    8992:	82 af       	std	Z+58, r24	; 0x3a
    8994:	93 af       	std	Z+59, r25	; 0x3b
    8996:	12 c0       	rjmp	.+36     	; 0x89bc <handle_set_led+0x10e>
				successful_read=1;
			}else if(colors[i]=='g'){
    8998:	27 36       	cpi	r18, 0x67	; 103
    899a:	39 f4       	brne	.+14     	; 0x89aa <handle_set_led+0xfc>
				set_green_led(atoi(token));
    899c:	0e 94 23 55 	call	0xaa46	; 0xaa46 <atoi>
    89a0:	99 27       	eor	r25, r25

// Get and set intensity for green LED
inline uint8_t get_green_led() { return TCE1.CCABUF; }
inline void set_green_led(uint8_t saturation) { TCE1.CCABUF = saturation; }
    89a2:	f5 01       	movw	r30, r10
    89a4:	80 af       	std	Z+56, r24	; 0x38
    89a6:	91 af       	std	Z+57, r25	; 0x39
    89a8:	09 c0       	rjmp	.+18     	; 0x89bc <handle_set_led+0x10e>
				successful_read=1;
			}else if(colors[i]=='b'){
    89aa:	22 36       	cpi	r18, 0x62	; 98
    89ac:	59 f4       	brne	.+22     	; 0x89c4 <handle_set_led+0x116>
				set_blue_led(atoi(token));
    89ae:	0e 94 23 55 	call	0xaa46	; 0xaa46 <atoi>
    89b2:	9c 01       	movw	r18, r24
    89b4:	33 27       	eor	r19, r19
	
// Get and set intensity for blue LED
inline uint8_t get_blue_led() { return TCD1.CCABUF; }
inline void set_blue_led(uint8_t saturation) { TCD1.CCABUF = saturation;	}
    89b6:	f6 01       	movw	r30, r12
    89b8:	20 af       	std	Z+56, r18	; 0x38
    89ba:	31 af       	std	Z+57, r19	; 0x39
		token = strtok(NULL,delim);	
		vVal = atoi(token);
		set_hsv(hVal,sVal,vVal);
		successful_read=1;
	}else{
		for(int i=0 ; i < length ; i++){
    89bc:	0e 15       	cp	r16, r14
    89be:	1f 05       	cpc	r17, r15
    89c0:	c1 f6       	brne	.-80     	; 0x8972 <handle_set_led+0xc4>
    89c2:	1c c0       	rjmp	.+56     	; 0x89fc <handle_set_led+0x14e>
			}
		}
	}

	if(successful_read!=1){
		printf_P(PSTR("\tGot command set_led, but arguments (%s) were invalid. Format should be:\r\n"),command_args);
    89c4:	8f 92       	push	r8
    89c6:	9f 92       	push	r9
    89c8:	8d e6       	ldi	r24, 0x6D	; 109
    89ca:	9c e0       	ldi	r25, 0x0C	; 12
    89cc:	9f 93       	push	r25
    89ce:	8f 93       	push	r24
    89d0:	0e 94 f7 56 	call	0xadee	; 0xadee <printf_P>
		printf_P(PSTR("\t Letters r,g,b, in any order, followed by values 0-255, in same \r\n"));
    89d4:	89 e2       	ldi	r24, 0x29	; 41
    89d6:	9c e0       	ldi	r25, 0x0C	; 12
    89d8:	9f 93       	push	r25
    89da:	8f 93       	push	r24
    89dc:	0e 94 f7 56 	call	0xadee	; 0xadee <printf_P>
		printf_P(PSTR("\t order, indicating the brightness of the associated LEDs. Example: \r\n"));
    89e0:	82 ee       	ldi	r24, 0xE2	; 226
    89e2:	9b e0       	ldi	r25, 0x0B	; 11
    89e4:	9f 93       	push	r25
    89e6:	8f 93       	push	r24
    89e8:	0e 94 f7 56 	call	0xadee	; 0xadee <printf_P>
		printf_P(PSTR("\t \"set_led bgr 5 30 0\" gives a bluish green.\r\n"));
    89ec:	83 eb       	ldi	r24, 0xB3	; 179
    89ee:	9b e0       	ldi	r25, 0x0B	; 11
    89f0:	9f 93       	push	r25
    89f2:	8f 93       	push	r24
    89f4:	0e 94 f7 56 	call	0xadee	; 0xadee <printf_P>
    89f8:	cd bf       	out	0x3d, r28	; 61
    89fa:	de bf       	out	0x3e, r29	; 62
	}
}
    89fc:	0f 90       	pop	r0
    89fe:	0f 90       	pop	r0
    8a00:	df 91       	pop	r29
    8a02:	cf 91       	pop	r28
    8a04:	1f 91       	pop	r17
    8a06:	0f 91       	pop	r16
    8a08:	ff 90       	pop	r15
    8a0a:	ef 90       	pop	r14
    8a0c:	df 90       	pop	r13
    8a0e:	cf 90       	pop	r12
    8a10:	bf 90       	pop	r11
    8a12:	af 90       	pop	r10
    8a14:	9f 90       	pop	r9
    8a16:	8f 90       	pop	r8
    8a18:	08 95       	ret

00008a1a <handle_broadcast_id>:

void handle_broadcast_id(){
	schedule_task(5, send_id, NULL);
    8a1a:	20 e0       	ldi	r18, 0x00	; 0
    8a1c:	30 e0       	ldi	r19, 0x00	; 0
    8a1e:	44 e0       	ldi	r20, 0x04	; 4
    8a20:	51 e4       	ldi	r21, 0x41	; 65
    8a22:	65 e0       	ldi	r22, 0x05	; 5
    8a24:	70 e0       	ldi	r23, 0x00	; 0
    8a26:	80 e0       	ldi	r24, 0x00	; 0
    8a28:	90 e0       	ldi	r25, 0x00	; 0
    8a2a:	0e 94 2a 3d 	call	0x7a54	; 0x7a54 <schedule_task>
    8a2e:	08 95       	ret

00008a30 <handle_get_id>:
}

void handle_get_id(){
	printf_P(PSTR("My ID is: %04X\r\n"),get_droplet_id());
    8a30:	80 91 fb 23 	lds	r24, 0x23FB	; 0x8023fb <droplet_ID+0x1>
    8a34:	8f 93       	push	r24
    8a36:	80 91 fa 23 	lds	r24, 0x23FA	; 0x8023fa <droplet_ID>
    8a3a:	8f 93       	push	r24
    8a3c:	82 ea       	ldi	r24, 0xA2	; 162
    8a3e:	9b e0       	ldi	r25, 0x0B	; 11
    8a40:	9f 93       	push	r25
    8a42:	8f 93       	push	r24
    8a44:	0e 94 f7 56 	call	0xadee	; 0xadee <printf_P>
    8a48:	0f 90       	pop	r0
    8a4a:	0f 90       	pop	r0
    8a4c:	0f 90       	pop	r0
    8a4e:	0f 90       	pop	r0
    8a50:	08 95       	ret

00008a52 <handle_cmd>:
	char msg[5];
	sprintf(msg, "%04X", get_droplet_id());
	ir_send(ALL_DIRS, msg, 4);
}

void handle_cmd(char* command_args){
    8a52:	cf 93       	push	r28
    8a54:	df 93       	push	r29
    8a56:	d8 2f       	mov	r29, r24
    8a58:	c9 2f       	mov	r28, r25
	printf_P(PSTR("Broadcasting command: \"%s\", of length %i.\r\n"),(uint8_t*)command_args, strlen(command_args));
    8a5a:	a8 2f       	mov	r26, r24
    8a5c:	b9 2f       	mov	r27, r25
    8a5e:	fd 01       	movw	r30, r26
    8a60:	01 90       	ld	r0, Z+
    8a62:	00 20       	and	r0, r0
    8a64:	e9 f7       	brne	.-6      	; 0x8a60 <handle_cmd+0xe>
    8a66:	31 97       	sbiw	r30, 0x01	; 1
    8a68:	ea 1b       	sub	r30, r26
    8a6a:	fb 0b       	sbc	r31, r27
    8a6c:	ff 93       	push	r31
    8a6e:	ef 93       	push	r30
    8a70:	9f 93       	push	r25
    8a72:	8f 93       	push	r24
    8a74:	86 e7       	ldi	r24, 0x76	; 118
    8a76:	9b e0       	ldi	r25, 0x0B	; 11
    8a78:	9f 93       	push	r25
    8a7a:	8f 93       	push	r24
    8a7c:	0e 94 f7 56 	call	0xadee	; 0xadee <printf_P>
	ir_cmd(ALL_DIRS, command_args,strlen(command_args));
    8a80:	ad 2f       	mov	r26, r29
    8a82:	bc 2f       	mov	r27, r28
    8a84:	fd 01       	movw	r30, r26
    8a86:	01 90       	ld	r0, Z+
    8a88:	00 20       	and	r0, r0
    8a8a:	e9 f7       	brne	.-6      	; 0x8a86 <handle_cmd+0x34>
    8a8c:	31 97       	sbiw	r30, 0x01	; 1
    8a8e:	af 01       	movw	r20, r30
    8a90:	4a 1b       	sub	r20, r26
    8a92:	5b 0b       	sbc	r21, r27
    8a94:	6d 2f       	mov	r22, r29
    8a96:	7c 2f       	mov	r23, r28
    8a98:	8f e3       	ldi	r24, 0x3F	; 63
    8a9a:	0e 94 7d 18 	call	0x30fa	; 0x30fa <ir_cmd>
    8a9e:	0f 90       	pop	r0
    8aa0:	0f 90       	pop	r0
    8aa2:	0f 90       	pop	r0
    8aa4:	0f 90       	pop	r0
    8aa6:	0f 90       	pop	r0
    8aa8:	0f 90       	pop	r0
	//
	//else
	//{
		//printf("\tIt wasn't OK to send command\r\n");
	//}
}
    8aaa:	df 91       	pop	r29
    8aac:	cf 91       	pop	r28
    8aae:	08 95       	ret

00008ab0 <handle_targeted_cmd>:

void handle_targeted_cmd(char* command_args){
    8ab0:	cf 92       	push	r12
    8ab2:	df 92       	push	r13
    8ab4:	ef 92       	push	r14
    8ab6:	ff 92       	push	r15
    8ab8:	0f 93       	push	r16
    8aba:	1f 93       	push	r17
    8abc:	cf 93       	push	r28
    8abe:	df 93       	push	r29
    8ac0:	cd b7       	in	r28, 0x3d	; 61
    8ac2:	de b7       	in	r29, 0x3e	; 62
    8ac4:	a5 97       	sbiw	r28, 0x25	; 37
    8ac6:	cd bf       	out	0x3d, r28	; 61
    8ac8:	de bf       	out	0x3e, r29	; 62
    8aca:	7c 01       	movw	r14, r24
	uint8_t loc = strcspn(command_args, " ");
    8acc:	6a e6       	ldi	r22, 0x6A	; 106
    8ace:	72 e2       	ldi	r23, 0x22	; 34
    8ad0:	0e 94 53 56 	call	0xaca6	; 0xaca6 <strcspn>
	char targetString[5];
	char cmdString[32];
	
	strncpy(targetString, command_args, loc);
    8ad4:	8c 01       	movw	r16, r24
    8ad6:	11 27       	eor	r17, r17
    8ad8:	a8 01       	movw	r20, r16
    8ada:	b7 01       	movw	r22, r14
    8adc:	ce 01       	movw	r24, r28
    8ade:	01 96       	adiw	r24, 0x01	; 1
    8ae0:	0e 94 62 56 	call	0xacc4	; 0xacc4 <strncpy>
	strcpy(cmdString, command_args+loc+1);
    8ae4:	0f 5f       	subi	r16, 0xFF	; 255
    8ae6:	1f 4f       	sbci	r17, 0xFF	; 255
    8ae8:	b7 01       	movw	r22, r14
    8aea:	60 0f       	add	r22, r16
    8aec:	71 1f       	adc	r23, r17
    8aee:	8e 01       	movw	r16, r28
    8af0:	0a 5f       	subi	r16, 0xFA	; 250
    8af2:	1f 4f       	sbci	r17, 0xFF	; 255
    8af4:	c8 01       	movw	r24, r16
    8af6:	0e 94 4c 56 	call	0xac98	; 0xac98 <strcpy>
	
	uint16_t target = strtoul(targetString, NULL, 16);
    8afa:	40 e1       	ldi	r20, 0x10	; 16
    8afc:	50 e0       	ldi	r21, 0x00	; 0
    8afe:	60 e0       	ldi	r22, 0x00	; 0
    8b00:	70 e0       	ldi	r23, 0x00	; 0
    8b02:	ce 01       	movw	r24, r28
    8b04:	01 96       	adiw	r24, 0x01	; 1
    8b06:	0e 94 ef 53 	call	0xa7de	; 0xa7de <strtoul>
    8b0a:	6b 01       	movw	r12, r22
    8b0c:	7c 01       	movw	r14, r24
	printf_P(PSTR("command string: %s, length: %d\r\n"),cmdString, strlen(cmdString));
    8b0e:	f8 01       	movw	r30, r16
    8b10:	01 90       	ld	r0, Z+
    8b12:	00 20       	and	r0, r0
    8b14:	e9 f7       	brne	.-6      	; 0x8b10 <handle_targeted_cmd+0x60>
    8b16:	31 97       	sbiw	r30, 0x01	; 1
    8b18:	e0 1b       	sub	r30, r16
    8b1a:	f1 0b       	sbc	r31, r17
    8b1c:	ff 93       	push	r31
    8b1e:	ef 93       	push	r30
    8b20:	1f 93       	push	r17
    8b22:	0f 93       	push	r16
    8b24:	85 e5       	ldi	r24, 0x55	; 85
    8b26:	9b e0       	ldi	r25, 0x0B	; 11
    8b28:	9f 93       	push	r25
    8b2a:	8f 93       	push	r24
    8b2c:	0e 94 f7 56 	call	0xadee	; 0xadee <printf_P>
	ir_targeted_cmd(ALL_DIRS, cmdString,strlen(cmdString), target);
    8b30:	f8 01       	movw	r30, r16
    8b32:	01 90       	ld	r0, Z+
    8b34:	00 20       	and	r0, r0
    8b36:	e9 f7       	brne	.-6      	; 0x8b32 <handle_targeted_cmd+0x82>
    8b38:	31 97       	sbiw	r30, 0x01	; 1
    8b3a:	af 01       	movw	r20, r30
    8b3c:	40 1b       	sub	r20, r16
    8b3e:	51 0b       	sbc	r21, r17
    8b40:	96 01       	movw	r18, r12
    8b42:	b8 01       	movw	r22, r16
    8b44:	8f e3       	ldi	r24, 0x3F	; 63
    8b46:	0e 94 f0 17 	call	0x2fe0	; 0x2fe0 <ir_targeted_cmd>
    8b4a:	0f 90       	pop	r0
    8b4c:	0f 90       	pop	r0
    8b4e:	0f 90       	pop	r0
    8b50:	0f 90       	pop	r0
    8b52:	0f 90       	pop	r0
    8b54:	0f 90       	pop	r0
}
    8b56:	a5 96       	adiw	r28, 0x25	; 37
    8b58:	cd bf       	out	0x3d, r28	; 61
    8b5a:	de bf       	out	0x3e, r29	; 62
    8b5c:	df 91       	pop	r29
    8b5e:	cf 91       	pop	r28
    8b60:	1f 91       	pop	r17
    8b62:	0f 91       	pop	r16
    8b64:	ff 90       	pop	r15
    8b66:	ef 90       	pop	r14
    8b68:	df 90       	pop	r13
    8b6a:	cf 90       	pop	r12
    8b6c:	08 95       	ret

00008b6e <handle_shout>:

void handle_shout(char* command_args){
    8b6e:	fc 01       	movw	r30, r24
	if(strlen(command_args)==0){
    8b70:	80 81       	ld	r24, Z
    8b72:	88 23       	and	r24, r24
    8b74:	e1 f0       	breq	.+56     	; 0x8bae <handle_shout+0x40>
		command_args = "Unique New York.";
	}else if(strlen(command_args)>IR_BUFFER_SIZE){ 
    8b76:	df 01       	movw	r26, r30
    8b78:	0d 90       	ld	r0, X+
    8b7a:	00 20       	and	r0, r0
    8b7c:	e9 f7       	brne	.-6      	; 0x8b78 <handle_shout+0xa>
    8b7e:	11 97       	sbiw	r26, 0x01	; 1
    8b80:	ae 1b       	sub	r26, r30
    8b82:	bf 0b       	sbc	r27, r31
    8b84:	a9 32       	cpi	r26, 0x29	; 41
    8b86:	b1 05       	cpc	r27, r1
    8b88:	a0 f0       	brcs	.+40     	; 0x8bb2 <handle_shout+0x44>
		printf_P(PSTR("Message length was %d chars, which exceeds the maximum of %d"), strlen(command_args), IR_BUFFER_SIZE);
    8b8a:	1f 92       	push	r1
    8b8c:	88 e2       	ldi	r24, 0x28	; 40
    8b8e:	8f 93       	push	r24
    8b90:	bf 93       	push	r27
    8b92:	af 93       	push	r26
    8b94:	88 e1       	ldi	r24, 0x18	; 24
    8b96:	9b e0       	ldi	r25, 0x0B	; 11
    8b98:	9f 93       	push	r25
    8b9a:	8f 93       	push	r24
    8b9c:	0e 94 f7 56 	call	0xadee	; 0xadee <printf_P>
		return;
    8ba0:	0f 90       	pop	r0
    8ba2:	0f 90       	pop	r0
    8ba4:	0f 90       	pop	r0
    8ba6:	0f 90       	pop	r0
    8ba8:	0f 90       	pop	r0
    8baa:	0f 90       	pop	r0
    8bac:	08 95       	ret
	ir_targeted_cmd(ALL_DIRS, cmdString,strlen(cmdString), target);
}

void handle_shout(char* command_args){
	if(strlen(command_args)==0){
		command_args = "Unique New York.";
    8bae:	ec ea       	ldi	r30, 0xAC	; 172
    8bb0:	f3 e2       	ldi	r31, 0x23	; 35
	}else if(strlen(command_args)>IR_BUFFER_SIZE){ 
		printf_P(PSTR("Message length was %d chars, which exceeds the maximum of %d"), strlen(command_args), IR_BUFFER_SIZE);
		return;
	}
	ir_send(ALL_DIRS, command_args,strlen(command_args));
    8bb2:	df 01       	movw	r26, r30
    8bb4:	0d 90       	ld	r0, X+
    8bb6:	00 20       	and	r0, r0
    8bb8:	e9 f7       	brne	.-6      	; 0x8bb4 <handle_shout+0x46>
    8bba:	11 97       	sbiw	r26, 0x01	; 1
    8bbc:	ad 01       	movw	r20, r26
    8bbe:	4e 1b       	sub	r20, r30
    8bc0:	5f 0b       	sbc	r21, r31
    8bc2:	bf 01       	movw	r22, r30
    8bc4:	8f e3       	ldi	r24, 0x3F	; 63
    8bc6:	0e 94 80 19 	call	0x3300	; 0x3300 <ir_send>
    8bca:	08 95       	ret

00008bcc <handle_msg_test>:
}

void handle_msg_test(char* command_args){
    8bcc:	cf 93       	push	r28
    8bce:	df 93       	push	r29
    8bd0:	cd b7       	in	r28, 0x3d	; 61
    8bd2:	de b7       	in	r29, 0x3e	; 62
    8bd4:	60 97       	sbiw	r28, 0x10	; 16
    8bd6:	cd bf       	out	0x3d, r28	; 61
    8bd8:	de bf       	out	0x3e, r29	; 62
	uint8_t dir_mask = atoi(command_args);
    8bda:	0e 94 23 55 	call	0xaa46	; 0xaa46 <atoi>
	char msg[16] = "Unique New York.";
    8bde:	90 e1       	ldi	r25, 0x10	; 16
    8be0:	ec ea       	ldi	r30, 0xAC	; 172
    8be2:	f3 e2       	ldi	r31, 0x23	; 35
    8be4:	de 01       	movw	r26, r28
    8be6:	11 96       	adiw	r26, 0x01	; 1
    8be8:	01 90       	ld	r0, Z+
    8bea:	0d 92       	st	X+, r0
    8bec:	9a 95       	dec	r25
    8bee:	e1 f7       	brne	.-8      	; 0x8be8 <handle_msg_test+0x1c>
	
	ir_send(dir_mask, msg,16);
    8bf0:	40 e1       	ldi	r20, 0x10	; 16
    8bf2:	be 01       	movw	r22, r28
    8bf4:	6f 5f       	subi	r22, 0xFF	; 255
    8bf6:	7f 4f       	sbci	r23, 0xFF	; 255
    8bf8:	0e 94 80 19 	call	0x3300	; 0x3300 <ir_send>
}
    8bfc:	60 96       	adiw	r28, 0x10	; 16
    8bfe:	cd bf       	out	0x3d, r28	; 61
    8c00:	de bf       	out	0x3e, r29	; 62
    8c02:	df 91       	pop	r29
    8c04:	cf 91       	pop	r28
    8c06:	08 95       	ret

00008c08 <handle_target>:

void handle_target(char* command_args){
    8c08:	ef 92       	push	r14
    8c0a:	ff 92       	push	r15
    8c0c:	0f 93       	push	r16
    8c0e:	1f 93       	push	r17
    8c10:	cf 93       	push	r28
    8c12:	df 93       	push	r29
    8c14:	cd b7       	in	r28, 0x3d	; 61
    8c16:	de b7       	in	r29, 0x3e	; 62
    8c18:	a5 97       	sbiw	r28, 0x25	; 37
    8c1a:	cd bf       	out	0x3d, r28	; 61
    8c1c:	de bf       	out	0x3e, r29	; 62
    8c1e:	7c 01       	movw	r14, r24
	uint8_t loc = strcspn(command_args, " ");
    8c20:	6a e6       	ldi	r22, 0x6A	; 106
    8c22:	72 e2       	ldi	r23, 0x22	; 34
    8c24:	0e 94 53 56 	call	0xaca6	; 0xaca6 <strcspn>
	char targetString[5];
	char msgString[32];
	
	strncpy(targetString, command_args, loc);
    8c28:	8c 01       	movw	r16, r24
    8c2a:	11 27       	eor	r17, r17
    8c2c:	a8 01       	movw	r20, r16
    8c2e:	b7 01       	movw	r22, r14
    8c30:	ce 01       	movw	r24, r28
    8c32:	01 96       	adiw	r24, 0x01	; 1
    8c34:	0e 94 62 56 	call	0xacc4	; 0xacc4 <strncpy>
	strcpy(msgString, command_args+loc);
    8c38:	b7 01       	movw	r22, r14
    8c3a:	60 0f       	add	r22, r16
    8c3c:	71 1f       	adc	r23, r17
    8c3e:	7e 01       	movw	r14, r28
    8c40:	86 e0       	ldi	r24, 0x06	; 6
    8c42:	e8 0e       	add	r14, r24
    8c44:	f1 1c       	adc	r15, r1
    8c46:	c7 01       	movw	r24, r14
    8c48:	0e 94 4c 56 	call	0xac98	; 0xac98 <strcpy>
	
	
	uint16_t target = strtoul(targetString, NULL, 16);
    8c4c:	40 e1       	ldi	r20, 0x10	; 16
    8c4e:	50 e0       	ldi	r21, 0x00	; 0
    8c50:	60 e0       	ldi	r22, 0x00	; 0
    8c52:	70 e0       	ldi	r23, 0x00	; 0
    8c54:	ce 01       	movw	r24, r28
    8c56:	01 96       	adiw	r24, 0x01	; 1
    8c58:	0e 94 ef 53 	call	0xa7de	; 0xa7de <strtoul>
	
	//printf("Target: %04X\r\n",target);
	ir_targeted_send(ALL_DIRS, msgString,strlen(msgString), target);
    8c5c:	f7 01       	movw	r30, r14
    8c5e:	01 90       	ld	r0, Z+
    8c60:	00 20       	and	r0, r0
    8c62:	e9 f7       	brne	.-6      	; 0x8c5e <handle_target+0x56>
    8c64:	31 97       	sbiw	r30, 0x01	; 1
    8c66:	af 01       	movw	r20, r30
    8c68:	4e 19       	sub	r20, r14
    8c6a:	5f 09       	sbc	r21, r15
    8c6c:	9b 01       	movw	r18, r22
    8c6e:	b7 01       	movw	r22, r14
    8c70:	8f e3       	ldi	r24, 0x3F	; 63
    8c72:	0e 94 00 19 	call	0x3200	; 0x3200 <ir_targeted_send>
} 
    8c76:	a5 96       	adiw	r28, 0x25	; 37
    8c78:	cd bf       	out	0x3d, r28	; 61
    8c7a:	de bf       	out	0x3e, r29	; 62
    8c7c:	df 91       	pop	r29
    8c7e:	cf 91       	pop	r28
    8c80:	1f 91       	pop	r17
    8c82:	0f 91       	pop	r16
    8c84:	ff 90       	pop	r15
    8c86:	ef 90       	pop	r14
    8c88:	08 95       	ret

00008c8a <get_command_word_and_args>:


void get_command_word_and_args(char* command, uint16_t command_length, char* command_word, char* command_args){
    8c8a:	cf 93       	push	r28
    8c8c:	df 93       	push	r29
    8c8e:	fc 01       	movw	r30, r24
	//printf("\tIn gcwaa.\r\n");
	uint16_t write_index = 0;
	uint8_t writing_word_boole = 1;
	for(uint16_t i=0 ; i<command_length ; i++){
    8c90:	61 15       	cp	r22, r1
    8c92:	71 05       	cpc	r23, r1
    8c94:	71 f1       	breq	.+92     	; 0x8cf2 <get_command_word_and_args+0x68>
		if(command[i]=='\0'){
    8c96:	90 81       	ld	r25, Z
    8c98:	99 23       	and	r25, r25
    8c9a:	71 f1       	breq	.+92     	; 0x8cf8 <get_command_word_and_args+0x6e>
    8c9c:	df 01       	movw	r26, r30
    8c9e:	11 96       	adiw	r26, 0x01	; 1
    8ca0:	6e 0f       	add	r22, r30
    8ca2:	7f 1f       	adc	r23, r31
    8ca4:	81 e0       	ldi	r24, 0x01	; 1
    8ca6:	e0 e0       	ldi	r30, 0x00	; 0
    8ca8:	f0 e0       	ldi	r31, 0x00	; 0
    8caa:	03 c0       	rjmp	.+6      	; 0x8cb2 <get_command_word_and_args+0x28>
    8cac:	9d 91       	ld	r25, X+
    8cae:	99 23       	and	r25, r25
    8cb0:	e1 f0       	breq	.+56     	; 0x8cea <get_command_word_and_args+0x60>
			break;
		}else if(command[i]==' ' && writing_word_boole == 1){
    8cb2:	90 32       	cpi	r25, 0x20	; 32
    8cb4:	49 f4       	brne	.+18     	; 0x8cc8 <get_command_word_and_args+0x3e>
    8cb6:	81 30       	cpi	r24, 0x01	; 1
    8cb8:	71 f4       	brne	.+28     	; 0x8cd6 <get_command_word_and_args+0x4c>
			command_word[write_index]='\0';
    8cba:	e4 0f       	add	r30, r20
    8cbc:	f5 1f       	adc	r31, r21
    8cbe:	10 82       	st	Z, r1
			write_index = 0;
			writing_word_boole = 0;
    8cc0:	80 e0       	ldi	r24, 0x00	; 0
	for(uint16_t i=0 ; i<command_length ; i++){
		if(command[i]=='\0'){
			break;
		}else if(command[i]==' ' && writing_word_boole == 1){
			command_word[write_index]='\0';
			write_index = 0;
    8cc2:	e0 e0       	ldi	r30, 0x00	; 0
    8cc4:	f0 e0       	ldi	r31, 0x00	; 0
			writing_word_boole = 0;
    8cc6:	0c c0       	rjmp	.+24     	; 0x8ce0 <get_command_word_and_args+0x56>
		}else{
			if(writing_word_boole==1){
    8cc8:	81 30       	cpi	r24, 0x01	; 1
    8cca:	29 f4       	brne	.+10     	; 0x8cd6 <get_command_word_and_args+0x4c>
				command_word[write_index] = command[i];
    8ccc:	ea 01       	movw	r28, r20
    8cce:	ce 0f       	add	r28, r30
    8cd0:	df 1f       	adc	r29, r31
    8cd2:	98 83       	st	Y, r25
    8cd4:	04 c0       	rjmp	.+8      	; 0x8cde <get_command_word_and_args+0x54>
			}else{
				command_args[write_index] = command[i];
    8cd6:	e9 01       	movw	r28, r18
    8cd8:	ce 0f       	add	r28, r30
    8cda:	df 1f       	adc	r29, r31
    8cdc:	98 83       	st	Y, r25
			}
			write_index++;
    8cde:	31 96       	adiw	r30, 0x01	; 1

void get_command_word_and_args(char* command, uint16_t command_length, char* command_word, char* command_args){
	//printf("\tIn gcwaa.\r\n");
	uint16_t write_index = 0;
	uint8_t writing_word_boole = 1;
	for(uint16_t i=0 ; i<command_length ; i++){
    8ce0:	a6 17       	cp	r26, r22
    8ce2:	b7 07       	cpc	r27, r23
    8ce4:	19 f7       	brne	.-58     	; 0x8cac <get_command_word_and_args+0x22>
    8ce6:	bf 01       	movw	r22, r30
    8ce8:	01 c0       	rjmp	.+2      	; 0x8cec <get_command_word_and_args+0x62>
    8cea:	bf 01       	movw	r22, r30
				command_args[write_index] = command[i];
			}
			write_index++;
		}
	}
	if(writing_word_boole==1){
    8cec:	81 30       	cpi	r24, 0x01	; 1
    8cee:	61 f4       	brne	.+24     	; 0x8d08 <get_command_word_and_args+0x7e>
    8cf0:	05 c0       	rjmp	.+10     	; 0x8cfc <get_command_word_and_args+0x72>

void get_command_word_and_args(char* command, uint16_t command_length, char* command_word, char* command_args){
	//printf("\tIn gcwaa.\r\n");
	uint16_t write_index = 0;
	uint8_t writing_word_boole = 1;
	for(uint16_t i=0 ; i<command_length ; i++){
    8cf2:	e0 e0       	ldi	r30, 0x00	; 0
    8cf4:	f0 e0       	ldi	r31, 0x00	; 0
    8cf6:	02 c0       	rjmp	.+4      	; 0x8cfc <get_command_word_and_args+0x72>
		if(command[i]=='\0'){
    8cf8:	e0 e0       	ldi	r30, 0x00	; 0
    8cfa:	f0 e0       	ldi	r31, 0x00	; 0
			}
			write_index++;
		}
	}
	if(writing_word_boole==1){
		command_word[write_index] = '\0';
    8cfc:	e4 0f       	add	r30, r20
    8cfe:	f5 1f       	adc	r31, r21
    8d00:	10 82       	st	Z, r1
		command_args[0] = '\0';
    8d02:	f9 01       	movw	r30, r18
    8d04:	10 82       	st	Z, r1
    8d06:	04 c0       	rjmp	.+8      	; 0x8d10 <get_command_word_and_args+0x86>
	}else{
		command_args[write_index] = '\0';
    8d08:	f9 01       	movw	r30, r18
    8d0a:	e6 0f       	add	r30, r22
    8d0c:	f7 1f       	adc	r31, r23
    8d0e:	10 82       	st	Z, r1
	}
}
    8d10:	df 91       	pop	r29
    8d12:	cf 91       	pop	r28
    8d14:	08 95       	ret

00008d16 <handle_serial_command>:

uint8_t user_handle_command(char* command_word, char* command_args) __attribute__((weak));
uint8_t user_handle_command_wrapper(char* command_word, char* command_args) __attribute__((section(".WRAPPERFUNCS")));
uint8_t calculate_page_number(uint16_t addressFrmProgramming);

void handle_serial_command(char* command, uint16_t command_length){
    8d16:	af 92       	push	r10
    8d18:	bf 92       	push	r11
    8d1a:	df 92       	push	r13
    8d1c:	ef 92       	push	r14
    8d1e:	ff 92       	push	r15
    8d20:	0f 93       	push	r16
    8d22:	1f 93       	push	r17
    8d24:	cf 93       	push	r28
    8d26:	df 93       	push	r29
    8d28:	cd b7       	in	r28, 0x3d	; 61
    8d2a:	de b7       	in	r29, 0x3e	; 62
    8d2c:	c0 58       	subi	r28, 0x80	; 128
    8d2e:	d1 09       	sbc	r29, r1
    8d30:	cd bf       	out	0x3d, r28	; 61
    8d32:	de bf       	out	0x3e, r29	; 62
	if(command[0]!='\0'){ //Not much to handle if we get an empty string.
    8d34:	fc 01       	movw	r30, r24
    8d36:	20 81       	ld	r18, Z
    8d38:	22 23       	and	r18, r18
    8d3a:	09 f4       	brne	.+2      	; 0x8d3e <handle_serial_command+0x28>
    8d3c:	0e c2       	rjmp	.+1052   	; 0x915a <handle_serial_command+0x444>
		char command_word[BUFFER_SIZE];
		char command_args[BUFFER_SIZE];
		get_command_word_and_args(command,command_length,command_word,command_args);
    8d3e:	9e 01       	movw	r18, r28
    8d40:	2f 5f       	subi	r18, 0xFF	; 255
    8d42:	3f 4f       	sbci	r19, 0xFF	; 255
    8d44:	ae 01       	movw	r20, r28
    8d46:	4f 5b       	subi	r20, 0xBF	; 191
    8d48:	5f 4f       	sbci	r21, 0xFF	; 255
    8d4a:	0e 94 45 46 	call	0x8c8a	; 0x8c8a <get_command_word_and_args>
			 if(strcmp_P(command_word,PSTR("move_steps"))==0)			handle_move_steps(command_args);
    8d4e:	6d ec       	ldi	r22, 0xCD	; 205
    8d50:	7f e0       	ldi	r23, 0x0F	; 15
    8d52:	ce 01       	movw	r24, r28
    8d54:	8f 5b       	subi	r24, 0xBF	; 191
    8d56:	9f 4f       	sbci	r25, 0xFF	; 255
    8d58:	0e 94 22 56 	call	0xac44	; 0xac44 <strcmp_P>
    8d5c:	89 2b       	or	r24, r25
    8d5e:	29 f4       	brne	.+10     	; 0x8d6a <handle_serial_command+0x54>
    8d60:	ce 01       	movw	r24, r28
    8d62:	01 96       	adiw	r24, 0x01	; 1
    8d64:	0e 94 74 41 	call	0x82e8	; 0x82e8 <handle_move_steps>
    8d68:	f8 c1       	rjmp	.+1008   	; 0x915a <handle_serial_command+0x444>
		else if(strcmp_P(command_word,PSTR("walk"))==0)					handle_walk(command_args);
    8d6a:	68 ec       	ldi	r22, 0xC8	; 200
    8d6c:	7f e0       	ldi	r23, 0x0F	; 15
    8d6e:	ce 01       	movw	r24, r28
    8d70:	8f 5b       	subi	r24, 0xBF	; 191
    8d72:	9f 4f       	sbci	r25, 0xFF	; 255
    8d74:	0e 94 22 56 	call	0xac44	; 0xac44 <strcmp_P>
    8d78:	89 2b       	or	r24, r25
    8d7a:	29 f4       	brne	.+10     	; 0x8d86 <handle_serial_command+0x70>
    8d7c:	ce 01       	movw	r24, r28
    8d7e:	01 96       	adiw	r24, 0x01	; 1
    8d80:	0e 94 b2 41 	call	0x8364	; 0x8364 <handle_walk>
    8d84:	ea c1       	rjmp	.+980    	; 0x915a <handle_serial_command+0x444>
		else if(strcmp_P(command_word,PSTR("get_rgb"))==0)				handle_get_rgb();
    8d86:	60 ec       	ldi	r22, 0xC0	; 192
    8d88:	7f e0       	ldi	r23, 0x0F	; 15
    8d8a:	ce 01       	movw	r24, r28
    8d8c:	8f 5b       	subi	r24, 0xBF	; 191
    8d8e:	9f 4f       	sbci	r25, 0xFF	; 255
    8d90:	0e 94 22 56 	call	0xac44	; 0xac44 <strcmp_P>
    8d94:	89 2b       	or	r24, r25
    8d96:	19 f4       	brne	.+6      	; 0x8d9e <handle_serial_command+0x88>
    8d98:	0e 94 d8 41 	call	0x83b0	; 0x83b0 <handle_get_rgb>
    8d9c:	de c1       	rjmp	.+956    	; 0x915a <handle_serial_command+0x444>
		else if(strcmp_P(command_word,PSTR("set_ir"))==0)				handle_set_ir(command_args);
    8d9e:	69 eb       	ldi	r22, 0xB9	; 185
    8da0:	7f e0       	ldi	r23, 0x0F	; 15
    8da2:	ce 01       	movw	r24, r28
    8da4:	8f 5b       	subi	r24, 0xBF	; 191
    8da6:	9f 4f       	sbci	r25, 0xFF	; 255
    8da8:	0e 94 22 56 	call	0xac44	; 0xac44 <strcmp_P>
    8dac:	89 2b       	or	r24, r25
    8dae:	29 f4       	brne	.+10     	; 0x8dba <handle_serial_command+0xa4>
    8db0:	ce 01       	movw	r24, r28
    8db2:	01 96       	adiw	r24, 0x01	; 1
    8db4:	0e 94 02 42 	call	0x8404	; 0x8404 <handle_set_ir>
    8db8:	d0 c1       	rjmp	.+928    	; 0x915a <handle_serial_command+0x444>
		else if(strcmp_P(command_word,PSTR("coll"))==0)					handle_check_collisions();
    8dba:	64 eb       	ldi	r22, 0xB4	; 180
    8dbc:	7f e0       	ldi	r23, 0x0F	; 15
    8dbe:	ce 01       	movw	r24, r28
    8dc0:	8f 5b       	subi	r24, 0xBF	; 191
    8dc2:	9f 4f       	sbci	r25, 0xFF	; 255
    8dc4:	0e 94 22 56 	call	0xac44	; 0xac44 <strcmp_P>
    8dc8:	89 2b       	or	r24, r25
    8dca:	19 f4       	brne	.+6      	; 0x8dd2 <handle_serial_command+0xbc>
    8dcc:	0e 94 34 41 	call	0x8268	; 0x8268 <handle_check_collisions>
    8dd0:	c4 c1       	rjmp	.+904    	; 0x915a <handle_serial_command+0x444>
		else if(strcmp_P(command_word,PSTR("stop_walk"))==0)			handle_stop_walk();
    8dd2:	6a ea       	ldi	r22, 0xAA	; 170
    8dd4:	7f e0       	ldi	r23, 0x0F	; 15
    8dd6:	ce 01       	movw	r24, r28
    8dd8:	8f 5b       	subi	r24, 0xBF	; 191
    8dda:	9f 4f       	sbci	r25, 0xFF	; 255
    8ddc:	0e 94 22 56 	call	0xac44	; 0xac44 <strcmp_P>
    8de0:	89 2b       	or	r24, r25
    8de2:	19 f4       	brne	.+6      	; 0x8dea <handle_serial_command+0xd4>
    8de4:	0e 94 21 42 	call	0x8442	; 0x8442 <handle_stop_walk>
    8de8:	b8 c1       	rjmp	.+880    	; 0x915a <handle_serial_command+0x444>
		else if(strcmp_P(command_word,PSTR("set_motors"))==0)			handle_set_motors(command_args);
    8dea:	6f e9       	ldi	r22, 0x9F	; 159
    8dec:	7f e0       	ldi	r23, 0x0F	; 15
    8dee:	ce 01       	movw	r24, r28
    8df0:	8f 5b       	subi	r24, 0xBF	; 191
    8df2:	9f 4f       	sbci	r25, 0xFF	; 255
    8df4:	0e 94 22 56 	call	0xac44	; 0xac44 <strcmp_P>
    8df8:	89 2b       	or	r24, r25
    8dfa:	29 f4       	brne	.+10     	; 0x8e06 <handle_serial_command+0xf0>
    8dfc:	ce 01       	movw	r24, r28
    8dfe:	01 96       	adiw	r24, 0x01	; 1
    8e00:	0e 94 26 42 	call	0x844c	; 0x844c <handle_set_motors>
    8e04:	aa c1       	rjmp	.+852    	; 0x915a <handle_serial_command+0x444>
		else if(strcmp_P(command_word,PSTR("adj_motors"))==0)			handle_adjust_motors(command_args);
    8e06:	64 e9       	ldi	r22, 0x94	; 148
    8e08:	7f e0       	ldi	r23, 0x0F	; 15
    8e0a:	ce 01       	movw	r24, r28
    8e0c:	8f 5b       	subi	r24, 0xBF	; 191
    8e0e:	9f 4f       	sbci	r25, 0xFF	; 255
    8e10:	0e 94 22 56 	call	0xac44	; 0xac44 <strcmp_P>
    8e14:	89 2b       	or	r24, r25
    8e16:	29 f4       	brne	.+10     	; 0x8e22 <handle_serial_command+0x10c>
    8e18:	ce 01       	movw	r24, r28
    8e1a:	01 96       	adiw	r24, 0x01	; 1
    8e1c:	0e 94 f0 42 	call	0x85e0	; 0x85e0 <handle_adjust_motors>
    8e20:	9c c1       	rjmp	.+824    	; 0x915a <handle_serial_command+0x444>
		else if(strcmp_P(command_word,PSTR("set_dist_per_step"))==0)	handle_set_mm_per_kilostep(command_args);
    8e22:	62 e8       	ldi	r22, 0x82	; 130
    8e24:	7f e0       	ldi	r23, 0x0F	; 15
    8e26:	ce 01       	movw	r24, r28
    8e28:	8f 5b       	subi	r24, 0xBF	; 191
    8e2a:	9f 4f       	sbci	r25, 0xFF	; 255
    8e2c:	0e 94 22 56 	call	0xac44	; 0xac44 <strcmp_P>
    8e30:	89 2b       	or	r24, r25
    8e32:	29 f4       	brne	.+10     	; 0x8e3e <handle_serial_command+0x128>
    8e34:	ce 01       	movw	r24, r28
    8e36:	01 96       	adiw	r24, 0x01	; 1
    8e38:	0e 94 26 44 	call	0x884c	; 0x884c <handle_set_mm_per_kilostep>
    8e3c:	8e c1       	rjmp	.+796    	; 0x915a <handle_serial_command+0x444>
		else if(strcmp_P(command_word,PSTR("rnb_b"))==0)				handle_rnb_broadcast();
    8e3e:	6c e7       	ldi	r22, 0x7C	; 124
    8e40:	7f e0       	ldi	r23, 0x0F	; 15
    8e42:	ce 01       	movw	r24, r28
    8e44:	8f 5b       	subi	r24, 0xBF	; 191
    8e46:	9f 4f       	sbci	r25, 0xFF	; 255
    8e48:	0e 94 22 56 	call	0xac44	; 0xac44 <strcmp_P>
    8e4c:	89 2b       	or	r24, r25
    8e4e:	19 f4       	brne	.+6      	; 0x8e56 <handle_serial_command+0x140>
    8e50:	0e 94 4c 44 	call	0x8898	; 0x8898 <handle_rnb_broadcast>
    8e54:	82 c1       	rjmp	.+772    	; 0x915a <handle_serial_command+0x444>
		else if(strcmp_P(command_word,PSTR("set_led"))==0)				handle_set_led(command_args);
    8e56:	64 e7       	ldi	r22, 0x74	; 116
    8e58:	7f e0       	ldi	r23, 0x0F	; 15
    8e5a:	ce 01       	movw	r24, r28
    8e5c:	8f 5b       	subi	r24, 0xBF	; 191
    8e5e:	9f 4f       	sbci	r25, 0xFF	; 255
    8e60:	0e 94 22 56 	call	0xac44	; 0xac44 <strcmp_P>
    8e64:	89 2b       	or	r24, r25
    8e66:	29 f4       	brne	.+10     	; 0x8e72 <handle_serial_command+0x15c>
    8e68:	ce 01       	movw	r24, r28
    8e6a:	01 96       	adiw	r24, 0x01	; 1
    8e6c:	0e 94 57 44 	call	0x88ae	; 0x88ae <handle_set_led>
    8e70:	74 c1       	rjmp	.+744    	; 0x915a <handle_serial_command+0x444>
		else if(strcmp_P(command_word,PSTR("get_id"))==0)				handle_get_id();
    8e72:	6d e6       	ldi	r22, 0x6D	; 109
    8e74:	7f e0       	ldi	r23, 0x0F	; 15
    8e76:	ce 01       	movw	r24, r28
    8e78:	8f 5b       	subi	r24, 0xBF	; 191
    8e7a:	9f 4f       	sbci	r25, 0xFF	; 255
    8e7c:	0e 94 22 56 	call	0xac44	; 0xac44 <strcmp_P>
    8e80:	89 2b       	or	r24, r25
    8e82:	19 f4       	brne	.+6      	; 0x8e8a <handle_serial_command+0x174>
    8e84:	0e 94 18 45 	call	0x8a30	; 0x8a30 <handle_get_id>
    8e88:	68 c1       	rjmp	.+720    	; 0x915a <handle_serial_command+0x444>
		else if(strcmp_P(command_word,PSTR("broadcast_id"))==0)			handle_broadcast_id();
    8e8a:	60 e6       	ldi	r22, 0x60	; 96
    8e8c:	7f e0       	ldi	r23, 0x0F	; 15
    8e8e:	ce 01       	movw	r24, r28
    8e90:	8f 5b       	subi	r24, 0xBF	; 191
    8e92:	9f 4f       	sbci	r25, 0xFF	; 255
    8e94:	0e 94 22 56 	call	0xac44	; 0xac44 <strcmp_P>
    8e98:	89 2b       	or	r24, r25
    8e9a:	19 f4       	brne	.+6      	; 0x8ea2 <handle_serial_command+0x18c>
    8e9c:	0e 94 0d 45 	call	0x8a1a	; 0x8a1a <handle_broadcast_id>
    8ea0:	5c c1       	rjmp	.+696    	; 0x915a <handle_serial_command+0x444>
		else if(strcmp_P(command_word,PSTR("cmd"))==0)					handle_cmd(command_args);
    8ea2:	6c e5       	ldi	r22, 0x5C	; 92
    8ea4:	7f e0       	ldi	r23, 0x0F	; 15
    8ea6:	ce 01       	movw	r24, r28
    8ea8:	8f 5b       	subi	r24, 0xBF	; 191
    8eaa:	9f 4f       	sbci	r25, 0xFF	; 255
    8eac:	0e 94 22 56 	call	0xac44	; 0xac44 <strcmp_P>
    8eb0:	89 2b       	or	r24, r25
    8eb2:	29 f4       	brne	.+10     	; 0x8ebe <handle_serial_command+0x1a8>
    8eb4:	ce 01       	movw	r24, r28
    8eb6:	01 96       	adiw	r24, 0x01	; 1
    8eb8:	0e 94 29 45 	call	0x8a52	; 0x8a52 <handle_cmd>
    8ebc:	4e c1       	rjmp	.+668    	; 0x915a <handle_serial_command+0x444>
		else if(strcmp_P(command_word,PSTR("tgt_cmd"))==0)				handle_targeted_cmd(command_args);
    8ebe:	64 e5       	ldi	r22, 0x54	; 84
    8ec0:	7f e0       	ldi	r23, 0x0F	; 15
    8ec2:	ce 01       	movw	r24, r28
    8ec4:	8f 5b       	subi	r24, 0xBF	; 191
    8ec6:	9f 4f       	sbci	r25, 0xFF	; 255
    8ec8:	0e 94 22 56 	call	0xac44	; 0xac44 <strcmp_P>
    8ecc:	89 2b       	or	r24, r25
    8ece:	29 f4       	brne	.+10     	; 0x8eda <handle_serial_command+0x1c4>
    8ed0:	ce 01       	movw	r24, r28
    8ed2:	01 96       	adiw	r24, 0x01	; 1
    8ed4:	0e 94 58 45 	call	0x8ab0	; 0x8ab0 <handle_targeted_cmd>
    8ed8:	40 c1       	rjmp	.+640    	; 0x915a <handle_serial_command+0x444>
		else if(strcmp_P(command_word,PSTR("msg"))==0)					handle_shout(command_args);
    8eda:	60 e5       	ldi	r22, 0x50	; 80
    8edc:	7f e0       	ldi	r23, 0x0F	; 15
    8ede:	ce 01       	movw	r24, r28
    8ee0:	8f 5b       	subi	r24, 0xBF	; 191
    8ee2:	9f 4f       	sbci	r25, 0xFF	; 255
    8ee4:	0e 94 22 56 	call	0xac44	; 0xac44 <strcmp_P>
    8ee8:	89 2b       	or	r24, r25
    8eea:	29 f4       	brne	.+10     	; 0x8ef6 <handle_serial_command+0x1e0>
    8eec:	ce 01       	movw	r24, r28
    8eee:	01 96       	adiw	r24, 0x01	; 1
    8ef0:	0e 94 b7 45 	call	0x8b6e	; 0x8b6e <handle_shout>
    8ef4:	32 c1       	rjmp	.+612    	; 0x915a <handle_serial_command+0x444>
		else if(strcmp_P(command_word,PSTR("msg_tst"))==0)				handle_msg_test(command_args);
    8ef6:	68 e4       	ldi	r22, 0x48	; 72
    8ef8:	7f e0       	ldi	r23, 0x0F	; 15
    8efa:	ce 01       	movw	r24, r28
    8efc:	8f 5b       	subi	r24, 0xBF	; 191
    8efe:	9f 4f       	sbci	r25, 0xFF	; 255
    8f00:	0e 94 22 56 	call	0xac44	; 0xac44 <strcmp_P>
    8f04:	89 2b       	or	r24, r25
    8f06:	29 f4       	brne	.+10     	; 0x8f12 <handle_serial_command+0x1fc>
    8f08:	ce 01       	movw	r24, r28
    8f0a:	01 96       	adiw	r24, 0x01	; 1
    8f0c:	0e 94 e6 45 	call	0x8bcc	; 0x8bcc <handle_msg_test>
    8f10:	24 c1       	rjmp	.+584    	; 0x915a <handle_serial_command+0x444>
		else if(strcmp_P(command_word,PSTR("tgt"))==0)					handle_target(command_args);
    8f12:	64 e4       	ldi	r22, 0x44	; 68
    8f14:	7f e0       	ldi	r23, 0x0F	; 15
    8f16:	ce 01       	movw	r24, r28
    8f18:	8f 5b       	subi	r24, 0xBF	; 191
    8f1a:	9f 4f       	sbci	r25, 0xFF	; 255
    8f1c:	0e 94 22 56 	call	0xac44	; 0xac44 <strcmp_P>
    8f20:	89 2b       	or	r24, r25
    8f22:	29 f4       	brne	.+10     	; 0x8f2e <handle_serial_command+0x218>
    8f24:	ce 01       	movw	r24, r28
    8f26:	01 96       	adiw	r24, 0x01	; 1
    8f28:	0e 94 04 46 	call	0x8c08	; 0x8c08 <handle_target>
    8f2c:	16 c1       	rjmp	.+556    	; 0x915a <handle_serial_command+0x444>
		else if(strcmp_P(command_word,PSTR("tasks"))==0)				print_task_queue();
    8f2e:	6e e3       	ldi	r22, 0x3E	; 62
    8f30:	7f e0       	ldi	r23, 0x0F	; 15
    8f32:	ce 01       	movw	r24, r28
    8f34:	8f 5b       	subi	r24, 0xBF	; 191
    8f36:	9f 4f       	sbci	r25, 0xFF	; 255
    8f38:	0e 94 22 56 	call	0xac44	; 0xac44 <strcmp_P>
    8f3c:	89 2b       	or	r24, r25
    8f3e:	19 f4       	brne	.+6      	; 0x8f46 <handle_serial_command+0x230>
    8f40:	0e 94 1f 3b 	call	0x763e	; 0x763e <print_task_queue>
    8f44:	0a c1       	rjmp	.+532    	; 0x915a <handle_serial_command+0x444>
		else if(strcmp_P(command_word,PSTR("reset"))==0)				handle_reset();
    8f46:	68 e3       	ldi	r22, 0x38	; 56
    8f48:	7f e0       	ldi	r23, 0x0F	; 15
    8f4a:	ce 01       	movw	r24, r28
    8f4c:	8f 5b       	subi	r24, 0xBF	; 191
    8f4e:	9f 4f       	sbci	r25, 0xFF	; 255
    8f50:	0e 94 22 56 	call	0xac44	; 0xac44 <strcmp_P>
    8f54:	89 2b       	or	r24, r25
    8f56:	19 f4       	brne	.+6      	; 0x8f5e <handle_serial_command+0x248>
		command_args[write_index] = '\0';
	}
}

void handle_reset(){
	droplet_reboot();
    8f58:	0e 94 a7 0b 	call	0x174e	; 0x174e <droplet_reboot>
    8f5c:	fe c0       	rjmp	.+508    	; 0x915a <handle_serial_command+0x444>
		else if(strcmp_P(command_word,PSTR("msg"))==0)					handle_shout(command_args);
		else if(strcmp_P(command_word,PSTR("msg_tst"))==0)				handle_msg_test(command_args);
		else if(strcmp_P(command_word,PSTR("tgt"))==0)					handle_target(command_args);
		else if(strcmp_P(command_word,PSTR("tasks"))==0)				print_task_queue();
		else if(strcmp_P(command_word,PSTR("reset"))==0)				handle_reset();
		else if(strcmp_P(command_word,PSTR("write_motor_settings"))==0)	write_motor_settings();
    8f5e:	63 e2       	ldi	r22, 0x23	; 35
    8f60:	7f e0       	ldi	r23, 0x0F	; 15
    8f62:	ce 01       	movw	r24, r28
    8f64:	8f 5b       	subi	r24, 0xBF	; 191
    8f66:	9f 4f       	sbci	r25, 0xFF	; 255
    8f68:	0e 94 22 56 	call	0xac44	; 0xac44 <strcmp_P>
    8f6c:	89 2b       	or	r24, r25
    8f6e:	19 f4       	brne	.+6      	; 0x8f76 <handle_serial_command+0x260>
    8f70:	0e 94 4e 24 	call	0x489c	; 0x489c <write_motor_settings>
    8f74:	f2 c0       	rjmp	.+484    	; 0x915a <handle_serial_command+0x444>
		else if(strcmp_P(command_word,PSTR("reprog_test"))==0)	schedule_task(5, handle_reprog_test, NULL);
    8f76:	67 e1       	ldi	r22, 0x17	; 23
    8f78:	7f e0       	ldi	r23, 0x0F	; 15
    8f7a:	ce 01       	movw	r24, r28
    8f7c:	8f 5b       	subi	r24, 0xBF	; 191
    8f7e:	9f 4f       	sbci	r25, 0xFF	; 255
    8f80:	0e 94 22 56 	call	0xac44	; 0xac44 <strcmp_P>
    8f84:	89 2b       	or	r24, r25
    8f86:	59 f4       	brne	.+22     	; 0x8f9e <handle_serial_command+0x288>
    8f88:	20 e0       	ldi	r18, 0x00	; 0
    8f8a:	30 e0       	ldi	r19, 0x00	; 0
    8f8c:	49 ec       	ldi	r20, 0xC9	; 201
    8f8e:	50 e4       	ldi	r21, 0x40	; 64
    8f90:	65 e0       	ldi	r22, 0x05	; 5
    8f92:	70 e0       	ldi	r23, 0x00	; 0
    8f94:	80 e0       	ldi	r24, 0x00	; 0
    8f96:	90 e0       	ldi	r25, 0x00	; 0
    8f98:	0e 94 2a 3d 	call	0x7a54	; 0x7a54 <schedule_task>
    8f9c:	de c0       	rjmp	.+444    	; 0x915a <handle_serial_command+0x444>
		else if(strcmp_P(command_word,PSTR("print_motor_settings"))==0){
    8f9e:	62 e0       	ldi	r22, 0x02	; 2
    8fa0:	7f e0       	ldi	r23, 0x0F	; 15
    8fa2:	ce 01       	movw	r24, r28
    8fa4:	8f 5b       	subi	r24, 0xBF	; 191
    8fa6:	9f 4f       	sbci	r25, 0xFF	; 255
    8fa8:	0e 94 22 56 	call	0xac44	; 0xac44 <strcmp_P>
    8fac:	89 2b       	or	r24, r25
    8fae:	29 f4       	brne	.+10     	; 0x8fba <handle_serial_command+0x2a4>
																		print_motor_values();
    8fb0:	0e 94 92 24 	call	0x4924	; 0x4924 <print_motor_values>
																		print_dist_per_step();																	
    8fb4:	0e 94 f3 24 	call	0x49e6	; 0x49e6 <print_dist_per_step>
    8fb8:	d0 c0       	rjmp	.+416    	; 0x915a <handle_serial_command+0x444>
		}
		else if(strcmp_P(command_word,PSTR("r_start"))==0)
    8fba:	6a ef       	ldi	r22, 0xFA	; 250
    8fbc:	7e e0       	ldi	r23, 0x0E	; 14
    8fbe:	ce 01       	movw	r24, r28
    8fc0:	8f 5b       	subi	r24, 0xBF	; 191
    8fc2:	9f 4f       	sbci	r25, 0xFF	; 255
    8fc4:	0e 94 22 56 	call	0xac44	; 0xac44 <strcmp_P>
    8fc8:	89 2b       	or	r24, r25
    8fca:	21 f4       	brne	.+8      	; 0x8fd4 <handle_serial_command+0x2be>
		{
				reprogramming = 1;
    8fcc:	81 e0       	ldi	r24, 0x01	; 1
    8fce:	80 93 9c 24 	sts	0x249C, r24	; 0x80249c <reprogramming>
    8fd2:	c3 c0       	rjmp	.+390    	; 0x915a <handle_serial_command+0x444>
		}
		// changing code here by Rahul Yamasani on 3/14/2017
		else if(strcmp_P(command_word,PSTR("r_end"))==0){
    8fd4:	64 ef       	ldi	r22, 0xF4	; 244
    8fd6:	7e e0       	ldi	r23, 0x0E	; 14
    8fd8:	ce 01       	movw	r24, r28
    8fda:	8f 5b       	subi	r24, 0xBF	; 191
    8fdc:	9f 4f       	sbci	r25, 0xFF	; 255
    8fde:	0e 94 22 56 	call	0xac44	; 0xac44 <strcmp_P>
    8fe2:	89 2b       	or	r24, r25
    8fe4:	09 f0       	breq	.+2      	; 0x8fe8 <handle_serial_command+0x2d2>
    8fe6:	40 c0       	rjmp	.+128    	; 0x9068 <handle_serial_command+0x352>
			reprogramming = 0;
    8fe8:	10 92 9c 24 	sts	0x249C, r1	; 0x80249c <reprogramming>
	}
}

uint8_t calculate_page_number(uint16_t addressFrmProgramming)
{
	return addressFrmProgramming/512;
    8fec:	20 91 3c 2b 	lds	r18, 0x2B3C	; 0x802b3c <storeAddressOfPageStart+0x1>
    8ff0:	82 2f       	mov	r24, r18
    8ff2:	86 95       	lsr	r24
    8ff4:	90 e0       	ldi	r25, 0x00	; 0
    8ff6:	d8 2e       	mov	r13, r24
    8ff8:	99 27       	eor	r25, r25
		}
		// changing code here by Rahul Yamasani on 3/14/2017
		else if(strcmp_P(command_word,PSTR("r_end"))==0){
			reprogramming = 0;
			uint8_t pageNumber = calculate_page_number(storeAddressOfPageStart);
			printf("pageNumber %d\n", pageNumber);
    8ffa:	9f 93       	push	r25
    8ffc:	8f 93       	push	r24
    8ffe:	8d eb       	ldi	r24, 0xBD	; 189
    9000:	93 e2       	ldi	r25, 0x23	; 35
    9002:	9f 93       	push	r25
    9004:	8f 93       	push	r24
    9006:	0e 94 e3 56 	call	0xadc6	; 0xadc6 <printf>
    900a:	08 e5       	ldi	r16, 0x58	; 88
    900c:	1d e2       	ldi	r17, 0x2D	; 45
    900e:	0f 2e       	mov	r0, r31
    9010:	f8 e5       	ldi	r31, 0x58	; 88
    9012:	af 2e       	mov	r10, r31
    9014:	ff e2       	ldi	r31, 0x2F	; 47
    9016:	bf 2e       	mov	r11, r31
    9018:	f0 2d       	mov	r31, r0
    901a:	0f 90       	pop	r0
    901c:	0f 90       	pop	r0
    901e:	0f 90       	pop	r0
    9020:	0f 90       	pop	r0
			
			for(uint16_t i=0;i<FLASH_PAGE_SIZE;i++)
				printf("%02x ", FlashBuffer[i]);
    9022:	0f 2e       	mov	r0, r31
    9024:	fc ec       	ldi	r31, 0xCC	; 204
    9026:	ef 2e       	mov	r14, r31
    9028:	f3 e2       	ldi	r31, 0x23	; 35
    902a:	ff 2e       	mov	r15, r31
    902c:	f0 2d       	mov	r31, r0
    902e:	f8 01       	movw	r30, r16
    9030:	81 91       	ld	r24, Z+
    9032:	8f 01       	movw	r16, r30
    9034:	1f 92       	push	r1
    9036:	8f 93       	push	r24
    9038:	ff 92       	push	r15
    903a:	ef 92       	push	r14
    903c:	0e 94 e3 56 	call	0xadc6	; 0xadc6 <printf>
		else if(strcmp_P(command_word,PSTR("r_end"))==0){
			reprogramming = 0;
			uint8_t pageNumber = calculate_page_number(storeAddressOfPageStart);
			printf("pageNumber %d\n", pageNumber);
			
			for(uint16_t i=0;i<FLASH_PAGE_SIZE;i++)
    9040:	0f 90       	pop	r0
    9042:	0f 90       	pop	r0
    9044:	0f 90       	pop	r0
    9046:	0f 90       	pop	r0
    9048:	0a 15       	cp	r16, r10
    904a:	1b 05       	cpc	r17, r11
    904c:	81 f7       	brne	.-32     	; 0x902e <handle_serial_command+0x318>
				printf("%02x ", FlashBuffer[i]);
			writeRead(FlashBuffer, pageNumber);
    904e:	4d 2d       	mov	r20, r13
    9050:	50 e0       	ldi	r21, 0x00	; 0
    9052:	60 e0       	ldi	r22, 0x00	; 0
    9054:	70 e0       	ldi	r23, 0x00	; 0
    9056:	88 e5       	ldi	r24, 0x58	; 88
    9058:	9d e2       	ldi	r25, 0x2D	; 45
    905a:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <writeRead>
			addCounter = 0;
    905e:	10 92 38 2b 	sts	0x2B38, r1	; 0x802b38 <addCounter>
			//delay_ms(1000);
			droplet_reboot();
    9062:	0e 94 a7 0b 	call	0x174e	; 0x174e <droplet_reboot>
    9066:	79 c0       	rjmp	.+242    	; 0x915a <handle_serial_command+0x444>
		}else if(strcmp_P(command_word,PSTR("reprog_begin"))==0){
    9068:	67 ee       	ldi	r22, 0xE7	; 231
    906a:	7e e0       	ldi	r23, 0x0E	; 14
    906c:	ce 01       	movw	r24, r28
    906e:	8f 5b       	subi	r24, 0xBF	; 191
    9070:	9f 4f       	sbci	r25, 0xFF	; 255
    9072:	0e 94 22 56 	call	0xac44	; 0xac44 <strcmp_P>
    9076:	89 2b       	or	r24, r25
    9078:	59 f4       	brne	.+22     	; 0x9090 <handle_serial_command+0x37a>
			delay_ms(1000);
    907a:	88 ee       	ldi	r24, 0xE8	; 232
    907c:	93 e0       	ldi	r25, 0x03	; 3
    907e:	0e 94 33 3a 	call	0x7466	; 0x7466 <delay_ms>
			ir_cmd(ALL_DIRS, "r_start", 7);
    9082:	47 e0       	ldi	r20, 0x07	; 7
    9084:	62 ed       	ldi	r22, 0xD2	; 210
    9086:	73 e2       	ldi	r23, 0x23	; 35
    9088:	8f e3       	ldi	r24, 0x3F	; 63
    908a:	0e 94 7d 18 	call	0x30fa	; 0x30fa <ir_cmd>
    908e:	65 c0       	rjmp	.+202    	; 0x915a <handle_serial_command+0x444>
		}else if(strcmp_P(command_word,PSTR("reprog_end"))==0){
    9090:	6c ed       	ldi	r22, 0xDC	; 220
    9092:	7e e0       	ldi	r23, 0x0E	; 14
    9094:	ce 01       	movw	r24, r28
    9096:	8f 5b       	subi	r24, 0xBF	; 191
    9098:	9f 4f       	sbci	r25, 0xFF	; 255
    909a:	0e 94 22 56 	call	0xac44	; 0xac44 <strcmp_P>
    909e:	89 2b       	or	r24, r25
    90a0:	99 f4       	brne	.+38     	; 0x90c8 <handle_serial_command+0x3b2>
			delay_ms(1000);
    90a2:	88 ee       	ldi	r24, 0xE8	; 232
    90a4:	93 e0       	ldi	r25, 0x03	; 3
    90a6:	0e 94 33 3a 	call	0x7466	; 0x7466 <delay_ms>
			printf("Coming into this loop\n\r");
    90aa:	8a ed       	ldi	r24, 0xDA	; 218
    90ac:	93 e2       	ldi	r25, 0x23	; 35
    90ae:	9f 93       	push	r25
    90b0:	8f 93       	push	r24
    90b2:	0e 94 e3 56 	call	0xadc6	; 0xadc6 <printf>
			ir_cmd(ALL_DIRS, "r_end", 5);	
    90b6:	45 e0       	ldi	r20, 0x05	; 5
    90b8:	62 ef       	ldi	r22, 0xF2	; 242
    90ba:	73 e2       	ldi	r23, 0x23	; 35
    90bc:	8f e3       	ldi	r24, 0x3F	; 63
    90be:	0e 94 7d 18 	call	0x30fa	; 0x30fa <ir_cmd>
    90c2:	0f 90       	pop	r0
    90c4:	0f 90       	pop	r0
    90c6:	49 c0       	rjmp	.+146    	; 0x915a <handle_serial_command+0x444>
		}else if(command_word[0]=='!' && command_word[1]==0)
    90c8:	22 96       	adiw	r28, 0x02	; 2
    90ca:	8f ad       	ldd	r24, Y+63	; 0x3f
    90cc:	22 97       	sbiw	r28, 0x02	; 2
    90ce:	81 32       	cpi	r24, 0x21	; 33
    90d0:	b9 f4       	brne	.+46     	; 0x9100 <handle_serial_command+0x3ea>
    90d2:	23 96       	adiw	r28, 0x03	; 3
    90d4:	8f ad       	ldd	r24, Y+63	; 0x3f
    90d6:	23 97       	sbiw	r28, 0x03	; 3
    90d8:	81 11       	cpse	r24, r1
    90da:	12 c0       	rjmp	.+36     	; 0x9100 <handle_serial_command+0x3ea>
		{
			strcpy(data_pointer, command_args);
    90dc:	be 01       	movw	r22, r28
    90de:	6f 5f       	subi	r22, 0xFF	; 255
    90e0:	7f 4f       	sbci	r23, 0xFF	; 255
    90e2:	8a e6       	ldi	r24, 0x6A	; 106
    90e4:	9f e2       	ldi	r25, 0x2F	; 47
    90e6:	0e 94 4c 56 	call	0xac98	; 0xac98 <strcpy>
			schedule_task(20, send_code_packet, NULL);
    90ea:	20 e0       	ldi	r18, 0x00	; 0
    90ec:	30 e0       	ldi	r19, 0x00	; 0
    90ee:	41 ec       	ldi	r20, 0xC1	; 193
    90f0:	58 e0       	ldi	r21, 0x08	; 8
    90f2:	64 e1       	ldi	r22, 0x14	; 20
    90f4:	70 e0       	ldi	r23, 0x00	; 0
    90f6:	80 e0       	ldi	r24, 0x00	; 0
    90f8:	90 e0       	ldi	r25, 0x00	; 0
    90fa:	0e 94 2a 3d 	call	0x7a54	; 0x7a54 <schedule_task>
    90fe:	2d c0       	rjmp	.+90     	; 0x915a <handle_serial_command+0x444>
	droplet_reboot();

}

uint8_t user_handle_command_wrapper(char* command_word, char* command_args){
	if(user_handle_command){
    9100:	8b eb       	ldi	r24, 0xBB	; 187
    9102:	98 e4       	ldi	r25, 0x48	; 72
    9104:	89 2b       	or	r24, r25
    9106:	d1 f0       	breq	.+52     	; 0x913c <handle_serial_command+0x426>
		return user_handle_command(command_word, command_args);
    9108:	be 01       	movw	r22, r28
    910a:	6f 5f       	subi	r22, 0xFF	; 255
    910c:	7f 4f       	sbci	r23, 0xFF	; 255
    910e:	ce 01       	movw	r24, r28
    9110:	8f 5b       	subi	r24, 0xBF	; 191
    9112:	9f 4f       	sbci	r25, 0xFF	; 255
    9114:	0e 94 bb 48 	call	0x9176	; 0x9176 <user_handle_command>
		}else if(command_word[0]=='!' && command_word[1]==0)
		{
			strcpy(data_pointer, command_args);
			schedule_task(20, send_code_packet, NULL);
		}
		else if(!user_handle_command_wrapper(command_word, command_args))	printf_P(CMD_NOT_RECOGNIZED_STR,command_word);
    9118:	81 11       	cpse	r24, r1
    911a:	10 c0       	rjmp	.+32     	; 0x913c <handle_serial_command+0x426>
    911c:	ce 01       	movw	r24, r28
    911e:	8f 5b       	subi	r24, 0xBF	; 191
    9120:	9f 4f       	sbci	r25, 0xFF	; 255
    9122:	9f 93       	push	r25
    9124:	8f 93       	push	r24
    9126:	88 ed       	ldi	r24, 0xD8	; 216
    9128:	9f e0       	ldi	r25, 0x0F	; 15
    912a:	9f 93       	push	r25
    912c:	8f 93       	push	r24
    912e:	0e 94 f7 56 	call	0xadee	; 0xadee <printf_P>
    9132:	0f 90       	pop	r0
    9134:	0f 90       	pop	r0
    9136:	0f 90       	pop	r0
    9138:	0f 90       	pop	r0
    913a:	0f c0       	rjmp	.+30     	; 0x915a <handle_serial_command+0x444>
		else														printf_P(CMD_NOT_RECOGNIZED_STR,command_word);
    913c:	ce 01       	movw	r24, r28
    913e:	8f 5b       	subi	r24, 0xBF	; 191
    9140:	9f 4f       	sbci	r25, 0xFF	; 255
    9142:	9f 93       	push	r25
    9144:	8f 93       	push	r24
    9146:	88 ed       	ldi	r24, 0xD8	; 216
    9148:	9f e0       	ldi	r25, 0x0F	; 15
    914a:	9f 93       	push	r25
    914c:	8f 93       	push	r24
    914e:	0e 94 f7 56 	call	0xadee	; 0xadee <printf_P>
    9152:	0f 90       	pop	r0
    9154:	0f 90       	pop	r0
    9156:	0f 90       	pop	r0
    9158:	0f 90       	pop	r0
	}
}
    915a:	c0 58       	subi	r28, 0x80	; 128
    915c:	df 4f       	sbci	r29, 0xFF	; 255
    915e:	cd bf       	out	0x3d, r28	; 61
    9160:	de bf       	out	0x3e, r29	; 62
    9162:	df 91       	pop	r29
    9164:	cf 91       	pop	r28
    9166:	1f 91       	pop	r17
    9168:	0f 91       	pop	r16
    916a:	ff 90       	pop	r15
    916c:	ef 90       	pop	r14
    916e:	df 90       	pop	r13
    9170:	bf 90       	pop	r11
    9172:	af 90       	pop	r10
    9174:	08 95       	ret

00009176 <user_handle_command>:

uint8_t user_handle_command(char* command_word, char* command_args)
{
	
	return 0;	
}
    9176:	80 e0       	ldi	r24, 0x00	; 0
    9178:	08 95       	ret

0000917a <__subsf3>:
    917a:	50 58       	subi	r21, 0x80	; 128

0000917c <__addsf3>:
    917c:	bb 27       	eor	r27, r27
    917e:	aa 27       	eor	r26, r26
    9180:	0e 94 d5 48 	call	0x91aa	; 0x91aa <__addsf3x>
    9184:	0c 94 ac 4b 	jmp	0x9758	; 0x9758 <__fp_round>
    9188:	0e 94 73 4b 	call	0x96e6	; 0x96e6 <__fp_pscA>
    918c:	38 f0       	brcs	.+14     	; 0x919c <__addsf3+0x20>
    918e:	0e 94 7a 4b 	call	0x96f4	; 0x96f4 <__fp_pscB>
    9192:	20 f0       	brcs	.+8      	; 0x919c <__addsf3+0x20>
    9194:	39 f4       	brne	.+14     	; 0x91a4 <__addsf3+0x28>
    9196:	9f 3f       	cpi	r25, 0xFF	; 255
    9198:	19 f4       	brne	.+6      	; 0x91a0 <__addsf3+0x24>
    919a:	26 f4       	brtc	.+8      	; 0x91a4 <__addsf3+0x28>
    919c:	0c 94 49 4b 	jmp	0x9692	; 0x9692 <__fp_nan>
    91a0:	0e f4       	brtc	.+2      	; 0x91a4 <__addsf3+0x28>
    91a2:	e0 95       	com	r30
    91a4:	e7 fb       	bst	r30, 7
    91a6:	0c 94 1a 4b 	jmp	0x9634	; 0x9634 <__fp_inf>

000091aa <__addsf3x>:
    91aa:	e9 2f       	mov	r30, r25
    91ac:	0e 94 d1 4b 	call	0x97a2	; 0x97a2 <__fp_split3>
    91b0:	58 f3       	brcs	.-42     	; 0x9188 <__addsf3+0xc>
    91b2:	ba 17       	cp	r27, r26
    91b4:	62 07       	cpc	r22, r18
    91b6:	73 07       	cpc	r23, r19
    91b8:	84 07       	cpc	r24, r20
    91ba:	95 07       	cpc	r25, r21
    91bc:	20 f0       	brcs	.+8      	; 0x91c6 <__addsf3x+0x1c>
    91be:	79 f4       	brne	.+30     	; 0x91de <__addsf3x+0x34>
    91c0:	a6 f5       	brtc	.+104    	; 0x922a <__addsf3x+0x80>
    91c2:	0c 94 0b 4c 	jmp	0x9816	; 0x9816 <__fp_zero>
    91c6:	0e f4       	brtc	.+2      	; 0x91ca <__addsf3x+0x20>
    91c8:	e0 95       	com	r30
    91ca:	0b 2e       	mov	r0, r27
    91cc:	ba 2f       	mov	r27, r26
    91ce:	a0 2d       	mov	r26, r0
    91d0:	0b 01       	movw	r0, r22
    91d2:	b9 01       	movw	r22, r18
    91d4:	90 01       	movw	r18, r0
    91d6:	0c 01       	movw	r0, r24
    91d8:	ca 01       	movw	r24, r20
    91da:	a0 01       	movw	r20, r0
    91dc:	11 24       	eor	r1, r1
    91de:	ff 27       	eor	r31, r31
    91e0:	59 1b       	sub	r21, r25
    91e2:	99 f0       	breq	.+38     	; 0x920a <__addsf3x+0x60>
    91e4:	59 3f       	cpi	r21, 0xF9	; 249
    91e6:	50 f4       	brcc	.+20     	; 0x91fc <__addsf3x+0x52>
    91e8:	50 3e       	cpi	r21, 0xE0	; 224
    91ea:	68 f1       	brcs	.+90     	; 0x9246 <__addsf3x+0x9c>
    91ec:	1a 16       	cp	r1, r26
    91ee:	f0 40       	sbci	r31, 0x00	; 0
    91f0:	a2 2f       	mov	r26, r18
    91f2:	23 2f       	mov	r18, r19
    91f4:	34 2f       	mov	r19, r20
    91f6:	44 27       	eor	r20, r20
    91f8:	58 5f       	subi	r21, 0xF8	; 248
    91fa:	f3 cf       	rjmp	.-26     	; 0x91e2 <__addsf3x+0x38>
    91fc:	46 95       	lsr	r20
    91fe:	37 95       	ror	r19
    9200:	27 95       	ror	r18
    9202:	a7 95       	ror	r26
    9204:	f0 40       	sbci	r31, 0x00	; 0
    9206:	53 95       	inc	r21
    9208:	c9 f7       	brne	.-14     	; 0x91fc <__addsf3x+0x52>
    920a:	7e f4       	brtc	.+30     	; 0x922a <__addsf3x+0x80>
    920c:	1f 16       	cp	r1, r31
    920e:	ba 0b       	sbc	r27, r26
    9210:	62 0b       	sbc	r22, r18
    9212:	73 0b       	sbc	r23, r19
    9214:	84 0b       	sbc	r24, r20
    9216:	ba f0       	brmi	.+46     	; 0x9246 <__addsf3x+0x9c>
    9218:	91 50       	subi	r25, 0x01	; 1
    921a:	a1 f0       	breq	.+40     	; 0x9244 <__addsf3x+0x9a>
    921c:	ff 0f       	add	r31, r31
    921e:	bb 1f       	adc	r27, r27
    9220:	66 1f       	adc	r22, r22
    9222:	77 1f       	adc	r23, r23
    9224:	88 1f       	adc	r24, r24
    9226:	c2 f7       	brpl	.-16     	; 0x9218 <__addsf3x+0x6e>
    9228:	0e c0       	rjmp	.+28     	; 0x9246 <__addsf3x+0x9c>
    922a:	ba 0f       	add	r27, r26
    922c:	62 1f       	adc	r22, r18
    922e:	73 1f       	adc	r23, r19
    9230:	84 1f       	adc	r24, r20
    9232:	48 f4       	brcc	.+18     	; 0x9246 <__addsf3x+0x9c>
    9234:	87 95       	ror	r24
    9236:	77 95       	ror	r23
    9238:	67 95       	ror	r22
    923a:	b7 95       	ror	r27
    923c:	f7 95       	ror	r31
    923e:	9e 3f       	cpi	r25, 0xFE	; 254
    9240:	08 f0       	brcs	.+2      	; 0x9244 <__addsf3x+0x9a>
    9242:	b0 cf       	rjmp	.-160    	; 0x91a4 <__addsf3+0x28>
    9244:	93 95       	inc	r25
    9246:	88 0f       	add	r24, r24
    9248:	08 f0       	brcs	.+2      	; 0x924c <__addsf3x+0xa2>
    924a:	99 27       	eor	r25, r25
    924c:	ee 0f       	add	r30, r30
    924e:	97 95       	ror	r25
    9250:	87 95       	ror	r24
    9252:	08 95       	ret
    9254:	0e 94 73 4b 	call	0x96e6	; 0x96e6 <__fp_pscA>
    9258:	60 f0       	brcs	.+24     	; 0x9272 <__addsf3x+0xc8>
    925a:	80 e8       	ldi	r24, 0x80	; 128
    925c:	91 e0       	ldi	r25, 0x01	; 1
    925e:	09 f4       	brne	.+2      	; 0x9262 <__addsf3x+0xb8>
    9260:	9e ef       	ldi	r25, 0xFE	; 254
    9262:	0e 94 7a 4b 	call	0x96f4	; 0x96f4 <__fp_pscB>
    9266:	28 f0       	brcs	.+10     	; 0x9272 <__addsf3x+0xc8>
    9268:	40 e8       	ldi	r20, 0x80	; 128
    926a:	51 e0       	ldi	r21, 0x01	; 1
    926c:	71 f4       	brne	.+28     	; 0x928a <atan2+0x10>
    926e:	5e ef       	ldi	r21, 0xFE	; 254
    9270:	0c c0       	rjmp	.+24     	; 0x928a <atan2+0x10>
    9272:	0c 94 49 4b 	jmp	0x9692	; 0x9692 <__fp_nan>
    9276:	0c 94 0b 4c 	jmp	0x9816	; 0x9816 <__fp_zero>

0000927a <atan2>:
    927a:	e9 2f       	mov	r30, r25
    927c:	e0 78       	andi	r30, 0x80	; 128
    927e:	0e 94 d1 4b 	call	0x97a2	; 0x97a2 <__fp_split3>
    9282:	40 f3       	brcs	.-48     	; 0x9254 <__addsf3x+0xaa>
    9284:	09 2e       	mov	r0, r25
    9286:	05 2a       	or	r0, r21
    9288:	b1 f3       	breq	.-20     	; 0x9276 <__addsf3x+0xcc>
    928a:	26 17       	cp	r18, r22
    928c:	37 07       	cpc	r19, r23
    928e:	48 07       	cpc	r20, r24
    9290:	59 07       	cpc	r21, r25
    9292:	38 f0       	brcs	.+14     	; 0x92a2 <atan2+0x28>
    9294:	0e 2e       	mov	r0, r30
    9296:	07 f8       	bld	r0, 7
    9298:	e0 25       	eor	r30, r0
    929a:	69 f0       	breq	.+26     	; 0x92b6 <atan2+0x3c>
    929c:	e0 25       	eor	r30, r0
    929e:	e0 64       	ori	r30, 0x40	; 64
    92a0:	0a c0       	rjmp	.+20     	; 0x92b6 <atan2+0x3c>
    92a2:	ef 63       	ori	r30, 0x3F	; 63
    92a4:	07 f8       	bld	r0, 7
    92a6:	00 94       	com	r0
    92a8:	07 fa       	bst	r0, 7
    92aa:	db 01       	movw	r26, r22
    92ac:	b9 01       	movw	r22, r18
    92ae:	9d 01       	movw	r18, r26
    92b0:	dc 01       	movw	r26, r24
    92b2:	ca 01       	movw	r24, r20
    92b4:	ad 01       	movw	r20, r26
    92b6:	ef 93       	push	r30
    92b8:	0e 94 d4 49 	call	0x93a8	; 0x93a8 <__divsf3_pse>
    92bc:	0e 94 ac 4b 	call	0x9758	; 0x9758 <__fp_round>
    92c0:	0e 94 6d 49 	call	0x92da	; 0x92da <atan>
    92c4:	5f 91       	pop	r21
    92c6:	55 23       	and	r21, r21
    92c8:	39 f0       	breq	.+14     	; 0x92d8 <atan2+0x5e>
    92ca:	2b ed       	ldi	r18, 0xDB	; 219
    92cc:	3f e0       	ldi	r19, 0x0F	; 15
    92ce:	49 e4       	ldi	r20, 0x49	; 73
    92d0:	50 fd       	sbrc	r21, 0
    92d2:	49 ec       	ldi	r20, 0xC9	; 201
    92d4:	0c 94 be 48 	jmp	0x917c	; 0x917c <__addsf3>
    92d8:	08 95       	ret

000092da <atan>:
    92da:	df 93       	push	r29
    92dc:	dd 27       	eor	r29, r29
    92de:	b9 2f       	mov	r27, r25
    92e0:	bf 77       	andi	r27, 0x7F	; 127
    92e2:	40 e8       	ldi	r20, 0x80	; 128
    92e4:	5f e3       	ldi	r21, 0x3F	; 63
    92e6:	16 16       	cp	r1, r22
    92e8:	17 06       	cpc	r1, r23
    92ea:	48 07       	cpc	r20, r24
    92ec:	5b 07       	cpc	r21, r27
    92ee:	18 f4       	brcc	.+6      	; 0x92f6 <atan+0x1c>
    92f0:	d9 2f       	mov	r29, r25
    92f2:	0e 94 84 4c 	call	0x9908	; 0x9908 <inverse>
    92f6:	9f 93       	push	r25
    92f8:	8f 93       	push	r24
    92fa:	7f 93       	push	r23
    92fc:	6f 93       	push	r22
    92fe:	0e 94 d1 4d 	call	0x9ba2	; 0x9ba2 <square>
    9302:	ec e1       	ldi	r30, 0x1C	; 28
    9304:	f2 e0       	ldi	r31, 0x02	; 2
    9306:	0e 94 4c 4b 	call	0x9698	; 0x9698 <__fp_powser>
    930a:	0e 94 ac 4b 	call	0x9758	; 0x9758 <__fp_round>
    930e:	2f 91       	pop	r18
    9310:	3f 91       	pop	r19
    9312:	4f 91       	pop	r20
    9314:	5f 91       	pop	r21
    9316:	0e 94 d9 4c 	call	0x99b2	; 0x99b2 <__mulsf3x>
    931a:	dd 23       	and	r29, r29
    931c:	51 f0       	breq	.+20     	; 0x9332 <atan+0x58>
    931e:	90 58       	subi	r25, 0x80	; 128
    9320:	a2 ea       	ldi	r26, 0xA2	; 162
    9322:	2a ed       	ldi	r18, 0xDA	; 218
    9324:	3f e0       	ldi	r19, 0x0F	; 15
    9326:	49 ec       	ldi	r20, 0xC9	; 201
    9328:	5f e3       	ldi	r21, 0x3F	; 63
    932a:	d0 78       	andi	r29, 0x80	; 128
    932c:	5d 27       	eor	r21, r29
    932e:	0e 94 d5 48 	call	0x91aa	; 0x91aa <__addsf3x>
    9332:	df 91       	pop	r29
    9334:	0c 94 ac 4b 	jmp	0x9758	; 0x9758 <__fp_round>

00009338 <ceil>:
    9338:	0e 94 f3 4b 	call	0x97e6	; 0x97e6 <__fp_trunc>
    933c:	90 f0       	brcs	.+36     	; 0x9362 <ceil+0x2a>
    933e:	9f 37       	cpi	r25, 0x7F	; 127
    9340:	48 f4       	brcc	.+18     	; 0x9354 <ceil+0x1c>
    9342:	91 11       	cpse	r25, r1
    9344:	16 f4       	brtc	.+4      	; 0x934a <ceil+0x12>
    9346:	0c 94 0c 4c 	jmp	0x9818	; 0x9818 <__fp_szero>
    934a:	60 e0       	ldi	r22, 0x00	; 0
    934c:	70 e0       	ldi	r23, 0x00	; 0
    934e:	80 e8       	ldi	r24, 0x80	; 128
    9350:	9f e3       	ldi	r25, 0x3F	; 63
    9352:	08 95       	ret
    9354:	26 f0       	brts	.+8      	; 0x935e <ceil+0x26>
    9356:	1b 16       	cp	r1, r27
    9358:	61 1d       	adc	r22, r1
    935a:	71 1d       	adc	r23, r1
    935c:	81 1d       	adc	r24, r1
    935e:	0c 94 20 4b 	jmp	0x9640	; 0x9640 <__fp_mintl>
    9362:	0c 94 3b 4b 	jmp	0x9676	; 0x9676 <__fp_mpack>

00009366 <__cmpsf2>:
    9366:	0e 94 f6 4a 	call	0x95ec	; 0x95ec <__fp_cmp>
    936a:	08 f4       	brcc	.+2      	; 0x936e <__cmpsf2+0x8>
    936c:	81 e0       	ldi	r24, 0x01	; 1
    936e:	08 95       	ret

00009370 <cos>:
    9370:	0e 94 83 4b 	call	0x9706	; 0x9706 <__fp_rempio2>
    9374:	e3 95       	inc	r30
    9376:	0c 94 bd 4b 	jmp	0x977a	; 0x977a <__fp_sinus>

0000937a <__divsf3>:
    937a:	0e 94 d1 49 	call	0x93a2	; 0x93a2 <__divsf3x>
    937e:	0c 94 ac 4b 	jmp	0x9758	; 0x9758 <__fp_round>
    9382:	0e 94 7a 4b 	call	0x96f4	; 0x96f4 <__fp_pscB>
    9386:	58 f0       	brcs	.+22     	; 0x939e <__divsf3+0x24>
    9388:	0e 94 73 4b 	call	0x96e6	; 0x96e6 <__fp_pscA>
    938c:	40 f0       	brcs	.+16     	; 0x939e <__divsf3+0x24>
    938e:	29 f4       	brne	.+10     	; 0x939a <__divsf3+0x20>
    9390:	5f 3f       	cpi	r21, 0xFF	; 255
    9392:	29 f0       	breq	.+10     	; 0x939e <__divsf3+0x24>
    9394:	0c 94 1a 4b 	jmp	0x9634	; 0x9634 <__fp_inf>
    9398:	51 11       	cpse	r21, r1
    939a:	0c 94 0c 4c 	jmp	0x9818	; 0x9818 <__fp_szero>
    939e:	0c 94 49 4b 	jmp	0x9692	; 0x9692 <__fp_nan>

000093a2 <__divsf3x>:
    93a2:	0e 94 d1 4b 	call	0x97a2	; 0x97a2 <__fp_split3>
    93a6:	68 f3       	brcs	.-38     	; 0x9382 <__divsf3+0x8>

000093a8 <__divsf3_pse>:
    93a8:	99 23       	and	r25, r25
    93aa:	b1 f3       	breq	.-20     	; 0x9398 <__divsf3+0x1e>
    93ac:	55 23       	and	r21, r21
    93ae:	91 f3       	breq	.-28     	; 0x9394 <__divsf3+0x1a>
    93b0:	95 1b       	sub	r25, r21
    93b2:	55 0b       	sbc	r21, r21
    93b4:	bb 27       	eor	r27, r27
    93b6:	aa 27       	eor	r26, r26
    93b8:	62 17       	cp	r22, r18
    93ba:	73 07       	cpc	r23, r19
    93bc:	84 07       	cpc	r24, r20
    93be:	38 f0       	brcs	.+14     	; 0x93ce <__divsf3_pse+0x26>
    93c0:	9f 5f       	subi	r25, 0xFF	; 255
    93c2:	5f 4f       	sbci	r21, 0xFF	; 255
    93c4:	22 0f       	add	r18, r18
    93c6:	33 1f       	adc	r19, r19
    93c8:	44 1f       	adc	r20, r20
    93ca:	aa 1f       	adc	r26, r26
    93cc:	a9 f3       	breq	.-22     	; 0x93b8 <__divsf3_pse+0x10>
    93ce:	35 d0       	rcall	.+106    	; 0x943a <__divsf3_pse+0x92>
    93d0:	0e 2e       	mov	r0, r30
    93d2:	3a f0       	brmi	.+14     	; 0x93e2 <__divsf3_pse+0x3a>
    93d4:	e0 e8       	ldi	r30, 0x80	; 128
    93d6:	32 d0       	rcall	.+100    	; 0x943c <__divsf3_pse+0x94>
    93d8:	91 50       	subi	r25, 0x01	; 1
    93da:	50 40       	sbci	r21, 0x00	; 0
    93dc:	e6 95       	lsr	r30
    93de:	00 1c       	adc	r0, r0
    93e0:	ca f7       	brpl	.-14     	; 0x93d4 <__divsf3_pse+0x2c>
    93e2:	2b d0       	rcall	.+86     	; 0x943a <__divsf3_pse+0x92>
    93e4:	fe 2f       	mov	r31, r30
    93e6:	29 d0       	rcall	.+82     	; 0x943a <__divsf3_pse+0x92>
    93e8:	66 0f       	add	r22, r22
    93ea:	77 1f       	adc	r23, r23
    93ec:	88 1f       	adc	r24, r24
    93ee:	bb 1f       	adc	r27, r27
    93f0:	26 17       	cp	r18, r22
    93f2:	37 07       	cpc	r19, r23
    93f4:	48 07       	cpc	r20, r24
    93f6:	ab 07       	cpc	r26, r27
    93f8:	b0 e8       	ldi	r27, 0x80	; 128
    93fa:	09 f0       	breq	.+2      	; 0x93fe <__divsf3_pse+0x56>
    93fc:	bb 0b       	sbc	r27, r27
    93fe:	80 2d       	mov	r24, r0
    9400:	bf 01       	movw	r22, r30
    9402:	ff 27       	eor	r31, r31
    9404:	93 58       	subi	r25, 0x83	; 131
    9406:	5f 4f       	sbci	r21, 0xFF	; 255
    9408:	3a f0       	brmi	.+14     	; 0x9418 <__divsf3_pse+0x70>
    940a:	9e 3f       	cpi	r25, 0xFE	; 254
    940c:	51 05       	cpc	r21, r1
    940e:	78 f0       	brcs	.+30     	; 0x942e <__divsf3_pse+0x86>
    9410:	0c 94 1a 4b 	jmp	0x9634	; 0x9634 <__fp_inf>
    9414:	0c 94 0c 4c 	jmp	0x9818	; 0x9818 <__fp_szero>
    9418:	5f 3f       	cpi	r21, 0xFF	; 255
    941a:	e4 f3       	brlt	.-8      	; 0x9414 <__divsf3_pse+0x6c>
    941c:	98 3e       	cpi	r25, 0xE8	; 232
    941e:	d4 f3       	brlt	.-12     	; 0x9414 <__divsf3_pse+0x6c>
    9420:	86 95       	lsr	r24
    9422:	77 95       	ror	r23
    9424:	67 95       	ror	r22
    9426:	b7 95       	ror	r27
    9428:	f7 95       	ror	r31
    942a:	9f 5f       	subi	r25, 0xFF	; 255
    942c:	c9 f7       	brne	.-14     	; 0x9420 <__divsf3_pse+0x78>
    942e:	88 0f       	add	r24, r24
    9430:	91 1d       	adc	r25, r1
    9432:	96 95       	lsr	r25
    9434:	87 95       	ror	r24
    9436:	97 f9       	bld	r25, 7
    9438:	08 95       	ret
    943a:	e1 e0       	ldi	r30, 0x01	; 1
    943c:	66 0f       	add	r22, r22
    943e:	77 1f       	adc	r23, r23
    9440:	88 1f       	adc	r24, r24
    9442:	bb 1f       	adc	r27, r27
    9444:	62 17       	cp	r22, r18
    9446:	73 07       	cpc	r23, r19
    9448:	84 07       	cpc	r24, r20
    944a:	ba 07       	cpc	r27, r26
    944c:	20 f0       	brcs	.+8      	; 0x9456 <__divsf3_pse+0xae>
    944e:	62 1b       	sub	r22, r18
    9450:	73 0b       	sbc	r23, r19
    9452:	84 0b       	sbc	r24, r20
    9454:	ba 0b       	sbc	r27, r26
    9456:	ee 1f       	adc	r30, r30
    9458:	88 f7       	brcc	.-30     	; 0x943c <__divsf3_pse+0x94>
    945a:	e0 95       	com	r30
    945c:	08 95       	ret

0000945e <__fixsfsi>:
    945e:	0e 94 36 4a 	call	0x946c	; 0x946c <__fixunssfsi>
    9462:	68 94       	set
    9464:	b1 11       	cpse	r27, r1
    9466:	0c 94 0c 4c 	jmp	0x9818	; 0x9818 <__fp_szero>
    946a:	08 95       	ret

0000946c <__fixunssfsi>:
    946c:	0e 94 d9 4b 	call	0x97b2	; 0x97b2 <__fp_splitA>
    9470:	88 f0       	brcs	.+34     	; 0x9494 <__fixunssfsi+0x28>
    9472:	9f 57       	subi	r25, 0x7F	; 127
    9474:	98 f0       	brcs	.+38     	; 0x949c <__fixunssfsi+0x30>
    9476:	b9 2f       	mov	r27, r25
    9478:	99 27       	eor	r25, r25
    947a:	b7 51       	subi	r27, 0x17	; 23
    947c:	b0 f0       	brcs	.+44     	; 0x94aa <__fixunssfsi+0x3e>
    947e:	e1 f0       	breq	.+56     	; 0x94b8 <__fixunssfsi+0x4c>
    9480:	66 0f       	add	r22, r22
    9482:	77 1f       	adc	r23, r23
    9484:	88 1f       	adc	r24, r24
    9486:	99 1f       	adc	r25, r25
    9488:	1a f0       	brmi	.+6      	; 0x9490 <__fixunssfsi+0x24>
    948a:	ba 95       	dec	r27
    948c:	c9 f7       	brne	.-14     	; 0x9480 <__fixunssfsi+0x14>
    948e:	14 c0       	rjmp	.+40     	; 0x94b8 <__fixunssfsi+0x4c>
    9490:	b1 30       	cpi	r27, 0x01	; 1
    9492:	91 f0       	breq	.+36     	; 0x94b8 <__fixunssfsi+0x4c>
    9494:	0e 94 0b 4c 	call	0x9816	; 0x9816 <__fp_zero>
    9498:	b1 e0       	ldi	r27, 0x01	; 1
    949a:	08 95       	ret
    949c:	0c 94 0b 4c 	jmp	0x9816	; 0x9816 <__fp_zero>
    94a0:	67 2f       	mov	r22, r23
    94a2:	78 2f       	mov	r23, r24
    94a4:	88 27       	eor	r24, r24
    94a6:	b8 5f       	subi	r27, 0xF8	; 248
    94a8:	39 f0       	breq	.+14     	; 0x94b8 <__fixunssfsi+0x4c>
    94aa:	b9 3f       	cpi	r27, 0xF9	; 249
    94ac:	cc f3       	brlt	.-14     	; 0x94a0 <__fixunssfsi+0x34>
    94ae:	86 95       	lsr	r24
    94b0:	77 95       	ror	r23
    94b2:	67 95       	ror	r22
    94b4:	b3 95       	inc	r27
    94b6:	d9 f7       	brne	.-10     	; 0x94ae <__fixunssfsi+0x42>
    94b8:	3e f4       	brtc	.+14     	; 0x94c8 <__fixunssfsi+0x5c>
    94ba:	90 95       	com	r25
    94bc:	80 95       	com	r24
    94be:	70 95       	com	r23
    94c0:	61 95       	neg	r22
    94c2:	7f 4f       	sbci	r23, 0xFF	; 255
    94c4:	8f 4f       	sbci	r24, 0xFF	; 255
    94c6:	9f 4f       	sbci	r25, 0xFF	; 255
    94c8:	08 95       	ret

000094ca <__floatunsisf>:
    94ca:	e8 94       	clt
    94cc:	09 c0       	rjmp	.+18     	; 0x94e0 <__floatsisf+0x12>

000094ce <__floatsisf>:
    94ce:	97 fb       	bst	r25, 7
    94d0:	3e f4       	brtc	.+14     	; 0x94e0 <__floatsisf+0x12>
    94d2:	90 95       	com	r25
    94d4:	80 95       	com	r24
    94d6:	70 95       	com	r23
    94d8:	61 95       	neg	r22
    94da:	7f 4f       	sbci	r23, 0xFF	; 255
    94dc:	8f 4f       	sbci	r24, 0xFF	; 255
    94de:	9f 4f       	sbci	r25, 0xFF	; 255
    94e0:	99 23       	and	r25, r25
    94e2:	a9 f0       	breq	.+42     	; 0x950e <__floatsisf+0x40>
    94e4:	f9 2f       	mov	r31, r25
    94e6:	96 e9       	ldi	r25, 0x96	; 150
    94e8:	bb 27       	eor	r27, r27
    94ea:	93 95       	inc	r25
    94ec:	f6 95       	lsr	r31
    94ee:	87 95       	ror	r24
    94f0:	77 95       	ror	r23
    94f2:	67 95       	ror	r22
    94f4:	b7 95       	ror	r27
    94f6:	f1 11       	cpse	r31, r1
    94f8:	f8 cf       	rjmp	.-16     	; 0x94ea <__floatsisf+0x1c>
    94fa:	fa f4       	brpl	.+62     	; 0x953a <__floatsisf+0x6c>
    94fc:	bb 0f       	add	r27, r27
    94fe:	11 f4       	brne	.+4      	; 0x9504 <__floatsisf+0x36>
    9500:	60 ff       	sbrs	r22, 0
    9502:	1b c0       	rjmp	.+54     	; 0x953a <__floatsisf+0x6c>
    9504:	6f 5f       	subi	r22, 0xFF	; 255
    9506:	7f 4f       	sbci	r23, 0xFF	; 255
    9508:	8f 4f       	sbci	r24, 0xFF	; 255
    950a:	9f 4f       	sbci	r25, 0xFF	; 255
    950c:	16 c0       	rjmp	.+44     	; 0x953a <__floatsisf+0x6c>
    950e:	88 23       	and	r24, r24
    9510:	11 f0       	breq	.+4      	; 0x9516 <__floatsisf+0x48>
    9512:	96 e9       	ldi	r25, 0x96	; 150
    9514:	11 c0       	rjmp	.+34     	; 0x9538 <__floatsisf+0x6a>
    9516:	77 23       	and	r23, r23
    9518:	21 f0       	breq	.+8      	; 0x9522 <__floatsisf+0x54>
    951a:	9e e8       	ldi	r25, 0x8E	; 142
    951c:	87 2f       	mov	r24, r23
    951e:	76 2f       	mov	r23, r22
    9520:	05 c0       	rjmp	.+10     	; 0x952c <__floatsisf+0x5e>
    9522:	66 23       	and	r22, r22
    9524:	71 f0       	breq	.+28     	; 0x9542 <__floatsisf+0x74>
    9526:	96 e8       	ldi	r25, 0x86	; 134
    9528:	86 2f       	mov	r24, r22
    952a:	70 e0       	ldi	r23, 0x00	; 0
    952c:	60 e0       	ldi	r22, 0x00	; 0
    952e:	2a f0       	brmi	.+10     	; 0x953a <__floatsisf+0x6c>
    9530:	9a 95       	dec	r25
    9532:	66 0f       	add	r22, r22
    9534:	77 1f       	adc	r23, r23
    9536:	88 1f       	adc	r24, r24
    9538:	da f7       	brpl	.-10     	; 0x9530 <__floatsisf+0x62>
    953a:	88 0f       	add	r24, r24
    953c:	96 95       	lsr	r25
    953e:	87 95       	ror	r24
    9540:	97 f9       	bld	r25, 7
    9542:	08 95       	ret
    9544:	0e 94 73 4b 	call	0x96e6	; 0x96e6 <__fp_pscA>
    9548:	20 f0       	brcs	.+8      	; 0x9552 <__floatsisf+0x84>
    954a:	19 f0       	breq	.+6      	; 0x9552 <__floatsisf+0x84>
    954c:	0e 94 7a 4b 	call	0x96f4	; 0x96f4 <__fp_pscB>
    9550:	50 f4       	brcc	.+20     	; 0x9566 <fmod+0xc>
    9552:	0c 94 49 4b 	jmp	0x9692	; 0x9692 <__fp_nan>
    9556:	0c 94 0c 4c 	jmp	0x9818	; 0x9818 <__fp_szero>

0000955a <fmod>:
    955a:	e9 2f       	mov	r30, r25
    955c:	0e 94 d1 4b 	call	0x97a2	; 0x97a2 <__fp_split3>
    9560:	88 f3       	brcs	.-30     	; 0x9544 <__floatsisf+0x76>
    9562:	55 23       	and	r21, r21
    9564:	b1 f3       	breq	.-20     	; 0x9552 <__floatsisf+0x84>
    9566:	e7 fb       	bst	r30, 7
    9568:	62 17       	cp	r22, r18
    956a:	73 07       	cpc	r23, r19
    956c:	84 07       	cpc	r24, r20
    956e:	95 07       	cpc	r25, r21
    9570:	a8 f1       	brcs	.+106    	; 0x95dc <fmod+0x82>
    9572:	89 f3       	breq	.-30     	; 0x9556 <__floatsisf+0x88>
    9574:	e9 2f       	mov	r30, r25
    9576:	ff 27       	eor	r31, r31
    9578:	88 23       	and	r24, r24
    957a:	2a f0       	brmi	.+10     	; 0x9586 <fmod+0x2c>
    957c:	31 97       	sbiw	r30, 0x01	; 1
    957e:	66 0f       	add	r22, r22
    9580:	77 1f       	adc	r23, r23
    9582:	88 1f       	adc	r24, r24
    9584:	da f7       	brpl	.-10     	; 0x957c <fmod+0x22>
    9586:	95 2f       	mov	r25, r21
    9588:	55 27       	eor	r21, r21
    958a:	44 23       	and	r20, r20
    958c:	32 f0       	brmi	.+12     	; 0x959a <fmod+0x40>
    958e:	91 50       	subi	r25, 0x01	; 1
    9590:	50 40       	sbci	r21, 0x00	; 0
    9592:	22 0f       	add	r18, r18
    9594:	33 1f       	adc	r19, r19
    9596:	44 1f       	adc	r20, r20
    9598:	d2 f7       	brpl	.-12     	; 0x958e <fmod+0x34>
    959a:	bb 27       	eor	r27, r27
    959c:	e9 1b       	sub	r30, r25
    959e:	f5 0b       	sbc	r31, r21
    95a0:	62 1b       	sub	r22, r18
    95a2:	73 0b       	sbc	r23, r19
    95a4:	84 0b       	sbc	r24, r20
    95a6:	b1 09       	sbc	r27, r1
    95a8:	b1 f2       	breq	.-84     	; 0x9556 <__floatsisf+0x88>
    95aa:	22 f4       	brpl	.+8      	; 0x95b4 <fmod+0x5a>
    95ac:	62 0f       	add	r22, r18
    95ae:	73 1f       	adc	r23, r19
    95b0:	84 1f       	adc	r24, r20
    95b2:	b1 1d       	adc	r27, r1
    95b4:	31 97       	sbiw	r30, 0x01	; 1
    95b6:	2a f0       	brmi	.+10     	; 0x95c2 <fmod+0x68>
    95b8:	66 0f       	add	r22, r22
    95ba:	77 1f       	adc	r23, r23
    95bc:	88 1f       	adc	r24, r24
    95be:	bb 1f       	adc	r27, r27
    95c0:	ef cf       	rjmp	.-34     	; 0x95a0 <fmod+0x46>
    95c2:	91 50       	subi	r25, 0x01	; 1
    95c4:	50 40       	sbci	r21, 0x00	; 0
    95c6:	62 f0       	brmi	.+24     	; 0x95e0 <fmod+0x86>
    95c8:	41 f0       	breq	.+16     	; 0x95da <fmod+0x80>
    95ca:	88 23       	and	r24, r24
    95cc:	32 f0       	brmi	.+12     	; 0x95da <fmod+0x80>
    95ce:	66 0f       	add	r22, r22
    95d0:	77 1f       	adc	r23, r23
    95d2:	88 1f       	adc	r24, r24
    95d4:	91 50       	subi	r25, 0x01	; 1
    95d6:	50 40       	sbci	r21, 0x00	; 0
    95d8:	c1 f7       	brne	.-16     	; 0x95ca <fmod+0x70>
    95da:	93 95       	inc	r25
    95dc:	0c 94 3b 4b 	jmp	0x9676	; 0x9676 <__fp_mpack>
    95e0:	86 95       	lsr	r24
    95e2:	77 95       	ror	r23
    95e4:	67 95       	ror	r22
    95e6:	9f 5f       	subi	r25, 0xFF	; 255
    95e8:	d9 f7       	brne	.-10     	; 0x95e0 <fmod+0x86>
    95ea:	f7 cf       	rjmp	.-18     	; 0x95da <fmod+0x80>

000095ec <__fp_cmp>:
    95ec:	99 0f       	add	r25, r25
    95ee:	00 08       	sbc	r0, r0
    95f0:	55 0f       	add	r21, r21
    95f2:	aa 0b       	sbc	r26, r26
    95f4:	e0 e8       	ldi	r30, 0x80	; 128
    95f6:	fe ef       	ldi	r31, 0xFE	; 254
    95f8:	16 16       	cp	r1, r22
    95fa:	17 06       	cpc	r1, r23
    95fc:	e8 07       	cpc	r30, r24
    95fe:	f9 07       	cpc	r31, r25
    9600:	c0 f0       	brcs	.+48     	; 0x9632 <__fp_cmp+0x46>
    9602:	12 16       	cp	r1, r18
    9604:	13 06       	cpc	r1, r19
    9606:	e4 07       	cpc	r30, r20
    9608:	f5 07       	cpc	r31, r21
    960a:	98 f0       	brcs	.+38     	; 0x9632 <__fp_cmp+0x46>
    960c:	62 1b       	sub	r22, r18
    960e:	73 0b       	sbc	r23, r19
    9610:	84 0b       	sbc	r24, r20
    9612:	95 0b       	sbc	r25, r21
    9614:	39 f4       	brne	.+14     	; 0x9624 <__fp_cmp+0x38>
    9616:	0a 26       	eor	r0, r26
    9618:	61 f0       	breq	.+24     	; 0x9632 <__fp_cmp+0x46>
    961a:	23 2b       	or	r18, r19
    961c:	24 2b       	or	r18, r20
    961e:	25 2b       	or	r18, r21
    9620:	21 f4       	brne	.+8      	; 0x962a <__fp_cmp+0x3e>
    9622:	08 95       	ret
    9624:	0a 26       	eor	r0, r26
    9626:	09 f4       	brne	.+2      	; 0x962a <__fp_cmp+0x3e>
    9628:	a1 40       	sbci	r26, 0x01	; 1
    962a:	a6 95       	lsr	r26
    962c:	8f ef       	ldi	r24, 0xFF	; 255
    962e:	81 1d       	adc	r24, r1
    9630:	81 1d       	adc	r24, r1
    9632:	08 95       	ret

00009634 <__fp_inf>:
    9634:	97 f9       	bld	r25, 7
    9636:	9f 67       	ori	r25, 0x7F	; 127
    9638:	80 e8       	ldi	r24, 0x80	; 128
    963a:	70 e0       	ldi	r23, 0x00	; 0
    963c:	60 e0       	ldi	r22, 0x00	; 0
    963e:	08 95       	ret

00009640 <__fp_mintl>:
    9640:	88 23       	and	r24, r24
    9642:	71 f4       	brne	.+28     	; 0x9660 <__fp_mintl+0x20>
    9644:	77 23       	and	r23, r23
    9646:	21 f0       	breq	.+8      	; 0x9650 <__fp_mintl+0x10>
    9648:	98 50       	subi	r25, 0x08	; 8
    964a:	87 2b       	or	r24, r23
    964c:	76 2f       	mov	r23, r22
    964e:	07 c0       	rjmp	.+14     	; 0x965e <__fp_mintl+0x1e>
    9650:	66 23       	and	r22, r22
    9652:	11 f4       	brne	.+4      	; 0x9658 <__fp_mintl+0x18>
    9654:	99 27       	eor	r25, r25
    9656:	0d c0       	rjmp	.+26     	; 0x9672 <__fp_mintl+0x32>
    9658:	90 51       	subi	r25, 0x10	; 16
    965a:	86 2b       	or	r24, r22
    965c:	70 e0       	ldi	r23, 0x00	; 0
    965e:	60 e0       	ldi	r22, 0x00	; 0
    9660:	2a f0       	brmi	.+10     	; 0x966c <__fp_mintl+0x2c>
    9662:	9a 95       	dec	r25
    9664:	66 0f       	add	r22, r22
    9666:	77 1f       	adc	r23, r23
    9668:	88 1f       	adc	r24, r24
    966a:	da f7       	brpl	.-10     	; 0x9662 <__fp_mintl+0x22>
    966c:	88 0f       	add	r24, r24
    966e:	96 95       	lsr	r25
    9670:	87 95       	ror	r24
    9672:	97 f9       	bld	r25, 7
    9674:	08 95       	ret

00009676 <__fp_mpack>:
    9676:	9f 3f       	cpi	r25, 0xFF	; 255
    9678:	31 f0       	breq	.+12     	; 0x9686 <__fp_mpack_finite+0xc>

0000967a <__fp_mpack_finite>:
    967a:	91 50       	subi	r25, 0x01	; 1
    967c:	20 f4       	brcc	.+8      	; 0x9686 <__fp_mpack_finite+0xc>
    967e:	87 95       	ror	r24
    9680:	77 95       	ror	r23
    9682:	67 95       	ror	r22
    9684:	b7 95       	ror	r27
    9686:	88 0f       	add	r24, r24
    9688:	91 1d       	adc	r25, r1
    968a:	96 95       	lsr	r25
    968c:	87 95       	ror	r24
    968e:	97 f9       	bld	r25, 7
    9690:	08 95       	ret

00009692 <__fp_nan>:
    9692:	9f ef       	ldi	r25, 0xFF	; 255
    9694:	80 ec       	ldi	r24, 0xC0	; 192
    9696:	08 95       	ret

00009698 <__fp_powser>:
    9698:	df 93       	push	r29
    969a:	cf 93       	push	r28
    969c:	1f 93       	push	r17
    969e:	0f 93       	push	r16
    96a0:	ff 92       	push	r15
    96a2:	ef 92       	push	r14
    96a4:	df 92       	push	r13
    96a6:	7b 01       	movw	r14, r22
    96a8:	8c 01       	movw	r16, r24
    96aa:	68 94       	set
    96ac:	06 c0       	rjmp	.+12     	; 0x96ba <__fp_powser+0x22>
    96ae:	da 2e       	mov	r13, r26
    96b0:	ef 01       	movw	r28, r30
    96b2:	0e 94 d9 4c 	call	0x99b2	; 0x99b2 <__mulsf3x>
    96b6:	fe 01       	movw	r30, r28
    96b8:	e8 94       	clt
    96ba:	a5 91       	lpm	r26, Z+
    96bc:	25 91       	lpm	r18, Z+
    96be:	35 91       	lpm	r19, Z+
    96c0:	45 91       	lpm	r20, Z+
    96c2:	55 91       	lpm	r21, Z+
    96c4:	a6 f3       	brts	.-24     	; 0x96ae <__fp_powser+0x16>
    96c6:	ef 01       	movw	r28, r30
    96c8:	0e 94 d5 48 	call	0x91aa	; 0x91aa <__addsf3x>
    96cc:	fe 01       	movw	r30, r28
    96ce:	97 01       	movw	r18, r14
    96d0:	a8 01       	movw	r20, r16
    96d2:	da 94       	dec	r13
    96d4:	69 f7       	brne	.-38     	; 0x96b0 <__fp_powser+0x18>
    96d6:	df 90       	pop	r13
    96d8:	ef 90       	pop	r14
    96da:	ff 90       	pop	r15
    96dc:	0f 91       	pop	r16
    96de:	1f 91       	pop	r17
    96e0:	cf 91       	pop	r28
    96e2:	df 91       	pop	r29
    96e4:	08 95       	ret

000096e6 <__fp_pscA>:
    96e6:	00 24       	eor	r0, r0
    96e8:	0a 94       	dec	r0
    96ea:	16 16       	cp	r1, r22
    96ec:	17 06       	cpc	r1, r23
    96ee:	18 06       	cpc	r1, r24
    96f0:	09 06       	cpc	r0, r25
    96f2:	08 95       	ret

000096f4 <__fp_pscB>:
    96f4:	00 24       	eor	r0, r0
    96f6:	0a 94       	dec	r0
    96f8:	12 16       	cp	r1, r18
    96fa:	13 06       	cpc	r1, r19
    96fc:	14 06       	cpc	r1, r20
    96fe:	05 06       	cpc	r0, r21
    9700:	08 95       	ret
    9702:	0c 94 49 4b 	jmp	0x9692	; 0x9692 <__fp_nan>

00009706 <__fp_rempio2>:
    9706:	0e 94 d9 4b 	call	0x97b2	; 0x97b2 <__fp_splitA>
    970a:	d8 f3       	brcs	.-10     	; 0x9702 <__fp_pscB+0xe>
    970c:	e8 94       	clt
    970e:	e0 e0       	ldi	r30, 0x00	; 0
    9710:	bb 27       	eor	r27, r27
    9712:	9f 57       	subi	r25, 0x7F	; 127
    9714:	f0 f0       	brcs	.+60     	; 0x9752 <__fp_rempio2+0x4c>
    9716:	2a ed       	ldi	r18, 0xDA	; 218
    9718:	3f e0       	ldi	r19, 0x0F	; 15
    971a:	49 ec       	ldi	r20, 0xC9	; 201
    971c:	06 c0       	rjmp	.+12     	; 0x972a <__fp_rempio2+0x24>
    971e:	ee 0f       	add	r30, r30
    9720:	bb 0f       	add	r27, r27
    9722:	66 1f       	adc	r22, r22
    9724:	77 1f       	adc	r23, r23
    9726:	88 1f       	adc	r24, r24
    9728:	28 f0       	brcs	.+10     	; 0x9734 <__fp_rempio2+0x2e>
    972a:	b2 3a       	cpi	r27, 0xA2	; 162
    972c:	62 07       	cpc	r22, r18
    972e:	73 07       	cpc	r23, r19
    9730:	84 07       	cpc	r24, r20
    9732:	28 f0       	brcs	.+10     	; 0x973e <__fp_rempio2+0x38>
    9734:	b2 5a       	subi	r27, 0xA2	; 162
    9736:	62 0b       	sbc	r22, r18
    9738:	73 0b       	sbc	r23, r19
    973a:	84 0b       	sbc	r24, r20
    973c:	e3 95       	inc	r30
    973e:	9a 95       	dec	r25
    9740:	72 f7       	brpl	.-36     	; 0x971e <__fp_rempio2+0x18>
    9742:	80 38       	cpi	r24, 0x80	; 128
    9744:	30 f4       	brcc	.+12     	; 0x9752 <__fp_rempio2+0x4c>
    9746:	9a 95       	dec	r25
    9748:	bb 0f       	add	r27, r27
    974a:	66 1f       	adc	r22, r22
    974c:	77 1f       	adc	r23, r23
    974e:	88 1f       	adc	r24, r24
    9750:	d2 f7       	brpl	.-12     	; 0x9746 <__fp_rempio2+0x40>
    9752:	90 48       	sbci	r25, 0x80	; 128
    9754:	0c 94 3d 4b 	jmp	0x967a	; 0x967a <__fp_mpack_finite>

00009758 <__fp_round>:
    9758:	09 2e       	mov	r0, r25
    975a:	03 94       	inc	r0
    975c:	00 0c       	add	r0, r0
    975e:	11 f4       	brne	.+4      	; 0x9764 <__fp_round+0xc>
    9760:	88 23       	and	r24, r24
    9762:	52 f0       	brmi	.+20     	; 0x9778 <__fp_round+0x20>
    9764:	bb 0f       	add	r27, r27
    9766:	40 f4       	brcc	.+16     	; 0x9778 <__fp_round+0x20>
    9768:	bf 2b       	or	r27, r31
    976a:	11 f4       	brne	.+4      	; 0x9770 <__fp_round+0x18>
    976c:	60 ff       	sbrs	r22, 0
    976e:	04 c0       	rjmp	.+8      	; 0x9778 <__fp_round+0x20>
    9770:	6f 5f       	subi	r22, 0xFF	; 255
    9772:	7f 4f       	sbci	r23, 0xFF	; 255
    9774:	8f 4f       	sbci	r24, 0xFF	; 255
    9776:	9f 4f       	sbci	r25, 0xFF	; 255
    9778:	08 95       	ret

0000977a <__fp_sinus>:
    977a:	ef 93       	push	r30
    977c:	e0 ff       	sbrs	r30, 0
    977e:	07 c0       	rjmp	.+14     	; 0x978e <__fp_sinus+0x14>
    9780:	a2 ea       	ldi	r26, 0xA2	; 162
    9782:	2a ed       	ldi	r18, 0xDA	; 218
    9784:	3f e0       	ldi	r19, 0x0F	; 15
    9786:	49 ec       	ldi	r20, 0xC9	; 201
    9788:	5f eb       	ldi	r21, 0xBF	; 191
    978a:	0e 94 d5 48 	call	0x91aa	; 0x91aa <__addsf3x>
    978e:	0e 94 ac 4b 	call	0x9758	; 0x9758 <__fp_round>
    9792:	0f 90       	pop	r0
    9794:	03 94       	inc	r0
    9796:	01 fc       	sbrc	r0, 1
    9798:	90 58       	subi	r25, 0x80	; 128
    979a:	e9 e4       	ldi	r30, 0x49	; 73
    979c:	f2 e0       	ldi	r31, 0x02	; 2
    979e:	0c 94 1b 4e 	jmp	0x9c36	; 0x9c36 <__fp_powsodd>

000097a2 <__fp_split3>:
    97a2:	57 fd       	sbrc	r21, 7
    97a4:	90 58       	subi	r25, 0x80	; 128
    97a6:	44 0f       	add	r20, r20
    97a8:	55 1f       	adc	r21, r21
    97aa:	59 f0       	breq	.+22     	; 0x97c2 <__fp_splitA+0x10>
    97ac:	5f 3f       	cpi	r21, 0xFF	; 255
    97ae:	71 f0       	breq	.+28     	; 0x97cc <__fp_splitA+0x1a>
    97b0:	47 95       	ror	r20

000097b2 <__fp_splitA>:
    97b2:	88 0f       	add	r24, r24
    97b4:	97 fb       	bst	r25, 7
    97b6:	99 1f       	adc	r25, r25
    97b8:	61 f0       	breq	.+24     	; 0x97d2 <__fp_splitA+0x20>
    97ba:	9f 3f       	cpi	r25, 0xFF	; 255
    97bc:	79 f0       	breq	.+30     	; 0x97dc <__fp_splitA+0x2a>
    97be:	87 95       	ror	r24
    97c0:	08 95       	ret
    97c2:	12 16       	cp	r1, r18
    97c4:	13 06       	cpc	r1, r19
    97c6:	14 06       	cpc	r1, r20
    97c8:	55 1f       	adc	r21, r21
    97ca:	f2 cf       	rjmp	.-28     	; 0x97b0 <__fp_split3+0xe>
    97cc:	46 95       	lsr	r20
    97ce:	f1 df       	rcall	.-30     	; 0x97b2 <__fp_splitA>
    97d0:	08 c0       	rjmp	.+16     	; 0x97e2 <__fp_splitA+0x30>
    97d2:	16 16       	cp	r1, r22
    97d4:	17 06       	cpc	r1, r23
    97d6:	18 06       	cpc	r1, r24
    97d8:	99 1f       	adc	r25, r25
    97da:	f1 cf       	rjmp	.-30     	; 0x97be <__fp_splitA+0xc>
    97dc:	86 95       	lsr	r24
    97de:	71 05       	cpc	r23, r1
    97e0:	61 05       	cpc	r22, r1
    97e2:	08 94       	sec
    97e4:	08 95       	ret

000097e6 <__fp_trunc>:
    97e6:	0e 94 d9 4b 	call	0x97b2	; 0x97b2 <__fp_splitA>
    97ea:	a0 f0       	brcs	.+40     	; 0x9814 <__fp_trunc+0x2e>
    97ec:	be e7       	ldi	r27, 0x7E	; 126
    97ee:	b9 17       	cp	r27, r25
    97f0:	88 f4       	brcc	.+34     	; 0x9814 <__fp_trunc+0x2e>
    97f2:	bb 27       	eor	r27, r27
    97f4:	9f 38       	cpi	r25, 0x8F	; 143
    97f6:	60 f4       	brcc	.+24     	; 0x9810 <__fp_trunc+0x2a>
    97f8:	16 16       	cp	r1, r22
    97fa:	b1 1d       	adc	r27, r1
    97fc:	67 2f       	mov	r22, r23
    97fe:	78 2f       	mov	r23, r24
    9800:	88 27       	eor	r24, r24
    9802:	98 5f       	subi	r25, 0xF8	; 248
    9804:	f7 cf       	rjmp	.-18     	; 0x97f4 <__fp_trunc+0xe>
    9806:	86 95       	lsr	r24
    9808:	77 95       	ror	r23
    980a:	67 95       	ror	r22
    980c:	b1 1d       	adc	r27, r1
    980e:	93 95       	inc	r25
    9810:	96 39       	cpi	r25, 0x96	; 150
    9812:	c8 f3       	brcs	.-14     	; 0x9806 <__fp_trunc+0x20>
    9814:	08 95       	ret

00009816 <__fp_zero>:
    9816:	e8 94       	clt

00009818 <__fp_szero>:
    9818:	bb 27       	eor	r27, r27
    981a:	66 27       	eor	r22, r22
    981c:	77 27       	eor	r23, r23
    981e:	cb 01       	movw	r24, r22
    9820:	97 f9       	bld	r25, 7
    9822:	08 95       	ret

00009824 <__gesf2>:
    9824:	0e 94 f6 4a 	call	0x95ec	; 0x95ec <__fp_cmp>
    9828:	08 f4       	brcc	.+2      	; 0x982c <__gesf2+0x8>
    982a:	8f ef       	ldi	r24, 0xFF	; 255
    982c:	08 95       	ret
    982e:	0e 94 73 4b 	call	0x96e6	; 0x96e6 <__fp_pscA>
    9832:	29 f0       	breq	.+10     	; 0x983e <__gesf2+0x1a>
    9834:	0e 94 7a 4b 	call	0x96f4	; 0x96f4 <__fp_pscB>
    9838:	11 f0       	breq	.+4      	; 0x983e <__gesf2+0x1a>
    983a:	0c 94 49 4b 	jmp	0x9692	; 0x9692 <__fp_nan>
    983e:	0c 94 1a 4b 	jmp	0x9634	; 0x9634 <__fp_inf>
    9842:	b9 01       	movw	r22, r18
    9844:	ca 01       	movw	r24, r20
    9846:	0c 94 3b 4b 	jmp	0x9676	; 0x9676 <__fp_mpack>

0000984a <hypot>:
    984a:	9f 77       	andi	r25, 0x7F	; 127
    984c:	5f 77       	andi	r21, 0x7F	; 127
    984e:	0e 94 d1 4b 	call	0x97a2	; 0x97a2 <__fp_split3>
    9852:	68 f3       	brcs	.-38     	; 0x982e <__gesf2+0xa>
    9854:	99 23       	and	r25, r25
    9856:	a9 f3       	breq	.-22     	; 0x9842 <__gesf2+0x1e>
    9858:	55 23       	and	r21, r21
    985a:	a9 f3       	breq	.-22     	; 0x9846 <__gesf2+0x22>
    985c:	ff 27       	eor	r31, r31
    985e:	95 17       	cp	r25, r21
    9860:	58 f4       	brcc	.+22     	; 0x9878 <hypot+0x2e>
    9862:	e5 2f       	mov	r30, r21
    9864:	e9 1b       	sub	r30, r25
    9866:	ed 30       	cpi	r30, 0x0D	; 13
    9868:	60 f7       	brcc	.-40     	; 0x9842 <__gesf2+0x1e>
    986a:	5e 3b       	cpi	r21, 0xBE	; 190
    986c:	10 f0       	brcs	.+4      	; 0x9872 <hypot+0x28>
    986e:	f1 e4       	ldi	r31, 0x41	; 65
    9870:	1c c0       	rjmp	.+56     	; 0x98aa <hypot+0x60>
    9872:	90 34       	cpi	r25, 0x40	; 64
    9874:	e0 f4       	brcc	.+56     	; 0x98ae <hypot+0x64>
    9876:	0a c0       	rjmp	.+20     	; 0x988c <hypot+0x42>
    9878:	e9 2f       	mov	r30, r25
    987a:	e5 1b       	sub	r30, r21
    987c:	ed 30       	cpi	r30, 0x0D	; 13
    987e:	18 f7       	brcc	.-58     	; 0x9846 <__gesf2+0x22>
    9880:	9e 3b       	cpi	r25, 0xBE	; 190
    9882:	10 f0       	brcs	.+4      	; 0x9888 <hypot+0x3e>
    9884:	f1 e4       	ldi	r31, 0x41	; 65
    9886:	11 c0       	rjmp	.+34     	; 0x98aa <hypot+0x60>
    9888:	50 34       	cpi	r21, 0x40	; 64
    988a:	88 f4       	brcc	.+34     	; 0x98ae <hypot+0x64>
    988c:	f9 ea       	ldi	r31, 0xA9	; 169
    988e:	88 23       	and	r24, r24
    9890:	2a f0       	brmi	.+10     	; 0x989c <hypot+0x52>
    9892:	9a 95       	dec	r25
    9894:	66 0f       	add	r22, r22
    9896:	77 1f       	adc	r23, r23
    9898:	88 1f       	adc	r24, r24
    989a:	da f7       	brpl	.-10     	; 0x9892 <hypot+0x48>
    989c:	44 23       	and	r20, r20
    989e:	2a f0       	brmi	.+10     	; 0x98aa <hypot+0x60>
    98a0:	5a 95       	dec	r21
    98a2:	22 0f       	add	r18, r18
    98a4:	33 1f       	adc	r19, r19
    98a6:	44 1f       	adc	r20, r20
    98a8:	da f7       	brpl	.-10     	; 0x98a0 <hypot+0x56>
    98aa:	9f 1b       	sub	r25, r31
    98ac:	5f 1b       	sub	r21, r31
    98ae:	ff 93       	push	r31
    98b0:	1f 93       	push	r17
    98b2:	0f 93       	push	r16
    98b4:	ff 92       	push	r15
    98b6:	ef 92       	push	r14
    98b8:	79 01       	movw	r14, r18
    98ba:	8a 01       	movw	r16, r20
    98bc:	bb 27       	eor	r27, r27
    98be:	ab 2f       	mov	r26, r27
    98c0:	9b 01       	movw	r18, r22
    98c2:	ac 01       	movw	r20, r24
    98c4:	0e 94 dc 4c 	call	0x99b8	; 0x99b8 <__mulsf3_pse>
    98c8:	97 01       	movw	r18, r14
    98ca:	a8 01       	movw	r20, r16
    98cc:	bf 93       	push	r27
    98ce:	7b 01       	movw	r14, r22
    98d0:	8c 01       	movw	r16, r24
    98d2:	aa 27       	eor	r26, r26
    98d4:	ba 2f       	mov	r27, r26
    98d6:	b9 01       	movw	r22, r18
    98d8:	ca 01       	movw	r24, r20
    98da:	0e 94 dc 4c 	call	0x99b8	; 0x99b8 <__mulsf3_pse>
    98de:	af 91       	pop	r26
    98e0:	97 01       	movw	r18, r14
    98e2:	a8 01       	movw	r20, r16
    98e4:	ef 90       	pop	r14
    98e6:	ff 90       	pop	r15
    98e8:	0f 91       	pop	r16
    98ea:	1f 91       	pop	r17
    98ec:	0e 94 d5 48 	call	0x91aa	; 0x91aa <__addsf3x>
    98f0:	0e 94 ac 4b 	call	0x9758	; 0x9758 <__fp_round>
    98f4:	0e 94 91 4d 	call	0x9b22	; 0x9b22 <sqrt>
    98f8:	4f 91       	pop	r20
    98fa:	40 ff       	sbrs	r20, 0
    98fc:	08 95       	ret
    98fe:	55 27       	eor	r21, r21
    9900:	47 fd       	sbrc	r20, 7
    9902:	50 95       	com	r21
    9904:	0c 94 90 4c 	jmp	0x9920	; 0x9920 <ldexp>

00009908 <inverse>:
    9908:	9b 01       	movw	r18, r22
    990a:	ac 01       	movw	r20, r24
    990c:	60 e0       	ldi	r22, 0x00	; 0
    990e:	70 e0       	ldi	r23, 0x00	; 0
    9910:	80 e8       	ldi	r24, 0x80	; 128
    9912:	9f e3       	ldi	r25, 0x3F	; 63
    9914:	0c 94 bd 49 	jmp	0x937a	; 0x937a <__divsf3>
    9918:	0c 94 1a 4b 	jmp	0x9634	; 0x9634 <__fp_inf>
    991c:	0c 94 3b 4b 	jmp	0x9676	; 0x9676 <__fp_mpack>

00009920 <ldexp>:
    9920:	0e 94 d9 4b 	call	0x97b2	; 0x97b2 <__fp_splitA>
    9924:	d8 f3       	brcs	.-10     	; 0x991c <inverse+0x14>
    9926:	99 23       	and	r25, r25
    9928:	c9 f3       	breq	.-14     	; 0x991c <inverse+0x14>
    992a:	94 0f       	add	r25, r20
    992c:	51 1d       	adc	r21, r1
    992e:	a3 f3       	brvs	.-24     	; 0x9918 <inverse+0x10>
    9930:	91 50       	subi	r25, 0x01	; 1
    9932:	50 40       	sbci	r21, 0x00	; 0
    9934:	94 f0       	brlt	.+36     	; 0x995a <ldexp+0x3a>
    9936:	59 f0       	breq	.+22     	; 0x994e <ldexp+0x2e>
    9938:	88 23       	and	r24, r24
    993a:	32 f0       	brmi	.+12     	; 0x9948 <ldexp+0x28>
    993c:	66 0f       	add	r22, r22
    993e:	77 1f       	adc	r23, r23
    9940:	88 1f       	adc	r24, r24
    9942:	91 50       	subi	r25, 0x01	; 1
    9944:	50 40       	sbci	r21, 0x00	; 0
    9946:	c1 f7       	brne	.-16     	; 0x9938 <ldexp+0x18>
    9948:	9e 3f       	cpi	r25, 0xFE	; 254
    994a:	51 05       	cpc	r21, r1
    994c:	2c f7       	brge	.-54     	; 0x9918 <inverse+0x10>
    994e:	88 0f       	add	r24, r24
    9950:	91 1d       	adc	r25, r1
    9952:	96 95       	lsr	r25
    9954:	87 95       	ror	r24
    9956:	97 f9       	bld	r25, 7
    9958:	08 95       	ret
    995a:	5f 3f       	cpi	r21, 0xFF	; 255
    995c:	ac f0       	brlt	.+42     	; 0x9988 <ldexp+0x68>
    995e:	98 3e       	cpi	r25, 0xE8	; 232
    9960:	9c f0       	brlt	.+38     	; 0x9988 <ldexp+0x68>
    9962:	bb 27       	eor	r27, r27
    9964:	86 95       	lsr	r24
    9966:	77 95       	ror	r23
    9968:	67 95       	ror	r22
    996a:	b7 95       	ror	r27
    996c:	08 f4       	brcc	.+2      	; 0x9970 <ldexp+0x50>
    996e:	b1 60       	ori	r27, 0x01	; 1
    9970:	93 95       	inc	r25
    9972:	c1 f7       	brne	.-16     	; 0x9964 <ldexp+0x44>
    9974:	bb 0f       	add	r27, r27
    9976:	58 f7       	brcc	.-42     	; 0x994e <ldexp+0x2e>
    9978:	11 f4       	brne	.+4      	; 0x997e <ldexp+0x5e>
    997a:	60 ff       	sbrs	r22, 0
    997c:	e8 cf       	rjmp	.-48     	; 0x994e <ldexp+0x2e>
    997e:	6f 5f       	subi	r22, 0xFF	; 255
    9980:	7f 4f       	sbci	r23, 0xFF	; 255
    9982:	8f 4f       	sbci	r24, 0xFF	; 255
    9984:	9f 4f       	sbci	r25, 0xFF	; 255
    9986:	e3 cf       	rjmp	.-58     	; 0x994e <ldexp+0x2e>
    9988:	0c 94 0c 4c 	jmp	0x9818	; 0x9818 <__fp_szero>

0000998c <__mulsf3>:
    998c:	0e 94 d9 4c 	call	0x99b2	; 0x99b2 <__mulsf3x>
    9990:	0c 94 ac 4b 	jmp	0x9758	; 0x9758 <__fp_round>
    9994:	0e 94 73 4b 	call	0x96e6	; 0x96e6 <__fp_pscA>
    9998:	38 f0       	brcs	.+14     	; 0x99a8 <__mulsf3+0x1c>
    999a:	0e 94 7a 4b 	call	0x96f4	; 0x96f4 <__fp_pscB>
    999e:	20 f0       	brcs	.+8      	; 0x99a8 <__mulsf3+0x1c>
    99a0:	95 23       	and	r25, r21
    99a2:	11 f0       	breq	.+4      	; 0x99a8 <__mulsf3+0x1c>
    99a4:	0c 94 1a 4b 	jmp	0x9634	; 0x9634 <__fp_inf>
    99a8:	0c 94 49 4b 	jmp	0x9692	; 0x9692 <__fp_nan>
    99ac:	11 24       	eor	r1, r1
    99ae:	0c 94 0c 4c 	jmp	0x9818	; 0x9818 <__fp_szero>

000099b2 <__mulsf3x>:
    99b2:	0e 94 d1 4b 	call	0x97a2	; 0x97a2 <__fp_split3>
    99b6:	70 f3       	brcs	.-36     	; 0x9994 <__mulsf3+0x8>

000099b8 <__mulsf3_pse>:
    99b8:	95 9f       	mul	r25, r21
    99ba:	c1 f3       	breq	.-16     	; 0x99ac <__mulsf3+0x20>
    99bc:	95 0f       	add	r25, r21
    99be:	50 e0       	ldi	r21, 0x00	; 0
    99c0:	55 1f       	adc	r21, r21
    99c2:	62 9f       	mul	r22, r18
    99c4:	f0 01       	movw	r30, r0
    99c6:	72 9f       	mul	r23, r18
    99c8:	bb 27       	eor	r27, r27
    99ca:	f0 0d       	add	r31, r0
    99cc:	b1 1d       	adc	r27, r1
    99ce:	63 9f       	mul	r22, r19
    99d0:	aa 27       	eor	r26, r26
    99d2:	f0 0d       	add	r31, r0
    99d4:	b1 1d       	adc	r27, r1
    99d6:	aa 1f       	adc	r26, r26
    99d8:	64 9f       	mul	r22, r20
    99da:	66 27       	eor	r22, r22
    99dc:	b0 0d       	add	r27, r0
    99de:	a1 1d       	adc	r26, r1
    99e0:	66 1f       	adc	r22, r22
    99e2:	82 9f       	mul	r24, r18
    99e4:	22 27       	eor	r18, r18
    99e6:	b0 0d       	add	r27, r0
    99e8:	a1 1d       	adc	r26, r1
    99ea:	62 1f       	adc	r22, r18
    99ec:	73 9f       	mul	r23, r19
    99ee:	b0 0d       	add	r27, r0
    99f0:	a1 1d       	adc	r26, r1
    99f2:	62 1f       	adc	r22, r18
    99f4:	83 9f       	mul	r24, r19
    99f6:	a0 0d       	add	r26, r0
    99f8:	61 1d       	adc	r22, r1
    99fa:	22 1f       	adc	r18, r18
    99fc:	74 9f       	mul	r23, r20
    99fe:	33 27       	eor	r19, r19
    9a00:	a0 0d       	add	r26, r0
    9a02:	61 1d       	adc	r22, r1
    9a04:	23 1f       	adc	r18, r19
    9a06:	84 9f       	mul	r24, r20
    9a08:	60 0d       	add	r22, r0
    9a0a:	21 1d       	adc	r18, r1
    9a0c:	82 2f       	mov	r24, r18
    9a0e:	76 2f       	mov	r23, r22
    9a10:	6a 2f       	mov	r22, r26
    9a12:	11 24       	eor	r1, r1
    9a14:	9f 57       	subi	r25, 0x7F	; 127
    9a16:	50 40       	sbci	r21, 0x00	; 0
    9a18:	9a f0       	brmi	.+38     	; 0x9a40 <__mulsf3_pse+0x88>
    9a1a:	f1 f0       	breq	.+60     	; 0x9a58 <__mulsf3_pse+0xa0>
    9a1c:	88 23       	and	r24, r24
    9a1e:	4a f0       	brmi	.+18     	; 0x9a32 <__mulsf3_pse+0x7a>
    9a20:	ee 0f       	add	r30, r30
    9a22:	ff 1f       	adc	r31, r31
    9a24:	bb 1f       	adc	r27, r27
    9a26:	66 1f       	adc	r22, r22
    9a28:	77 1f       	adc	r23, r23
    9a2a:	88 1f       	adc	r24, r24
    9a2c:	91 50       	subi	r25, 0x01	; 1
    9a2e:	50 40       	sbci	r21, 0x00	; 0
    9a30:	a9 f7       	brne	.-22     	; 0x9a1c <__mulsf3_pse+0x64>
    9a32:	9e 3f       	cpi	r25, 0xFE	; 254
    9a34:	51 05       	cpc	r21, r1
    9a36:	80 f0       	brcs	.+32     	; 0x9a58 <__mulsf3_pse+0xa0>
    9a38:	0c 94 1a 4b 	jmp	0x9634	; 0x9634 <__fp_inf>
    9a3c:	0c 94 0c 4c 	jmp	0x9818	; 0x9818 <__fp_szero>
    9a40:	5f 3f       	cpi	r21, 0xFF	; 255
    9a42:	e4 f3       	brlt	.-8      	; 0x9a3c <__mulsf3_pse+0x84>
    9a44:	98 3e       	cpi	r25, 0xE8	; 232
    9a46:	d4 f3       	brlt	.-12     	; 0x9a3c <__mulsf3_pse+0x84>
    9a48:	86 95       	lsr	r24
    9a4a:	77 95       	ror	r23
    9a4c:	67 95       	ror	r22
    9a4e:	b7 95       	ror	r27
    9a50:	f7 95       	ror	r31
    9a52:	e7 95       	ror	r30
    9a54:	9f 5f       	subi	r25, 0xFF	; 255
    9a56:	c1 f7       	brne	.-16     	; 0x9a48 <__mulsf3_pse+0x90>
    9a58:	fe 2b       	or	r31, r30
    9a5a:	88 0f       	add	r24, r24
    9a5c:	91 1d       	adc	r25, r1
    9a5e:	96 95       	lsr	r25
    9a60:	87 95       	ror	r24
    9a62:	97 f9       	bld	r25, 7
    9a64:	08 95       	ret

00009a66 <pow>:
    9a66:	fa 01       	movw	r30, r20
    9a68:	ee 0f       	add	r30, r30
    9a6a:	ff 1f       	adc	r31, r31
    9a6c:	30 96       	adiw	r30, 0x00	; 0
    9a6e:	21 05       	cpc	r18, r1
    9a70:	31 05       	cpc	r19, r1
    9a72:	a1 f1       	breq	.+104    	; 0x9adc <pow+0x76>
    9a74:	61 15       	cp	r22, r1
    9a76:	71 05       	cpc	r23, r1
    9a78:	61 f4       	brne	.+24     	; 0x9a92 <pow+0x2c>
    9a7a:	80 38       	cpi	r24, 0x80	; 128
    9a7c:	bf e3       	ldi	r27, 0x3F	; 63
    9a7e:	9b 07       	cpc	r25, r27
    9a80:	49 f1       	breq	.+82     	; 0x9ad4 <pow+0x6e>
    9a82:	68 94       	set
    9a84:	90 38       	cpi	r25, 0x80	; 128
    9a86:	81 05       	cpc	r24, r1
    9a88:	61 f0       	breq	.+24     	; 0x9aa2 <pow+0x3c>
    9a8a:	80 38       	cpi	r24, 0x80	; 128
    9a8c:	bf ef       	ldi	r27, 0xFF	; 255
    9a8e:	9b 07       	cpc	r25, r27
    9a90:	41 f0       	breq	.+16     	; 0x9aa2 <pow+0x3c>
    9a92:	99 23       	and	r25, r25
    9a94:	4a f5       	brpl	.+82     	; 0x9ae8 <pow+0x82>
    9a96:	ff 3f       	cpi	r31, 0xFF	; 255
    9a98:	e1 05       	cpc	r30, r1
    9a9a:	31 05       	cpc	r19, r1
    9a9c:	21 05       	cpc	r18, r1
    9a9e:	19 f1       	breq	.+70     	; 0x9ae6 <pow+0x80>
    9aa0:	e8 94       	clt
    9aa2:	08 94       	sec
    9aa4:	e7 95       	ror	r30
    9aa6:	d9 01       	movw	r26, r18
    9aa8:	aa 23       	and	r26, r26
    9aaa:	29 f4       	brne	.+10     	; 0x9ab6 <pow+0x50>
    9aac:	ab 2f       	mov	r26, r27
    9aae:	be 2f       	mov	r27, r30
    9ab0:	f8 5f       	subi	r31, 0xF8	; 248
    9ab2:	d0 f3       	brcs	.-12     	; 0x9aa8 <pow+0x42>
    9ab4:	10 c0       	rjmp	.+32     	; 0x9ad6 <pow+0x70>
    9ab6:	ff 5f       	subi	r31, 0xFF	; 255
    9ab8:	70 f4       	brcc	.+28     	; 0x9ad6 <pow+0x70>
    9aba:	a6 95       	lsr	r26
    9abc:	e0 f7       	brcc	.-8      	; 0x9ab6 <pow+0x50>
    9abe:	f7 39       	cpi	r31, 0x97	; 151
    9ac0:	50 f0       	brcs	.+20     	; 0x9ad6 <pow+0x70>
    9ac2:	19 f0       	breq	.+6      	; 0x9aca <pow+0x64>
    9ac4:	ff 3a       	cpi	r31, 0xAF	; 175
    9ac6:	38 f4       	brcc	.+14     	; 0x9ad6 <pow+0x70>
    9ac8:	9f 77       	andi	r25, 0x7F	; 127
    9aca:	9f 93       	push	r25
    9acc:	0d d0       	rcall	.+26     	; 0x9ae8 <pow+0x82>
    9ace:	0f 90       	pop	r0
    9ad0:	07 fc       	sbrc	r0, 7
    9ad2:	90 58       	subi	r25, 0x80	; 128
    9ad4:	08 95       	ret
    9ad6:	46 f0       	brts	.+16     	; 0x9ae8 <pow+0x82>
    9ad8:	0c 94 49 4b 	jmp	0x9692	; 0x9692 <__fp_nan>
    9adc:	60 e0       	ldi	r22, 0x00	; 0
    9ade:	70 e0       	ldi	r23, 0x00	; 0
    9ae0:	80 e8       	ldi	r24, 0x80	; 128
    9ae2:	9f e3       	ldi	r25, 0x3F	; 63
    9ae4:	08 95       	ret
    9ae6:	4f e7       	ldi	r20, 0x7F	; 127
    9ae8:	9f 77       	andi	r25, 0x7F	; 127
    9aea:	5f 93       	push	r21
    9aec:	4f 93       	push	r20
    9aee:	3f 93       	push	r19
    9af0:	2f 93       	push	r18
    9af2:	0e 94 37 4e 	call	0x9c6e	; 0x9c6e <log>
    9af6:	2f 91       	pop	r18
    9af8:	3f 91       	pop	r19
    9afa:	4f 91       	pop	r20
    9afc:	5f 91       	pop	r21
    9afe:	0e 94 c6 4c 	call	0x998c	; 0x998c <__mulsf3>
    9b02:	0c 94 e2 4d 	jmp	0x9bc4	; 0x9bc4 <exp>

00009b06 <sin>:
    9b06:	9f 93       	push	r25
    9b08:	0e 94 83 4b 	call	0x9706	; 0x9706 <__fp_rempio2>
    9b0c:	0f 90       	pop	r0
    9b0e:	07 fc       	sbrc	r0, 7
    9b10:	ee 5f       	subi	r30, 0xFE	; 254
    9b12:	0c 94 bd 4b 	jmp	0x977a	; 0x977a <__fp_sinus>
    9b16:	19 f4       	brne	.+6      	; 0x9b1e <sin+0x18>
    9b18:	16 f4       	brtc	.+4      	; 0x9b1e <sin+0x18>
    9b1a:	0c 94 49 4b 	jmp	0x9692	; 0x9692 <__fp_nan>
    9b1e:	0c 94 3b 4b 	jmp	0x9676	; 0x9676 <__fp_mpack>

00009b22 <sqrt>:
    9b22:	0e 94 d9 4b 	call	0x97b2	; 0x97b2 <__fp_splitA>
    9b26:	b8 f3       	brcs	.-18     	; 0x9b16 <sin+0x10>
    9b28:	99 23       	and	r25, r25
    9b2a:	c9 f3       	breq	.-14     	; 0x9b1e <sin+0x18>
    9b2c:	b6 f3       	brts	.-20     	; 0x9b1a <sin+0x14>
    9b2e:	9f 57       	subi	r25, 0x7F	; 127
    9b30:	55 0b       	sbc	r21, r21
    9b32:	87 ff       	sbrs	r24, 7
    9b34:	0e 94 14 4e 	call	0x9c28	; 0x9c28 <__fp_norm2>
    9b38:	00 24       	eor	r0, r0
    9b3a:	a0 e6       	ldi	r26, 0x60	; 96
    9b3c:	40 ea       	ldi	r20, 0xA0	; 160
    9b3e:	90 01       	movw	r18, r0
    9b40:	80 58       	subi	r24, 0x80	; 128
    9b42:	56 95       	lsr	r21
    9b44:	97 95       	ror	r25
    9b46:	28 f4       	brcc	.+10     	; 0x9b52 <sqrt+0x30>
    9b48:	80 5c       	subi	r24, 0xC0	; 192
    9b4a:	66 0f       	add	r22, r22
    9b4c:	77 1f       	adc	r23, r23
    9b4e:	88 1f       	adc	r24, r24
    9b50:	20 f0       	brcs	.+8      	; 0x9b5a <sqrt+0x38>
    9b52:	26 17       	cp	r18, r22
    9b54:	37 07       	cpc	r19, r23
    9b56:	48 07       	cpc	r20, r24
    9b58:	30 f4       	brcc	.+12     	; 0x9b66 <sqrt+0x44>
    9b5a:	62 1b       	sub	r22, r18
    9b5c:	73 0b       	sbc	r23, r19
    9b5e:	84 0b       	sbc	r24, r20
    9b60:	20 29       	or	r18, r0
    9b62:	31 29       	or	r19, r1
    9b64:	4a 2b       	or	r20, r26
    9b66:	a6 95       	lsr	r26
    9b68:	17 94       	ror	r1
    9b6a:	07 94       	ror	r0
    9b6c:	20 25       	eor	r18, r0
    9b6e:	31 25       	eor	r19, r1
    9b70:	4a 27       	eor	r20, r26
    9b72:	58 f7       	brcc	.-42     	; 0x9b4a <sqrt+0x28>
    9b74:	66 0f       	add	r22, r22
    9b76:	77 1f       	adc	r23, r23
    9b78:	88 1f       	adc	r24, r24
    9b7a:	20 f0       	brcs	.+8      	; 0x9b84 <sqrt+0x62>
    9b7c:	26 17       	cp	r18, r22
    9b7e:	37 07       	cpc	r19, r23
    9b80:	48 07       	cpc	r20, r24
    9b82:	30 f4       	brcc	.+12     	; 0x9b90 <sqrt+0x6e>
    9b84:	62 0b       	sbc	r22, r18
    9b86:	73 0b       	sbc	r23, r19
    9b88:	84 0b       	sbc	r24, r20
    9b8a:	20 0d       	add	r18, r0
    9b8c:	31 1d       	adc	r19, r1
    9b8e:	41 1d       	adc	r20, r1
    9b90:	a0 95       	com	r26
    9b92:	81 f7       	brne	.-32     	; 0x9b74 <sqrt+0x52>
    9b94:	b9 01       	movw	r22, r18
    9b96:	84 2f       	mov	r24, r20
    9b98:	91 58       	subi	r25, 0x81	; 129
    9b9a:	88 0f       	add	r24, r24
    9b9c:	96 95       	lsr	r25
    9b9e:	87 95       	ror	r24
    9ba0:	08 95       	ret

00009ba2 <square>:
    9ba2:	9b 01       	movw	r18, r22
    9ba4:	ac 01       	movw	r20, r24
    9ba6:	0c 94 c6 4c 	jmp	0x998c	; 0x998c <__mulsf3>

00009baa <__unordsf2>:
    9baa:	0e 94 f6 4a 	call	0x95ec	; 0x95ec <__fp_cmp>
    9bae:	88 0b       	sbc	r24, r24
    9bb0:	99 0b       	sbc	r25, r25
    9bb2:	08 95       	ret
    9bb4:	29 f4       	brne	.+10     	; 0x9bc0 <__unordsf2+0x16>
    9bb6:	16 f0       	brts	.+4      	; 0x9bbc <__unordsf2+0x12>
    9bb8:	0c 94 1a 4b 	jmp	0x9634	; 0x9634 <__fp_inf>
    9bbc:	0c 94 0b 4c 	jmp	0x9816	; 0x9816 <__fp_zero>
    9bc0:	0c 94 49 4b 	jmp	0x9692	; 0x9692 <__fp_nan>

00009bc4 <exp>:
    9bc4:	0e 94 d9 4b 	call	0x97b2	; 0x97b2 <__fp_splitA>
    9bc8:	a8 f3       	brcs	.-22     	; 0x9bb4 <__unordsf2+0xa>
    9bca:	96 38       	cpi	r25, 0x86	; 134
    9bcc:	a0 f7       	brcc	.-24     	; 0x9bb6 <__unordsf2+0xc>
    9bce:	07 f8       	bld	r0, 7
    9bd0:	0f 92       	push	r0
    9bd2:	e8 94       	clt
    9bd4:	2b e3       	ldi	r18, 0x3B	; 59
    9bd6:	3a ea       	ldi	r19, 0xAA	; 170
    9bd8:	48 eb       	ldi	r20, 0xB8	; 184
    9bda:	5f e7       	ldi	r21, 0x7F	; 127
    9bdc:	0e 94 dc 4c 	call	0x99b8	; 0x99b8 <__mulsf3_pse>
    9be0:	0f 92       	push	r0
    9be2:	0f 92       	push	r0
    9be4:	0f 92       	push	r0
    9be6:	4d b7       	in	r20, 0x3d	; 61
    9be8:	5e b7       	in	r21, 0x3e	; 62
    9bea:	0f 92       	push	r0
    9bec:	0e 94 7f 4e 	call	0x9cfe	; 0x9cfe <modf>
    9bf0:	e7 e6       	ldi	r30, 0x67	; 103
    9bf2:	f2 e0       	ldi	r31, 0x02	; 2
    9bf4:	0e 94 4c 4b 	call	0x9698	; 0x9698 <__fp_powser>
    9bf8:	4f 91       	pop	r20
    9bfa:	5f 91       	pop	r21
    9bfc:	ef 91       	pop	r30
    9bfe:	ff 91       	pop	r31
    9c00:	e5 95       	asr	r30
    9c02:	ee 1f       	adc	r30, r30
    9c04:	ff 1f       	adc	r31, r31
    9c06:	49 f0       	breq	.+18     	; 0x9c1a <exp+0x56>
    9c08:	fe 57       	subi	r31, 0x7E	; 126
    9c0a:	e0 68       	ori	r30, 0x80	; 128
    9c0c:	44 27       	eor	r20, r20
    9c0e:	ee 0f       	add	r30, r30
    9c10:	44 1f       	adc	r20, r20
    9c12:	fa 95       	dec	r31
    9c14:	e1 f7       	brne	.-8      	; 0x9c0e <exp+0x4a>
    9c16:	41 95       	neg	r20
    9c18:	55 0b       	sbc	r21, r21
    9c1a:	0e 94 90 4c 	call	0x9920	; 0x9920 <ldexp>
    9c1e:	0f 90       	pop	r0
    9c20:	07 fe       	sbrs	r0, 7
    9c22:	0c 94 84 4c 	jmp	0x9908	; 0x9908 <inverse>
    9c26:	08 95       	ret

00009c28 <__fp_norm2>:
    9c28:	91 50       	subi	r25, 0x01	; 1
    9c2a:	50 40       	sbci	r21, 0x00	; 0
    9c2c:	66 0f       	add	r22, r22
    9c2e:	77 1f       	adc	r23, r23
    9c30:	88 1f       	adc	r24, r24
    9c32:	d2 f7       	brpl	.-12     	; 0x9c28 <__fp_norm2>
    9c34:	08 95       	ret

00009c36 <__fp_powsodd>:
    9c36:	9f 93       	push	r25
    9c38:	8f 93       	push	r24
    9c3a:	7f 93       	push	r23
    9c3c:	6f 93       	push	r22
    9c3e:	ff 93       	push	r31
    9c40:	ef 93       	push	r30
    9c42:	9b 01       	movw	r18, r22
    9c44:	ac 01       	movw	r20, r24
    9c46:	0e 94 c6 4c 	call	0x998c	; 0x998c <__mulsf3>
    9c4a:	ef 91       	pop	r30
    9c4c:	ff 91       	pop	r31
    9c4e:	0e 94 4c 4b 	call	0x9698	; 0x9698 <__fp_powser>
    9c52:	2f 91       	pop	r18
    9c54:	3f 91       	pop	r19
    9c56:	4f 91       	pop	r20
    9c58:	5f 91       	pop	r21
    9c5a:	0c 94 c6 4c 	jmp	0x998c	; 0x998c <__mulsf3>
    9c5e:	16 f0       	brts	.+4      	; 0x9c64 <__fp_powsodd+0x2e>
    9c60:	0c 94 3b 4b 	jmp	0x9676	; 0x9676 <__fp_mpack>
    9c64:	0c 94 49 4b 	jmp	0x9692	; 0x9692 <__fp_nan>
    9c68:	68 94       	set
    9c6a:	0c 94 1a 4b 	jmp	0x9634	; 0x9634 <__fp_inf>

00009c6e <log>:
    9c6e:	0e 94 d9 4b 	call	0x97b2	; 0x97b2 <__fp_splitA>
    9c72:	a8 f3       	brcs	.-22     	; 0x9c5e <__fp_powsodd+0x28>
    9c74:	99 23       	and	r25, r25
    9c76:	c1 f3       	breq	.-16     	; 0x9c68 <__fp_powsodd+0x32>
    9c78:	ae f3       	brts	.-22     	; 0x9c64 <__fp_powsodd+0x2e>
    9c7a:	df 93       	push	r29
    9c7c:	cf 93       	push	r28
    9c7e:	1f 93       	push	r17
    9c80:	0f 93       	push	r16
    9c82:	ff 92       	push	r15
    9c84:	c9 2f       	mov	r28, r25
    9c86:	dd 27       	eor	r29, r29
    9c88:	88 23       	and	r24, r24
    9c8a:	2a f0       	brmi	.+10     	; 0x9c96 <log+0x28>
    9c8c:	21 97       	sbiw	r28, 0x01	; 1
    9c8e:	66 0f       	add	r22, r22
    9c90:	77 1f       	adc	r23, r23
    9c92:	88 1f       	adc	r24, r24
    9c94:	da f7       	brpl	.-10     	; 0x9c8c <log+0x1e>
    9c96:	20 e0       	ldi	r18, 0x00	; 0
    9c98:	30 e0       	ldi	r19, 0x00	; 0
    9c9a:	40 e8       	ldi	r20, 0x80	; 128
    9c9c:	5f eb       	ldi	r21, 0xBF	; 191
    9c9e:	9f e3       	ldi	r25, 0x3F	; 63
    9ca0:	88 39       	cpi	r24, 0x98	; 152
    9ca2:	20 f0       	brcs	.+8      	; 0x9cac <log+0x3e>
    9ca4:	80 3e       	cpi	r24, 0xE0	; 224
    9ca6:	38 f0       	brcs	.+14     	; 0x9cb6 <log+0x48>
    9ca8:	21 96       	adiw	r28, 0x01	; 1
    9caa:	8f 77       	andi	r24, 0x7F	; 127
    9cac:	0e 94 be 48 	call	0x917c	; 0x917c <__addsf3>
    9cb0:	ef e8       	ldi	r30, 0x8F	; 143
    9cb2:	f2 e0       	ldi	r31, 0x02	; 2
    9cb4:	04 c0       	rjmp	.+8      	; 0x9cbe <log+0x50>
    9cb6:	0e 94 be 48 	call	0x917c	; 0x917c <__addsf3>
    9cba:	ec eb       	ldi	r30, 0xBC	; 188
    9cbc:	f2 e0       	ldi	r31, 0x02	; 2
    9cbe:	0e 94 4c 4b 	call	0x9698	; 0x9698 <__fp_powser>
    9cc2:	8b 01       	movw	r16, r22
    9cc4:	be 01       	movw	r22, r28
    9cc6:	ec 01       	movw	r28, r24
    9cc8:	fb 2e       	mov	r15, r27
    9cca:	6f 57       	subi	r22, 0x7F	; 127
    9ccc:	71 09       	sbc	r23, r1
    9cce:	75 95       	asr	r23
    9cd0:	77 1f       	adc	r23, r23
    9cd2:	88 0b       	sbc	r24, r24
    9cd4:	99 0b       	sbc	r25, r25
    9cd6:	0e 94 67 4a 	call	0x94ce	; 0x94ce <__floatsisf>
    9cda:	28 e1       	ldi	r18, 0x18	; 24
    9cdc:	32 e7       	ldi	r19, 0x72	; 114
    9cde:	41 e3       	ldi	r20, 0x31	; 49
    9ce0:	5f e3       	ldi	r21, 0x3F	; 63
    9ce2:	0e 94 d9 4c 	call	0x99b2	; 0x99b2 <__mulsf3x>
    9ce6:	af 2d       	mov	r26, r15
    9ce8:	98 01       	movw	r18, r16
    9cea:	ae 01       	movw	r20, r28
    9cec:	ff 90       	pop	r15
    9cee:	0f 91       	pop	r16
    9cf0:	1f 91       	pop	r17
    9cf2:	cf 91       	pop	r28
    9cf4:	df 91       	pop	r29
    9cf6:	0e 94 d5 48 	call	0x91aa	; 0x91aa <__addsf3x>
    9cfa:	0c 94 ac 4b 	jmp	0x9758	; 0x9758 <__fp_round>

00009cfe <modf>:
    9cfe:	fa 01       	movw	r30, r20
    9d00:	dc 01       	movw	r26, r24
    9d02:	aa 0f       	add	r26, r26
    9d04:	bb 1f       	adc	r27, r27
    9d06:	9b 01       	movw	r18, r22
    9d08:	ac 01       	movw	r20, r24
    9d0a:	bf 57       	subi	r27, 0x7F	; 127
    9d0c:	28 f4       	brcc	.+10     	; 0x9d18 <modf+0x1a>
    9d0e:	22 27       	eor	r18, r18
    9d10:	33 27       	eor	r19, r19
    9d12:	44 27       	eor	r20, r20
    9d14:	50 78       	andi	r21, 0x80	; 128
    9d16:	20 c0       	rjmp	.+64     	; 0x9d58 <modf+0x5a>
    9d18:	b7 51       	subi	r27, 0x17	; 23
    9d1a:	90 f4       	brcc	.+36     	; 0x9d40 <modf+0x42>
    9d1c:	ab 2f       	mov	r26, r27
    9d1e:	00 24       	eor	r0, r0
    9d20:	46 95       	lsr	r20
    9d22:	37 95       	ror	r19
    9d24:	27 95       	ror	r18
    9d26:	01 1c       	adc	r0, r1
    9d28:	a3 95       	inc	r26
    9d2a:	d2 f3       	brmi	.-12     	; 0x9d20 <modf+0x22>
    9d2c:	00 20       	and	r0, r0
    9d2e:	71 f0       	breq	.+28     	; 0x9d4c <modf+0x4e>
    9d30:	22 0f       	add	r18, r18
    9d32:	33 1f       	adc	r19, r19
    9d34:	44 1f       	adc	r20, r20
    9d36:	b3 95       	inc	r27
    9d38:	da f3       	brmi	.-10     	; 0x9d30 <modf+0x32>
    9d3a:	0e d0       	rcall	.+28     	; 0x9d58 <modf+0x5a>
    9d3c:	0c 94 bd 48 	jmp	0x917a	; 0x917a <__subsf3>
    9d40:	61 30       	cpi	r22, 0x01	; 1
    9d42:	71 05       	cpc	r23, r1
    9d44:	a0 e8       	ldi	r26, 0x80	; 128
    9d46:	8a 07       	cpc	r24, r26
    9d48:	b9 46       	sbci	r27, 0x69	; 105
    9d4a:	30 f4       	brcc	.+12     	; 0x9d58 <modf+0x5a>
    9d4c:	9b 01       	movw	r18, r22
    9d4e:	ac 01       	movw	r20, r24
    9d50:	66 27       	eor	r22, r22
    9d52:	77 27       	eor	r23, r23
    9d54:	88 27       	eor	r24, r24
    9d56:	90 78       	andi	r25, 0x80	; 128
    9d58:	30 96       	adiw	r30, 0x00	; 0
    9d5a:	21 f0       	breq	.+8      	; 0x9d64 <modf+0x66>
    9d5c:	20 83       	st	Z, r18
    9d5e:	31 83       	std	Z+1, r19	; 0x01
    9d60:	42 83       	std	Z+2, r20	; 0x02
    9d62:	53 83       	std	Z+3, r21	; 0x03
    9d64:	08 95       	ret

00009d66 <vfprintf>:
    9d66:	2f 92       	push	r2
    9d68:	3f 92       	push	r3
    9d6a:	4f 92       	push	r4
    9d6c:	5f 92       	push	r5
    9d6e:	6f 92       	push	r6
    9d70:	7f 92       	push	r7
    9d72:	8f 92       	push	r8
    9d74:	9f 92       	push	r9
    9d76:	af 92       	push	r10
    9d78:	bf 92       	push	r11
    9d7a:	cf 92       	push	r12
    9d7c:	df 92       	push	r13
    9d7e:	ef 92       	push	r14
    9d80:	ff 92       	push	r15
    9d82:	0f 93       	push	r16
    9d84:	1f 93       	push	r17
    9d86:	cf 93       	push	r28
    9d88:	df 93       	push	r29
    9d8a:	cd b7       	in	r28, 0x3d	; 61
    9d8c:	de b7       	in	r29, 0x3e	; 62
    9d8e:	63 97       	sbiw	r28, 0x13	; 19
    9d90:	cd bf       	out	0x3d, r28	; 61
    9d92:	de bf       	out	0x3e, r29	; 62
    9d94:	6c 01       	movw	r12, r24
    9d96:	4b 01       	movw	r8, r22
    9d98:	2a 01       	movw	r4, r20
    9d9a:	fc 01       	movw	r30, r24
    9d9c:	16 82       	std	Z+6, r1	; 0x06
    9d9e:	17 82       	std	Z+7, r1	; 0x07
    9da0:	83 81       	ldd	r24, Z+3	; 0x03
    9da2:	81 ff       	sbrs	r24, 1
    9da4:	43 c3       	rjmp	.+1670   	; 0xa42c <vfprintf+0x6c6>
    9da6:	ae 01       	movw	r20, r28
    9da8:	4f 5f       	subi	r20, 0xFF	; 255
    9daa:	5f 4f       	sbci	r21, 0xFF	; 255
    9dac:	3a 01       	movw	r6, r20
    9dae:	f6 01       	movw	r30, r12
    9db0:	93 81       	ldd	r25, Z+3	; 0x03
    9db2:	f4 01       	movw	r30, r8
    9db4:	93 fd       	sbrc	r25, 3
    9db6:	85 91       	lpm	r24, Z+
    9db8:	93 ff       	sbrs	r25, 3
    9dba:	81 91       	ld	r24, Z+
    9dbc:	4f 01       	movw	r8, r30
    9dbe:	88 23       	and	r24, r24
    9dc0:	09 f4       	brne	.+2      	; 0x9dc4 <vfprintf+0x5e>
    9dc2:	30 c3       	rjmp	.+1632   	; 0xa424 <vfprintf+0x6be>
    9dc4:	85 32       	cpi	r24, 0x25	; 37
    9dc6:	39 f4       	brne	.+14     	; 0x9dd6 <vfprintf+0x70>
    9dc8:	93 fd       	sbrc	r25, 3
    9dca:	85 91       	lpm	r24, Z+
    9dcc:	93 ff       	sbrs	r25, 3
    9dce:	81 91       	ld	r24, Z+
    9dd0:	4f 01       	movw	r8, r30
    9dd2:	85 32       	cpi	r24, 0x25	; 37
    9dd4:	39 f4       	brne	.+14     	; 0x9de4 <vfprintf+0x7e>
    9dd6:	b6 01       	movw	r22, r12
    9dd8:	90 e0       	ldi	r25, 0x00	; 0
    9dda:	0e 94 ab 56 	call	0xad56	; 0xad56 <fputc>
    9dde:	52 01       	movw	r10, r4
    9de0:	25 01       	movw	r4, r10
    9de2:	e5 cf       	rjmp	.-54     	; 0x9dae <vfprintf+0x48>
    9de4:	10 e0       	ldi	r17, 0x00	; 0
    9de6:	f1 2c       	mov	r15, r1
    9de8:	20 e0       	ldi	r18, 0x00	; 0
    9dea:	20 32       	cpi	r18, 0x20	; 32
    9dec:	a0 f4       	brcc	.+40     	; 0x9e16 <vfprintf+0xb0>
    9dee:	8b 32       	cpi	r24, 0x2B	; 43
    9df0:	69 f0       	breq	.+26     	; 0x9e0c <vfprintf+0xa6>
    9df2:	30 f4       	brcc	.+12     	; 0x9e00 <vfprintf+0x9a>
    9df4:	80 32       	cpi	r24, 0x20	; 32
    9df6:	59 f0       	breq	.+22     	; 0x9e0e <vfprintf+0xa8>
    9df8:	83 32       	cpi	r24, 0x23	; 35
    9dfa:	69 f4       	brne	.+26     	; 0x9e16 <vfprintf+0xb0>
    9dfc:	20 61       	ori	r18, 0x10	; 16
    9dfe:	2c c0       	rjmp	.+88     	; 0x9e58 <vfprintf+0xf2>
    9e00:	8d 32       	cpi	r24, 0x2D	; 45
    9e02:	39 f0       	breq	.+14     	; 0x9e12 <vfprintf+0xac>
    9e04:	80 33       	cpi	r24, 0x30	; 48
    9e06:	39 f4       	brne	.+14     	; 0x9e16 <vfprintf+0xb0>
    9e08:	21 60       	ori	r18, 0x01	; 1
    9e0a:	26 c0       	rjmp	.+76     	; 0x9e58 <vfprintf+0xf2>
    9e0c:	22 60       	ori	r18, 0x02	; 2
    9e0e:	24 60       	ori	r18, 0x04	; 4
    9e10:	23 c0       	rjmp	.+70     	; 0x9e58 <vfprintf+0xf2>
    9e12:	28 60       	ori	r18, 0x08	; 8
    9e14:	21 c0       	rjmp	.+66     	; 0x9e58 <vfprintf+0xf2>
    9e16:	27 fd       	sbrc	r18, 7
    9e18:	27 c0       	rjmp	.+78     	; 0x9e68 <vfprintf+0x102>
    9e1a:	30 ed       	ldi	r19, 0xD0	; 208
    9e1c:	38 0f       	add	r19, r24
    9e1e:	3a 30       	cpi	r19, 0x0A	; 10
    9e20:	78 f4       	brcc	.+30     	; 0x9e40 <vfprintf+0xda>
    9e22:	26 ff       	sbrs	r18, 6
    9e24:	06 c0       	rjmp	.+12     	; 0x9e32 <vfprintf+0xcc>
    9e26:	fa e0       	ldi	r31, 0x0A	; 10
    9e28:	1f 9f       	mul	r17, r31
    9e2a:	30 0d       	add	r19, r0
    9e2c:	11 24       	eor	r1, r1
    9e2e:	13 2f       	mov	r17, r19
    9e30:	13 c0       	rjmp	.+38     	; 0x9e58 <vfprintf+0xf2>
    9e32:	4a e0       	ldi	r20, 0x0A	; 10
    9e34:	f4 9e       	mul	r15, r20
    9e36:	30 0d       	add	r19, r0
    9e38:	11 24       	eor	r1, r1
    9e3a:	f3 2e       	mov	r15, r19
    9e3c:	20 62       	ori	r18, 0x20	; 32
    9e3e:	0c c0       	rjmp	.+24     	; 0x9e58 <vfprintf+0xf2>
    9e40:	8e 32       	cpi	r24, 0x2E	; 46
    9e42:	21 f4       	brne	.+8      	; 0x9e4c <vfprintf+0xe6>
    9e44:	26 fd       	sbrc	r18, 6
    9e46:	ee c2       	rjmp	.+1500   	; 0xa424 <vfprintf+0x6be>
    9e48:	20 64       	ori	r18, 0x40	; 64
    9e4a:	06 c0       	rjmp	.+12     	; 0x9e58 <vfprintf+0xf2>
    9e4c:	8c 36       	cpi	r24, 0x6C	; 108
    9e4e:	11 f4       	brne	.+4      	; 0x9e54 <vfprintf+0xee>
    9e50:	20 68       	ori	r18, 0x80	; 128
    9e52:	02 c0       	rjmp	.+4      	; 0x9e58 <vfprintf+0xf2>
    9e54:	88 36       	cpi	r24, 0x68	; 104
    9e56:	41 f4       	brne	.+16     	; 0x9e68 <vfprintf+0x102>
    9e58:	f4 01       	movw	r30, r8
    9e5a:	93 fd       	sbrc	r25, 3
    9e5c:	85 91       	lpm	r24, Z+
    9e5e:	93 ff       	sbrs	r25, 3
    9e60:	81 91       	ld	r24, Z+
    9e62:	4f 01       	movw	r8, r30
    9e64:	81 11       	cpse	r24, r1
    9e66:	c1 cf       	rjmp	.-126    	; 0x9dea <vfprintf+0x84>
    9e68:	9b eb       	ldi	r25, 0xBB	; 187
    9e6a:	98 0f       	add	r25, r24
    9e6c:	93 30       	cpi	r25, 0x03	; 3
    9e6e:	18 f4       	brcc	.+6      	; 0x9e76 <vfprintf+0x110>
    9e70:	20 61       	ori	r18, 0x10	; 16
    9e72:	80 5e       	subi	r24, 0xE0	; 224
    9e74:	06 c0       	rjmp	.+12     	; 0x9e82 <vfprintf+0x11c>
    9e76:	9b e9       	ldi	r25, 0x9B	; 155
    9e78:	98 0f       	add	r25, r24
    9e7a:	93 30       	cpi	r25, 0x03	; 3
    9e7c:	08 f0       	brcs	.+2      	; 0x9e80 <vfprintf+0x11a>
    9e7e:	71 c1       	rjmp	.+738    	; 0xa162 <vfprintf+0x3fc>
    9e80:	2f 7e       	andi	r18, 0xEF	; 239
    9e82:	26 ff       	sbrs	r18, 6
    9e84:	16 e0       	ldi	r17, 0x06	; 6
    9e86:	2f 73       	andi	r18, 0x3F	; 63
    9e88:	32 2e       	mov	r3, r18
    9e8a:	85 36       	cpi	r24, 0x65	; 101
    9e8c:	19 f4       	brne	.+6      	; 0x9e94 <vfprintf+0x12e>
    9e8e:	20 64       	ori	r18, 0x40	; 64
    9e90:	32 2e       	mov	r3, r18
    9e92:	08 c0       	rjmp	.+16     	; 0x9ea4 <vfprintf+0x13e>
    9e94:	86 36       	cpi	r24, 0x66	; 102
    9e96:	21 f4       	brne	.+8      	; 0x9ea0 <vfprintf+0x13a>
    9e98:	f2 2f       	mov	r31, r18
    9e9a:	f0 68       	ori	r31, 0x80	; 128
    9e9c:	3f 2e       	mov	r3, r31
    9e9e:	02 c0       	rjmp	.+4      	; 0x9ea4 <vfprintf+0x13e>
    9ea0:	11 11       	cpse	r17, r1
    9ea2:	11 50       	subi	r17, 0x01	; 1
    9ea4:	37 fe       	sbrs	r3, 7
    9ea6:	07 c0       	rjmp	.+14     	; 0x9eb6 <vfprintf+0x150>
    9ea8:	1c 33       	cpi	r17, 0x3C	; 60
    9eaa:	50 f4       	brcc	.+20     	; 0x9ec0 <vfprintf+0x15a>
    9eac:	ee 24       	eor	r14, r14
    9eae:	e3 94       	inc	r14
    9eb0:	e1 0e       	add	r14, r17
    9eb2:	27 e0       	ldi	r18, 0x07	; 7
    9eb4:	0b c0       	rjmp	.+22     	; 0x9ecc <vfprintf+0x166>
    9eb6:	18 30       	cpi	r17, 0x08	; 8
    9eb8:	38 f0       	brcs	.+14     	; 0x9ec8 <vfprintf+0x162>
    9eba:	27 e0       	ldi	r18, 0x07	; 7
    9ebc:	17 e0       	ldi	r17, 0x07	; 7
    9ebe:	05 c0       	rjmp	.+10     	; 0x9eca <vfprintf+0x164>
    9ec0:	27 e0       	ldi	r18, 0x07	; 7
    9ec2:	4c e3       	ldi	r20, 0x3C	; 60
    9ec4:	e4 2e       	mov	r14, r20
    9ec6:	02 c0       	rjmp	.+4      	; 0x9ecc <vfprintf+0x166>
    9ec8:	21 2f       	mov	r18, r17
    9eca:	e1 2c       	mov	r14, r1
    9ecc:	52 01       	movw	r10, r4
    9ece:	44 e0       	ldi	r20, 0x04	; 4
    9ed0:	a4 0e       	add	r10, r20
    9ed2:	b1 1c       	adc	r11, r1
    9ed4:	f2 01       	movw	r30, r4
    9ed6:	60 81       	ld	r22, Z
    9ed8:	71 81       	ldd	r23, Z+1	; 0x01
    9eda:	82 81       	ldd	r24, Z+2	; 0x02
    9edc:	93 81       	ldd	r25, Z+3	; 0x03
    9ede:	0e 2d       	mov	r16, r14
    9ee0:	a3 01       	movw	r20, r6
    9ee2:	0e 94 41 55 	call	0xaa82	; 0xaa82 <__ftoa_engine>
    9ee6:	2c 01       	movw	r4, r24
    9ee8:	09 81       	ldd	r16, Y+1	; 0x01
    9eea:	00 ff       	sbrs	r16, 0
    9eec:	02 c0       	rjmp	.+4      	; 0x9ef2 <vfprintf+0x18c>
    9eee:	03 ff       	sbrs	r16, 3
    9ef0:	07 c0       	rjmp	.+14     	; 0x9f00 <vfprintf+0x19a>
    9ef2:	31 fc       	sbrc	r3, 1
    9ef4:	08 c0       	rjmp	.+16     	; 0x9f06 <vfprintf+0x1a0>
    9ef6:	32 fe       	sbrs	r3, 2
    9ef8:	09 c0       	rjmp	.+18     	; 0x9f0c <vfprintf+0x1a6>
    9efa:	30 e2       	ldi	r19, 0x20	; 32
    9efc:	23 2e       	mov	r2, r19
    9efe:	07 c0       	rjmp	.+14     	; 0x9f0e <vfprintf+0x1a8>
    9f00:	2d e2       	ldi	r18, 0x2D	; 45
    9f02:	22 2e       	mov	r2, r18
    9f04:	04 c0       	rjmp	.+8      	; 0x9f0e <vfprintf+0x1a8>
    9f06:	9b e2       	ldi	r25, 0x2B	; 43
    9f08:	29 2e       	mov	r2, r25
    9f0a:	01 c0       	rjmp	.+2      	; 0x9f0e <vfprintf+0x1a8>
    9f0c:	21 2c       	mov	r2, r1
    9f0e:	80 2f       	mov	r24, r16
    9f10:	8c 70       	andi	r24, 0x0C	; 12
    9f12:	19 f0       	breq	.+6      	; 0x9f1a <vfprintf+0x1b4>
    9f14:	21 10       	cpse	r2, r1
    9f16:	68 c2       	rjmp	.+1232   	; 0xa3e8 <vfprintf+0x682>
    9f18:	a8 c2       	rjmp	.+1360   	; 0xa46a <vfprintf+0x704>
    9f1a:	37 fe       	sbrs	r3, 7
    9f1c:	0f c0       	rjmp	.+30     	; 0x9f3c <vfprintf+0x1d6>
    9f1e:	e4 0c       	add	r14, r4
    9f20:	04 ff       	sbrs	r16, 4
    9f22:	04 c0       	rjmp	.+8      	; 0x9f2c <vfprintf+0x1c6>
    9f24:	8a 81       	ldd	r24, Y+2	; 0x02
    9f26:	81 33       	cpi	r24, 0x31	; 49
    9f28:	09 f4       	brne	.+2      	; 0x9f2c <vfprintf+0x1c6>
    9f2a:	ea 94       	dec	r14
    9f2c:	1e 14       	cp	r1, r14
    9f2e:	74 f5       	brge	.+92     	; 0x9f8c <vfprintf+0x226>
    9f30:	f8 e0       	ldi	r31, 0x08	; 8
    9f32:	fe 15       	cp	r31, r14
    9f34:	78 f5       	brcc	.+94     	; 0x9f94 <vfprintf+0x22e>
    9f36:	88 e0       	ldi	r24, 0x08	; 8
    9f38:	e8 2e       	mov	r14, r24
    9f3a:	2c c0       	rjmp	.+88     	; 0x9f94 <vfprintf+0x22e>
    9f3c:	36 fc       	sbrc	r3, 6
    9f3e:	2a c0       	rjmp	.+84     	; 0x9f94 <vfprintf+0x22e>
    9f40:	81 2f       	mov	r24, r17
    9f42:	90 e0       	ldi	r25, 0x00	; 0
    9f44:	84 15       	cp	r24, r4
    9f46:	95 05       	cpc	r25, r5
    9f48:	9c f0       	brlt	.+38     	; 0x9f70 <vfprintf+0x20a>
    9f4a:	2c ef       	ldi	r18, 0xFC	; 252
    9f4c:	42 16       	cp	r4, r18
    9f4e:	2f ef       	ldi	r18, 0xFF	; 255
    9f50:	52 06       	cpc	r5, r18
    9f52:	74 f0       	brlt	.+28     	; 0x9f70 <vfprintf+0x20a>
    9f54:	43 2d       	mov	r20, r3
    9f56:	40 68       	ori	r20, 0x80	; 128
    9f58:	34 2e       	mov	r3, r20
    9f5a:	0a c0       	rjmp	.+20     	; 0x9f70 <vfprintf+0x20a>
    9f5c:	e2 e0       	ldi	r30, 0x02	; 2
    9f5e:	f0 e0       	ldi	r31, 0x00	; 0
    9f60:	ec 0f       	add	r30, r28
    9f62:	fd 1f       	adc	r31, r29
    9f64:	e1 0f       	add	r30, r17
    9f66:	f1 1d       	adc	r31, r1
    9f68:	80 81       	ld	r24, Z
    9f6a:	80 33       	cpi	r24, 0x30	; 48
    9f6c:	19 f4       	brne	.+6      	; 0x9f74 <vfprintf+0x20e>
    9f6e:	11 50       	subi	r17, 0x01	; 1
    9f70:	11 11       	cpse	r17, r1
    9f72:	f4 cf       	rjmp	.-24     	; 0x9f5c <vfprintf+0x1f6>
    9f74:	37 fe       	sbrs	r3, 7
    9f76:	0e c0       	rjmp	.+28     	; 0x9f94 <vfprintf+0x22e>
    9f78:	ee 24       	eor	r14, r14
    9f7a:	e3 94       	inc	r14
    9f7c:	e1 0e       	add	r14, r17
    9f7e:	81 2f       	mov	r24, r17
    9f80:	90 e0       	ldi	r25, 0x00	; 0
    9f82:	48 16       	cp	r4, r24
    9f84:	59 06       	cpc	r5, r25
    9f86:	2c f4       	brge	.+10     	; 0x9f92 <vfprintf+0x22c>
    9f88:	14 19       	sub	r17, r4
    9f8a:	04 c0       	rjmp	.+8      	; 0x9f94 <vfprintf+0x22e>
    9f8c:	ee 24       	eor	r14, r14
    9f8e:	e3 94       	inc	r14
    9f90:	01 c0       	rjmp	.+2      	; 0x9f94 <vfprintf+0x22e>
    9f92:	10 e0       	ldi	r17, 0x00	; 0
    9f94:	37 fe       	sbrs	r3, 7
    9f96:	06 c0       	rjmp	.+12     	; 0x9fa4 <vfprintf+0x23e>
    9f98:	14 14       	cp	r1, r4
    9f9a:	15 04       	cpc	r1, r5
    9f9c:	34 f4       	brge	.+12     	; 0x9faa <vfprintf+0x244>
    9f9e:	c2 01       	movw	r24, r4
    9fa0:	01 96       	adiw	r24, 0x01	; 1
    9fa2:	05 c0       	rjmp	.+10     	; 0x9fae <vfprintf+0x248>
    9fa4:	85 e0       	ldi	r24, 0x05	; 5
    9fa6:	90 e0       	ldi	r25, 0x00	; 0
    9fa8:	02 c0       	rjmp	.+4      	; 0x9fae <vfprintf+0x248>
    9faa:	81 e0       	ldi	r24, 0x01	; 1
    9fac:	90 e0       	ldi	r25, 0x00	; 0
    9fae:	21 10       	cpse	r2, r1
    9fb0:	01 96       	adiw	r24, 0x01	; 1
    9fb2:	11 23       	and	r17, r17
    9fb4:	31 f0       	breq	.+12     	; 0x9fc2 <vfprintf+0x25c>
    9fb6:	21 2f       	mov	r18, r17
    9fb8:	30 e0       	ldi	r19, 0x00	; 0
    9fba:	2f 5f       	subi	r18, 0xFF	; 255
    9fbc:	3f 4f       	sbci	r19, 0xFF	; 255
    9fbe:	82 0f       	add	r24, r18
    9fc0:	93 1f       	adc	r25, r19
    9fc2:	2f 2d       	mov	r18, r15
    9fc4:	30 e0       	ldi	r19, 0x00	; 0
    9fc6:	82 17       	cp	r24, r18
    9fc8:	93 07       	cpc	r25, r19
    9fca:	14 f4       	brge	.+4      	; 0x9fd0 <vfprintf+0x26a>
    9fcc:	f8 1a       	sub	r15, r24
    9fce:	01 c0       	rjmp	.+2      	; 0x9fd2 <vfprintf+0x26c>
    9fd0:	f1 2c       	mov	r15, r1
    9fd2:	83 2d       	mov	r24, r3
    9fd4:	89 70       	andi	r24, 0x09	; 9
    9fd6:	49 f4       	brne	.+18     	; 0x9fea <vfprintf+0x284>
    9fd8:	ff 20       	and	r15, r15
    9fda:	39 f0       	breq	.+14     	; 0x9fea <vfprintf+0x284>
    9fdc:	b6 01       	movw	r22, r12
    9fde:	80 e2       	ldi	r24, 0x20	; 32
    9fe0:	90 e0       	ldi	r25, 0x00	; 0
    9fe2:	0e 94 ab 56 	call	0xad56	; 0xad56 <fputc>
    9fe6:	fa 94       	dec	r15
    9fe8:	f7 cf       	rjmp	.-18     	; 0x9fd8 <vfprintf+0x272>
    9fea:	22 20       	and	r2, r2
    9fec:	29 f0       	breq	.+10     	; 0x9ff8 <vfprintf+0x292>
    9fee:	b6 01       	movw	r22, r12
    9ff0:	82 2d       	mov	r24, r2
    9ff2:	90 e0       	ldi	r25, 0x00	; 0
    9ff4:	0e 94 ab 56 	call	0xad56	; 0xad56 <fputc>
    9ff8:	33 fc       	sbrc	r3, 3
    9ffa:	09 c0       	rjmp	.+18     	; 0xa00e <vfprintf+0x2a8>
    9ffc:	ff 20       	and	r15, r15
    9ffe:	39 f0       	breq	.+14     	; 0xa00e <vfprintf+0x2a8>
    a000:	b6 01       	movw	r22, r12
    a002:	80 e3       	ldi	r24, 0x30	; 48
    a004:	90 e0       	ldi	r25, 0x00	; 0
    a006:	0e 94 ab 56 	call	0xad56	; 0xad56 <fputc>
    a00a:	fa 94       	dec	r15
    a00c:	f7 cf       	rjmp	.-18     	; 0x9ffc <vfprintf+0x296>
    a00e:	37 fe       	sbrs	r3, 7
    a010:	5a c0       	rjmp	.+180    	; 0xa0c6 <vfprintf+0x360>
    a012:	94 2d       	mov	r25, r4
    a014:	85 2d       	mov	r24, r5
    a016:	57 fe       	sbrs	r5, 7
    a018:	02 c0       	rjmp	.+4      	; 0xa01e <vfprintf+0x2b8>
    a01a:	90 e0       	ldi	r25, 0x00	; 0
    a01c:	80 e0       	ldi	r24, 0x00	; 0
    a01e:	29 2e       	mov	r2, r25
    a020:	38 2e       	mov	r3, r24
    a022:	20 e0       	ldi	r18, 0x00	; 0
    a024:	30 e0       	ldi	r19, 0x00	; 0
    a026:	a2 01       	movw	r20, r4
    a028:	4e 19       	sub	r20, r14
    a02a:	51 09       	sbc	r21, r1
    a02c:	4c 87       	std	Y+12, r20	; 0x0c
    a02e:	5d 87       	std	Y+13, r21	; 0x0d
    a030:	a2 01       	movw	r20, r4
    a032:	42 19       	sub	r20, r2
    a034:	53 09       	sbc	r21, r3
    a036:	4e 87       	std	Y+14, r20	; 0x0e
    a038:	5f 87       	std	Y+15, r21	; 0x0f
    a03a:	61 2f       	mov	r22, r17
    a03c:	70 e0       	ldi	r23, 0x00	; 0
    a03e:	44 27       	eor	r20, r20
    a040:	55 27       	eor	r21, r21
    a042:	46 1b       	sub	r20, r22
    a044:	57 0b       	sbc	r21, r23
    a046:	48 8b       	std	Y+16, r20	; 0x10
    a048:	59 8b       	std	Y+17, r21	; 0x11
    a04a:	5f ef       	ldi	r21, 0xFF	; 255
    a04c:	25 16       	cp	r2, r21
    a04e:	35 06       	cpc	r3, r21
    a050:	49 f4       	brne	.+18     	; 0xa064 <vfprintf+0x2fe>
    a052:	b6 01       	movw	r22, r12
    a054:	8e e2       	ldi	r24, 0x2E	; 46
    a056:	90 e0       	ldi	r25, 0x00	; 0
    a058:	2a 8b       	std	Y+18, r18	; 0x12
    a05a:	3b 8b       	std	Y+19, r19	; 0x13
    a05c:	0e 94 ab 56 	call	0xad56	; 0xad56 <fputc>
    a060:	3b 89       	ldd	r19, Y+19	; 0x13
    a062:	2a 89       	ldd	r18, Y+18	; 0x12
    a064:	42 14       	cp	r4, r2
    a066:	53 04       	cpc	r5, r3
    a068:	6c f0       	brlt	.+26     	; 0xa084 <vfprintf+0x31e>
    a06a:	4c 85       	ldd	r20, Y+12	; 0x0c
    a06c:	5d 85       	ldd	r21, Y+13	; 0x0d
    a06e:	42 15       	cp	r20, r2
    a070:	53 05       	cpc	r21, r3
    a072:	44 f4       	brge	.+16     	; 0xa084 <vfprintf+0x31e>
    a074:	ee 85       	ldd	r30, Y+14	; 0x0e
    a076:	ff 85       	ldd	r31, Y+15	; 0x0f
    a078:	e2 0f       	add	r30, r18
    a07a:	f3 1f       	adc	r31, r19
    a07c:	e6 0d       	add	r30, r6
    a07e:	f7 1d       	adc	r31, r7
    a080:	81 81       	ldd	r24, Z+1	; 0x01
    a082:	01 c0       	rjmp	.+2      	; 0xa086 <vfprintf+0x320>
    a084:	80 e3       	ldi	r24, 0x30	; 48
    a086:	51 e0       	ldi	r21, 0x01	; 1
    a088:	25 1a       	sub	r2, r21
    a08a:	31 08       	sbc	r3, r1
    a08c:	2f 5f       	subi	r18, 0xFF	; 255
    a08e:	3f 4f       	sbci	r19, 0xFF	; 255
    a090:	48 89       	ldd	r20, Y+16	; 0x10
    a092:	59 89       	ldd	r21, Y+17	; 0x11
    a094:	24 16       	cp	r2, r20
    a096:	35 06       	cpc	r3, r21
    a098:	4c f0       	brlt	.+18     	; 0xa0ac <vfprintf+0x346>
    a09a:	b6 01       	movw	r22, r12
    a09c:	90 e0       	ldi	r25, 0x00	; 0
    a09e:	2a 8b       	std	Y+18, r18	; 0x12
    a0a0:	3b 8b       	std	Y+19, r19	; 0x13
    a0a2:	0e 94 ab 56 	call	0xad56	; 0xad56 <fputc>
    a0a6:	2a 89       	ldd	r18, Y+18	; 0x12
    a0a8:	3b 89       	ldd	r19, Y+19	; 0x13
    a0aa:	cf cf       	rjmp	.-98     	; 0xa04a <vfprintf+0x2e4>
    a0ac:	24 14       	cp	r2, r4
    a0ae:	35 04       	cpc	r3, r5
    a0b0:	39 f4       	brne	.+14     	; 0xa0c0 <vfprintf+0x35a>
    a0b2:	9a 81       	ldd	r25, Y+2	; 0x02
    a0b4:	96 33       	cpi	r25, 0x36	; 54
    a0b6:	18 f4       	brcc	.+6      	; 0xa0be <vfprintf+0x358>
    a0b8:	95 33       	cpi	r25, 0x35	; 53
    a0ba:	11 f4       	brne	.+4      	; 0xa0c0 <vfprintf+0x35a>
    a0bc:	04 ff       	sbrs	r16, 4
    a0be:	81 e3       	ldi	r24, 0x31	; 49
    a0c0:	b6 01       	movw	r22, r12
    a0c2:	90 e0       	ldi	r25, 0x00	; 0
    a0c4:	4b c0       	rjmp	.+150    	; 0xa15c <vfprintf+0x3f6>
    a0c6:	8a 81       	ldd	r24, Y+2	; 0x02
    a0c8:	81 33       	cpi	r24, 0x31	; 49
    a0ca:	09 f0       	breq	.+2      	; 0xa0ce <vfprintf+0x368>
    a0cc:	0f 7e       	andi	r16, 0xEF	; 239
    a0ce:	b6 01       	movw	r22, r12
    a0d0:	90 e0       	ldi	r25, 0x00	; 0
    a0d2:	0e 94 ab 56 	call	0xad56	; 0xad56 <fputc>
    a0d6:	11 11       	cpse	r17, r1
    a0d8:	05 c0       	rjmp	.+10     	; 0xa0e4 <vfprintf+0x37e>
    a0da:	34 fc       	sbrc	r3, 4
    a0dc:	18 c0       	rjmp	.+48     	; 0xa10e <vfprintf+0x3a8>
    a0de:	85 e6       	ldi	r24, 0x65	; 101
    a0e0:	90 e0       	ldi	r25, 0x00	; 0
    a0e2:	17 c0       	rjmp	.+46     	; 0xa112 <vfprintf+0x3ac>
    a0e4:	b6 01       	movw	r22, r12
    a0e6:	8e e2       	ldi	r24, 0x2E	; 46
    a0e8:	90 e0       	ldi	r25, 0x00	; 0
    a0ea:	0e 94 ab 56 	call	0xad56	; 0xad56 <fputc>
    a0ee:	82 e0       	ldi	r24, 0x02	; 2
    a0f0:	ee 24       	eor	r14, r14
    a0f2:	e3 94       	inc	r14
    a0f4:	e8 0e       	add	r14, r24
    a0f6:	f3 01       	movw	r30, r6
    a0f8:	e8 0f       	add	r30, r24
    a0fa:	f1 1d       	adc	r31, r1
    a0fc:	80 81       	ld	r24, Z
    a0fe:	b6 01       	movw	r22, r12
    a100:	90 e0       	ldi	r25, 0x00	; 0
    a102:	0e 94 ab 56 	call	0xad56	; 0xad56 <fputc>
    a106:	11 50       	subi	r17, 0x01	; 1
    a108:	8e 2d       	mov	r24, r14
    a10a:	91 f7       	brne	.-28     	; 0xa0f0 <vfprintf+0x38a>
    a10c:	e6 cf       	rjmp	.-52     	; 0xa0da <vfprintf+0x374>
    a10e:	85 e4       	ldi	r24, 0x45	; 69
    a110:	90 e0       	ldi	r25, 0x00	; 0
    a112:	b6 01       	movw	r22, r12
    a114:	0e 94 ab 56 	call	0xad56	; 0xad56 <fputc>
    a118:	57 fc       	sbrc	r5, 7
    a11a:	05 c0       	rjmp	.+10     	; 0xa126 <vfprintf+0x3c0>
    a11c:	41 14       	cp	r4, r1
    a11e:	51 04       	cpc	r5, r1
    a120:	39 f4       	brne	.+14     	; 0xa130 <vfprintf+0x3ca>
    a122:	04 ff       	sbrs	r16, 4
    a124:	05 c0       	rjmp	.+10     	; 0xa130 <vfprintf+0x3ca>
    a126:	51 94       	neg	r5
    a128:	41 94       	neg	r4
    a12a:	51 08       	sbc	r5, r1
    a12c:	8d e2       	ldi	r24, 0x2D	; 45
    a12e:	01 c0       	rjmp	.+2      	; 0xa132 <vfprintf+0x3cc>
    a130:	8b e2       	ldi	r24, 0x2B	; 43
    a132:	b6 01       	movw	r22, r12
    a134:	90 e0       	ldi	r25, 0x00	; 0
    a136:	0e 94 ab 56 	call	0xad56	; 0xad56 <fputc>
    a13a:	80 e3       	ldi	r24, 0x30	; 48
    a13c:	9a e0       	ldi	r25, 0x0A	; 10
    a13e:	49 16       	cp	r4, r25
    a140:	51 04       	cpc	r5, r1
    a142:	2c f0       	brlt	.+10     	; 0xa14e <vfprintf+0x3e8>
    a144:	8f 5f       	subi	r24, 0xFF	; 255
    a146:	5a e0       	ldi	r21, 0x0A	; 10
    a148:	45 1a       	sub	r4, r21
    a14a:	51 08       	sbc	r5, r1
    a14c:	f7 cf       	rjmp	.-18     	; 0xa13c <vfprintf+0x3d6>
    a14e:	b6 01       	movw	r22, r12
    a150:	90 e0       	ldi	r25, 0x00	; 0
    a152:	0e 94 ab 56 	call	0xad56	; 0xad56 <fputc>
    a156:	b6 01       	movw	r22, r12
    a158:	c2 01       	movw	r24, r4
    a15a:	c0 96       	adiw	r24, 0x30	; 48
    a15c:	0e 94 ab 56 	call	0xad56	; 0xad56 <fputc>
    a160:	57 c1       	rjmp	.+686    	; 0xa410 <vfprintf+0x6aa>
    a162:	83 36       	cpi	r24, 0x63	; 99
    a164:	31 f0       	breq	.+12     	; 0xa172 <vfprintf+0x40c>
    a166:	83 37       	cpi	r24, 0x73	; 115
    a168:	79 f0       	breq	.+30     	; 0xa188 <vfprintf+0x422>
    a16a:	83 35       	cpi	r24, 0x53	; 83
    a16c:	09 f0       	breq	.+2      	; 0xa170 <vfprintf+0x40a>
    a16e:	58 c0       	rjmp	.+176    	; 0xa220 <vfprintf+0x4ba>
    a170:	21 c0       	rjmp	.+66     	; 0xa1b4 <vfprintf+0x44e>
    a172:	52 01       	movw	r10, r4
    a174:	e2 e0       	ldi	r30, 0x02	; 2
    a176:	ae 0e       	add	r10, r30
    a178:	b1 1c       	adc	r11, r1
    a17a:	f2 01       	movw	r30, r4
    a17c:	80 81       	ld	r24, Z
    a17e:	89 83       	std	Y+1, r24	; 0x01
    a180:	01 e0       	ldi	r16, 0x01	; 1
    a182:	10 e0       	ldi	r17, 0x00	; 0
    a184:	23 01       	movw	r4, r6
    a186:	14 c0       	rjmp	.+40     	; 0xa1b0 <vfprintf+0x44a>
    a188:	52 01       	movw	r10, r4
    a18a:	f2 e0       	ldi	r31, 0x02	; 2
    a18c:	af 0e       	add	r10, r31
    a18e:	b1 1c       	adc	r11, r1
    a190:	f2 01       	movw	r30, r4
    a192:	40 80       	ld	r4, Z
    a194:	51 80       	ldd	r5, Z+1	; 0x01
    a196:	26 ff       	sbrs	r18, 6
    a198:	03 c0       	rjmp	.+6      	; 0xa1a0 <vfprintf+0x43a>
    a19a:	61 2f       	mov	r22, r17
    a19c:	70 e0       	ldi	r23, 0x00	; 0
    a19e:	02 c0       	rjmp	.+4      	; 0xa1a4 <vfprintf+0x43e>
    a1a0:	6f ef       	ldi	r22, 0xFF	; 255
    a1a2:	7f ef       	ldi	r23, 0xFF	; 255
    a1a4:	c2 01       	movw	r24, r4
    a1a6:	2a 8b       	std	Y+18, r18	; 0x12
    a1a8:	0e 94 71 56 	call	0xace2	; 0xace2 <strnlen>
    a1ac:	8c 01       	movw	r16, r24
    a1ae:	2a 89       	ldd	r18, Y+18	; 0x12
    a1b0:	2f 77       	andi	r18, 0x7F	; 127
    a1b2:	15 c0       	rjmp	.+42     	; 0xa1de <vfprintf+0x478>
    a1b4:	52 01       	movw	r10, r4
    a1b6:	f2 e0       	ldi	r31, 0x02	; 2
    a1b8:	af 0e       	add	r10, r31
    a1ba:	b1 1c       	adc	r11, r1
    a1bc:	f2 01       	movw	r30, r4
    a1be:	40 80       	ld	r4, Z
    a1c0:	51 80       	ldd	r5, Z+1	; 0x01
    a1c2:	26 ff       	sbrs	r18, 6
    a1c4:	03 c0       	rjmp	.+6      	; 0xa1cc <vfprintf+0x466>
    a1c6:	61 2f       	mov	r22, r17
    a1c8:	70 e0       	ldi	r23, 0x00	; 0
    a1ca:	02 c0       	rjmp	.+4      	; 0xa1d0 <vfprintf+0x46a>
    a1cc:	6f ef       	ldi	r22, 0xFF	; 255
    a1ce:	7f ef       	ldi	r23, 0xFF	; 255
    a1d0:	c2 01       	movw	r24, r4
    a1d2:	2a 8b       	std	Y+18, r18	; 0x12
    a1d4:	0e 94 2b 56 	call	0xac56	; 0xac56 <strnlen_P>
    a1d8:	8c 01       	movw	r16, r24
    a1da:	2a 89       	ldd	r18, Y+18	; 0x12
    a1dc:	20 68       	ori	r18, 0x80	; 128
    a1de:	32 2e       	mov	r3, r18
    a1e0:	23 fd       	sbrc	r18, 3
    a1e2:	1a c0       	rjmp	.+52     	; 0xa218 <vfprintf+0x4b2>
    a1e4:	8f 2d       	mov	r24, r15
    a1e6:	90 e0       	ldi	r25, 0x00	; 0
    a1e8:	08 17       	cp	r16, r24
    a1ea:	19 07       	cpc	r17, r25
    a1ec:	a8 f4       	brcc	.+42     	; 0xa218 <vfprintf+0x4b2>
    a1ee:	b6 01       	movw	r22, r12
    a1f0:	80 e2       	ldi	r24, 0x20	; 32
    a1f2:	90 e0       	ldi	r25, 0x00	; 0
    a1f4:	0e 94 ab 56 	call	0xad56	; 0xad56 <fputc>
    a1f8:	fa 94       	dec	r15
    a1fa:	f4 cf       	rjmp	.-24     	; 0xa1e4 <vfprintf+0x47e>
    a1fc:	f2 01       	movw	r30, r4
    a1fe:	37 fc       	sbrc	r3, 7
    a200:	85 91       	lpm	r24, Z+
    a202:	37 fe       	sbrs	r3, 7
    a204:	81 91       	ld	r24, Z+
    a206:	2f 01       	movw	r4, r30
    a208:	b6 01       	movw	r22, r12
    a20a:	90 e0       	ldi	r25, 0x00	; 0
    a20c:	0e 94 ab 56 	call	0xad56	; 0xad56 <fputc>
    a210:	f1 10       	cpse	r15, r1
    a212:	fa 94       	dec	r15
    a214:	01 50       	subi	r16, 0x01	; 1
    a216:	11 09       	sbc	r17, r1
    a218:	01 15       	cp	r16, r1
    a21a:	11 05       	cpc	r17, r1
    a21c:	79 f7       	brne	.-34     	; 0xa1fc <vfprintf+0x496>
    a21e:	f8 c0       	rjmp	.+496    	; 0xa410 <vfprintf+0x6aa>
    a220:	84 36       	cpi	r24, 0x64	; 100
    a222:	11 f0       	breq	.+4      	; 0xa228 <vfprintf+0x4c2>
    a224:	89 36       	cpi	r24, 0x69	; 105
    a226:	59 f5       	brne	.+86     	; 0xa27e <vfprintf+0x518>
    a228:	52 01       	movw	r10, r4
    a22a:	27 ff       	sbrs	r18, 7
    a22c:	09 c0       	rjmp	.+18     	; 0xa240 <vfprintf+0x4da>
    a22e:	f4 e0       	ldi	r31, 0x04	; 4
    a230:	af 0e       	add	r10, r31
    a232:	b1 1c       	adc	r11, r1
    a234:	f2 01       	movw	r30, r4
    a236:	60 81       	ld	r22, Z
    a238:	71 81       	ldd	r23, Z+1	; 0x01
    a23a:	82 81       	ldd	r24, Z+2	; 0x02
    a23c:	93 81       	ldd	r25, Z+3	; 0x03
    a23e:	0a c0       	rjmp	.+20     	; 0xa254 <vfprintf+0x4ee>
    a240:	f2 e0       	ldi	r31, 0x02	; 2
    a242:	af 0e       	add	r10, r31
    a244:	b1 1c       	adc	r11, r1
    a246:	f2 01       	movw	r30, r4
    a248:	60 81       	ld	r22, Z
    a24a:	71 81       	ldd	r23, Z+1	; 0x01
    a24c:	07 2e       	mov	r0, r23
    a24e:	00 0c       	add	r0, r0
    a250:	88 0b       	sbc	r24, r24
    a252:	99 0b       	sbc	r25, r25
    a254:	2f 76       	andi	r18, 0x6F	; 111
    a256:	32 2e       	mov	r3, r18
    a258:	97 ff       	sbrs	r25, 7
    a25a:	09 c0       	rjmp	.+18     	; 0xa26e <vfprintf+0x508>
    a25c:	90 95       	com	r25
    a25e:	80 95       	com	r24
    a260:	70 95       	com	r23
    a262:	61 95       	neg	r22
    a264:	7f 4f       	sbci	r23, 0xFF	; 255
    a266:	8f 4f       	sbci	r24, 0xFF	; 255
    a268:	9f 4f       	sbci	r25, 0xFF	; 255
    a26a:	20 68       	ori	r18, 0x80	; 128
    a26c:	32 2e       	mov	r3, r18
    a26e:	2a e0       	ldi	r18, 0x0A	; 10
    a270:	30 e0       	ldi	r19, 0x00	; 0
    a272:	a3 01       	movw	r20, r6
    a274:	0e 94 7f 57 	call	0xaefe	; 0xaefe <__ultoa_invert>
    a278:	e8 2e       	mov	r14, r24
    a27a:	e6 18       	sub	r14, r6
    a27c:	3f c0       	rjmp	.+126    	; 0xa2fc <vfprintf+0x596>
    a27e:	02 2f       	mov	r16, r18
    a280:	85 37       	cpi	r24, 0x75	; 117
    a282:	21 f4       	brne	.+8      	; 0xa28c <vfprintf+0x526>
    a284:	0f 7e       	andi	r16, 0xEF	; 239
    a286:	2a e0       	ldi	r18, 0x0A	; 10
    a288:	30 e0       	ldi	r19, 0x00	; 0
    a28a:	1d c0       	rjmp	.+58     	; 0xa2c6 <vfprintf+0x560>
    a28c:	09 7f       	andi	r16, 0xF9	; 249
    a28e:	8f 36       	cpi	r24, 0x6F	; 111
    a290:	91 f0       	breq	.+36     	; 0xa2b6 <vfprintf+0x550>
    a292:	18 f4       	brcc	.+6      	; 0xa29a <vfprintf+0x534>
    a294:	88 35       	cpi	r24, 0x58	; 88
    a296:	59 f0       	breq	.+22     	; 0xa2ae <vfprintf+0x548>
    a298:	c5 c0       	rjmp	.+394    	; 0xa424 <vfprintf+0x6be>
    a29a:	80 37       	cpi	r24, 0x70	; 112
    a29c:	19 f0       	breq	.+6      	; 0xa2a4 <vfprintf+0x53e>
    a29e:	88 37       	cpi	r24, 0x78	; 120
    a2a0:	11 f0       	breq	.+4      	; 0xa2a6 <vfprintf+0x540>
    a2a2:	c0 c0       	rjmp	.+384    	; 0xa424 <vfprintf+0x6be>
    a2a4:	00 61       	ori	r16, 0x10	; 16
    a2a6:	04 ff       	sbrs	r16, 4
    a2a8:	09 c0       	rjmp	.+18     	; 0xa2bc <vfprintf+0x556>
    a2aa:	04 60       	ori	r16, 0x04	; 4
    a2ac:	07 c0       	rjmp	.+14     	; 0xa2bc <vfprintf+0x556>
    a2ae:	24 ff       	sbrs	r18, 4
    a2b0:	08 c0       	rjmp	.+16     	; 0xa2c2 <vfprintf+0x55c>
    a2b2:	06 60       	ori	r16, 0x06	; 6
    a2b4:	06 c0       	rjmp	.+12     	; 0xa2c2 <vfprintf+0x55c>
    a2b6:	28 e0       	ldi	r18, 0x08	; 8
    a2b8:	30 e0       	ldi	r19, 0x00	; 0
    a2ba:	05 c0       	rjmp	.+10     	; 0xa2c6 <vfprintf+0x560>
    a2bc:	20 e1       	ldi	r18, 0x10	; 16
    a2be:	30 e0       	ldi	r19, 0x00	; 0
    a2c0:	02 c0       	rjmp	.+4      	; 0xa2c6 <vfprintf+0x560>
    a2c2:	20 e1       	ldi	r18, 0x10	; 16
    a2c4:	32 e0       	ldi	r19, 0x02	; 2
    a2c6:	52 01       	movw	r10, r4
    a2c8:	07 ff       	sbrs	r16, 7
    a2ca:	09 c0       	rjmp	.+18     	; 0xa2de <vfprintf+0x578>
    a2cc:	f4 e0       	ldi	r31, 0x04	; 4
    a2ce:	af 0e       	add	r10, r31
    a2d0:	b1 1c       	adc	r11, r1
    a2d2:	f2 01       	movw	r30, r4
    a2d4:	60 81       	ld	r22, Z
    a2d6:	71 81       	ldd	r23, Z+1	; 0x01
    a2d8:	82 81       	ldd	r24, Z+2	; 0x02
    a2da:	93 81       	ldd	r25, Z+3	; 0x03
    a2dc:	08 c0       	rjmp	.+16     	; 0xa2ee <vfprintf+0x588>
    a2de:	f2 e0       	ldi	r31, 0x02	; 2
    a2e0:	af 0e       	add	r10, r31
    a2e2:	b1 1c       	adc	r11, r1
    a2e4:	f2 01       	movw	r30, r4
    a2e6:	60 81       	ld	r22, Z
    a2e8:	71 81       	ldd	r23, Z+1	; 0x01
    a2ea:	80 e0       	ldi	r24, 0x00	; 0
    a2ec:	90 e0       	ldi	r25, 0x00	; 0
    a2ee:	a3 01       	movw	r20, r6
    a2f0:	0e 94 7f 57 	call	0xaefe	; 0xaefe <__ultoa_invert>
    a2f4:	e8 2e       	mov	r14, r24
    a2f6:	e6 18       	sub	r14, r6
    a2f8:	0f 77       	andi	r16, 0x7F	; 127
    a2fa:	30 2e       	mov	r3, r16
    a2fc:	36 fe       	sbrs	r3, 6
    a2fe:	0b c0       	rjmp	.+22     	; 0xa316 <vfprintf+0x5b0>
    a300:	33 2d       	mov	r19, r3
    a302:	3e 7f       	andi	r19, 0xFE	; 254
    a304:	e1 16       	cp	r14, r17
    a306:	50 f4       	brcc	.+20     	; 0xa31c <vfprintf+0x5b6>
    a308:	34 fe       	sbrs	r3, 4
    a30a:	0a c0       	rjmp	.+20     	; 0xa320 <vfprintf+0x5ba>
    a30c:	32 fc       	sbrc	r3, 2
    a30e:	08 c0       	rjmp	.+16     	; 0xa320 <vfprintf+0x5ba>
    a310:	33 2d       	mov	r19, r3
    a312:	3e 7e       	andi	r19, 0xEE	; 238
    a314:	05 c0       	rjmp	.+10     	; 0xa320 <vfprintf+0x5ba>
    a316:	0e 2d       	mov	r16, r14
    a318:	33 2d       	mov	r19, r3
    a31a:	03 c0       	rjmp	.+6      	; 0xa322 <vfprintf+0x5bc>
    a31c:	0e 2d       	mov	r16, r14
    a31e:	01 c0       	rjmp	.+2      	; 0xa322 <vfprintf+0x5bc>
    a320:	01 2f       	mov	r16, r17
    a322:	34 ff       	sbrs	r19, 4
    a324:	0c c0       	rjmp	.+24     	; 0xa33e <vfprintf+0x5d8>
    a326:	fe 01       	movw	r30, r28
    a328:	ee 0d       	add	r30, r14
    a32a:	f1 1d       	adc	r31, r1
    a32c:	80 81       	ld	r24, Z
    a32e:	80 33       	cpi	r24, 0x30	; 48
    a330:	11 f4       	brne	.+4      	; 0xa336 <vfprintf+0x5d0>
    a332:	39 7e       	andi	r19, 0xE9	; 233
    a334:	08 c0       	rjmp	.+16     	; 0xa346 <vfprintf+0x5e0>
    a336:	32 ff       	sbrs	r19, 2
    a338:	05 c0       	rjmp	.+10     	; 0xa344 <vfprintf+0x5de>
    a33a:	0e 5f       	subi	r16, 0xFE	; 254
    a33c:	04 c0       	rjmp	.+8      	; 0xa346 <vfprintf+0x5e0>
    a33e:	83 2f       	mov	r24, r19
    a340:	86 78       	andi	r24, 0x86	; 134
    a342:	09 f0       	breq	.+2      	; 0xa346 <vfprintf+0x5e0>
    a344:	0f 5f       	subi	r16, 0xFF	; 255
    a346:	33 fd       	sbrc	r19, 3
    a348:	13 c0       	rjmp	.+38     	; 0xa370 <vfprintf+0x60a>
    a34a:	30 ff       	sbrs	r19, 0
    a34c:	06 c0       	rjmp	.+12     	; 0xa35a <vfprintf+0x5f4>
    a34e:	1e 2d       	mov	r17, r14
    a350:	0f 15       	cp	r16, r15
    a352:	18 f4       	brcc	.+6      	; 0xa35a <vfprintf+0x5f4>
    a354:	1f 0d       	add	r17, r15
    a356:	10 1b       	sub	r17, r16
    a358:	0f 2d       	mov	r16, r15
    a35a:	0f 15       	cp	r16, r15
    a35c:	68 f4       	brcc	.+26     	; 0xa378 <vfprintf+0x612>
    a35e:	b6 01       	movw	r22, r12
    a360:	80 e2       	ldi	r24, 0x20	; 32
    a362:	90 e0       	ldi	r25, 0x00	; 0
    a364:	3b 8b       	std	Y+19, r19	; 0x13
    a366:	0e 94 ab 56 	call	0xad56	; 0xad56 <fputc>
    a36a:	0f 5f       	subi	r16, 0xFF	; 255
    a36c:	3b 89       	ldd	r19, Y+19	; 0x13
    a36e:	f5 cf       	rjmp	.-22     	; 0xa35a <vfprintf+0x5f4>
    a370:	0f 15       	cp	r16, r15
    a372:	10 f4       	brcc	.+4      	; 0xa378 <vfprintf+0x612>
    a374:	f0 1a       	sub	r15, r16
    a376:	01 c0       	rjmp	.+2      	; 0xa37a <vfprintf+0x614>
    a378:	f1 2c       	mov	r15, r1
    a37a:	34 ff       	sbrs	r19, 4
    a37c:	12 c0       	rjmp	.+36     	; 0xa3a2 <vfprintf+0x63c>
    a37e:	b6 01       	movw	r22, r12
    a380:	80 e3       	ldi	r24, 0x30	; 48
    a382:	90 e0       	ldi	r25, 0x00	; 0
    a384:	3b 8b       	std	Y+19, r19	; 0x13
    a386:	0e 94 ab 56 	call	0xad56	; 0xad56 <fputc>
    a38a:	3b 89       	ldd	r19, Y+19	; 0x13
    a38c:	32 ff       	sbrs	r19, 2
    a38e:	17 c0       	rjmp	.+46     	; 0xa3be <vfprintf+0x658>
    a390:	31 fd       	sbrc	r19, 1
    a392:	03 c0       	rjmp	.+6      	; 0xa39a <vfprintf+0x634>
    a394:	88 e7       	ldi	r24, 0x78	; 120
    a396:	90 e0       	ldi	r25, 0x00	; 0
    a398:	02 c0       	rjmp	.+4      	; 0xa39e <vfprintf+0x638>
    a39a:	88 e5       	ldi	r24, 0x58	; 88
    a39c:	90 e0       	ldi	r25, 0x00	; 0
    a39e:	b6 01       	movw	r22, r12
    a3a0:	0c c0       	rjmp	.+24     	; 0xa3ba <vfprintf+0x654>
    a3a2:	83 2f       	mov	r24, r19
    a3a4:	86 78       	andi	r24, 0x86	; 134
    a3a6:	59 f0       	breq	.+22     	; 0xa3be <vfprintf+0x658>
    a3a8:	31 ff       	sbrs	r19, 1
    a3aa:	02 c0       	rjmp	.+4      	; 0xa3b0 <vfprintf+0x64a>
    a3ac:	8b e2       	ldi	r24, 0x2B	; 43
    a3ae:	01 c0       	rjmp	.+2      	; 0xa3b2 <vfprintf+0x64c>
    a3b0:	80 e2       	ldi	r24, 0x20	; 32
    a3b2:	37 fd       	sbrc	r19, 7
    a3b4:	8d e2       	ldi	r24, 0x2D	; 45
    a3b6:	b6 01       	movw	r22, r12
    a3b8:	90 e0       	ldi	r25, 0x00	; 0
    a3ba:	0e 94 ab 56 	call	0xad56	; 0xad56 <fputc>
    a3be:	e1 16       	cp	r14, r17
    a3c0:	38 f4       	brcc	.+14     	; 0xa3d0 <vfprintf+0x66a>
    a3c2:	b6 01       	movw	r22, r12
    a3c4:	80 e3       	ldi	r24, 0x30	; 48
    a3c6:	90 e0       	ldi	r25, 0x00	; 0
    a3c8:	0e 94 ab 56 	call	0xad56	; 0xad56 <fputc>
    a3cc:	11 50       	subi	r17, 0x01	; 1
    a3ce:	f7 cf       	rjmp	.-18     	; 0xa3be <vfprintf+0x658>
    a3d0:	ea 94       	dec	r14
    a3d2:	f3 01       	movw	r30, r6
    a3d4:	ee 0d       	add	r30, r14
    a3d6:	f1 1d       	adc	r31, r1
    a3d8:	80 81       	ld	r24, Z
    a3da:	b6 01       	movw	r22, r12
    a3dc:	90 e0       	ldi	r25, 0x00	; 0
    a3de:	0e 94 ab 56 	call	0xad56	; 0xad56 <fputc>
    a3e2:	e1 10       	cpse	r14, r1
    a3e4:	f5 cf       	rjmp	.-22     	; 0xa3d0 <vfprintf+0x66a>
    a3e6:	14 c0       	rjmp	.+40     	; 0xa410 <vfprintf+0x6aa>
    a3e8:	f4 e0       	ldi	r31, 0x04	; 4
    a3ea:	ff 15       	cp	r31, r15
    a3ec:	58 f5       	brcc	.+86     	; 0xa444 <vfprintf+0x6de>
    a3ee:	84 e0       	ldi	r24, 0x04	; 4
    a3f0:	f8 1a       	sub	r15, r24
    a3f2:	33 fe       	sbrs	r3, 3
    a3f4:	1e c0       	rjmp	.+60     	; 0xa432 <vfprintf+0x6cc>
    a3f6:	21 10       	cpse	r2, r1
    a3f8:	26 c0       	rjmp	.+76     	; 0xa446 <vfprintf+0x6e0>
    a3fa:	03 ff       	sbrs	r16, 3
    a3fc:	2a c0       	rjmp	.+84     	; 0xa452 <vfprintf+0x6ec>
    a3fe:	0a e6       	ldi	r16, 0x6A	; 106
    a400:	13 e0       	ldi	r17, 0x03	; 3
    a402:	f3 2d       	mov	r31, r3
    a404:	f0 71       	andi	r31, 0x10	; 16
    a406:	3f 2e       	mov	r3, r31
    a408:	f8 01       	movw	r30, r16
    a40a:	84 91       	lpm	r24, Z
    a40c:	81 11       	cpse	r24, r1
    a40e:	24 c0       	rjmp	.+72     	; 0xa458 <vfprintf+0x6f2>
    a410:	ff 20       	and	r15, r15
    a412:	09 f4       	brne	.+2      	; 0xa416 <vfprintf+0x6b0>
    a414:	e5 cc       	rjmp	.-1590   	; 0x9de0 <vfprintf+0x7a>
    a416:	b6 01       	movw	r22, r12
    a418:	80 e2       	ldi	r24, 0x20	; 32
    a41a:	90 e0       	ldi	r25, 0x00	; 0
    a41c:	0e 94 ab 56 	call	0xad56	; 0xad56 <fputc>
    a420:	fa 94       	dec	r15
    a422:	f6 cf       	rjmp	.-20     	; 0xa410 <vfprintf+0x6aa>
    a424:	f6 01       	movw	r30, r12
    a426:	86 81       	ldd	r24, Z+6	; 0x06
    a428:	97 81       	ldd	r25, Z+7	; 0x07
    a42a:	26 c0       	rjmp	.+76     	; 0xa478 <vfprintf+0x712>
    a42c:	8f ef       	ldi	r24, 0xFF	; 255
    a42e:	9f ef       	ldi	r25, 0xFF	; 255
    a430:	23 c0       	rjmp	.+70     	; 0xa478 <vfprintf+0x712>
    a432:	b6 01       	movw	r22, r12
    a434:	80 e2       	ldi	r24, 0x20	; 32
    a436:	90 e0       	ldi	r25, 0x00	; 0
    a438:	0e 94 ab 56 	call	0xad56	; 0xad56 <fputc>
    a43c:	fa 94       	dec	r15
    a43e:	f1 10       	cpse	r15, r1
    a440:	f8 cf       	rjmp	.-16     	; 0xa432 <vfprintf+0x6cc>
    a442:	d9 cf       	rjmp	.-78     	; 0xa3f6 <vfprintf+0x690>
    a444:	f1 2c       	mov	r15, r1
    a446:	b6 01       	movw	r22, r12
    a448:	82 2d       	mov	r24, r2
    a44a:	90 e0       	ldi	r25, 0x00	; 0
    a44c:	0e 94 ab 56 	call	0xad56	; 0xad56 <fputc>
    a450:	d4 cf       	rjmp	.-88     	; 0xa3fa <vfprintf+0x694>
    a452:	0e e6       	ldi	r16, 0x6E	; 110
    a454:	13 e0       	ldi	r17, 0x03	; 3
    a456:	d5 cf       	rjmp	.-86     	; 0xa402 <vfprintf+0x69c>
    a458:	31 10       	cpse	r3, r1
    a45a:	80 52       	subi	r24, 0x20	; 32
    a45c:	b6 01       	movw	r22, r12
    a45e:	90 e0       	ldi	r25, 0x00	; 0
    a460:	0e 94 ab 56 	call	0xad56	; 0xad56 <fputc>
    a464:	0f 5f       	subi	r16, 0xFF	; 255
    a466:	1f 4f       	sbci	r17, 0xFF	; 255
    a468:	cf cf       	rjmp	.-98     	; 0xa408 <vfprintf+0x6a2>
    a46a:	23 e0       	ldi	r18, 0x03	; 3
    a46c:	2f 15       	cp	r18, r15
    a46e:	10 f4       	brcc	.+4      	; 0xa474 <vfprintf+0x70e>
    a470:	83 e0       	ldi	r24, 0x03	; 3
    a472:	be cf       	rjmp	.-132    	; 0xa3f0 <vfprintf+0x68a>
    a474:	f1 2c       	mov	r15, r1
    a476:	c1 cf       	rjmp	.-126    	; 0xa3fa <vfprintf+0x694>
    a478:	63 96       	adiw	r28, 0x13	; 19
    a47a:	cd bf       	out	0x3d, r28	; 61
    a47c:	de bf       	out	0x3e, r29	; 62
    a47e:	df 91       	pop	r29
    a480:	cf 91       	pop	r28
    a482:	1f 91       	pop	r17
    a484:	0f 91       	pop	r16
    a486:	ff 90       	pop	r15
    a488:	ef 90       	pop	r14
    a48a:	df 90       	pop	r13
    a48c:	cf 90       	pop	r12
    a48e:	bf 90       	pop	r11
    a490:	af 90       	pop	r10
    a492:	9f 90       	pop	r9
    a494:	8f 90       	pop	r8
    a496:	7f 90       	pop	r7
    a498:	6f 90       	pop	r6
    a49a:	5f 90       	pop	r5
    a49c:	4f 90       	pop	r4
    a49e:	3f 90       	pop	r3
    a4a0:	2f 90       	pop	r2
    a4a2:	08 95       	ret

0000a4a4 <__udivmodhi4>:
    a4a4:	aa 1b       	sub	r26, r26
    a4a6:	bb 1b       	sub	r27, r27
    a4a8:	51 e1       	ldi	r21, 0x11	; 17
    a4aa:	07 c0       	rjmp	.+14     	; 0xa4ba <__udivmodhi4_ep>

0000a4ac <__udivmodhi4_loop>:
    a4ac:	aa 1f       	adc	r26, r26
    a4ae:	bb 1f       	adc	r27, r27
    a4b0:	a6 17       	cp	r26, r22
    a4b2:	b7 07       	cpc	r27, r23
    a4b4:	10 f0       	brcs	.+4      	; 0xa4ba <__udivmodhi4_ep>
    a4b6:	a6 1b       	sub	r26, r22
    a4b8:	b7 0b       	sbc	r27, r23

0000a4ba <__udivmodhi4_ep>:
    a4ba:	88 1f       	adc	r24, r24
    a4bc:	99 1f       	adc	r25, r25
    a4be:	5a 95       	dec	r21
    a4c0:	a9 f7       	brne	.-22     	; 0xa4ac <__udivmodhi4_loop>
    a4c2:	80 95       	com	r24
    a4c4:	90 95       	com	r25
    a4c6:	bc 01       	movw	r22, r24
    a4c8:	cd 01       	movw	r24, r26
    a4ca:	08 95       	ret

0000a4cc <__divmodhi4>:
    a4cc:	97 fb       	bst	r25, 7
    a4ce:	07 2e       	mov	r0, r23
    a4d0:	16 f4       	brtc	.+4      	; 0xa4d6 <__divmodhi4+0xa>
    a4d2:	00 94       	com	r0
    a4d4:	07 d0       	rcall	.+14     	; 0xa4e4 <__divmodhi4_neg1>
    a4d6:	77 fd       	sbrc	r23, 7
    a4d8:	09 d0       	rcall	.+18     	; 0xa4ec <__divmodhi4_neg2>
    a4da:	0e 94 52 52 	call	0xa4a4	; 0xa4a4 <__udivmodhi4>
    a4de:	07 fc       	sbrc	r0, 7
    a4e0:	05 d0       	rcall	.+10     	; 0xa4ec <__divmodhi4_neg2>
    a4e2:	3e f4       	brtc	.+14     	; 0xa4f2 <__divmodhi4_exit>

0000a4e4 <__divmodhi4_neg1>:
    a4e4:	90 95       	com	r25
    a4e6:	81 95       	neg	r24
    a4e8:	9f 4f       	sbci	r25, 0xFF	; 255
    a4ea:	08 95       	ret

0000a4ec <__divmodhi4_neg2>:
    a4ec:	70 95       	com	r23
    a4ee:	61 95       	neg	r22
    a4f0:	7f 4f       	sbci	r23, 0xFF	; 255

0000a4f2 <__divmodhi4_exit>:
    a4f2:	08 95       	ret

0000a4f4 <__udivmodsi4>:
    a4f4:	a1 e2       	ldi	r26, 0x21	; 33
    a4f6:	1a 2e       	mov	r1, r26
    a4f8:	aa 1b       	sub	r26, r26
    a4fa:	bb 1b       	sub	r27, r27
    a4fc:	fd 01       	movw	r30, r26
    a4fe:	0d c0       	rjmp	.+26     	; 0xa51a <__udivmodsi4_ep>

0000a500 <__udivmodsi4_loop>:
    a500:	aa 1f       	adc	r26, r26
    a502:	bb 1f       	adc	r27, r27
    a504:	ee 1f       	adc	r30, r30
    a506:	ff 1f       	adc	r31, r31
    a508:	a2 17       	cp	r26, r18
    a50a:	b3 07       	cpc	r27, r19
    a50c:	e4 07       	cpc	r30, r20
    a50e:	f5 07       	cpc	r31, r21
    a510:	20 f0       	brcs	.+8      	; 0xa51a <__udivmodsi4_ep>
    a512:	a2 1b       	sub	r26, r18
    a514:	b3 0b       	sbc	r27, r19
    a516:	e4 0b       	sbc	r30, r20
    a518:	f5 0b       	sbc	r31, r21

0000a51a <__udivmodsi4_ep>:
    a51a:	66 1f       	adc	r22, r22
    a51c:	77 1f       	adc	r23, r23
    a51e:	88 1f       	adc	r24, r24
    a520:	99 1f       	adc	r25, r25
    a522:	1a 94       	dec	r1
    a524:	69 f7       	brne	.-38     	; 0xa500 <__udivmodsi4_loop>
    a526:	60 95       	com	r22
    a528:	70 95       	com	r23
    a52a:	80 95       	com	r24
    a52c:	90 95       	com	r25
    a52e:	9b 01       	movw	r18, r22
    a530:	ac 01       	movw	r20, r24
    a532:	bd 01       	movw	r22, r26
    a534:	cf 01       	movw	r24, r30
    a536:	08 95       	ret

0000a538 <__tablejump2__>:
    a538:	ee 0f       	add	r30, r30
    a53a:	ff 1f       	adc	r31, r31
    a53c:	88 1f       	adc	r24, r24
    a53e:	8b bf       	out	0x3b, r24	; 59
    a540:	07 90       	elpm	r0, Z+
    a542:	f6 91       	elpm	r31, Z
    a544:	e0 2d       	mov	r30, r0
    a546:	19 94       	eijmp

0000a548 <__mulhisi3>:
    a548:	0e 94 ac 52 	call	0xa558	; 0xa558 <__umulhisi3>
    a54c:	33 23       	and	r19, r19
    a54e:	12 f4       	brpl	.+4      	; 0xa554 <__mulhisi3+0xc>
    a550:	8a 1b       	sub	r24, r26
    a552:	9b 0b       	sbc	r25, r27
    a554:	0c 94 bd 52 	jmp	0xa57a	; 0xa57a <__usmulhisi3_tail>

0000a558 <__umulhisi3>:
    a558:	a2 9f       	mul	r26, r18
    a55a:	b0 01       	movw	r22, r0
    a55c:	b3 9f       	mul	r27, r19
    a55e:	c0 01       	movw	r24, r0
    a560:	a3 9f       	mul	r26, r19
    a562:	70 0d       	add	r23, r0
    a564:	81 1d       	adc	r24, r1
    a566:	11 24       	eor	r1, r1
    a568:	91 1d       	adc	r25, r1
    a56a:	b2 9f       	mul	r27, r18
    a56c:	70 0d       	add	r23, r0
    a56e:	81 1d       	adc	r24, r1
    a570:	11 24       	eor	r1, r1
    a572:	91 1d       	adc	r25, r1
    a574:	08 95       	ret

0000a576 <__usmulhisi3>:
    a576:	0e 94 ac 52 	call	0xa558	; 0xa558 <__umulhisi3>

0000a57a <__usmulhisi3_tail>:
    a57a:	b7 ff       	sbrs	r27, 7
    a57c:	08 95       	ret
    a57e:	82 1b       	sub	r24, r18
    a580:	93 0b       	sbc	r25, r19
    a582:	08 95       	ret

0000a584 <malloc>:
    a584:	cf 93       	push	r28
    a586:	df 93       	push	r29
    a588:	82 30       	cpi	r24, 0x02	; 2
    a58a:	91 05       	cpc	r25, r1
    a58c:	10 f4       	brcc	.+4      	; 0xa592 <malloc+0xe>
    a58e:	82 e0       	ldi	r24, 0x02	; 2
    a590:	90 e0       	ldi	r25, 0x00	; 0
    a592:	e0 91 f3 2f 	lds	r30, 0x2FF3	; 0x802ff3 <__flp>
    a596:	f0 91 f4 2f 	lds	r31, 0x2FF4	; 0x802ff4 <__flp+0x1>
    a59a:	20 e0       	ldi	r18, 0x00	; 0
    a59c:	30 e0       	ldi	r19, 0x00	; 0
    a59e:	c0 e0       	ldi	r28, 0x00	; 0
    a5a0:	d0 e0       	ldi	r29, 0x00	; 0
    a5a2:	30 97       	sbiw	r30, 0x00	; 0
    a5a4:	11 f1       	breq	.+68     	; 0xa5ea <malloc+0x66>
    a5a6:	40 81       	ld	r20, Z
    a5a8:	51 81       	ldd	r21, Z+1	; 0x01
    a5aa:	48 17       	cp	r20, r24
    a5ac:	59 07       	cpc	r21, r25
    a5ae:	c0 f0       	brcs	.+48     	; 0xa5e0 <malloc+0x5c>
    a5b0:	48 17       	cp	r20, r24
    a5b2:	59 07       	cpc	r21, r25
    a5b4:	61 f4       	brne	.+24     	; 0xa5ce <malloc+0x4a>
    a5b6:	82 81       	ldd	r24, Z+2	; 0x02
    a5b8:	93 81       	ldd	r25, Z+3	; 0x03
    a5ba:	20 97       	sbiw	r28, 0x00	; 0
    a5bc:	19 f0       	breq	.+6      	; 0xa5c4 <malloc+0x40>
    a5be:	8a 83       	std	Y+2, r24	; 0x02
    a5c0:	9b 83       	std	Y+3, r25	; 0x03
    a5c2:	2b c0       	rjmp	.+86     	; 0xa61a <malloc+0x96>
    a5c4:	80 93 f3 2f 	sts	0x2FF3, r24	; 0x802ff3 <__flp>
    a5c8:	90 93 f4 2f 	sts	0x2FF4, r25	; 0x802ff4 <__flp+0x1>
    a5cc:	26 c0       	rjmp	.+76     	; 0xa61a <malloc+0x96>
    a5ce:	21 15       	cp	r18, r1
    a5d0:	31 05       	cpc	r19, r1
    a5d2:	19 f0       	breq	.+6      	; 0xa5da <malloc+0x56>
    a5d4:	42 17       	cp	r20, r18
    a5d6:	53 07       	cpc	r21, r19
    a5d8:	18 f4       	brcc	.+6      	; 0xa5e0 <malloc+0x5c>
    a5da:	9a 01       	movw	r18, r20
    a5dc:	be 01       	movw	r22, r28
    a5de:	df 01       	movw	r26, r30
    a5e0:	ef 01       	movw	r28, r30
    a5e2:	02 80       	ldd	r0, Z+2	; 0x02
    a5e4:	f3 81       	ldd	r31, Z+3	; 0x03
    a5e6:	e0 2d       	mov	r30, r0
    a5e8:	dc cf       	rjmp	.-72     	; 0xa5a2 <malloc+0x1e>
    a5ea:	21 15       	cp	r18, r1
    a5ec:	31 05       	cpc	r19, r1
    a5ee:	09 f1       	breq	.+66     	; 0xa632 <malloc+0xae>
    a5f0:	28 1b       	sub	r18, r24
    a5f2:	39 0b       	sbc	r19, r25
    a5f4:	24 30       	cpi	r18, 0x04	; 4
    a5f6:	31 05       	cpc	r19, r1
    a5f8:	90 f4       	brcc	.+36     	; 0xa61e <malloc+0x9a>
    a5fa:	12 96       	adiw	r26, 0x02	; 2
    a5fc:	8d 91       	ld	r24, X+
    a5fe:	9c 91       	ld	r25, X
    a600:	13 97       	sbiw	r26, 0x03	; 3
    a602:	61 15       	cp	r22, r1
    a604:	71 05       	cpc	r23, r1
    a606:	21 f0       	breq	.+8      	; 0xa610 <malloc+0x8c>
    a608:	fb 01       	movw	r30, r22
    a60a:	82 83       	std	Z+2, r24	; 0x02
    a60c:	93 83       	std	Z+3, r25	; 0x03
    a60e:	04 c0       	rjmp	.+8      	; 0xa618 <malloc+0x94>
    a610:	80 93 f3 2f 	sts	0x2FF3, r24	; 0x802ff3 <__flp>
    a614:	90 93 f4 2f 	sts	0x2FF4, r25	; 0x802ff4 <__flp+0x1>
    a618:	fd 01       	movw	r30, r26
    a61a:	32 96       	adiw	r30, 0x02	; 2
    a61c:	44 c0       	rjmp	.+136    	; 0xa6a6 <malloc+0x122>
    a61e:	fd 01       	movw	r30, r26
    a620:	e2 0f       	add	r30, r18
    a622:	f3 1f       	adc	r31, r19
    a624:	81 93       	st	Z+, r24
    a626:	91 93       	st	Z+, r25
    a628:	22 50       	subi	r18, 0x02	; 2
    a62a:	31 09       	sbc	r19, r1
    a62c:	2d 93       	st	X+, r18
    a62e:	3c 93       	st	X, r19
    a630:	3a c0       	rjmp	.+116    	; 0xa6a6 <malloc+0x122>
    a632:	20 91 f1 2f 	lds	r18, 0x2FF1	; 0x802ff1 <__brkval>
    a636:	30 91 f2 2f 	lds	r19, 0x2FF2	; 0x802ff2 <__brkval+0x1>
    a63a:	23 2b       	or	r18, r19
    a63c:	41 f4       	brne	.+16     	; 0xa64e <malloc+0xca>
    a63e:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <__malloc_heap_start>
    a642:	30 91 03 20 	lds	r19, 0x2003	; 0x802003 <__malloc_heap_start+0x1>
    a646:	20 93 f1 2f 	sts	0x2FF1, r18	; 0x802ff1 <__brkval>
    a64a:	30 93 f2 2f 	sts	0x2FF2, r19	; 0x802ff2 <__brkval+0x1>
    a64e:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__data_start>
    a652:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__data_start+0x1>
    a656:	21 15       	cp	r18, r1
    a658:	31 05       	cpc	r19, r1
    a65a:	41 f4       	brne	.+16     	; 0xa66c <malloc+0xe8>
    a65c:	2d b7       	in	r18, 0x3d	; 61
    a65e:	3e b7       	in	r19, 0x3e	; 62
    a660:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <__malloc_margin>
    a664:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <__malloc_margin+0x1>
    a668:	24 1b       	sub	r18, r20
    a66a:	35 0b       	sbc	r19, r21
    a66c:	e0 91 f1 2f 	lds	r30, 0x2FF1	; 0x802ff1 <__brkval>
    a670:	f0 91 f2 2f 	lds	r31, 0x2FF2	; 0x802ff2 <__brkval+0x1>
    a674:	e2 17       	cp	r30, r18
    a676:	f3 07       	cpc	r31, r19
    a678:	a0 f4       	brcc	.+40     	; 0xa6a2 <malloc+0x11e>
    a67a:	2e 1b       	sub	r18, r30
    a67c:	3f 0b       	sbc	r19, r31
    a67e:	28 17       	cp	r18, r24
    a680:	39 07       	cpc	r19, r25
    a682:	78 f0       	brcs	.+30     	; 0xa6a2 <malloc+0x11e>
    a684:	ac 01       	movw	r20, r24
    a686:	4e 5f       	subi	r20, 0xFE	; 254
    a688:	5f 4f       	sbci	r21, 0xFF	; 255
    a68a:	24 17       	cp	r18, r20
    a68c:	35 07       	cpc	r19, r21
    a68e:	48 f0       	brcs	.+18     	; 0xa6a2 <malloc+0x11e>
    a690:	4e 0f       	add	r20, r30
    a692:	5f 1f       	adc	r21, r31
    a694:	40 93 f1 2f 	sts	0x2FF1, r20	; 0x802ff1 <__brkval>
    a698:	50 93 f2 2f 	sts	0x2FF2, r21	; 0x802ff2 <__brkval+0x1>
    a69c:	81 93       	st	Z+, r24
    a69e:	91 93       	st	Z+, r25
    a6a0:	02 c0       	rjmp	.+4      	; 0xa6a6 <malloc+0x122>
    a6a2:	e0 e0       	ldi	r30, 0x00	; 0
    a6a4:	f0 e0       	ldi	r31, 0x00	; 0
    a6a6:	cf 01       	movw	r24, r30
    a6a8:	df 91       	pop	r29
    a6aa:	cf 91       	pop	r28
    a6ac:	08 95       	ret

0000a6ae <free>:
    a6ae:	0f 93       	push	r16
    a6b0:	1f 93       	push	r17
    a6b2:	cf 93       	push	r28
    a6b4:	df 93       	push	r29
    a6b6:	00 97       	sbiw	r24, 0x00	; 0
    a6b8:	09 f4       	brne	.+2      	; 0xa6bc <free+0xe>
    a6ba:	8c c0       	rjmp	.+280    	; 0xa7d4 <free+0x126>
    a6bc:	fc 01       	movw	r30, r24
    a6be:	32 97       	sbiw	r30, 0x02	; 2
    a6c0:	12 82       	std	Z+2, r1	; 0x02
    a6c2:	13 82       	std	Z+3, r1	; 0x03
    a6c4:	00 91 f3 2f 	lds	r16, 0x2FF3	; 0x802ff3 <__flp>
    a6c8:	10 91 f4 2f 	lds	r17, 0x2FF4	; 0x802ff4 <__flp+0x1>
    a6cc:	01 15       	cp	r16, r1
    a6ce:	11 05       	cpc	r17, r1
    a6d0:	81 f4       	brne	.+32     	; 0xa6f2 <free+0x44>
    a6d2:	20 81       	ld	r18, Z
    a6d4:	31 81       	ldd	r19, Z+1	; 0x01
    a6d6:	82 0f       	add	r24, r18
    a6d8:	93 1f       	adc	r25, r19
    a6da:	20 91 f1 2f 	lds	r18, 0x2FF1	; 0x802ff1 <__brkval>
    a6de:	30 91 f2 2f 	lds	r19, 0x2FF2	; 0x802ff2 <__brkval+0x1>
    a6e2:	28 17       	cp	r18, r24
    a6e4:	39 07       	cpc	r19, r25
    a6e6:	79 f5       	brne	.+94     	; 0xa746 <free+0x98>
    a6e8:	e0 93 f1 2f 	sts	0x2FF1, r30	; 0x802ff1 <__brkval>
    a6ec:	f0 93 f2 2f 	sts	0x2FF2, r31	; 0x802ff2 <__brkval+0x1>
    a6f0:	71 c0       	rjmp	.+226    	; 0xa7d4 <free+0x126>
    a6f2:	d8 01       	movw	r26, r16
    a6f4:	40 e0       	ldi	r20, 0x00	; 0
    a6f6:	50 e0       	ldi	r21, 0x00	; 0
    a6f8:	ae 17       	cp	r26, r30
    a6fa:	bf 07       	cpc	r27, r31
    a6fc:	50 f4       	brcc	.+20     	; 0xa712 <free+0x64>
    a6fe:	12 96       	adiw	r26, 0x02	; 2
    a700:	2d 91       	ld	r18, X+
    a702:	3c 91       	ld	r19, X
    a704:	13 97       	sbiw	r26, 0x03	; 3
    a706:	ad 01       	movw	r20, r26
    a708:	21 15       	cp	r18, r1
    a70a:	31 05       	cpc	r19, r1
    a70c:	09 f1       	breq	.+66     	; 0xa750 <free+0xa2>
    a70e:	d9 01       	movw	r26, r18
    a710:	f3 cf       	rjmp	.-26     	; 0xa6f8 <free+0x4a>
    a712:	9d 01       	movw	r18, r26
    a714:	da 01       	movw	r26, r20
    a716:	22 83       	std	Z+2, r18	; 0x02
    a718:	33 83       	std	Z+3, r19	; 0x03
    a71a:	60 81       	ld	r22, Z
    a71c:	71 81       	ldd	r23, Z+1	; 0x01
    a71e:	86 0f       	add	r24, r22
    a720:	97 1f       	adc	r25, r23
    a722:	82 17       	cp	r24, r18
    a724:	93 07       	cpc	r25, r19
    a726:	69 f4       	brne	.+26     	; 0xa742 <free+0x94>
    a728:	ec 01       	movw	r28, r24
    a72a:	28 81       	ld	r18, Y
    a72c:	39 81       	ldd	r19, Y+1	; 0x01
    a72e:	26 0f       	add	r18, r22
    a730:	37 1f       	adc	r19, r23
    a732:	2e 5f       	subi	r18, 0xFE	; 254
    a734:	3f 4f       	sbci	r19, 0xFF	; 255
    a736:	20 83       	st	Z, r18
    a738:	31 83       	std	Z+1, r19	; 0x01
    a73a:	8a 81       	ldd	r24, Y+2	; 0x02
    a73c:	9b 81       	ldd	r25, Y+3	; 0x03
    a73e:	82 83       	std	Z+2, r24	; 0x02
    a740:	93 83       	std	Z+3, r25	; 0x03
    a742:	45 2b       	or	r20, r21
    a744:	29 f4       	brne	.+10     	; 0xa750 <free+0xa2>
    a746:	e0 93 f3 2f 	sts	0x2FF3, r30	; 0x802ff3 <__flp>
    a74a:	f0 93 f4 2f 	sts	0x2FF4, r31	; 0x802ff4 <__flp+0x1>
    a74e:	42 c0       	rjmp	.+132    	; 0xa7d4 <free+0x126>
    a750:	12 96       	adiw	r26, 0x02	; 2
    a752:	ed 93       	st	X+, r30
    a754:	fc 93       	st	X, r31
    a756:	13 97       	sbiw	r26, 0x03	; 3
    a758:	ed 01       	movw	r28, r26
    a75a:	49 91       	ld	r20, Y+
    a75c:	59 91       	ld	r21, Y+
    a75e:	9e 01       	movw	r18, r28
    a760:	24 0f       	add	r18, r20
    a762:	35 1f       	adc	r19, r21
    a764:	e2 17       	cp	r30, r18
    a766:	f3 07       	cpc	r31, r19
    a768:	71 f4       	brne	.+28     	; 0xa786 <free+0xd8>
    a76a:	80 81       	ld	r24, Z
    a76c:	91 81       	ldd	r25, Z+1	; 0x01
    a76e:	84 0f       	add	r24, r20
    a770:	95 1f       	adc	r25, r21
    a772:	02 96       	adiw	r24, 0x02	; 2
    a774:	8d 93       	st	X+, r24
    a776:	9c 93       	st	X, r25
    a778:	11 97       	sbiw	r26, 0x01	; 1
    a77a:	82 81       	ldd	r24, Z+2	; 0x02
    a77c:	93 81       	ldd	r25, Z+3	; 0x03
    a77e:	12 96       	adiw	r26, 0x02	; 2
    a780:	8d 93       	st	X+, r24
    a782:	9c 93       	st	X, r25
    a784:	13 97       	sbiw	r26, 0x03	; 3
    a786:	e0 e0       	ldi	r30, 0x00	; 0
    a788:	f0 e0       	ldi	r31, 0x00	; 0
    a78a:	d8 01       	movw	r26, r16
    a78c:	12 96       	adiw	r26, 0x02	; 2
    a78e:	8d 91       	ld	r24, X+
    a790:	9c 91       	ld	r25, X
    a792:	13 97       	sbiw	r26, 0x03	; 3
    a794:	00 97       	sbiw	r24, 0x00	; 0
    a796:	19 f0       	breq	.+6      	; 0xa79e <free+0xf0>
    a798:	f8 01       	movw	r30, r16
    a79a:	8c 01       	movw	r16, r24
    a79c:	f6 cf       	rjmp	.-20     	; 0xa78a <free+0xdc>
    a79e:	8d 91       	ld	r24, X+
    a7a0:	9c 91       	ld	r25, X
    a7a2:	98 01       	movw	r18, r16
    a7a4:	2e 5f       	subi	r18, 0xFE	; 254
    a7a6:	3f 4f       	sbci	r19, 0xFF	; 255
    a7a8:	82 0f       	add	r24, r18
    a7aa:	93 1f       	adc	r25, r19
    a7ac:	20 91 f1 2f 	lds	r18, 0x2FF1	; 0x802ff1 <__brkval>
    a7b0:	30 91 f2 2f 	lds	r19, 0x2FF2	; 0x802ff2 <__brkval+0x1>
    a7b4:	28 17       	cp	r18, r24
    a7b6:	39 07       	cpc	r19, r25
    a7b8:	69 f4       	brne	.+26     	; 0xa7d4 <free+0x126>
    a7ba:	30 97       	sbiw	r30, 0x00	; 0
    a7bc:	29 f4       	brne	.+10     	; 0xa7c8 <free+0x11a>
    a7be:	10 92 f3 2f 	sts	0x2FF3, r1	; 0x802ff3 <__flp>
    a7c2:	10 92 f4 2f 	sts	0x2FF4, r1	; 0x802ff4 <__flp+0x1>
    a7c6:	02 c0       	rjmp	.+4      	; 0xa7cc <free+0x11e>
    a7c8:	12 82       	std	Z+2, r1	; 0x02
    a7ca:	13 82       	std	Z+3, r1	; 0x03
    a7cc:	00 93 f1 2f 	sts	0x2FF1, r16	; 0x802ff1 <__brkval>
    a7d0:	10 93 f2 2f 	sts	0x2FF2, r17	; 0x802ff2 <__brkval+0x1>
    a7d4:	df 91       	pop	r29
    a7d6:	cf 91       	pop	r28
    a7d8:	1f 91       	pop	r17
    a7da:	0f 91       	pop	r16
    a7dc:	08 95       	ret

0000a7de <strtoul>:
    a7de:	2f 92       	push	r2
    a7e0:	3f 92       	push	r3
    a7e2:	4f 92       	push	r4
    a7e4:	5f 92       	push	r5
    a7e6:	6f 92       	push	r6
    a7e8:	7f 92       	push	r7
    a7ea:	8f 92       	push	r8
    a7ec:	9f 92       	push	r9
    a7ee:	af 92       	push	r10
    a7f0:	bf 92       	push	r11
    a7f2:	cf 92       	push	r12
    a7f4:	df 92       	push	r13
    a7f6:	ef 92       	push	r14
    a7f8:	ff 92       	push	r15
    a7fa:	0f 93       	push	r16
    a7fc:	1f 93       	push	r17
    a7fe:	cf 93       	push	r28
    a800:	df 93       	push	r29
    a802:	00 d0       	rcall	.+0      	; 0xa804 <strtoul+0x26>
    a804:	00 d0       	rcall	.+0      	; 0xa806 <strtoul+0x28>
    a806:	cd b7       	in	r28, 0x3d	; 61
    a808:	de b7       	in	r29, 0x3e	; 62
    a80a:	5c 01       	movw	r10, r24
    a80c:	6b 01       	movw	r12, r22
    a80e:	7a 01       	movw	r14, r20
    a810:	61 15       	cp	r22, r1
    a812:	71 05       	cpc	r23, r1
    a814:	19 f0       	breq	.+6      	; 0xa81c <strtoul+0x3e>
    a816:	db 01       	movw	r26, r22
    a818:	8d 93       	st	X+, r24
    a81a:	9c 93       	st	X, r25
    a81c:	e1 14       	cp	r14, r1
    a81e:	f1 04       	cpc	r15, r1
    a820:	29 f0       	breq	.+10     	; 0xa82c <strtoul+0x4e>
    a822:	c7 01       	movw	r24, r14
    a824:	02 97       	sbiw	r24, 0x02	; 2
    a826:	83 97       	sbiw	r24, 0x23	; 35
    a828:	08 f0       	brcs	.+2      	; 0xa82c <strtoul+0x4e>
    a82a:	dc c0       	rjmp	.+440    	; 0xa9e4 <strtoul+0x206>
    a82c:	35 01       	movw	r6, r10
    a82e:	bf ef       	ldi	r27, 0xFF	; 255
    a830:	6b 1a       	sub	r6, r27
    a832:	7b 0a       	sbc	r7, r27
    a834:	f5 01       	movw	r30, r10
    a836:	10 81       	ld	r17, Z
    a838:	81 2f       	mov	r24, r17
    a83a:	90 e0       	ldi	r25, 0x00	; 0
    a83c:	0e 94 19 56 	call	0xac32	; 0xac32 <isspace>
    a840:	89 2b       	or	r24, r25
    a842:	11 f0       	breq	.+4      	; 0xa848 <strtoul+0x6a>
    a844:	53 01       	movw	r10, r6
    a846:	f2 cf       	rjmp	.-28     	; 0xa82c <strtoul+0x4e>
    a848:	1d 32       	cpi	r17, 0x2D	; 45
    a84a:	49 f4       	brne	.+18     	; 0xa85e <strtoul+0x80>
    a84c:	35 01       	movw	r6, r10
    a84e:	f2 e0       	ldi	r31, 0x02	; 2
    a850:	6f 0e       	add	r6, r31
    a852:	71 1c       	adc	r7, r1
    a854:	d5 01       	movw	r26, r10
    a856:	11 96       	adiw	r26, 0x01	; 1
    a858:	1c 91       	ld	r17, X
    a85a:	01 e0       	ldi	r16, 0x01	; 1
    a85c:	09 c0       	rjmp	.+18     	; 0xa870 <strtoul+0x92>
    a85e:	1b 32       	cpi	r17, 0x2B	; 43
    a860:	31 f4       	brne	.+12     	; 0xa86e <strtoul+0x90>
    a862:	35 01       	movw	r6, r10
    a864:	b2 e0       	ldi	r27, 0x02	; 2
    a866:	6b 0e       	add	r6, r27
    a868:	71 1c       	adc	r7, r1
    a86a:	f5 01       	movw	r30, r10
    a86c:	11 81       	ldd	r17, Z+1	; 0x01
    a86e:	00 e0       	ldi	r16, 0x00	; 0
    a870:	e1 14       	cp	r14, r1
    a872:	f1 04       	cpc	r15, r1
    a874:	09 f4       	brne	.+2      	; 0xa878 <strtoul+0x9a>
    a876:	c4 c0       	rjmp	.+392    	; 0xaa00 <strtoul+0x222>
    a878:	f0 e1       	ldi	r31, 0x10	; 16
    a87a:	ef 16       	cp	r14, r31
    a87c:	f1 04       	cpc	r15, r1
    a87e:	89 f4       	brne	.+34     	; 0xa8a2 <strtoul+0xc4>
    a880:	10 33       	cpi	r17, 0x30	; 48
    a882:	99 f5       	brne	.+102    	; 0xa8ea <strtoul+0x10c>
    a884:	d3 01       	movw	r26, r6
    a886:	8c 91       	ld	r24, X
    a888:	8f 7d       	andi	r24, 0xDF	; 223
    a88a:	88 35       	cpi	r24, 0x58	; 88
    a88c:	09 f0       	breq	.+2      	; 0xa890 <strtoul+0xb2>
    a88e:	b2 c0       	rjmp	.+356    	; 0xa9f4 <strtoul+0x216>
    a890:	11 96       	adiw	r26, 0x01	; 1
    a892:	1c 91       	ld	r17, X
    a894:	b2 e0       	ldi	r27, 0x02	; 2
    a896:	6b 0e       	add	r6, r27
    a898:	71 1c       	adc	r7, r1
    a89a:	02 60       	ori	r16, 0x02	; 2
    a89c:	50 e1       	ldi	r21, 0x10	; 16
    a89e:	e5 2e       	mov	r14, r21
    a8a0:	f1 2c       	mov	r15, r1
    a8a2:	ea e0       	ldi	r30, 0x0A	; 10
    a8a4:	ee 16       	cp	r14, r30
    a8a6:	f1 04       	cpc	r15, r1
    a8a8:	09 f4       	brne	.+2      	; 0xa8ac <strtoul+0xce>
    a8aa:	b0 c0       	rjmp	.+352    	; 0xaa0c <strtoul+0x22e>
    a8ac:	f0 e1       	ldi	r31, 0x10	; 16
    a8ae:	ef 16       	cp	r14, r31
    a8b0:	f1 04       	cpc	r15, r1
    a8b2:	d9 f0       	breq	.+54     	; 0xa8ea <strtoul+0x10c>
    a8b4:	28 e0       	ldi	r18, 0x08	; 8
    a8b6:	e2 16       	cp	r14, r18
    a8b8:	f1 04       	cpc	r15, r1
    a8ba:	51 f4       	brne	.+20     	; 0xa8d0 <strtoul+0xf2>
    a8bc:	38 e0       	ldi	r19, 0x08	; 8
    a8be:	e3 2e       	mov	r14, r19
    a8c0:	f1 2c       	mov	r15, r1
    a8c2:	88 24       	eor	r8, r8
    a8c4:	8a 94       	dec	r8
    a8c6:	98 2c       	mov	r9, r8
    a8c8:	a8 2c       	mov	r10, r8
    a8ca:	4f e1       	ldi	r20, 0x1F	; 31
    a8cc:	b4 2e       	mov	r11, r20
    a8ce:	13 c0       	rjmp	.+38     	; 0xa8f6 <strtoul+0x118>
    a8d0:	6f ef       	ldi	r22, 0xFF	; 255
    a8d2:	7f ef       	ldi	r23, 0xFF	; 255
    a8d4:	cb 01       	movw	r24, r22
    a8d6:	97 01       	movw	r18, r14
    a8d8:	0f 2c       	mov	r0, r15
    a8da:	00 0c       	add	r0, r0
    a8dc:	44 0b       	sbc	r20, r20
    a8de:	55 0b       	sbc	r21, r21
    a8e0:	0e 94 7a 52 	call	0xa4f4	; 0xa4f4 <__udivmodsi4>
    a8e4:	49 01       	movw	r8, r18
    a8e6:	5a 01       	movw	r10, r20
    a8e8:	06 c0       	rjmp	.+12     	; 0xa8f6 <strtoul+0x118>
    a8ea:	88 24       	eor	r8, r8
    a8ec:	8a 94       	dec	r8
    a8ee:	98 2c       	mov	r9, r8
    a8f0:	a8 2c       	mov	r10, r8
    a8f2:	2f e0       	ldi	r18, 0x0F	; 15
    a8f4:	b2 2e       	mov	r11, r18
    a8f6:	6d 82       	std	Y+5, r6	; 0x05
    a8f8:	7e 82       	std	Y+6, r7	; 0x06
    a8fa:	60 e0       	ldi	r22, 0x00	; 0
    a8fc:	20 e0       	ldi	r18, 0x00	; 0
    a8fe:	30 e0       	ldi	r19, 0x00	; 0
    a900:	a9 01       	movw	r20, r18
    a902:	27 01       	movw	r4, r14
    a904:	0f 2c       	mov	r0, r15
    a906:	00 0c       	add	r0, r0
    a908:	66 08       	sbc	r6, r6
    a90a:	77 08       	sbc	r7, r7
    a90c:	2d 80       	ldd	r2, Y+5	; 0x05
    a90e:	3e 80       	ldd	r3, Y+6	; 0x06
    a910:	e0 ed       	ldi	r30, 0xD0	; 208
    a912:	e1 0f       	add	r30, r17
    a914:	ea 30       	cpi	r30, 0x0A	; 10
    a916:	60 f0       	brcs	.+24     	; 0xa930 <strtoul+0x152>
    a918:	8f eb       	ldi	r24, 0xBF	; 191
    a91a:	81 0f       	add	r24, r17
    a91c:	8a 31       	cpi	r24, 0x1A	; 26
    a91e:	10 f4       	brcc	.+4      	; 0xa924 <strtoul+0x146>
    a920:	e9 ec       	ldi	r30, 0xC9	; 201
    a922:	05 c0       	rjmp	.+10     	; 0xa92e <strtoul+0x150>
    a924:	8f e9       	ldi	r24, 0x9F	; 159
    a926:	81 0f       	add	r24, r17
    a928:	8a 31       	cpi	r24, 0x1A	; 26
    a92a:	90 f5       	brcc	.+100    	; 0xa990 <strtoul+0x1b2>
    a92c:	e9 ea       	ldi	r30, 0xA9	; 169
    a92e:	e1 0f       	add	r30, r17
    a930:	8e 2f       	mov	r24, r30
    a932:	90 e0       	ldi	r25, 0x00	; 0
    a934:	8e 15       	cp	r24, r14
    a936:	9f 05       	cpc	r25, r15
    a938:	5c f5       	brge	.+86     	; 0xa990 <strtoul+0x1b2>
    a93a:	6f 3f       	cpi	r22, 0xFF	; 255
    a93c:	09 f1       	breq	.+66     	; 0xa980 <strtoul+0x1a2>
    a93e:	82 16       	cp	r8, r18
    a940:	93 06       	cpc	r9, r19
    a942:	a4 06       	cpc	r10, r20
    a944:	b5 06       	cpc	r11, r21
    a946:	d8 f0       	brcs	.+54     	; 0xa97e <strtoul+0x1a0>
    a948:	c3 01       	movw	r24, r6
    a94a:	b2 01       	movw	r22, r4
    a94c:	0e 94 e0 57 	call	0xafc0	; 0xafc0 <__mulsi3>
    a950:	2e 2f       	mov	r18, r30
    a952:	30 e0       	ldi	r19, 0x00	; 0
    a954:	40 e0       	ldi	r20, 0x00	; 0
    a956:	50 e0       	ldi	r21, 0x00	; 0
    a958:	29 83       	std	Y+1, r18	; 0x01
    a95a:	3a 83       	std	Y+2, r19	; 0x02
    a95c:	4b 83       	std	Y+3, r20	; 0x03
    a95e:	5c 83       	std	Y+4, r21	; 0x04
    a960:	26 0f       	add	r18, r22
    a962:	37 1f       	adc	r19, r23
    a964:	48 1f       	adc	r20, r24
    a966:	59 1f       	adc	r21, r25
    a968:	89 81       	ldd	r24, Y+1	; 0x01
    a96a:	9a 81       	ldd	r25, Y+2	; 0x02
    a96c:	ab 81       	ldd	r26, Y+3	; 0x03
    a96e:	bc 81       	ldd	r27, Y+4	; 0x04
    a970:	28 17       	cp	r18, r24
    a972:	39 07       	cpc	r19, r25
    a974:	4a 07       	cpc	r20, r26
    a976:	5b 07       	cpc	r21, r27
    a978:	10 f0       	brcs	.+4      	; 0xa97e <strtoul+0x1a0>
    a97a:	61 e0       	ldi	r22, 0x01	; 1
    a97c:	01 c0       	rjmp	.+2      	; 0xa980 <strtoul+0x1a2>
    a97e:	6f ef       	ldi	r22, 0xFF	; 255
    a980:	ed 81       	ldd	r30, Y+5	; 0x05
    a982:	fe 81       	ldd	r31, Y+6	; 0x06
    a984:	31 96       	adiw	r30, 0x01	; 1
    a986:	ed 83       	std	Y+5, r30	; 0x05
    a988:	fe 83       	std	Y+6, r31	; 0x06
    a98a:	d1 01       	movw	r26, r2
    a98c:	1c 91       	ld	r17, X
    a98e:	be cf       	rjmp	.-132    	; 0xa90c <strtoul+0x12e>
    a990:	c1 14       	cp	r12, r1
    a992:	d1 04       	cpc	r13, r1
    a994:	89 f0       	breq	.+34     	; 0xa9b8 <strtoul+0x1da>
    a996:	66 23       	and	r22, r22
    a998:	39 f0       	breq	.+14     	; 0xa9a8 <strtoul+0x1ca>
    a99a:	8d 81       	ldd	r24, Y+5	; 0x05
    a99c:	9e 81       	ldd	r25, Y+6	; 0x06
    a99e:	01 97       	sbiw	r24, 0x01	; 1
    a9a0:	f6 01       	movw	r30, r12
    a9a2:	80 83       	st	Z, r24
    a9a4:	91 83       	std	Z+1, r25	; 0x01
    a9a6:	08 c0       	rjmp	.+16     	; 0xa9b8 <strtoul+0x1da>
    a9a8:	01 ff       	sbrs	r16, 1
    a9aa:	06 c0       	rjmp	.+12     	; 0xa9b8 <strtoul+0x1da>
    a9ac:	8d 81       	ldd	r24, Y+5	; 0x05
    a9ae:	9e 81       	ldd	r25, Y+6	; 0x06
    a9b0:	02 97       	sbiw	r24, 0x02	; 2
    a9b2:	d6 01       	movw	r26, r12
    a9b4:	8d 93       	st	X+, r24
    a9b6:	9c 93       	st	X, r25
    a9b8:	00 ff       	sbrs	r16, 0
    a9ba:	07 c0       	rjmp	.+14     	; 0xa9ca <strtoul+0x1ec>
    a9bc:	50 95       	com	r21
    a9be:	40 95       	com	r20
    a9c0:	30 95       	com	r19
    a9c2:	21 95       	neg	r18
    a9c4:	3f 4f       	sbci	r19, 0xFF	; 255
    a9c6:	4f 4f       	sbci	r20, 0xFF	; 255
    a9c8:	5f 4f       	sbci	r21, 0xFF	; 255
    a9ca:	67 ff       	sbrs	r22, 7
    a9cc:	10 c0       	rjmp	.+32     	; 0xa9ee <strtoul+0x210>
    a9ce:	82 e2       	ldi	r24, 0x22	; 34
    a9d0:	90 e0       	ldi	r25, 0x00	; 0
    a9d2:	80 93 fb 2f 	sts	0x2FFB, r24	; 0x802ffb <errno>
    a9d6:	90 93 fc 2f 	sts	0x2FFC, r25	; 0x802ffc <errno+0x1>
    a9da:	6f ef       	ldi	r22, 0xFF	; 255
    a9dc:	7f ef       	ldi	r23, 0xFF	; 255
    a9de:	8f ef       	ldi	r24, 0xFF	; 255
    a9e0:	9f ef       	ldi	r25, 0xFF	; 255
    a9e2:	1b c0       	rjmp	.+54     	; 0xaa1a <strtoul+0x23c>
    a9e4:	60 e0       	ldi	r22, 0x00	; 0
    a9e6:	70 e0       	ldi	r23, 0x00	; 0
    a9e8:	80 e0       	ldi	r24, 0x00	; 0
    a9ea:	90 e0       	ldi	r25, 0x00	; 0
    a9ec:	16 c0       	rjmp	.+44     	; 0xaa1a <strtoul+0x23c>
    a9ee:	b9 01       	movw	r22, r18
    a9f0:	ca 01       	movw	r24, r20
    a9f2:	13 c0       	rjmp	.+38     	; 0xaa1a <strtoul+0x23c>
    a9f4:	10 e3       	ldi	r17, 0x30	; 48
    a9f6:	e1 14       	cp	r14, r1
    a9f8:	f1 04       	cpc	r15, r1
    a9fa:	09 f4       	brne	.+2      	; 0xa9fe <strtoul+0x220>
    a9fc:	5f cf       	rjmp	.-322    	; 0xa8bc <strtoul+0xde>
    a9fe:	51 cf       	rjmp	.-350    	; 0xa8a2 <strtoul+0xc4>
    aa00:	10 33       	cpi	r17, 0x30	; 48
    aa02:	09 f4       	brne	.+2      	; 0xaa06 <strtoul+0x228>
    aa04:	3f cf       	rjmp	.-386    	; 0xa884 <strtoul+0xa6>
    aa06:	9a e0       	ldi	r25, 0x0A	; 10
    aa08:	e9 2e       	mov	r14, r25
    aa0a:	f1 2c       	mov	r15, r1
    aa0c:	89 e9       	ldi	r24, 0x99	; 153
    aa0e:	88 2e       	mov	r8, r24
    aa10:	98 2c       	mov	r9, r8
    aa12:	a8 2c       	mov	r10, r8
    aa14:	89 e1       	ldi	r24, 0x19	; 25
    aa16:	b8 2e       	mov	r11, r24
    aa18:	6e cf       	rjmp	.-292    	; 0xa8f6 <strtoul+0x118>
    aa1a:	26 96       	adiw	r28, 0x06	; 6
    aa1c:	cd bf       	out	0x3d, r28	; 61
    aa1e:	de bf       	out	0x3e, r29	; 62
    aa20:	df 91       	pop	r29
    aa22:	cf 91       	pop	r28
    aa24:	1f 91       	pop	r17
    aa26:	0f 91       	pop	r16
    aa28:	ff 90       	pop	r15
    aa2a:	ef 90       	pop	r14
    aa2c:	df 90       	pop	r13
    aa2e:	cf 90       	pop	r12
    aa30:	bf 90       	pop	r11
    aa32:	af 90       	pop	r10
    aa34:	9f 90       	pop	r9
    aa36:	8f 90       	pop	r8
    aa38:	7f 90       	pop	r7
    aa3a:	6f 90       	pop	r6
    aa3c:	5f 90       	pop	r5
    aa3e:	4f 90       	pop	r4
    aa40:	3f 90       	pop	r3
    aa42:	2f 90       	pop	r2
    aa44:	08 95       	ret

0000aa46 <atoi>:
    aa46:	fc 01       	movw	r30, r24
    aa48:	88 27       	eor	r24, r24
    aa4a:	99 27       	eor	r25, r25
    aa4c:	e8 94       	clt
    aa4e:	21 91       	ld	r18, Z+
    aa50:	20 32       	cpi	r18, 0x20	; 32
    aa52:	e9 f3       	breq	.-6      	; 0xaa4e <atoi+0x8>
    aa54:	29 30       	cpi	r18, 0x09	; 9
    aa56:	10 f0       	brcs	.+4      	; 0xaa5c <atoi+0x16>
    aa58:	2e 30       	cpi	r18, 0x0E	; 14
    aa5a:	c8 f3       	brcs	.-14     	; 0xaa4e <atoi+0x8>
    aa5c:	2b 32       	cpi	r18, 0x2B	; 43
    aa5e:	41 f0       	breq	.+16     	; 0xaa70 <atoi+0x2a>
    aa60:	2d 32       	cpi	r18, 0x2D	; 45
    aa62:	39 f4       	brne	.+14     	; 0xaa72 <atoi+0x2c>
    aa64:	68 94       	set
    aa66:	04 c0       	rjmp	.+8      	; 0xaa70 <atoi+0x2a>
    aa68:	0e 94 a3 56 	call	0xad46	; 0xad46 <__mulhi_const_10>
    aa6c:	82 0f       	add	r24, r18
    aa6e:	91 1d       	adc	r25, r1
    aa70:	21 91       	ld	r18, Z+
    aa72:	20 53       	subi	r18, 0x30	; 48
    aa74:	2a 30       	cpi	r18, 0x0A	; 10
    aa76:	c0 f3       	brcs	.-16     	; 0xaa68 <atoi+0x22>
    aa78:	1e f4       	brtc	.+6      	; 0xaa80 <atoi+0x3a>
    aa7a:	90 95       	com	r25
    aa7c:	81 95       	neg	r24
    aa7e:	9f 4f       	sbci	r25, 0xFF	; 255
    aa80:	08 95       	ret

0000aa82 <__ftoa_engine>:
    aa82:	28 30       	cpi	r18, 0x08	; 8
    aa84:	08 f0       	brcs	.+2      	; 0xaa88 <__ftoa_engine+0x6>
    aa86:	27 e0       	ldi	r18, 0x07	; 7
    aa88:	33 27       	eor	r19, r19
    aa8a:	da 01       	movw	r26, r20
    aa8c:	99 0f       	add	r25, r25
    aa8e:	31 1d       	adc	r19, r1
    aa90:	87 fd       	sbrc	r24, 7
    aa92:	91 60       	ori	r25, 0x01	; 1
    aa94:	00 96       	adiw	r24, 0x00	; 0
    aa96:	61 05       	cpc	r22, r1
    aa98:	71 05       	cpc	r23, r1
    aa9a:	39 f4       	brne	.+14     	; 0xaaaa <__ftoa_engine+0x28>
    aa9c:	32 60       	ori	r19, 0x02	; 2
    aa9e:	2e 5f       	subi	r18, 0xFE	; 254
    aaa0:	3d 93       	st	X+, r19
    aaa2:	30 e3       	ldi	r19, 0x30	; 48
    aaa4:	2a 95       	dec	r18
    aaa6:	e1 f7       	brne	.-8      	; 0xaaa0 <__ftoa_engine+0x1e>
    aaa8:	08 95       	ret
    aaaa:	9f 3f       	cpi	r25, 0xFF	; 255
    aaac:	30 f0       	brcs	.+12     	; 0xaaba <__ftoa_engine+0x38>
    aaae:	80 38       	cpi	r24, 0x80	; 128
    aab0:	71 05       	cpc	r23, r1
    aab2:	61 05       	cpc	r22, r1
    aab4:	09 f0       	breq	.+2      	; 0xaab8 <__ftoa_engine+0x36>
    aab6:	3c 5f       	subi	r19, 0xFC	; 252
    aab8:	3c 5f       	subi	r19, 0xFC	; 252
    aaba:	3d 93       	st	X+, r19
    aabc:	91 30       	cpi	r25, 0x01	; 1
    aabe:	08 f0       	brcs	.+2      	; 0xaac2 <__ftoa_engine+0x40>
    aac0:	80 68       	ori	r24, 0x80	; 128
    aac2:	91 1d       	adc	r25, r1
    aac4:	df 93       	push	r29
    aac6:	cf 93       	push	r28
    aac8:	1f 93       	push	r17
    aaca:	0f 93       	push	r16
    aacc:	ff 92       	push	r15
    aace:	ef 92       	push	r14
    aad0:	19 2f       	mov	r17, r25
    aad2:	98 7f       	andi	r25, 0xF8	; 248
    aad4:	96 95       	lsr	r25
    aad6:	e9 2f       	mov	r30, r25
    aad8:	96 95       	lsr	r25
    aada:	96 95       	lsr	r25
    aadc:	e9 0f       	add	r30, r25
    aade:	ff 27       	eor	r31, r31
    aae0:	e4 53       	subi	r30, 0x34	; 52
    aae2:	fc 4f       	sbci	r31, 0xFC	; 252
    aae4:	99 27       	eor	r25, r25
    aae6:	33 27       	eor	r19, r19
    aae8:	ee 24       	eor	r14, r14
    aaea:	ff 24       	eor	r15, r15
    aaec:	a7 01       	movw	r20, r14
    aaee:	e7 01       	movw	r28, r14
    aaf0:	05 90       	lpm	r0, Z+
    aaf2:	08 94       	sec
    aaf4:	07 94       	ror	r0
    aaf6:	28 f4       	brcc	.+10     	; 0xab02 <__ftoa_engine+0x80>
    aaf8:	36 0f       	add	r19, r22
    aafa:	e7 1e       	adc	r14, r23
    aafc:	f8 1e       	adc	r15, r24
    aafe:	49 1f       	adc	r20, r25
    ab00:	51 1d       	adc	r21, r1
    ab02:	66 0f       	add	r22, r22
    ab04:	77 1f       	adc	r23, r23
    ab06:	88 1f       	adc	r24, r24
    ab08:	99 1f       	adc	r25, r25
    ab0a:	06 94       	lsr	r0
    ab0c:	a1 f7       	brne	.-24     	; 0xaaf6 <__ftoa_engine+0x74>
    ab0e:	05 90       	lpm	r0, Z+
    ab10:	07 94       	ror	r0
    ab12:	28 f4       	brcc	.+10     	; 0xab1e <__ftoa_engine+0x9c>
    ab14:	e7 0e       	add	r14, r23
    ab16:	f8 1e       	adc	r15, r24
    ab18:	49 1f       	adc	r20, r25
    ab1a:	56 1f       	adc	r21, r22
    ab1c:	c1 1d       	adc	r28, r1
    ab1e:	77 0f       	add	r23, r23
    ab20:	88 1f       	adc	r24, r24
    ab22:	99 1f       	adc	r25, r25
    ab24:	66 1f       	adc	r22, r22
    ab26:	06 94       	lsr	r0
    ab28:	a1 f7       	brne	.-24     	; 0xab12 <__ftoa_engine+0x90>
    ab2a:	05 90       	lpm	r0, Z+
    ab2c:	07 94       	ror	r0
    ab2e:	28 f4       	brcc	.+10     	; 0xab3a <__ftoa_engine+0xb8>
    ab30:	f8 0e       	add	r15, r24
    ab32:	49 1f       	adc	r20, r25
    ab34:	56 1f       	adc	r21, r22
    ab36:	c7 1f       	adc	r28, r23
    ab38:	d1 1d       	adc	r29, r1
    ab3a:	88 0f       	add	r24, r24
    ab3c:	99 1f       	adc	r25, r25
    ab3e:	66 1f       	adc	r22, r22
    ab40:	77 1f       	adc	r23, r23
    ab42:	06 94       	lsr	r0
    ab44:	a1 f7       	brne	.-24     	; 0xab2e <__ftoa_engine+0xac>
    ab46:	05 90       	lpm	r0, Z+
    ab48:	07 94       	ror	r0
    ab4a:	20 f4       	brcc	.+8      	; 0xab54 <__ftoa_engine+0xd2>
    ab4c:	49 0f       	add	r20, r25
    ab4e:	56 1f       	adc	r21, r22
    ab50:	c7 1f       	adc	r28, r23
    ab52:	d8 1f       	adc	r29, r24
    ab54:	99 0f       	add	r25, r25
    ab56:	66 1f       	adc	r22, r22
    ab58:	77 1f       	adc	r23, r23
    ab5a:	88 1f       	adc	r24, r24
    ab5c:	06 94       	lsr	r0
    ab5e:	a9 f7       	brne	.-22     	; 0xab4a <__ftoa_engine+0xc8>
    ab60:	84 91       	lpm	r24, Z
    ab62:	10 95       	com	r17
    ab64:	17 70       	andi	r17, 0x07	; 7
    ab66:	41 f0       	breq	.+16     	; 0xab78 <__ftoa_engine+0xf6>
    ab68:	d6 95       	lsr	r29
    ab6a:	c7 95       	ror	r28
    ab6c:	57 95       	ror	r21
    ab6e:	47 95       	ror	r20
    ab70:	f7 94       	ror	r15
    ab72:	e7 94       	ror	r14
    ab74:	1a 95       	dec	r17
    ab76:	c1 f7       	brne	.-16     	; 0xab68 <__ftoa_engine+0xe6>
    ab78:	e2 e7       	ldi	r30, 0x72	; 114
    ab7a:	f3 e0       	ldi	r31, 0x03	; 3
    ab7c:	68 94       	set
    ab7e:	15 90       	lpm	r1, Z+
    ab80:	15 91       	lpm	r17, Z+
    ab82:	35 91       	lpm	r19, Z+
    ab84:	65 91       	lpm	r22, Z+
    ab86:	95 91       	lpm	r25, Z+
    ab88:	05 90       	lpm	r0, Z+
    ab8a:	7f e2       	ldi	r23, 0x2F	; 47
    ab8c:	73 95       	inc	r23
    ab8e:	e1 18       	sub	r14, r1
    ab90:	f1 0a       	sbc	r15, r17
    ab92:	43 0b       	sbc	r20, r19
    ab94:	56 0b       	sbc	r21, r22
    ab96:	c9 0b       	sbc	r28, r25
    ab98:	d0 09       	sbc	r29, r0
    ab9a:	c0 f7       	brcc	.-16     	; 0xab8c <__ftoa_engine+0x10a>
    ab9c:	e1 0c       	add	r14, r1
    ab9e:	f1 1e       	adc	r15, r17
    aba0:	43 1f       	adc	r20, r19
    aba2:	56 1f       	adc	r21, r22
    aba4:	c9 1f       	adc	r28, r25
    aba6:	d0 1d       	adc	r29, r0
    aba8:	7e f4       	brtc	.+30     	; 0xabc8 <__ftoa_engine+0x146>
    abaa:	70 33       	cpi	r23, 0x30	; 48
    abac:	11 f4       	brne	.+4      	; 0xabb2 <__ftoa_engine+0x130>
    abae:	8a 95       	dec	r24
    abb0:	e6 cf       	rjmp	.-52     	; 0xab7e <__ftoa_engine+0xfc>
    abb2:	e8 94       	clt
    abb4:	01 50       	subi	r16, 0x01	; 1
    abb6:	30 f0       	brcs	.+12     	; 0xabc4 <__ftoa_engine+0x142>
    abb8:	08 0f       	add	r16, r24
    abba:	0a f4       	brpl	.+2      	; 0xabbe <__ftoa_engine+0x13c>
    abbc:	00 27       	eor	r16, r16
    abbe:	02 17       	cp	r16, r18
    abc0:	08 f4       	brcc	.+2      	; 0xabc4 <__ftoa_engine+0x142>
    abc2:	20 2f       	mov	r18, r16
    abc4:	23 95       	inc	r18
    abc6:	02 2f       	mov	r16, r18
    abc8:	7a 33       	cpi	r23, 0x3A	; 58
    abca:	28 f0       	brcs	.+10     	; 0xabd6 <__ftoa_engine+0x154>
    abcc:	79 e3       	ldi	r23, 0x39	; 57
    abce:	7d 93       	st	X+, r23
    abd0:	2a 95       	dec	r18
    abd2:	e9 f7       	brne	.-6      	; 0xabce <__ftoa_engine+0x14c>
    abd4:	10 c0       	rjmp	.+32     	; 0xabf6 <__ftoa_engine+0x174>
    abd6:	7d 93       	st	X+, r23
    abd8:	2a 95       	dec	r18
    abda:	89 f6       	brne	.-94     	; 0xab7e <__ftoa_engine+0xfc>
    abdc:	06 94       	lsr	r0
    abde:	97 95       	ror	r25
    abe0:	67 95       	ror	r22
    abe2:	37 95       	ror	r19
    abe4:	17 95       	ror	r17
    abe6:	17 94       	ror	r1
    abe8:	e1 18       	sub	r14, r1
    abea:	f1 0a       	sbc	r15, r17
    abec:	43 0b       	sbc	r20, r19
    abee:	56 0b       	sbc	r21, r22
    abf0:	c9 0b       	sbc	r28, r25
    abf2:	d0 09       	sbc	r29, r0
    abf4:	98 f0       	brcs	.+38     	; 0xac1c <__ftoa_engine+0x19a>
    abf6:	23 95       	inc	r18
    abf8:	7e 91       	ld	r23, -X
    abfa:	73 95       	inc	r23
    abfc:	7a 33       	cpi	r23, 0x3A	; 58
    abfe:	08 f0       	brcs	.+2      	; 0xac02 <__ftoa_engine+0x180>
    ac00:	70 e3       	ldi	r23, 0x30	; 48
    ac02:	7c 93       	st	X, r23
    ac04:	20 13       	cpse	r18, r16
    ac06:	b8 f7       	brcc	.-18     	; 0xabf6 <__ftoa_engine+0x174>
    ac08:	7e 91       	ld	r23, -X
    ac0a:	70 61       	ori	r23, 0x10	; 16
    ac0c:	7d 93       	st	X+, r23
    ac0e:	30 f0       	brcs	.+12     	; 0xac1c <__ftoa_engine+0x19a>
    ac10:	83 95       	inc	r24
    ac12:	71 e3       	ldi	r23, 0x31	; 49
    ac14:	7d 93       	st	X+, r23
    ac16:	70 e3       	ldi	r23, 0x30	; 48
    ac18:	2a 95       	dec	r18
    ac1a:	e1 f7       	brne	.-8      	; 0xac14 <__ftoa_engine+0x192>
    ac1c:	11 24       	eor	r1, r1
    ac1e:	ef 90       	pop	r14
    ac20:	ff 90       	pop	r15
    ac22:	0f 91       	pop	r16
    ac24:	1f 91       	pop	r17
    ac26:	cf 91       	pop	r28
    ac28:	df 91       	pop	r29
    ac2a:	99 27       	eor	r25, r25
    ac2c:	87 fd       	sbrc	r24, 7
    ac2e:	90 95       	com	r25
    ac30:	08 95       	ret

0000ac32 <isspace>:
    ac32:	91 11       	cpse	r25, r1
    ac34:	0c 94 dd 57 	jmp	0xafba	; 0xafba <__ctype_isfalse>
    ac38:	80 32       	cpi	r24, 0x20	; 32
    ac3a:	19 f0       	breq	.+6      	; 0xac42 <isspace+0x10>
    ac3c:	89 50       	subi	r24, 0x09	; 9
    ac3e:	85 50       	subi	r24, 0x05	; 5
    ac40:	c8 f7       	brcc	.-14     	; 0xac34 <isspace+0x2>
    ac42:	08 95       	ret

0000ac44 <strcmp_P>:
    ac44:	fb 01       	movw	r30, r22
    ac46:	dc 01       	movw	r26, r24
    ac48:	8d 91       	ld	r24, X+
    ac4a:	05 90       	lpm	r0, Z+
    ac4c:	80 19       	sub	r24, r0
    ac4e:	01 10       	cpse	r0, r1
    ac50:	d9 f3       	breq	.-10     	; 0xac48 <strcmp_P+0x4>
    ac52:	99 0b       	sbc	r25, r25
    ac54:	08 95       	ret

0000ac56 <strnlen_P>:
    ac56:	fc 01       	movw	r30, r24
    ac58:	05 90       	lpm	r0, Z+
    ac5a:	61 50       	subi	r22, 0x01	; 1
    ac5c:	70 40       	sbci	r23, 0x00	; 0
    ac5e:	01 10       	cpse	r0, r1
    ac60:	d8 f7       	brcc	.-10     	; 0xac58 <strnlen_P+0x2>
    ac62:	80 95       	com	r24
    ac64:	90 95       	com	r25
    ac66:	8e 0f       	add	r24, r30
    ac68:	9f 1f       	adc	r25, r31
    ac6a:	08 95       	ret

0000ac6c <strtok>:
    ac6c:	48 ef       	ldi	r20, 0xF8	; 248
    ac6e:	53 e2       	ldi	r21, 0x23	; 35
    ac70:	0c 94 7c 56 	jmp	0xacf8	; 0xacf8 <strtok_r>

0000ac74 <memcpy>:
    ac74:	fb 01       	movw	r30, r22
    ac76:	dc 01       	movw	r26, r24
    ac78:	02 c0       	rjmp	.+4      	; 0xac7e <memcpy+0xa>
    ac7a:	01 90       	ld	r0, Z+
    ac7c:	0d 92       	st	X+, r0
    ac7e:	41 50       	subi	r20, 0x01	; 1
    ac80:	50 40       	sbci	r21, 0x00	; 0
    ac82:	d8 f7       	brcc	.-10     	; 0xac7a <memcpy+0x6>
    ac84:	08 95       	ret

0000ac86 <strcmp>:
    ac86:	fb 01       	movw	r30, r22
    ac88:	dc 01       	movw	r26, r24
    ac8a:	8d 91       	ld	r24, X+
    ac8c:	01 90       	ld	r0, Z+
    ac8e:	80 19       	sub	r24, r0
    ac90:	01 10       	cpse	r0, r1
    ac92:	d9 f3       	breq	.-10     	; 0xac8a <strcmp+0x4>
    ac94:	99 0b       	sbc	r25, r25
    ac96:	08 95       	ret

0000ac98 <strcpy>:
    ac98:	fb 01       	movw	r30, r22
    ac9a:	dc 01       	movw	r26, r24
    ac9c:	01 90       	ld	r0, Z+
    ac9e:	0d 92       	st	X+, r0
    aca0:	00 20       	and	r0, r0
    aca2:	e1 f7       	brne	.-8      	; 0xac9c <strcpy+0x4>
    aca4:	08 95       	ret

0000aca6 <strcspn>:
    aca6:	dc 01       	movw	r26, r24
    aca8:	5d 91       	ld	r21, X+
    acaa:	55 23       	and	r21, r21
    acac:	31 f0       	breq	.+12     	; 0xacba <strcspn+0x14>
    acae:	fb 01       	movw	r30, r22
    acb0:	01 90       	ld	r0, Z+
    acb2:	05 16       	cp	r0, r21
    acb4:	01 10       	cpse	r0, r1
    acb6:	e1 f7       	brne	.-8      	; 0xacb0 <strcspn+0xa>
    acb8:	b9 f7       	brne	.-18     	; 0xaca8 <strcspn+0x2>
    acba:	80 95       	com	r24
    acbc:	90 95       	com	r25
    acbe:	8a 0f       	add	r24, r26
    acc0:	9b 1f       	adc	r25, r27
    acc2:	08 95       	ret

0000acc4 <strncpy>:
    acc4:	fb 01       	movw	r30, r22
    acc6:	dc 01       	movw	r26, r24
    acc8:	41 50       	subi	r20, 0x01	; 1
    acca:	50 40       	sbci	r21, 0x00	; 0
    accc:	48 f0       	brcs	.+18     	; 0xace0 <strncpy+0x1c>
    acce:	01 90       	ld	r0, Z+
    acd0:	0d 92       	st	X+, r0
    acd2:	00 20       	and	r0, r0
    acd4:	c9 f7       	brne	.-14     	; 0xacc8 <strncpy+0x4>
    acd6:	01 c0       	rjmp	.+2      	; 0xacda <strncpy+0x16>
    acd8:	1d 92       	st	X+, r1
    acda:	41 50       	subi	r20, 0x01	; 1
    acdc:	50 40       	sbci	r21, 0x00	; 0
    acde:	e0 f7       	brcc	.-8      	; 0xacd8 <strncpy+0x14>
    ace0:	08 95       	ret

0000ace2 <strnlen>:
    ace2:	fc 01       	movw	r30, r24
    ace4:	61 50       	subi	r22, 0x01	; 1
    ace6:	70 40       	sbci	r23, 0x00	; 0
    ace8:	01 90       	ld	r0, Z+
    acea:	01 10       	cpse	r0, r1
    acec:	d8 f7       	brcc	.-10     	; 0xace4 <strnlen+0x2>
    acee:	80 95       	com	r24
    acf0:	90 95       	com	r25
    acf2:	8e 0f       	add	r24, r30
    acf4:	9f 1f       	adc	r25, r31
    acf6:	08 95       	ret

0000acf8 <strtok_r>:
    acf8:	fa 01       	movw	r30, r20
    acfa:	a1 91       	ld	r26, Z+
    acfc:	b0 81       	ld	r27, Z
    acfe:	00 97       	sbiw	r24, 0x00	; 0
    ad00:	19 f4       	brne	.+6      	; 0xad08 <strtok_r+0x10>
    ad02:	10 97       	sbiw	r26, 0x00	; 0
    ad04:	e1 f0       	breq	.+56     	; 0xad3e <strtok_r+0x46>
    ad06:	cd 01       	movw	r24, r26
    ad08:	dc 01       	movw	r26, r24
    ad0a:	cd 01       	movw	r24, r26
    ad0c:	0d 90       	ld	r0, X+
    ad0e:	00 20       	and	r0, r0
    ad10:	11 f4       	brne	.+4      	; 0xad16 <strtok_r+0x1e>
    ad12:	c0 01       	movw	r24, r0
    ad14:	13 c0       	rjmp	.+38     	; 0xad3c <strtok_r+0x44>
    ad16:	fb 01       	movw	r30, r22
    ad18:	21 91       	ld	r18, Z+
    ad1a:	22 23       	and	r18, r18
    ad1c:	19 f0       	breq	.+6      	; 0xad24 <strtok_r+0x2c>
    ad1e:	20 15       	cp	r18, r0
    ad20:	d9 f7       	brne	.-10     	; 0xad18 <strtok_r+0x20>
    ad22:	f3 cf       	rjmp	.-26     	; 0xad0a <strtok_r+0x12>
    ad24:	fb 01       	movw	r30, r22
    ad26:	21 91       	ld	r18, Z+
    ad28:	20 15       	cp	r18, r0
    ad2a:	19 f4       	brne	.+6      	; 0xad32 <strtok_r+0x3a>
    ad2c:	1e 92       	st	-X, r1
    ad2e:	11 96       	adiw	r26, 0x01	; 1
    ad30:	06 c0       	rjmp	.+12     	; 0xad3e <strtok_r+0x46>
    ad32:	22 23       	and	r18, r18
    ad34:	c1 f7       	brne	.-16     	; 0xad26 <strtok_r+0x2e>
    ad36:	0d 90       	ld	r0, X+
    ad38:	00 20       	and	r0, r0
    ad3a:	a1 f7       	brne	.-24     	; 0xad24 <strtok_r+0x2c>
    ad3c:	d0 01       	movw	r26, r0
    ad3e:	fa 01       	movw	r30, r20
    ad40:	a1 93       	st	Z+, r26
    ad42:	b0 83       	st	Z, r27
    ad44:	08 95       	ret

0000ad46 <__mulhi_const_10>:
    ad46:	7a e0       	ldi	r23, 0x0A	; 10
    ad48:	97 9f       	mul	r25, r23
    ad4a:	90 2d       	mov	r25, r0
    ad4c:	87 9f       	mul	r24, r23
    ad4e:	80 2d       	mov	r24, r0
    ad50:	91 0d       	add	r25, r1
    ad52:	11 24       	eor	r1, r1
    ad54:	08 95       	ret

0000ad56 <fputc>:
    ad56:	0f 93       	push	r16
    ad58:	1f 93       	push	r17
    ad5a:	cf 93       	push	r28
    ad5c:	df 93       	push	r29
    ad5e:	fb 01       	movw	r30, r22
    ad60:	23 81       	ldd	r18, Z+3	; 0x03
    ad62:	21 fd       	sbrc	r18, 1
    ad64:	03 c0       	rjmp	.+6      	; 0xad6c <fputc+0x16>
    ad66:	8f ef       	ldi	r24, 0xFF	; 255
    ad68:	9f ef       	ldi	r25, 0xFF	; 255
    ad6a:	28 c0       	rjmp	.+80     	; 0xadbc <fputc+0x66>
    ad6c:	22 ff       	sbrs	r18, 2
    ad6e:	16 c0       	rjmp	.+44     	; 0xad9c <fputc+0x46>
    ad70:	46 81       	ldd	r20, Z+6	; 0x06
    ad72:	57 81       	ldd	r21, Z+7	; 0x07
    ad74:	24 81       	ldd	r18, Z+4	; 0x04
    ad76:	35 81       	ldd	r19, Z+5	; 0x05
    ad78:	42 17       	cp	r20, r18
    ad7a:	53 07       	cpc	r21, r19
    ad7c:	44 f4       	brge	.+16     	; 0xad8e <fputc+0x38>
    ad7e:	a0 81       	ld	r26, Z
    ad80:	b1 81       	ldd	r27, Z+1	; 0x01
    ad82:	9d 01       	movw	r18, r26
    ad84:	2f 5f       	subi	r18, 0xFF	; 255
    ad86:	3f 4f       	sbci	r19, 0xFF	; 255
    ad88:	20 83       	st	Z, r18
    ad8a:	31 83       	std	Z+1, r19	; 0x01
    ad8c:	8c 93       	st	X, r24
    ad8e:	26 81       	ldd	r18, Z+6	; 0x06
    ad90:	37 81       	ldd	r19, Z+7	; 0x07
    ad92:	2f 5f       	subi	r18, 0xFF	; 255
    ad94:	3f 4f       	sbci	r19, 0xFF	; 255
    ad96:	26 83       	std	Z+6, r18	; 0x06
    ad98:	37 83       	std	Z+7, r19	; 0x07
    ad9a:	10 c0       	rjmp	.+32     	; 0xadbc <fputc+0x66>
    ad9c:	eb 01       	movw	r28, r22
    ad9e:	09 2f       	mov	r16, r25
    ada0:	18 2f       	mov	r17, r24
    ada2:	00 84       	ldd	r0, Z+8	; 0x08
    ada4:	f1 85       	ldd	r31, Z+9	; 0x09
    ada6:	e0 2d       	mov	r30, r0
    ada8:	19 95       	eicall
    adaa:	89 2b       	or	r24, r25
    adac:	e1 f6       	brne	.-72     	; 0xad66 <fputc+0x10>
    adae:	8e 81       	ldd	r24, Y+6	; 0x06
    adb0:	9f 81       	ldd	r25, Y+7	; 0x07
    adb2:	01 96       	adiw	r24, 0x01	; 1
    adb4:	8e 83       	std	Y+6, r24	; 0x06
    adb6:	9f 83       	std	Y+7, r25	; 0x07
    adb8:	81 2f       	mov	r24, r17
    adba:	90 2f       	mov	r25, r16
    adbc:	df 91       	pop	r29
    adbe:	cf 91       	pop	r28
    adc0:	1f 91       	pop	r17
    adc2:	0f 91       	pop	r16
    adc4:	08 95       	ret

0000adc6 <printf>:
    adc6:	cf 93       	push	r28
    adc8:	df 93       	push	r29
    adca:	cd b7       	in	r28, 0x3d	; 61
    adcc:	de b7       	in	r29, 0x3e	; 62
    adce:	ae 01       	movw	r20, r28
    add0:	4a 5f       	subi	r20, 0xFA	; 250
    add2:	5f 4f       	sbci	r21, 0xFF	; 255
    add4:	fa 01       	movw	r30, r20
    add6:	61 91       	ld	r22, Z+
    add8:	71 91       	ld	r23, Z+
    adda:	af 01       	movw	r20, r30
    addc:	80 91 f7 2f 	lds	r24, 0x2FF7	; 0x802ff7 <__iob+0x2>
    ade0:	90 91 f8 2f 	lds	r25, 0x2FF8	; 0x802ff8 <__iob+0x3>
    ade4:	0e 94 b3 4e 	call	0x9d66	; 0x9d66 <vfprintf>
    ade8:	df 91       	pop	r29
    adea:	cf 91       	pop	r28
    adec:	08 95       	ret

0000adee <printf_P>:
    adee:	0f 93       	push	r16
    adf0:	1f 93       	push	r17
    adf2:	cf 93       	push	r28
    adf4:	df 93       	push	r29
    adf6:	cd b7       	in	r28, 0x3d	; 61
    adf8:	de b7       	in	r29, 0x3e	; 62
    adfa:	ae 01       	movw	r20, r28
    adfc:	48 5f       	subi	r20, 0xF8	; 248
    adfe:	5f 4f       	sbci	r21, 0xFF	; 255
    ae00:	da 01       	movw	r26, r20
    ae02:	6d 91       	ld	r22, X+
    ae04:	7d 91       	ld	r23, X+
    ae06:	ad 01       	movw	r20, r26
    ae08:	05 ef       	ldi	r16, 0xF5	; 245
    ae0a:	1f e2       	ldi	r17, 0x2F	; 47
    ae0c:	f8 01       	movw	r30, r16
    ae0e:	82 81       	ldd	r24, Z+2	; 0x02
    ae10:	93 81       	ldd	r25, Z+3	; 0x03
    ae12:	dc 01       	movw	r26, r24
    ae14:	13 96       	adiw	r26, 0x03	; 3
    ae16:	2c 91       	ld	r18, X
    ae18:	13 97       	sbiw	r26, 0x03	; 3
    ae1a:	28 60       	ori	r18, 0x08	; 8
    ae1c:	13 96       	adiw	r26, 0x03	; 3
    ae1e:	2c 93       	st	X, r18
    ae20:	0e 94 b3 4e 	call	0x9d66	; 0x9d66 <vfprintf>
    ae24:	d8 01       	movw	r26, r16
    ae26:	12 96       	adiw	r26, 0x02	; 2
    ae28:	ed 91       	ld	r30, X+
    ae2a:	fc 91       	ld	r31, X
    ae2c:	13 97       	sbiw	r26, 0x03	; 3
    ae2e:	23 81       	ldd	r18, Z+3	; 0x03
    ae30:	27 7f       	andi	r18, 0xF7	; 247
    ae32:	23 83       	std	Z+3, r18	; 0x03
    ae34:	df 91       	pop	r29
    ae36:	cf 91       	pop	r28
    ae38:	1f 91       	pop	r17
    ae3a:	0f 91       	pop	r16
    ae3c:	08 95       	ret

0000ae3e <putchar>:
    ae3e:	60 91 f7 2f 	lds	r22, 0x2FF7	; 0x802ff7 <__iob+0x2>
    ae42:	70 91 f8 2f 	lds	r23, 0x2FF8	; 0x802ff8 <__iob+0x3>
    ae46:	0c 94 ab 56 	jmp	0xad56	; 0xad56 <fputc>

0000ae4a <puts>:
    ae4a:	0f 93       	push	r16
    ae4c:	1f 93       	push	r17
    ae4e:	cf 93       	push	r28
    ae50:	df 93       	push	r29
    ae52:	e0 91 f7 2f 	lds	r30, 0x2FF7	; 0x802ff7 <__iob+0x2>
    ae56:	f0 91 f8 2f 	lds	r31, 0x2FF8	; 0x802ff8 <__iob+0x3>
    ae5a:	23 81       	ldd	r18, Z+3	; 0x03
    ae5c:	21 ff       	sbrs	r18, 1
    ae5e:	1b c0       	rjmp	.+54     	; 0xae96 <puts+0x4c>
    ae60:	8c 01       	movw	r16, r24
    ae62:	d0 e0       	ldi	r29, 0x00	; 0
    ae64:	c0 e0       	ldi	r28, 0x00	; 0
    ae66:	f8 01       	movw	r30, r16
    ae68:	81 91       	ld	r24, Z+
    ae6a:	8f 01       	movw	r16, r30
    ae6c:	60 91 f7 2f 	lds	r22, 0x2FF7	; 0x802ff7 <__iob+0x2>
    ae70:	70 91 f8 2f 	lds	r23, 0x2FF8	; 0x802ff8 <__iob+0x3>
    ae74:	db 01       	movw	r26, r22
    ae76:	18 96       	adiw	r26, 0x08	; 8
    ae78:	ed 91       	ld	r30, X+
    ae7a:	fc 91       	ld	r31, X
    ae7c:	19 97       	sbiw	r26, 0x09	; 9
    ae7e:	88 23       	and	r24, r24
    ae80:	31 f0       	breq	.+12     	; 0xae8e <puts+0x44>
    ae82:	19 95       	eicall
    ae84:	89 2b       	or	r24, r25
    ae86:	79 f3       	breq	.-34     	; 0xae66 <puts+0x1c>
    ae88:	df ef       	ldi	r29, 0xFF	; 255
    ae8a:	cf ef       	ldi	r28, 0xFF	; 255
    ae8c:	ec cf       	rjmp	.-40     	; 0xae66 <puts+0x1c>
    ae8e:	8a e0       	ldi	r24, 0x0A	; 10
    ae90:	19 95       	eicall
    ae92:	89 2b       	or	r24, r25
    ae94:	19 f0       	breq	.+6      	; 0xae9c <puts+0x52>
    ae96:	8f ef       	ldi	r24, 0xFF	; 255
    ae98:	9f ef       	ldi	r25, 0xFF	; 255
    ae9a:	02 c0       	rjmp	.+4      	; 0xaea0 <puts+0x56>
    ae9c:	8d 2f       	mov	r24, r29
    ae9e:	9c 2f       	mov	r25, r28
    aea0:	df 91       	pop	r29
    aea2:	cf 91       	pop	r28
    aea4:	1f 91       	pop	r17
    aea6:	0f 91       	pop	r16
    aea8:	08 95       	ret

0000aeaa <sprintf>:
    aeaa:	0f 93       	push	r16
    aeac:	1f 93       	push	r17
    aeae:	cf 93       	push	r28
    aeb0:	df 93       	push	r29
    aeb2:	cd b7       	in	r28, 0x3d	; 61
    aeb4:	de b7       	in	r29, 0x3e	; 62
    aeb6:	2e 97       	sbiw	r28, 0x0e	; 14
    aeb8:	cd bf       	out	0x3d, r28	; 61
    aeba:	de bf       	out	0x3e, r29	; 62
    aebc:	0e 89       	ldd	r16, Y+22	; 0x16
    aebe:	1f 89       	ldd	r17, Y+23	; 0x17
    aec0:	86 e0       	ldi	r24, 0x06	; 6
    aec2:	8c 83       	std	Y+4, r24	; 0x04
    aec4:	09 83       	std	Y+1, r16	; 0x01
    aec6:	1a 83       	std	Y+2, r17	; 0x02
    aec8:	8f ef       	ldi	r24, 0xFF	; 255
    aeca:	9f e7       	ldi	r25, 0x7F	; 127
    aecc:	8d 83       	std	Y+5, r24	; 0x05
    aece:	9e 83       	std	Y+6, r25	; 0x06
    aed0:	ae 01       	movw	r20, r28
    aed2:	46 5e       	subi	r20, 0xE6	; 230
    aed4:	5f 4f       	sbci	r21, 0xFF	; 255
    aed6:	68 8d       	ldd	r22, Y+24	; 0x18
    aed8:	79 8d       	ldd	r23, Y+25	; 0x19
    aeda:	ce 01       	movw	r24, r28
    aedc:	01 96       	adiw	r24, 0x01	; 1
    aede:	0e 94 b3 4e 	call	0x9d66	; 0x9d66 <vfprintf>
    aee2:	2f 81       	ldd	r18, Y+7	; 0x07
    aee4:	38 85       	ldd	r19, Y+8	; 0x08
    aee6:	f8 01       	movw	r30, r16
    aee8:	e2 0f       	add	r30, r18
    aeea:	f3 1f       	adc	r31, r19
    aeec:	10 82       	st	Z, r1
    aeee:	2e 96       	adiw	r28, 0x0e	; 14
    aef0:	cd bf       	out	0x3d, r28	; 61
    aef2:	de bf       	out	0x3e, r29	; 62
    aef4:	df 91       	pop	r29
    aef6:	cf 91       	pop	r28
    aef8:	1f 91       	pop	r17
    aefa:	0f 91       	pop	r16
    aefc:	08 95       	ret

0000aefe <__ultoa_invert>:
    aefe:	fa 01       	movw	r30, r20
    af00:	aa 27       	eor	r26, r26
    af02:	28 30       	cpi	r18, 0x08	; 8
    af04:	51 f1       	breq	.+84     	; 0xaf5a <__ultoa_invert+0x5c>
    af06:	20 31       	cpi	r18, 0x10	; 16
    af08:	81 f1       	breq	.+96     	; 0xaf6a <__ultoa_invert+0x6c>
    af0a:	e8 94       	clt
    af0c:	6f 93       	push	r22
    af0e:	6e 7f       	andi	r22, 0xFE	; 254
    af10:	6e 5f       	subi	r22, 0xFE	; 254
    af12:	7f 4f       	sbci	r23, 0xFF	; 255
    af14:	8f 4f       	sbci	r24, 0xFF	; 255
    af16:	9f 4f       	sbci	r25, 0xFF	; 255
    af18:	af 4f       	sbci	r26, 0xFF	; 255
    af1a:	b1 e0       	ldi	r27, 0x01	; 1
    af1c:	3e d0       	rcall	.+124    	; 0xaf9a <__ultoa_invert+0x9c>
    af1e:	b4 e0       	ldi	r27, 0x04	; 4
    af20:	3c d0       	rcall	.+120    	; 0xaf9a <__ultoa_invert+0x9c>
    af22:	67 0f       	add	r22, r23
    af24:	78 1f       	adc	r23, r24
    af26:	89 1f       	adc	r24, r25
    af28:	9a 1f       	adc	r25, r26
    af2a:	a1 1d       	adc	r26, r1
    af2c:	68 0f       	add	r22, r24
    af2e:	79 1f       	adc	r23, r25
    af30:	8a 1f       	adc	r24, r26
    af32:	91 1d       	adc	r25, r1
    af34:	a1 1d       	adc	r26, r1
    af36:	6a 0f       	add	r22, r26
    af38:	71 1d       	adc	r23, r1
    af3a:	81 1d       	adc	r24, r1
    af3c:	91 1d       	adc	r25, r1
    af3e:	a1 1d       	adc	r26, r1
    af40:	20 d0       	rcall	.+64     	; 0xaf82 <__ultoa_invert+0x84>
    af42:	09 f4       	brne	.+2      	; 0xaf46 <__ultoa_invert+0x48>
    af44:	68 94       	set
    af46:	3f 91       	pop	r19
    af48:	2a e0       	ldi	r18, 0x0A	; 10
    af4a:	26 9f       	mul	r18, r22
    af4c:	11 24       	eor	r1, r1
    af4e:	30 19       	sub	r19, r0
    af50:	30 5d       	subi	r19, 0xD0	; 208
    af52:	31 93       	st	Z+, r19
    af54:	de f6       	brtc	.-74     	; 0xaf0c <__ultoa_invert+0xe>
    af56:	cf 01       	movw	r24, r30
    af58:	08 95       	ret
    af5a:	46 2f       	mov	r20, r22
    af5c:	47 70       	andi	r20, 0x07	; 7
    af5e:	40 5d       	subi	r20, 0xD0	; 208
    af60:	41 93       	st	Z+, r20
    af62:	b3 e0       	ldi	r27, 0x03	; 3
    af64:	0f d0       	rcall	.+30     	; 0xaf84 <__ultoa_invert+0x86>
    af66:	c9 f7       	brne	.-14     	; 0xaf5a <__ultoa_invert+0x5c>
    af68:	f6 cf       	rjmp	.-20     	; 0xaf56 <__ultoa_invert+0x58>
    af6a:	46 2f       	mov	r20, r22
    af6c:	4f 70       	andi	r20, 0x0F	; 15
    af6e:	40 5d       	subi	r20, 0xD0	; 208
    af70:	4a 33       	cpi	r20, 0x3A	; 58
    af72:	18 f0       	brcs	.+6      	; 0xaf7a <__ultoa_invert+0x7c>
    af74:	49 5d       	subi	r20, 0xD9	; 217
    af76:	31 fd       	sbrc	r19, 1
    af78:	40 52       	subi	r20, 0x20	; 32
    af7a:	41 93       	st	Z+, r20
    af7c:	02 d0       	rcall	.+4      	; 0xaf82 <__ultoa_invert+0x84>
    af7e:	a9 f7       	brne	.-22     	; 0xaf6a <__ultoa_invert+0x6c>
    af80:	ea cf       	rjmp	.-44     	; 0xaf56 <__ultoa_invert+0x58>
    af82:	b4 e0       	ldi	r27, 0x04	; 4
    af84:	a6 95       	lsr	r26
    af86:	97 95       	ror	r25
    af88:	87 95       	ror	r24
    af8a:	77 95       	ror	r23
    af8c:	67 95       	ror	r22
    af8e:	ba 95       	dec	r27
    af90:	c9 f7       	brne	.-14     	; 0xaf84 <__ultoa_invert+0x86>
    af92:	00 97       	sbiw	r24, 0x00	; 0
    af94:	61 05       	cpc	r22, r1
    af96:	71 05       	cpc	r23, r1
    af98:	08 95       	ret
    af9a:	9b 01       	movw	r18, r22
    af9c:	ac 01       	movw	r20, r24
    af9e:	0a 2e       	mov	r0, r26
    afa0:	06 94       	lsr	r0
    afa2:	57 95       	ror	r21
    afa4:	47 95       	ror	r20
    afa6:	37 95       	ror	r19
    afa8:	27 95       	ror	r18
    afaa:	ba 95       	dec	r27
    afac:	c9 f7       	brne	.-14     	; 0xafa0 <__ultoa_invert+0xa2>
    afae:	62 0f       	add	r22, r18
    afb0:	73 1f       	adc	r23, r19
    afb2:	84 1f       	adc	r24, r20
    afb4:	95 1f       	adc	r25, r21
    afb6:	a0 1d       	adc	r26, r0
    afb8:	08 95       	ret

0000afba <__ctype_isfalse>:
    afba:	99 27       	eor	r25, r25
    afbc:	88 27       	eor	r24, r24

0000afbe <__ctype_istrue>:
    afbe:	08 95       	ret

0000afc0 <__mulsi3>:
    afc0:	db 01       	movw	r26, r22
    afc2:	8f 93       	push	r24
    afc4:	9f 93       	push	r25
    afc6:	0e 94 f0 57 	call	0xafe0	; 0xafe0 <__muluhisi3>
    afca:	bf 91       	pop	r27
    afcc:	af 91       	pop	r26
    afce:	a2 9f       	mul	r26, r18
    afd0:	80 0d       	add	r24, r0
    afd2:	91 1d       	adc	r25, r1
    afd4:	a3 9f       	mul	r26, r19
    afd6:	90 0d       	add	r25, r0
    afd8:	b2 9f       	mul	r27, r18
    afda:	90 0d       	add	r25, r0
    afdc:	11 24       	eor	r1, r1
    afde:	08 95       	ret

0000afe0 <__muluhisi3>:
    afe0:	0e 94 ac 52 	call	0xa558	; 0xa558 <__umulhisi3>
    afe4:	a5 9f       	mul	r26, r21
    afe6:	90 0d       	add	r25, r0
    afe8:	b4 9f       	mul	r27, r20
    afea:	90 0d       	add	r25, r0
    afec:	a4 9f       	mul	r26, r20
    afee:	80 0d       	add	r24, r0
    aff0:	91 1d       	adc	r25, r1
    aff2:	11 24       	eor	r1, r1
    aff4:	08 95       	ret

0000aff6 <_exit>:
    aff6:	f8 94       	cli

0000aff8 <__stop_program>:
    aff8:	ff cf       	rjmp	.-2      	; 0xaff8 <__stop_program>
